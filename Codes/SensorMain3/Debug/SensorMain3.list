
SensorMain3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009c38  08009c38  00019c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a12c  0800a12c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a134  0800a134  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a8  2000008c  0800a1c8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002534  0800a1c8  00022534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114f3  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aca  00000000  00000000  000315af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00034080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de0  00000000  00000000  00034fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025519  00000000  00000000  00035da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171c3  00000000  00000000  0005b2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9e70  00000000  00000000  0007247c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c2ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  0014c33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009c20 	.word	0x08009c20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08009c20 	.word	0x08009c20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b974 	b.w	8000e3c <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468e      	mov	lr, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14d      	bne.n	8000c16 <__udivmoddi4+0xaa>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	d969      	bls.n	8000c54 <__udivmoddi4+0xe8>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b152      	cbz	r2, 8000b9c <__udivmoddi4+0x30>
 8000b86:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8a:	f1c2 0120 	rsb	r1, r2, #32
 8000b8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b96:	ea41 0e03 	orr.w	lr, r1, r3
 8000b9a:	4094      	lsls	r4, r2
 8000b9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba0:	0c21      	lsrs	r1, r4, #16
 8000ba2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ba6:	fa1f f78c 	uxth.w	r7, ip
 8000baa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bb2:	fb06 f107 	mul.w	r1, r6, r7
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x64>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 811f 	bcs.w	8000e04 <__udivmoddi4+0x298>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 811c 	bls.w	8000e04 <__udivmoddi4+0x298>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	4463      	add	r3, ip
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 f707 	mul.w	r7, r0, r7
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x92>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf0:	f080 810a 	bcs.w	8000e08 <__udivmoddi4+0x29c>
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	f240 8107 	bls.w	8000e08 <__udivmoddi4+0x29c>
 8000bfa:	4464      	add	r4, ip
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c02:	1be4      	subs	r4, r4, r7
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa4>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xc2>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	f000 80ef 	beq.w	8000dfe <__udivmoddi4+0x292>
 8000c20:	2600      	movs	r6, #0
 8000c22:	e9c5 0100 	strd	r0, r1, [r5]
 8000c26:	4630      	mov	r0, r6
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f683 	clz	r6, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d14a      	bne.n	8000ccc <__udivmoddi4+0x160>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd4>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80f9 	bhi.w	8000e32 <__udivmoddi4+0x2c6>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	469e      	mov	lr, r3
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa4>
 8000c4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa4>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xec>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 8092 	bne.w	8000d86 <__udivmoddi4+0x21a>
 8000c62:	eba1 010c 	sub.w	r1, r1, ip
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f fe8c 	uxth.w	lr, ip
 8000c6e:	2601      	movs	r6, #1
 8000c70:	0c20      	lsrs	r0, r4, #16
 8000c72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c76:	fb07 1113 	mls	r1, r7, r3, r1
 8000c7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c7e:	fb0e f003 	mul.w	r0, lr, r3
 8000c82:	4288      	cmp	r0, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x12c>
 8000c86:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x12a>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f200 80cb 	bhi.w	8000e2c <__udivmoddi4+0x2c0>
 8000c96:	4643      	mov	r3, r8
 8000c98:	1a09      	subs	r1, r1, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ca8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x156>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x154>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f200 80bb 	bhi.w	8000e36 <__udivmoddi4+0x2ca>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	eba4 040e 	sub.w	r4, r4, lr
 8000cc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cca:	e79c      	b.n	8000c06 <__udivmoddi4+0x9a>
 8000ccc:	f1c6 0720 	rsb	r7, r6, #32
 8000cd0:	40b3      	lsls	r3, r6
 8000cd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cda:	fa20 f407 	lsr.w	r4, r0, r7
 8000cde:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	40f9      	lsrs	r1, r7
 8000ce6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cea:	fa00 f306 	lsl.w	r3, r0, r6
 8000cee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cf2:	0c20      	lsrs	r0, r4, #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d00:	fb08 f00e 	mul.w	r0, r8, lr
 8000d04:	4288      	cmp	r0, r1
 8000d06:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b8>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d14:	f080 8088 	bcs.w	8000e28 <__udivmoddi4+0x2bc>
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	f240 8085 	bls.w	8000e28 <__udivmoddi4+0x2bc>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d38:	458e      	cmp	lr, r1
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1e2>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d44:	d26c      	bcs.n	8000e20 <__udivmoddi4+0x2b4>
 8000d46:	458e      	cmp	lr, r1
 8000d48:	d96a      	bls.n	8000e20 <__udivmoddi4+0x2b4>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4461      	add	r1, ip
 8000d4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d52:	fba0 9402 	umull	r9, r4, r0, r2
 8000d56:	eba1 010e 	sub.w	r1, r1, lr
 8000d5a:	42a1      	cmp	r1, r4
 8000d5c:	46c8      	mov	r8, r9
 8000d5e:	46a6      	mov	lr, r4
 8000d60:	d356      	bcc.n	8000e10 <__udivmoddi4+0x2a4>
 8000d62:	d053      	beq.n	8000e0c <__udivmoddi4+0x2a0>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x212>
 8000d66:	ebb3 0208 	subs.w	r2, r3, r8
 8000d6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d72:	fa22 f306 	lsr.w	r3, r2, r6
 8000d76:	40f1      	lsrs	r1, r6
 8000d78:	431f      	orrs	r7, r3
 8000d7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d7e:	2600      	movs	r6, #0
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	f1c2 0320 	rsb	r3, r2, #32
 8000d8a:	40d8      	lsrs	r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa21 f303 	lsr.w	r3, r1, r3
 8000d94:	4091      	lsls	r1, r2
 8000d96:	4301      	orrs	r1, r0
 8000d98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000da4:	fb07 3610 	mls	r6, r7, r0, r3
 8000da8:	0c0b      	lsrs	r3, r1, #16
 8000daa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dae:	fb00 f60e 	mul.w	r6, r0, lr
 8000db2:	429e      	cmp	r6, r3
 8000db4:	fa04 f402 	lsl.w	r4, r4, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x260>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dc2:	d22f      	bcs.n	8000e24 <__udivmoddi4+0x2b8>
 8000dc4:	429e      	cmp	r6, r3
 8000dc6:	d92d      	bls.n	8000e24 <__udivmoddi4+0x2b8>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	b289      	uxth	r1, r1
 8000dd0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dd4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ddc:	fb06 f30e 	mul.w	r3, r6, lr
 8000de0:	428b      	cmp	r3, r1
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x28a>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dec:	d216      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d914      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000df2:	3e02      	subs	r6, #2
 8000df4:	4461      	add	r1, ip
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dfc:	e738      	b.n	8000c70 <__udivmoddi4+0x104>
 8000dfe:	462e      	mov	r6, r5
 8000e00:	4628      	mov	r0, r5
 8000e02:	e705      	b.n	8000c10 <__udivmoddi4+0xa4>
 8000e04:	4606      	mov	r6, r0
 8000e06:	e6e3      	b.n	8000bd0 <__udivmoddi4+0x64>
 8000e08:	4618      	mov	r0, r3
 8000e0a:	e6f8      	b.n	8000bfe <__udivmoddi4+0x92>
 8000e0c:	454b      	cmp	r3, r9
 8000e0e:	d2a9      	bcs.n	8000d64 <__udivmoddi4+0x1f8>
 8000e10:	ebb9 0802 	subs.w	r8, r9, r2
 8000e14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e18:	3801      	subs	r0, #1
 8000e1a:	e7a3      	b.n	8000d64 <__udivmoddi4+0x1f8>
 8000e1c:	4646      	mov	r6, r8
 8000e1e:	e7ea      	b.n	8000df6 <__udivmoddi4+0x28a>
 8000e20:	4620      	mov	r0, r4
 8000e22:	e794      	b.n	8000d4e <__udivmoddi4+0x1e2>
 8000e24:	4640      	mov	r0, r8
 8000e26:	e7d1      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e28:	46d0      	mov	r8, sl
 8000e2a:	e77b      	b.n	8000d24 <__udivmoddi4+0x1b8>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	e732      	b.n	8000c98 <__udivmoddi4+0x12c>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e709      	b.n	8000c4a <__udivmoddi4+0xde>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	e742      	b.n	8000cc2 <__udivmoddi4+0x156>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0da      	sub	sp, #360	; 0x168
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f001 fe3d 	bl	8002ac4 <HAL_Init>

  /* USER CODE BEGIN Init */
    MPU6050.Gyro_X_Offset = -75;
 8000e4a:	f64f 73b5 	movw	r3, #65461	; 0xffb5
 8000e4e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
  	MPU6050.Gyro_Y_Offset = -25;
 8000e52:	f64f 73e7 	movw	r3, #65511	; 0xffe7
 8000e56:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
  	MPU6050.Gyro_Z_Offset = 10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
  /* USER CODE END Init */
  	HAL_Delay(500);
 8000e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e64:	f001 fea0 	bl	8002ba8 <HAL_Delay>
  	f_mount(&fs, "", 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	49de      	ldr	r1, [pc, #888]	; (80011e4 <main+0x3a4>)
 8000e6c:	48de      	ldr	r0, [pc, #888]	; (80011e8 <main+0x3a8>)
 8000e6e:	f007 fbf9 	bl	8008664 <f_mount>
  	f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8000e72:	2213      	movs	r2, #19
 8000e74:	49dd      	ldr	r1, [pc, #884]	; (80011ec <main+0x3ac>)
 8000e76:	48de      	ldr	r0, [pc, #888]	; (80011f0 <main+0x3b0>)
 8000e78:	f007 fc3a 	bl	80086f0 <f_open>

  /* Configure the system clock */
  SystemClock_Config();
 8000e7c:	f000 fc1c 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f000 fd9e 	bl	80019c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e84:	f000 fc8a 	bl	800179c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e88:	f000 fcda 	bl	8001840 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e8c:	f000 fd06 	bl	800189c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000e90:	f000 fd32 	bl	80018f8 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000e94:	f000 fd5e 	bl	8001954 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000e98:	f005 f998 	bl	80061cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	MS5611_Reset(&hi2c1, &MS5611);
 8000e9c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	48d4      	ldr	r0, [pc, #848]	; (80011f4 <main+0x3b4>)
 8000ea4:	f001 fcce 	bl	8002844 <MS5611_Reset>
	MS5611_ReadProm(&hi2c1, &MS5611);
 8000ea8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000eac:	4619      	mov	r1, r3
 8000eae:	48d1      	ldr	r0, [pc, #836]	; (80011f4 <main+0x3b4>)
 8000eb0:	f001 fcea 	bl	8002888 <MS5611_ReadProm>
    int g_l;
    uint8_t tx;
    char str[10];char str1[10];char str2[10];char str3[10];char str4[10];char str5[10];char str6[10];char str7[10];char str8[10];char str9[10];char str10[10];

	// MPU6050 + HMC5883L
	MPU6050_Init(&hi2c1, 2, 2, 5);
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	2102      	movs	r1, #2
 8000eba:	48ce      	ldr	r0, [pc, #824]	; (80011f4 <main+0x3b4>)
 8000ebc:	f001 f836 	bl	8001f2c <MPU6050_Init>
	MPU6050_Bypass(&hi2c1);
 8000ec0:	48cc      	ldr	r0, [pc, #816]	; (80011f4 <main+0x3b4>)
 8000ec2:	f001 f90d 	bl	80020e0 <MPU6050_Bypass>
	HMC5883L_Setup(&hi2c1);
 8000ec6:	48cb      	ldr	r0, [pc, #812]	; (80011f4 <main+0x3b4>)
 8000ec8:	f001 f98a 	bl	80021e0 <HMC5883L_Setup>
	MPU6050_Master(&hi2c1);
 8000ecc:	48c9      	ldr	r0, [pc, #804]	; (80011f4 <main+0x3b4>)
 8000ece:	f001 f935 	bl	800213c <MPU6050_Master>
	MPU6050_Slave_Read(&hi2c1);
 8000ed2:	48c8      	ldr	r0, [pc, #800]	; (80011f4 <main+0x3b4>)
 8000ed4:	f001 f9c4 	bl	8002260 <MPU6050_Slave_Read>

	MPU6050_Read_All_DMA(&hi2c1, &MPU6050);
 8000ed8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000edc:	4619      	mov	r1, r3
 8000ede:	48c5      	ldr	r0, [pc, #788]	; (80011f4 <main+0x3b4>)
 8000ee0:	f001 f9fe 	bl	80022e0 <MPU6050_Read_All_DMA>
	HAL_Delay(20);
 8000ee4:	2014      	movs	r0, #20
 8000ee6:	f001 fe5f 	bl	8002ba8 <HAL_Delay>
	MPU6050_Parsing_NoOffest(&MPU6050);
 8000eea:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fb6e 	bl	80025d0 <MPU6050_Parsing_NoOffest>
	if(MPU6050.Mag_X_RAW > MPU6050.Mag_X_Max) MPU6050.Mag_X_Max = MPU6050.Mag_X_RAW;
 8000ef4:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 8000ef8:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dd03      	ble.n	8000f08 <main+0xc8>
 8000f00:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8000f04:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
	if(MPU6050.Mag_X_RAW < MPU6050.Mag_X_Min) MPU6050.Mag_X_Min = MPU6050.Mag_X_RAW;
 8000f08:	f9b7 20b4 	ldrsh.w	r2, [r7, #180]	; 0xb4
 8000f0c:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8000f10:	429a      	cmp	r2, r3
 8000f12:	da03      	bge.n	8000f1c <main+0xdc>
 8000f14:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 8000f18:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

	if(MPU6050.Mag_Y_RAW > MPU6050.Mag_Y_Max) MPU6050.Mag_Y_Max = MPU6050.Mag_Y_RAW;
 8000f1c:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 8000f20:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dd03      	ble.n	8000f30 <main+0xf0>
 8000f28:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8000f2c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
	if(MPU6050.Mag_Y_RAW < MPU6050.Mag_Y_Min) MPU6050.Mag_Y_Min = MPU6050.Mag_Y_RAW;
 8000f30:	f9b7 20b6 	ldrsh.w	r2, [r7, #182]	; 0xb6
 8000f34:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	da03      	bge.n	8000f44 <main+0x104>
 8000f3c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8000f40:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc

	if(MPU6050.Mag_Z_RAW > MPU6050.Mag_Z_Max) MPU6050.Mag_Z_Max = MPU6050.Mag_Z_RAW;
 8000f44:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	; 0xb8
 8000f48:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dd03      	ble.n	8000f58 <main+0x118>
 8000f50:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8000f54:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
	if(MPU6050.Mag_Z_RAW < MPU6050.Mag_Z_Min) MPU6050.Mag_Z_Min = MPU6050.Mag_Z_RAW;
 8000f58:	f9b7 20b8 	ldrsh.w	r2, [r7, #184]	; 0xb8
 8000f5c:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8000f60:	429a      	cmp	r2, r3
 8000f62:	da03      	bge.n	8000f6c <main+0x12c>
 8000f64:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
 8000f68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe


	MPU6050.Mag_X_Offset = (MPU6050.Mag_X_Max + MPU6050.Mag_X_Min) / 2;
 8000f6c:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000f70:	461a      	mov	r2, r3
 8000f72:	f9b7 30ba 	ldrsh.w	r3, [r7, #186]	; 0xba
 8000f76:	4413      	add	r3, r2
 8000f78:	0fda      	lsrs	r2, r3, #31
 8000f7a:	4413      	add	r3, r2
 8000f7c:	105b      	asrs	r3, r3, #1
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	MPU6050.Mag_Y_Offset = (MPU6050.Mag_Y_Max + MPU6050.Mag_Y_Min) / 2;
 8000f84:	f9b7 30c2 	ldrsh.w	r3, [r7, #194]	; 0xc2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8000f8e:	4413      	add	r3, r2
 8000f90:	0fda      	lsrs	r2, r3, #31
 8000f92:	4413      	add	r3, r2
 8000f94:	105b      	asrs	r3, r3, #1
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	MPU6050.Mag_Z_Offset = (MPU6050.Mag_Z_Max + MPU6050.Mag_Z_Min) / 2;
 8000f9c:	f9b7 30c4 	ldrsh.w	r3, [r7, #196]	; 0xc4
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8000fa6:	4413      	add	r3, r2
 8000fa8:	0fda      	lsrs	r2, r3, #31
 8000faa:	4413      	add	r3, r2
 8000fac:	105b      	asrs	r3, r3, #1
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca

	Mag_Calib[0] = MPU6050.Mag_X_Offset >> 8;
 8000fb4:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000fb8:	121b      	asrs	r3, r3, #8
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b8e      	ldr	r3, [pc, #568]	; (80011f8 <main+0x3b8>)
 8000fc0:	701a      	strb	r2, [r3, #0]
	Mag_Calib[1] = MPU6050.Mag_X_Offset;
 8000fc2:	f9b7 30c6 	ldrsh.w	r3, [r7, #198]	; 0xc6
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <main+0x3b8>)
 8000fca:	705a      	strb	r2, [r3, #1]
	Mag_Calib[2] = MPU6050.Mag_Y_Offset >> 8;
 8000fcc:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b88      	ldr	r3, [pc, #544]	; (80011f8 <main+0x3b8>)
 8000fd8:	709a      	strb	r2, [r3, #2]
	Mag_Calib[3] = MPU6050.Mag_Y_Offset;
 8000fda:	f9b7 30c8 	ldrsh.w	r3, [r7, #200]	; 0xc8
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b85      	ldr	r3, [pc, #532]	; (80011f8 <main+0x3b8>)
 8000fe2:	70da      	strb	r2, [r3, #3]
	Mag_Calib[4] = MPU6050.Mag_Z_Offset >> 8;
 8000fe4:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8000fe8:	121b      	asrs	r3, r3, #8
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b82      	ldr	r3, [pc, #520]	; (80011f8 <main+0x3b8>)
 8000ff0:	711a      	strb	r2, [r3, #4]
	Mag_Calib[5] = MPU6050.Mag_Z_Offset;
 8000ff2:	f9b7 30ca 	ldrsh.w	r3, [r7, #202]	; 0xca
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	4b7f      	ldr	r3, [pc, #508]	; (80011f8 <main+0x3b8>)
 8000ffa:	715a      	strb	r2, [r3, #5]

	MPU6050.Mag_X_Offset = Mag_Calib[0] << 8 | Mag_Calib[1];
 8000ffc:	4b7e      	ldr	r3, [pc, #504]	; (80011f8 <main+0x3b8>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b7c      	ldr	r3, [pc, #496]	; (80011f8 <main+0x3b8>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
	MPU6050.Mag_Y_Offset = Mag_Calib[2] << 8 | Mag_Calib[3];
 8001012:	4b79      	ldr	r3, [pc, #484]	; (80011f8 <main+0x3b8>)
 8001014:	789b      	ldrb	r3, [r3, #2]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <main+0x3b8>)
 800101c:	78db      	ldrb	r3, [r3, #3]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
	MPU6050.Mag_Z_Offset = Mag_Calib[4] << 8 | Mag_Calib[5];
 8001028:	4b73      	ldr	r3, [pc, #460]	; (80011f8 <main+0x3b8>)
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <main+0x3b8>)
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca

	MPU6050_Read_All_DMA(&hi2c1, &MPU6050);
 800103e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001042:	4619      	mov	r1, r3
 8001044:	486b      	ldr	r0, [pc, #428]	; (80011f4 <main+0x3b4>)
 8001046:	f001 f94b 	bl	80022e0 <MPU6050_Read_All_DMA>
	MPU6050_Parsing(&MPU6050);
 800104a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800104e:	4618      	mov	r0, r3
 8001050:	f001 f95e 	bl	8002310 <MPU6050_Parsing>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   	int count=0;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2108      	movs	r1, #8
 800105e:	4867      	ldr	r0, [pc, #412]	; (80011fc <main+0x3bc>)
 8001060:	f002 fb66 	bl	8003730 <HAL_GPIO_WritePin>
  while (1)
  {
	  	// extract the raw values
	  	int16_t  accel_x  = MPU6050.Ax;
 8001064:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800106c:	ee17 3a90 	vmov	r3, s15
 8001070:	f8a7 3162 	strh.w	r3, [r7, #354]	; 0x162
	  	int16_t  accel_y  = MPU6050.Ay;
 8001074:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	f8a7 3160 	strh.w	r3, [r7, #352]	; 0x160
	  	int16_t  accel_z  = MPU6050.Az;
 8001084:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108c:	ee17 3a90 	vmov	r3, s15
 8001090:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
//	  	int16_t  mpu_temp = rx_buffer[6]  << 8 | rx_buffer[7];
	  	int16_t  gyro_x   = MPU6050.Gx;
 8001094:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 3a90 	vmov	r3, s15
 80010a0:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
	  	int16_t  gyro_y   = MPU6050.Gy;
 80010a4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80010a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ac:	ee17 3a90 	vmov	r3, s15
 80010b0:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
	  	int16_t  gyro_z   = MPU6050.Gz;
 80010b4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80010b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010bc:	ee17 3a90 	vmov	r3, s15
 80010c0:	f8a7 3158 	strh.w	r3, [r7, #344]	; 0x158
	  	int16_t  magn_x   = MPU6050.Mag_X_RAW;
 80010c4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80010c8:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156
	  	int16_t  magn_y   = MPU6050.Mag_Y_RAW;
 80010cc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80010d0:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
	  	int16_t  magn_z   = MPU6050.Mag_Z_RAW;
 80010d4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80010d8:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152

	  // convert accelerometer readings into G's
	  	accel_x_g = accel_x / 8192.0f;
 80010dc:	f9b7 3162 	ldrsh.w	r3, [r7, #354]	; 0x162
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e8:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001200 <main+0x3c0>
 80010ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f0:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
	  	accel_y_g = accel_y / 8192.0f;
 80010f4:	f9b7 3160 	ldrsh.w	r3, [r7, #352]	; 0x160
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001100:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001200 <main+0x3c0>
 8001104:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001108:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
	  	accel_z_g = accel_z / 8192.0f;
 800110c:	f9b7 315e 	ldrsh.w	r3, [r7, #350]	; 0x15e
 8001110:	ee07 3a90 	vmov	s15, r3
 8001114:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001118:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001200 <main+0x3c0>
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

	  	// convert temperature reading into degrees Celsius
//	  	mpu_temp_c = mpu_temp / 340.0f + 36.53f;

	  	// convert gyro readings into Radians per second
	  	gyro_x_rad = gyro_x / 939.650784f;
 8001124:	f9b7 315c 	ldrsh.w	r3, [r7, #348]	; 0x15c
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001204 <main+0x3c4>
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
	  	gyro_y_rad = gyro_y / 939.650784f;
 800113c:	f9b7 315a 	ldrsh.w	r3, [r7, #346]	; 0x15a
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001148:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001204 <main+0x3c4>
 800114c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001150:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
	  	gyro_z_rad = gyro_z / 939.650784f;
 8001154:	f9b7 3158 	ldrsh.w	r3, [r7, #344]	; 0x158
 8001158:	ee07 3a90 	vmov	s15, r3
 800115c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001160:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001204 <main+0x3c4>
 8001164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001168:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138

	  	// convert magnetometer readings into Gauss's
	  	magn_x_gs = magn_x / 660.0f;
 800116c:	f9b7 3156 	ldrsh.w	r3, [r7, #342]	; 0x156
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001178:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001208 <main+0x3c8>
 800117c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001180:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
	  	magn_y_gs = magn_y / 660.0f;
 8001184:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	; 0x154
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001208 <main+0x3c8>
 8001194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001198:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
	  	magn_z_gs = magn_z / 660.0f;
 800119c:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001208 <main+0x3c8>
 80011ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b0:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c


	  g_h=accel_x_g;
 80011b4:	edd7 7a53 	vldr	s15, [r7, #332]	; 0x14c
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	ee17 3a90 	vmov	r3, s15
 80011c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=accel_x_g-g_h;
 80011c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011c8:	ee07 3a90 	vmov	s15, r3
 80011cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d0:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 80011dc:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80011e0:	e016      	b.n	8001210 <main+0x3d0>
 80011e2:	bf00      	nop
 80011e4:	08009c38 	.word	0x08009c38
 80011e8:	200000a8 	.word	0x200000a8
 80011ec:	08009c3c 	.word	0x08009c3c
 80011f0:	200010e0 	.word	0x200010e0
 80011f4:	20002158 	.word	0x20002158
 80011f8:	200022ac 	.word	0x200022ac
 80011fc:	40020800 	.word	0x40020800
 8001200:	46000000 	.word	0x46000000
 8001204:	446ae9a6 	.word	0x446ae9a6
 8001208:	44250000 	.word	0x44250000
 800120c:	447a0000 	.word	0x447a0000
 8001210:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800120c <main+0x3cc>
 8001214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001218:	ee17 0a90 	vmov	r0, s15
 800121c:	f7ff f9ac 	bl	8000578 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ec43 2b10 	vmov	d0, r2, r3
 8001228:	f008 f828 	bl	800927c <trunc>
 800122c:	ec53 2b10 	vmov	r2, r3, d0
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fc0a 	bl	8000a4c <__aeabi_d2iz>
 8001238:	4603      	mov	r3, r0
 800123a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str, "%d.%d", g_h,g_l);
 800123e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001242:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001246:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800124a:	49f0      	ldr	r1, [pc, #960]	; (800160c <main+0x7cc>)
 800124c:	f008 f87a 	bl	8009344 <siprintf>


	  g_h=accel_y_g;
 8001250:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 3a90 	vmov	r3, s15
 800125c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=accel_y_g-g_h;
 8001260:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	ed97 7a52 	vldr	s14, [r7, #328]	; 0x148
 8001270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001274:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 8001278:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800127c:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 8001610 <main+0x7d0>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	ee17 0a90 	vmov	r0, s15
 8001288:	f7ff f976 	bl	8000578 <__aeabi_f2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	ec43 2b10 	vmov	d0, r2, r3
 8001294:	f007 fff2 	bl	800927c <trunc>
 8001298:	ec53 2b10 	vmov	r2, r3, d0
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fbd4 	bl	8000a4c <__aeabi_d2iz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str2,"%d.%d", g_h,g_l);
 80012aa:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80012ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80012b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80012b6:	49d5      	ldr	r1, [pc, #852]	; (800160c <main+0x7cc>)
 80012b8:	f008 f844 	bl	8009344 <siprintf>


	  g_h=accel_z_g;
 80012bc:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 80012c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c4:	ee17 3a90 	vmov	r3, s15
 80012c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=accel_z_g-g_h;
 80012cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 80012dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e0:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 80012e4:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80012e8:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 8001610 <main+0x7d0>
 80012ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f0:	ee17 0a90 	vmov	r0, s15
 80012f4:	f7ff f940 	bl	8000578 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	ec43 2b10 	vmov	d0, r2, r3
 8001300:	f007 ffbc 	bl	800927c <trunc>
 8001304:	ec53 2b10 	vmov	r2, r3, d0
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fb9e 	bl	8000a4c <__aeabi_d2iz>
 8001310:	4603      	mov	r3, r0
 8001312:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str3, "%d.%d", g_h,g_l);
 8001316:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800131a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800131e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001322:	49ba      	ldr	r1, [pc, #744]	; (800160c <main+0x7cc>)
 8001324:	f008 f80e 	bl	8009344 <siprintf>


	  g_h=gyro_x_rad;
 8001328:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 800132c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001330:	ee17 3a90 	vmov	r3, s15
 8001334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=gyro_x_rad-g_h;
 8001338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800133c:	ee07 3a90 	vmov	s15, r3
 8001340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001344:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 8001350:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8001354:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8001610 <main+0x7d0>
 8001358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135c:	ee17 0a90 	vmov	r0, s15
 8001360:	f7ff f90a 	bl	8000578 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b10 	vmov	d0, r2, r3
 800136c:	f007 ff86 	bl	800927c <trunc>
 8001370:	ec53 2b10 	vmov	r2, r3, d0
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fb68 	bl	8000a4c <__aeabi_d2iz>
 800137c:	4603      	mov	r3, r0
 800137e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str4, "%d.%d", g_h,g_l);
 8001382:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001386:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800138a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800138e:	499f      	ldr	r1, [pc, #636]	; (800160c <main+0x7cc>)
 8001390:	f007 ffd8 	bl	8009344 <siprintf>


	  g_h=gyro_y_rad;
 8001394:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8001398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139c:	ee17 3a90 	vmov	r3, s15
 80013a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=gyro_y_rad-g_h;
 80013a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b0:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 80013b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b8:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 80013bc:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80013c0:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001610 <main+0x7d0>
 80013c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c8:	ee17 0a90 	vmov	r0, s15
 80013cc:	f7ff f8d4 	bl	8000578 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	ec43 2b10 	vmov	d0, r2, r3
 80013d8:	f007 ff50 	bl	800927c <trunc>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fb32 	bl	8000a4c <__aeabi_d2iz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str5, "%d.%d", g_h,g_l);
 80013ee:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80013f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80013f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80013fa:	4984      	ldr	r1, [pc, #528]	; (800160c <main+0x7cc>)
 80013fc:	f007 ffa2 	bl	8009344 <siprintf>


	  g_h=gyro_z_rad;
 8001400:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	ee17 3a90 	vmov	r3, s15
 800140c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=gyro_z_rad-g_h;
 8001410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001424:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 8001428:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800142c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8001610 <main+0x7d0>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	ee17 0a90 	vmov	r0, s15
 8001438:	f7ff f89e 	bl	8000578 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b10 	vmov	d0, r2, r3
 8001444:	f007 ff1a 	bl	800927c <trunc>
 8001448:	ec53 2b10 	vmov	r2, r3, d0
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fafc 	bl	8000a4c <__aeabi_d2iz>
 8001454:	4603      	mov	r3, r0
 8001456:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str6, "%d.%d", g_h,g_l);
 800145a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800145e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001462:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001466:	4969      	ldr	r1, [pc, #420]	; (800160c <main+0x7cc>)
 8001468:	f007 ff6c 	bl	8009344 <siprintf>


	  g_h=magn_x;
 800146c:	f9b7 3156 	ldrsh.w	r3, [r7, #342]	; 0x156
 8001470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=magn_x-g_h;
 8001474:	f9b7 2156 	ldrsh.w	r2, [r7, #342]	; 0x156
 8001478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001486:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 800148a:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800148e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001610 <main+0x7d0>
 8001492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001496:	ee17 0a90 	vmov	r0, s15
 800149a:	f7ff f86d 	bl	8000578 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	ec43 2b10 	vmov	d0, r2, r3
 80014a6:	f007 fee9 	bl	800927c <trunc>
 80014aa:	ec53 2b10 	vmov	r2, r3, d0
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff facb 	bl	8000a4c <__aeabi_d2iz>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str7, "%d.%d", g_h,g_l);
 80014bc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80014c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80014c8:	4950      	ldr	r1, [pc, #320]	; (800160c <main+0x7cc>)
 80014ca:	f007 ff3b 	bl	8009344 <siprintf>


	  g_h=magn_y;
 80014ce:	f9b7 3154 	ldrsh.w	r3, [r7, #340]	; 0x154
 80014d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=magn_y-g_h;
 80014d6:	f9b7 2154 	ldrsh.w	r2, [r7, #340]	; 0x154
 80014da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 80014ec:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 80014f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001610 <main+0x7d0>
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f8:	ee17 0a90 	vmov	r0, s15
 80014fc:	f7ff f83c 	bl	8000578 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	ec43 2b10 	vmov	d0, r2, r3
 8001508:	f007 feb8 	bl	800927c <trunc>
 800150c:	ec53 2b10 	vmov	r2, r3, d0
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fa9a 	bl	8000a4c <__aeabi_d2iz>
 8001518:	4603      	mov	r3, r0
 800151a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str8, "%d.%d", g_h,g_l);
 800151e:	f107 0018 	add.w	r0, r7, #24
 8001522:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001526:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800152a:	4938      	ldr	r1, [pc, #224]	; (800160c <main+0x7cc>)
 800152c:	f007 ff0a 	bl	8009344 <siprintf>


	  g_h=magn_z;
 8001530:	f9b7 3152 	ldrsh.w	r3, [r7, #338]	; 0x152
 8001534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  g_lf=magn_z-g_h;
 8001538:	f9b7 2152 	ldrsh.w	r2, [r7, #338]	; 0x152
 800153c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154a:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124
	  g_l= trunc(g_lf*1000);
 800154e:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 8001552:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001610 <main+0x7d0>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	ee17 0a90 	vmov	r0, s15
 800155e:	f7ff f80b 	bl	8000578 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	ec43 2b10 	vmov	d0, r2, r3
 800156a:	f007 fe87 	bl	800927c <trunc>
 800156e:	ec53 2b10 	vmov	r2, r3, d0
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fa69 	bl	8000a4c <__aeabi_d2iz>
 800157a:	4603      	mov	r3, r0
 800157c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  sprintf(str9, "%d.%d", g_h,g_l);
 8001580:	f107 000c 	add.w	r0, r7, #12
 8001584:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001588:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800158c:	491f      	ldr	r1, [pc, #124]	; (800160c <main+0x7cc>)
 800158e:	f007 fed9 	bl	8009344 <siprintf>
/*	  g_h=mpu_temp_c;
	  g_lf=mpu_temp_c-g_h;
	  g_l= trunc(g_lf*1000);
	  sprintf(str10, "%d.%d", g_h,g_l);
*/
	  f_puts(str , &fil);
 8001592:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001596:	491f      	ldr	r1, [pc, #124]	; (8001614 <main+0x7d4>)
 8001598:	4618      	mov	r0, r3
 800159a:	f007 fd28 	bl	8008fee <f_puts>
	  f_puts("  ", &fil);
 800159e:	491d      	ldr	r1, [pc, #116]	; (8001614 <main+0x7d4>)
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <main+0x7d8>)
 80015a2:	f007 fd24 	bl	8008fee <f_puts>
	  f_puts(str2 , &fil);
 80015a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80015aa:	491a      	ldr	r1, [pc, #104]	; (8001614 <main+0x7d4>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f007 fd1e 	bl	8008fee <f_puts>
	  f_puts("  ", &fil);
 80015b2:	4918      	ldr	r1, [pc, #96]	; (8001614 <main+0x7d4>)
 80015b4:	4818      	ldr	r0, [pc, #96]	; (8001618 <main+0x7d8>)
 80015b6:	f007 fd1a 	bl	8008fee <f_puts>
	  f_puts(str3 , &fil);
 80015ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015be:	4915      	ldr	r1, [pc, #84]	; (8001614 <main+0x7d4>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f007 fd14 	bl	8008fee <f_puts>
	  f_puts( "  ", &fil);
 80015c6:	4913      	ldr	r1, [pc, #76]	; (8001614 <main+0x7d4>)
 80015c8:	4813      	ldr	r0, [pc, #76]	; (8001618 <main+0x7d8>)
 80015ca:	f007 fd10 	bl	8008fee <f_puts>
	  f_puts(str4 , &fil);
 80015ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d2:	4910      	ldr	r1, [pc, #64]	; (8001614 <main+0x7d4>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f007 fd0a 	bl	8008fee <f_puts>
	  f_puts("  ", &fil);
 80015da:	490e      	ldr	r1, [pc, #56]	; (8001614 <main+0x7d4>)
 80015dc:	480e      	ldr	r0, [pc, #56]	; (8001618 <main+0x7d8>)
 80015de:	f007 fd06 	bl	8008fee <f_puts>
	  f_puts(str5 , &fil);
 80015e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e6:	490b      	ldr	r1, [pc, #44]	; (8001614 <main+0x7d4>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f007 fd00 	bl	8008fee <f_puts>
	  f_puts("  ", &fil);
 80015ee:	4909      	ldr	r1, [pc, #36]	; (8001614 <main+0x7d4>)
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <main+0x7d8>)
 80015f2:	f007 fcfc 	bl	8008fee <f_puts>
	  f_puts(str6 , &fil);
 80015f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fa:	4906      	ldr	r1, [pc, #24]	; (8001614 <main+0x7d4>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 fcf6 	bl	8008fee <f_puts>
	  f_puts( "  ", &fil);
 8001602:	4904      	ldr	r1, [pc, #16]	; (8001614 <main+0x7d4>)
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <main+0x7d8>)
 8001606:	f007 fcf2 	bl	8008fee <f_puts>
 800160a:	e007      	b.n	800161c <main+0x7dc>
 800160c:	08009c48 	.word	0x08009c48
 8001610:	447a0000 	.word	0x447a0000
 8001614:	200010e0 	.word	0x200010e0
 8001618:	08009c50 	.word	0x08009c50
	  f_puts(str7 , &fil);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4921      	ldr	r1, [pc, #132]	; (80016a8 <main+0x868>)
 8001622:	4618      	mov	r0, r3
 8001624:	f007 fce3 	bl	8008fee <f_puts>
	  f_puts("  ", &fil);
 8001628:	491f      	ldr	r1, [pc, #124]	; (80016a8 <main+0x868>)
 800162a:	4820      	ldr	r0, [pc, #128]	; (80016ac <main+0x86c>)
 800162c:	f007 fcdf 	bl	8008fee <f_puts>
	  f_puts(str8 , &fil);
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	491c      	ldr	r1, [pc, #112]	; (80016a8 <main+0x868>)
 8001636:	4618      	mov	r0, r3
 8001638:	f007 fcd9 	bl	8008fee <f_puts>
	  f_puts("  ", &fil);
 800163c:	491a      	ldr	r1, [pc, #104]	; (80016a8 <main+0x868>)
 800163e:	481b      	ldr	r0, [pc, #108]	; (80016ac <main+0x86c>)
 8001640:	f007 fcd5 	bl	8008fee <f_puts>
	  f_puts(str9 , &fil);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4917      	ldr	r1, [pc, #92]	; (80016a8 <main+0x868>)
 800164a:	4618      	mov	r0, r3
 800164c:	f007 fccf 	bl	8008fee <f_puts>
	  f_puts( "  ", &fil);
 8001650:	4915      	ldr	r1, [pc, #84]	; (80016a8 <main+0x868>)
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <main+0x86c>)
 8001654:	f007 fccb 	bl	8008fee <f_puts>
	  f_puts(str10 , &fil);
 8001658:	463b      	mov	r3, r7
 800165a:	4913      	ldr	r1, [pc, #76]	; (80016a8 <main+0x868>)
 800165c:	4618      	mov	r0, r3
 800165e:	f007 fcc6 	bl	8008fee <f_puts>
	  f_puts( "  ", &fil);
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <main+0x868>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <main+0x86c>)
 8001666:	f007 fcc2 	bl	8008fee <f_puts>
	  f_puts( "\n", &fil);
 800166a:	490f      	ldr	r1, [pc, #60]	; (80016a8 <main+0x868>)
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <main+0x870>)
 800166e:	f007 fcbe 	bl	8008fee <f_puts>

	  count++;
 8001672:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	  if (count>5000){
 800167c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	f77f aced 	ble.w	8001064 <main+0x224>
		f_close(&fil);
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <main+0x868>)
 800168c:	f007 fc0e 	bl	8008eac <f_close>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8001690:	2200      	movs	r2, #0
 8001692:	2108      	movs	r1, #8
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <main+0x874>)
 8001696:	f002 f84b 	bl	8003730 <HAL_GPIO_WritePin>
		break;
 800169a:	bf00      	nop
 800169c:	2300      	movs	r3, #0
	  }
  }
  /* USER CODE END 3 */
}
 800169e:	4618      	mov	r0, r3
 80016a0:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200010e0 	.word	0x200010e0
 80016ac:	08009c50 	.word	0x08009c50
 80016b0:	08009c54 	.word	0x08009c54
 80016b4:	40020800 	.word	0x40020800

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b094      	sub	sp, #80	; 0x50
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	2234      	movs	r2, #52	; 0x34
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f007 fe34 	bl	8009334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <SystemClock_Config+0xdc>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a2b      	ldr	r2, [pc, #172]	; (8001794 <SystemClock_Config+0xdc>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <SystemClock_Config+0xdc>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f8:	2300      	movs	r3, #0
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	4b26      	ldr	r3, [pc, #152]	; (8001798 <SystemClock_Config+0xe0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a25      	ldr	r2, [pc, #148]	; (8001798 <SystemClock_Config+0xe0>)
 8001702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b23      	ldr	r3, [pc, #140]	; (8001798 <SystemClock_Config+0xe0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800171c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	2302      	movs	r3, #2
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001728:	230c      	movs	r3, #12
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800172c:	23b4      	movs	r3, #180	; 0xb4
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001730:	2302      	movs	r3, #2
 8001732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001734:	2302      	movs	r3, #2
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4618      	mov	r0, r3
 8001742:	f004 fa1b 	bl	8005b7c <HAL_RCC_OscConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800174c:	f000 f9a4 	bl	8001a98 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001750:	f003 ff14 	bl	800557c <HAL_PWREx_EnableOverDrive>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800175a:	f000 f99d 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175e:	230f      	movs	r3, #15
 8001760:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001762:	2302      	movs	r3, #2
 8001764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800176a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001774:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2105      	movs	r1, #5
 800177c:	4618      	mov	r0, r3
 800177e:	f003 ff4d 	bl	800561c <HAL_RCC_ClockConfig>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001788:	f000 f986 	bl	8001a98 <Error_Handler>
  }
}
 800178c:	bf00      	nop
 800178e:	3750      	adds	r7, #80	; 0x50
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	40007000 	.word	0x40007000

0800179c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a2:	463b      	mov	r3, r7
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ae:	4b21      	ldr	r3, [pc, #132]	; (8001834 <MX_ADC1_Init+0x98>)
 80017b0:	4a21      	ldr	r2, [pc, #132]	; (8001838 <MX_ADC1_Init+0x9c>)
 80017b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <MX_ADC1_Init+0x98>)
 80017b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_ADC1_Init+0x98>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <MX_ADC1_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017c8:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_ADC1_Init+0x98>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <MX_ADC1_Init+0x98>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_ADC1_Init+0x98>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_ADC1_Init+0x98>)
 80017de:	4a17      	ldr	r2, [pc, #92]	; (800183c <MX_ADC1_Init+0xa0>)
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_ADC1_Init+0x98>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_ADC1_Init+0x98>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_ADC1_Init+0x98>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_ADC1_Init+0x98>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_ADC1_Init+0x98>)
 80017fe:	f001 f9f7 	bl	8002bf0 <HAL_ADC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001808:	f000 f946 	bl	8001a98 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800180c:	2301      	movs	r3, #1
 800180e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_ADC1_Init+0x98>)
 800181e:	f001 fa2b 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001828:	f000 f936 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20002110 	.word	0x20002110
 8001838:	40012000 	.word	0x40012000
 800183c:	0f000001 	.word	0x0f000001

08001840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_I2C1_Init+0x50>)
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <MX_I2C1_Init+0x54>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_I2C1_Init+0x50>)
 800184c:	4a12      	ldr	r2, [pc, #72]	; (8001898 <MX_I2C1_Init+0x58>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_I2C1_Init+0x50>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_I2C1_Init+0x50>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_I2C1_Init+0x50>)
 800185e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001862:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <MX_I2C1_Init+0x50>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_I2C1_Init+0x50>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800187c:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_I2C1_Init+0x50>)
 800187e:	f001 ff71 	bl	8003764 <HAL_I2C_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001888:	f000 f906 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20002158 	.word	0x20002158
 8001894:	40005400 	.word	0x40005400
 8001898:	00061a80 	.word	0x00061a80

0800189c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C2_Init+0x50>)
 80018a2:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <MX_I2C2_Init+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_I2C2_Init+0x50>)
 80018a8:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_I2C2_Init+0x58>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C2_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_I2C2_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_I2C2_Init+0x50>)
 80018ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_I2C2_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_I2C2_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_I2C2_Init+0x50>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_I2C2_Init+0x50>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_I2C2_Init+0x50>)
 80018da:	f001 ff43 	bl	8003764 <HAL_I2C_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018e4:	f000 f8d8 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200021ac 	.word	0x200021ac
 80018f0:	40005800 	.word	0x40005800
 80018f4:	000186a0 	.word	0x000186a0

080018f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C3_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C3_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C3_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C3_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C3_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C3_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C3_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C3_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C3_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C3_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C3_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C3_Init+0x50>)
 8001936:	f001 ff15 	bl	8003764 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 f8aa 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20002200 	.word	0x20002200
 800194c:	40005c00 	.word	0x40005c00
 8001950:	00061a80 	.word	0x00061a80

08001954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_SPI1_Init+0x64>)
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <MX_SPI1_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_SPI1_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI1_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_SPI1_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI1_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_SPI1_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI1_Init+0x64>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_SPI1_Init+0x64>)
 80019a6:	f004 fb87 	bl	80060b8 <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b0:	f000 f872 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20002254 	.word	0x20002254
 80019bc:	40013000 	.word	0x40013000

080019c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <MX_GPIO_Init+0xcc>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a2b      	ldr	r2, [pc, #172]	; (8001a8c <MX_GPIO_Init+0xcc>)
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b29      	ldr	r3, [pc, #164]	; (8001a8c <MX_GPIO_Init+0xcc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <MX_GPIO_Init+0xcc>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <MX_GPIO_Init+0xcc>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_GPIO_Init+0xcc>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2108      	movs	r1, #8
 8001a4a:	4811      	ldr	r0, [pc, #68]	; (8001a90 <MX_GPIO_Init+0xd0>)
 8001a4c:	f001 fe70 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a50:	2308      	movs	r3, #8
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	480a      	ldr	r0, [pc, #40]	; (8001a90 <MX_GPIO_Init+0xd0>)
 8001a68:	f001 fcce 	bl	8003408 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001a6c:	2318      	movs	r3, #24
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_GPIO_Init+0xd4>)
 8001a80:	f001 fcc2 	bl	8003408 <HAL_GPIO_Init>

}
 8001a84:	bf00      	nop
 8001a86:	3728      	adds	r7, #40	; 0x28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020400 	.word	0x40020400

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <Error_Handler+0x8>
	...

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a17      	ldr	r2, [pc, #92]	; (8001b70 <HAL_ADC_MspInit+0x7c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d127      	bne.n	8001b66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_ADC_MspInit+0x80>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_ADC_MspInit+0x80>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_ADC_MspInit+0x80>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_ADC_MspInit+0x80>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <HAL_ADC_MspInit+0x80>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_ADC_MspInit+0x80>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b52:	2303      	movs	r3, #3
 8001b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_ADC_MspInit+0x84>)
 8001b62:	f001 fc51 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40012000 	.word	0x40012000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020000 	.word	0x40020000

08001b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b090      	sub	sp, #64	; 0x40
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6b      	ldr	r2, [pc, #428]	; (8001d48 <HAL_I2C_MspInit+0x1cc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d12d      	bne.n	8001bfa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b67      	ldr	r3, [pc, #412]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bc0:	2312      	movs	r3, #18
 8001bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bcc:	2304      	movs	r3, #4
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	485e      	ldr	r0, [pc, #376]	; (8001d50 <HAL_I2C_MspInit+0x1d4>)
 8001bd8:	f001 fc16 	bl	8003408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a59      	ldr	r2, [pc, #356]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bf8:	e0a2      	b.n	8001d40 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_I2C_MspInit+0x1d8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d14c      	bne.n	8001c9e <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c42:	2312      	movs	r3, #18
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	4619      	mov	r1, r3
 8001c58:	483d      	ldr	r0, [pc, #244]	; (8001d50 <HAL_I2C_MspInit+0x1d4>)
 8001c5a:	f001 fbd5 	bl	8003408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c64:	2312      	movs	r3, #18
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c70:	2304      	movs	r3, #4
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4837      	ldr	r0, [pc, #220]	; (8001d58 <HAL_I2C_MspInit+0x1dc>)
 8001c7c:	f001 fbc4 	bl	8003408 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
}
 8001c9c:	e050      	b.n	8001d40 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a2e      	ldr	r2, [pc, #184]	; (8001d5c <HAL_I2C_MspInit+0x1e0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d14b      	bne.n	8001d40 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb8:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	4b20      	ldr	r3, [pc, #128]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4a1f      	ldr	r2, [pc, #124]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4816      	ldr	r0, [pc, #88]	; (8001d58 <HAL_I2C_MspInit+0x1dc>)
 8001cfe:	f001 fb83 	bl	8003408 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d14:	2304      	movs	r3, #4
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4810      	ldr	r0, [pc, #64]	; (8001d60 <HAL_I2C_MspInit+0x1e4>)
 8001d20:	f001 fb72 	bl	8003408 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a07      	ldr	r2, [pc, #28]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001d2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_I2C_MspInit+0x1d0>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3740      	adds	r7, #64	; 0x40
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40005800 	.word	0x40005800
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40005c00 	.word	0x40005c00
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <HAL_SPI_MspInit+0x84>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d12b      	bne.n	8001dde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_SPI_MspInit+0x88>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	4a17      	ldr	r2, [pc, #92]	; (8001dec <HAL_SPI_MspInit+0x88>)
 8001d90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d94:	6453      	str	r3, [r2, #68]	; 0x44
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_SPI_MspInit+0x88>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_SPI_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_SPI_MspInit+0x88>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_SPI_MspInit+0x88>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dbe:	23e0      	movs	r3, #224	; 0xe0
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	; (8001df0 <HAL_SPI_MspInit+0x8c>)
 8001dda:	f001 fb15 	bl	8003408 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dde:	bf00      	nop
 8001de0:	3728      	adds	r7, #40	; 0x28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40013000 	.word	0x40013000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <NMI_Handler+0x4>

08001dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler+0x4>

08001e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler+0x4>

08001e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e40:	f000 fe92 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f007 fa32 	bl	80092e0 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20020000 	.word	0x20020000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	200022b4 	.word	0x200022b4
 8001eb0:	20002538 	.word	0x20002538

08001eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <SystemInit+0x20>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemInit+0x20>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f02:	f7ff ffd7 	bl	8001eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f06:	f007 f9f1 	bl	80092ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0a:	f7fe ff99 	bl	8000e40 <main>
  bx  lr    
 8001f0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001f1c:	0800a13c 	.word	0x0800a13c
  ldr r2, =_sbss
 8001f20:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001f24:	20002534 	.word	0x20002534

08001f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC_IRQHandler>
	...

08001f2c <MPU6050_Init>:
uint8_t MPU6050_tx;
float MPU6050_Gyro_LSB = 32.8;
float MPU6050_Acc_LSB = 4096.0;

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af04      	add	r7, sp, #16
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	4608      	mov	r0, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	70fb      	strb	r3, [r7, #3]
 8001f3e:	460b      	mov	r3, r1
 8001f40:	70bb      	strb	r3, [r7, #2]
 8001f42:	4613      	mov	r3, r2
 8001f44:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d81b      	bhi.n	8001f84 <MPU6050_Init+0x58>
 8001f4c:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <MPU6050_Init+0x28>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f6d 	.word	0x08001f6d
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f7d 	.word	0x08001f7d
	{
	case 0: //250dps
		MPU6050_Gyro_LSB = 131.0;
 8001f64:	4b56      	ldr	r3, [pc, #344]	; (80020c0 <MPU6050_Init+0x194>)
 8001f66:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <MPU6050_Init+0x198>)
 8001f68:	601a      	str	r2, [r3, #0]
		break;
 8001f6a:	e00c      	b.n	8001f86 <MPU6050_Init+0x5a>
	case 1: //500dps
		MPU6050_Gyro_LSB = 65.5;
 8001f6c:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <MPU6050_Init+0x194>)
 8001f6e:	4a56      	ldr	r2, [pc, #344]	; (80020c8 <MPU6050_Init+0x19c>)
 8001f70:	601a      	str	r2, [r3, #0]
		break;
 8001f72:	e008      	b.n	8001f86 <MPU6050_Init+0x5a>
	case 2: //1000dps
		MPU6050_Gyro_LSB = 32.8;
 8001f74:	4b52      	ldr	r3, [pc, #328]	; (80020c0 <MPU6050_Init+0x194>)
 8001f76:	4a55      	ldr	r2, [pc, #340]	; (80020cc <MPU6050_Init+0x1a0>)
 8001f78:	601a      	str	r2, [r3, #0]
		break;
 8001f7a:	e004      	b.n	8001f86 <MPU6050_Init+0x5a>
	case 3: //2000dps
		MPU6050_Gyro_LSB = 16.4;
 8001f7c:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <MPU6050_Init+0x194>)
 8001f7e:	4a54      	ldr	r2, [pc, #336]	; (80020d0 <MPU6050_Init+0x1a4>)
 8001f80:	601a      	str	r2, [r3, #0]
		break;
 8001f82:	e000      	b.n	8001f86 <MPU6050_Init+0x5a>
	default:
		break;
 8001f84:	bf00      	nop
	}

	switch(Acc_FS)
 8001f86:	78bb      	ldrb	r3, [r7, #2]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d81f      	bhi.n	8001fcc <MPU6050_Init+0xa0>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <MPU6050_Init+0x68>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001faf 	.word	0x08001faf
 8001f9c:	08001fb9 	.word	0x08001fb9
 8001fa0:	08001fc3 	.word	0x08001fc3
	{
	case 0: //2g
		MPU6050_Acc_LSB = 16384.0;
 8001fa4:	4b4b      	ldr	r3, [pc, #300]	; (80020d4 <MPU6050_Init+0x1a8>)
 8001fa6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001faa:	601a      	str	r2, [r3, #0]
		break;
 8001fac:	e00f      	b.n	8001fce <MPU6050_Init+0xa2>
	case 1: //4g
		MPU6050_Acc_LSB = 8192.0;
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <MPU6050_Init+0x1a8>)
 8001fb0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001fb4:	601a      	str	r2, [r3, #0]
		break;
 8001fb6:	e00a      	b.n	8001fce <MPU6050_Init+0xa2>
	case 2: //8g
		MPU6050_Acc_LSB = 4096.0;
 8001fb8:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <MPU6050_Init+0x1a8>)
 8001fba:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001fbe:	601a      	str	r2, [r3, #0]
		break;
 8001fc0:	e005      	b.n	8001fce <MPU6050_Init+0xa2>
	case 3: //16g
		MPU6050_Acc_LSB = 2048.0;
 8001fc2:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <MPU6050_Init+0x1a8>)
 8001fc4:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001fc8:	601a      	str	r2, [r3, #0]
		break;
 8001fca:	e000      	b.n	8001fce <MPU6050_Init+0xa2>
	default:
		break;
 8001fcc:	bf00      	nop
	}

	// Read Who am I
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &MPU6050_rx, 1, 100);
 8001fce:	2364      	movs	r3, #100	; 0x64
 8001fd0:	9302      	str	r3, [sp, #8]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <MPU6050_Init+0x1ac>)
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	2275      	movs	r2, #117	; 0x75
 8001fde:	21d0      	movs	r1, #208	; 0xd0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f002 f921 	bl	8004228 <HAL_I2C_Mem_Read>
	MPU6050_tx = 0; //Will return this value if code ends here
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <MPU6050_Init+0x1b0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]

	// 0x68 will be returned if sensor accessed correctly
	if (MPU6050_rx == 0x68)
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <MPU6050_Init+0x1ac>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b68      	cmp	r3, #104	; 0x68
 8001ff2:	d15f      	bne.n	80020b4 <MPU6050_Init+0x188>
	{
		MPU6050_tx = 0;
 8001ff4:	4b39      	ldr	r3, [pc, #228]	; (80020dc <MPU6050_Init+0x1b0>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1, 100);
 8001ffa:	2364      	movs	r3, #100	; 0x64
 8001ffc:	9302      	str	r3, [sp, #8]
 8001ffe:	2301      	movs	r3, #1
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	4b36      	ldr	r3, [pc, #216]	; (80020dc <MPU6050_Init+0x1b0>)
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	226b      	movs	r2, #107	; 0x6b
 800200a:	21d0      	movs	r1, #208	; 0xd0
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f002 f811 	bl	8004034 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8002012:	200a      	movs	r0, #10
 8002014:	f000 fdc8 	bl	8002ba8 <HAL_Delay>

		MPU6050_tx = 0x00; // Set No Sampling
 8002018:	4b30      	ldr	r3, [pc, #192]	; (80020dc <MPU6050_Init+0x1b0>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &MPU6050_tx, 1, 100);
 800201e:	2364      	movs	r3, #100	; 0x64
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2301      	movs	r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <MPU6050_Init+0x1b0>)
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	2219      	movs	r2, #25
 800202e:	21d0      	movs	r1, #208	; 0xd0
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f001 ffff 	bl	8004034 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8002036:	200a      	movs	r0, #10
 8002038:	f000 fdb6 	bl	8002ba8 <HAL_Delay>

		MPU6050_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <MPU6050_Init+0x1b0>)
 800203e:	787b      	ldrb	r3, [r7, #1]
 8002040:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, CONFIG_REG, 1, &MPU6050_tx, 1, 100);
 8002042:	2364      	movs	r3, #100	; 0x64
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MPU6050_Init+0x1b0>)
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2301      	movs	r3, #1
 8002050:	221a      	movs	r2, #26
 8002052:	21d0      	movs	r1, #208	; 0xd0
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f001 ffed 	bl	8004034 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800205a:	200a      	movs	r0, #10
 800205c:	f000 fda4 	bl	8002ba8 <HAL_Delay>

		MPU6050_tx = Gyro_FS << 3;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <MPU6050_Init+0x1b0>)
 8002068:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &MPU6050_tx, 1, 100);
 800206a:	2364      	movs	r3, #100	; 0x64
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2301      	movs	r3, #1
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <MPU6050_Init+0x1b0>)
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	221b      	movs	r2, #27
 800207a:	21d0      	movs	r1, #208	; 0xd0
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f001 ffd9 	bl	8004034 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8002082:	200a      	movs	r0, #10
 8002084:	f000 fd90 	bl	8002ba8 <HAL_Delay>

		MPU6050_tx = Acc_FS << 3;
 8002088:	78bb      	ldrb	r3, [r7, #2]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <MPU6050_Init+0x1b0>)
 8002090:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &MPU6050_tx, 1, 100);
 8002092:	2364      	movs	r3, #100	; 0x64
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	2301      	movs	r3, #1
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <MPU6050_Init+0x1b0>)
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	221c      	movs	r2, #28
 80020a2:	21d0      	movs	r1, #208	; 0xd0
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f001 ffc5 	bl	8004034 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80020aa:	200a      	movs	r0, #10
 80020ac:	f000 fd7c 	bl	8002ba8 <HAL_Delay>

		return 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e000      	b.n	80020b6 <MPU6050_Init+0x18a>
	}
	return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000004 	.word	0x20000004
 80020c4:	43030000 	.word	0x43030000
 80020c8:	42830000 	.word	0x42830000
 80020cc:	42033333 	.word	0x42033333
 80020d0:	41833333 	.word	0x41833333
 80020d4:	20000008 	.word	0x20000008
 80020d8:	200022b8 	.word	0x200022b8
 80020dc:	200022d0 	.word	0x200022d0

080020e0 <MPU6050_Bypass>:

void MPU6050_Bypass(I2C_HandleTypeDef *I2Cx)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00000000; //
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <MPU6050_Bypass+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Disable
 80020ee:	2364      	movs	r3, #100	; 0x64
 80020f0:	9302      	str	r3, [sp, #8]
 80020f2:	2301      	movs	r3, #1
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <MPU6050_Bypass+0x58>)
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	226a      	movs	r2, #106	; 0x6a
 80020fe:	21d0      	movs	r1, #208	; 0xd0
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f001 ff97 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002106:	200a      	movs	r0, #10
 8002108:	f000 fd4e 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0b00000010; //
 800210c:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <MPU6050_Bypass+0x58>)
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Bypass Enable
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2301      	movs	r3, #1
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <MPU6050_Bypass+0x58>)
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	2237      	movs	r2, #55	; 0x37
 8002122:	21d0      	movs	r1, #208	; 0xd0
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f001 ff85 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800212a:	200a      	movs	r0, #10
 800212c:	f000 fd3c 	bl	8002ba8 <HAL_Delay>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200022d0 	.word	0x200022d0

0800213c <MPU6050_Master>:

void MPU6050_Master(I2C_HandleTypeDef *I2Cx)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af04      	add	r7, sp, #16
 8002142:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0x00; //
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <MPU6050_Master+0xa0>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x37, 1, &MPU6050_tx, 1, 100); //Disable Bypass
 800214a:	2364      	movs	r3, #100	; 0x64
 800214c:	9302      	str	r3, [sp, #8]
 800214e:	2301      	movs	r3, #1
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	4b22      	ldr	r3, [pc, #136]	; (80021dc <MPU6050_Master+0xa0>)
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2301      	movs	r3, #1
 8002158:	2237      	movs	r2, #55	; 0x37
 800215a:	21d0      	movs	r1, #208	; 0xd0
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f001 ff69 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002162:	200a      	movs	r0, #10
 8002164:	f000 fd20 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0b00100010; //
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <MPU6050_Master+0xa0>)
 800216a:	2222      	movs	r2, #34	; 0x22
 800216c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x6A, 1, &MPU6050_tx, 1, 100); //Master Enable
 800216e:	2364      	movs	r3, #100	; 0x64
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <MPU6050_Master+0xa0>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	226a      	movs	r2, #106	; 0x6a
 800217e:	21d0      	movs	r1, #208	; 0xd0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f001 ff57 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002186:	200a      	movs	r0, #10
 8002188:	f000 fd0e 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0b00001101; //
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <MPU6050_Master+0xa0>)
 800218e:	220d      	movs	r2, #13
 8002190:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x24, 1, &MPU6050_tx, 1, 100); //Master Clock to 400kHz
 8002192:	2364      	movs	r3, #100	; 0x64
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	2301      	movs	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <MPU6050_Master+0xa0>)
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	2224      	movs	r2, #36	; 0x24
 80021a2:	21d0      	movs	r1, #208	; 0xd0
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f001 ff45 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80021aa:	200a      	movs	r0, #10
 80021ac:	f000 fcfc 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0x00;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <MPU6050_Master+0xa0>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &MPU6050_tx, 1, 100);
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MPU6050_Master+0xa0>)
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	226b      	movs	r2, #107	; 0x6b
 80021c6:	21d0      	movs	r1, #208	; 0xd0
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f001 ff33 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f000 fcea 	bl	8002ba8 <HAL_Delay>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200022d0 	.word	0x200022d0

080021e0 <HMC5883L_Setup>:

void HMC5883L_Setup(I2C_HandleTypeDef *I2Cx)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
	MPU6050_tx = 0b00011000; //Fill Slave0 DO
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <HMC5883L_Setup+0x7c>)
 80021ea:	2218      	movs	r2, #24
 80021ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x00, 1, &MPU6050_tx, 1, 100);
 80021ee:	2364      	movs	r3, #100	; 0x64
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	2301      	movs	r3, #1
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HMC5883L_Setup+0x7c>)
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2301      	movs	r3, #1
 80021fc:	2200      	movs	r2, #0
 80021fe:	213c      	movs	r1, #60	; 0x3c
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 ff17 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002206:	200a      	movs	r0, #10
 8002208:	f000 fcce 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0b00100000; //Fill Slave0 DO
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <HMC5883L_Setup+0x7c>)
 800220e:	2220      	movs	r2, #32
 8002210:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x01, 1, &MPU6050_tx, 1, 100);
 8002212:	2364      	movs	r3, #100	; 0x64
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	2301      	movs	r3, #1
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HMC5883L_Setup+0x7c>)
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	2201      	movs	r2, #1
 8002222:	213c      	movs	r1, #60	; 0x3c
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f001 ff05 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800222a:	200a      	movs	r0, #10
 800222c:	f000 fcbc 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0x00;
 8002230:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HMC5883L_Setup+0x7c>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, HMC5883L_ADDRESS << 1, 0x02, 1, &MPU6050_tx, 1, 100); //Mode: Continuous
 8002236:	2364      	movs	r3, #100	; 0x64
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	2301      	movs	r3, #1
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <HMC5883L_Setup+0x7c>)
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2301      	movs	r3, #1
 8002244:	2202      	movs	r2, #2
 8002246:	213c      	movs	r1, #60	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f001 fef3 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800224e:	200a      	movs	r0, #10
 8002250:	f000 fcaa 	bl	8002ba8 <HAL_Delay>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200022d0 	.word	0x200022d0

08002260 <MPU6050_Slave_Read>:

void MPU6050_Slave_Read(I2C_HandleTypeDef *I2Cx)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af04      	add	r7, sp, #16
 8002266:	6078      	str	r0, [r7, #4]
	MPU6050_tx = HMC5883L_ADDRESS | 0x80; //Access Slave into read mode
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MPU6050_Slave_Read+0x7c>)
 800226a:	229e      	movs	r2, #158	; 0x9e
 800226c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x25, 1, &MPU6050_tx, 1, 100);
 800226e:	2364      	movs	r3, #100	; 0x64
 8002270:	9302      	str	r3, [sp, #8]
 8002272:	2301      	movs	r3, #1
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <MPU6050_Slave_Read+0x7c>)
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2301      	movs	r3, #1
 800227c:	2225      	movs	r2, #37	; 0x25
 800227e:	21d0      	movs	r1, #208	; 0xd0
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f001 fed7 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002286:	200a      	movs	r0, #10
 8002288:	f000 fc8e 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0x03; //Slave REG for reading to take place
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MPU6050_Slave_Read+0x7c>)
 800228e:	2203      	movs	r2, #3
 8002290:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x26, 1, &MPU6050_tx, 1, 100);
 8002292:	2364      	movs	r3, #100	; 0x64
 8002294:	9302      	str	r3, [sp, #8]
 8002296:	2301      	movs	r3, #1
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MPU6050_Slave_Read+0x7c>)
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2301      	movs	r3, #1
 80022a0:	2226      	movs	r2, #38	; 0x26
 80022a2:	21d0      	movs	r1, #208	; 0xd0
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f001 fec5 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80022aa:	200a      	movs	r0, #10
 80022ac:	f000 fc7c 	bl	8002ba8 <HAL_Delay>

	MPU6050_tx = 0x80 | 0x06; //Number of data bytes
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <MPU6050_Slave_Read+0x7c>)
 80022b2:	2286      	movs	r2, #134	; 0x86
 80022b4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x27, 1, &MPU6050_tx, 1, 100);
 80022b6:	2364      	movs	r3, #100	; 0x64
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2301      	movs	r3, #1
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MPU6050_Slave_Read+0x7c>)
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	2227      	movs	r2, #39	; 0x27
 80022c6:	21d0      	movs	r1, #208	; 0xd0
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f001 feb3 	bl	8004034 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80022ce:	200a      	movs	r0, #10
 80022d0:	f000 fc6a 	bl	8002ba8 <HAL_Delay>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200022d0 	.word	0x200022d0

080022e0 <MPU6050_Read_All_DMA>:
{
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, MPU6050_rx_buf, 20, 100);
}

void MPU6050_Read_All_DMA(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, MPU6050_rx_buf, 20);
 80022ea:	2314      	movs	r3, #20
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MPU6050_Read_All_DMA+0x28>)
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	223b      	movs	r2, #59	; 0x3b
 80022f6:	21d0      	movs	r1, #208	; 0xd0
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f002 f9bb 	bl	8004674 <HAL_I2C_Mem_Read_DMA>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200022bc 	.word	0x200022bc
 800230c:	00000000 	.word	0x00000000

08002310 <MPU6050_Parsing>:

void MPU6050_Parsing(MPU6050_t *DataStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	DataStruct->Accel_X_RAW = -(MPU6050_rx_buf[0] << 8 | MPU6050_rx_buf[1]);
 8002318:	4ba7      	ldr	r3, [pc, #668]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	4ba5      	ldr	r3, [pc, #660]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	b21b      	sxth	r3, r3
 8002326:	4313      	orrs	r3, r2
 8002328:	b21b      	sxth	r3, r3
 800232a:	b29b      	uxth	r3, r3
 800232c:	425b      	negs	r3, r3
 800232e:	b29b      	uxth	r3, r3
 8002330:	b21a      	sxth	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (MPU6050_rx_buf[2] << 8 | MPU6050_rx_buf[3]);
 8002336:	4ba0      	ldr	r3, [pc, #640]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002338:	789b      	ldrb	r3, [r3, #2]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002340:	78db      	ldrb	r3, [r3, #3]
 8002342:	b21b      	sxth	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b21a      	sxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (MPU6050_rx_buf[4] << 8 | MPU6050_rx_buf[5]);
 800234c:	4b9a      	ldr	r3, [pc, #616]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 800234e:	791b      	ldrb	r3, [r3, #4]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	b21a      	sxth	r2, r3
 8002354:	4b98      	ldr	r3, [pc, #608]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002356:	795b      	ldrb	r3, [r3, #5]
 8002358:	b21b      	sxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b21a      	sxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gyro_X_RAW = (MPU6050_rx_buf[8] << 8 | MPU6050_rx_buf[9]);
 8002362:	4b95      	ldr	r3, [pc, #596]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002364:	7a1b      	ldrb	r3, [r3, #8]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	4b93      	ldr	r3, [pc, #588]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 800236c:	7a5b      	ldrb	r3, [r3, #9]
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b21a      	sxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = -(MPU6050_rx_buf[10] << 8 | MPU6050_rx_buf[11]);
 8002378:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 800237a:	7a9b      	ldrb	r3, [r3, #10]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002382:	7adb      	ldrb	r3, [r3, #11]
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	425b      	negs	r3, r3
 800238e:	b29b      	uxth	r3, r3
 8002390:	b21a      	sxth	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = -(MPU6050_rx_buf[12] << 8 | MPU6050_rx_buf[13]);
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 8002398:	7b1b      	ldrb	r3, [r3, #12]
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	b21a      	sxth	r2, r3
 800239e:	4b86      	ldr	r3, [pc, #536]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023a0:	7b5b      	ldrb	r3, [r3, #13]
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	425b      	negs	r3, r3
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	831a      	strh	r2, [r3, #24]

	DataStruct->Mag_X_RAW = (MPU6050_rx_buf[14] << 8 | MPU6050_rx_buf[15]);
 80023b4:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023b6:	7b9b      	ldrb	r3, [r3, #14]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023be:	7bdb      	ldrb	r3, [r3, #15]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	4313      	orrs	r3, r2
 80023c4:	b21a      	sxth	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	861a      	strh	r2, [r3, #48]	; 0x30
	DataStruct->Mag_Z_RAW = -(MPU6050_rx_buf[16] << 8 | MPU6050_rx_buf[17]);
 80023ca:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023cc:	7c1b      	ldrb	r3, [r3, #16]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	b21a      	sxth	r2, r3
 80023d2:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023d4:	7c5b      	ldrb	r3, [r3, #17]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21b      	sxth	r3, r3
 80023dc:	b29b      	uxth	r3, r3
 80023de:	425b      	negs	r3, r3
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	b21a      	sxth	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	869a      	strh	r2, [r3, #52]	; 0x34
	DataStruct->Mag_Y_RAW = -(MPU6050_rx_buf[18] << 8 | MPU6050_rx_buf[19]);
 80023e8:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023ea:	7c9b      	ldrb	r3, [r3, #18]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	4b71      	ldr	r3, [pc, #452]	; (80025b8 <MPU6050_Parsing+0x2a8>)
 80023f2:	7cdb      	ldrb	r3, [r3, #19]
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b21b      	sxth	r3, r3
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	425b      	negs	r3, r3
 80023fe:	b29b      	uxth	r3, r3
 8002400:	b21a      	sxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	865a      	strh	r2, [r3, #50]	; 0x32

	DataStruct->Gyro_X_RAW -= DataStruct->Gyro_X_Offset;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800240c:	b29a      	uxth	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002414:	b29b      	uxth	r3, r3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	b21a      	sxth	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW -= DataStruct->Gyro_Y_Offset;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800242e:	b29b      	uxth	r3, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	b29b      	uxth	r3, r3
 8002434:	b21a      	sxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW -= DataStruct->Gyro_Z_Offset;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002440:	b29a      	uxth	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002448:	b29b      	uxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	b21a      	sxth	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	831a      	strh	r2, [r3, #24]

	DataStruct->Mag_X_RAW -= DataStruct->Mag_X_Offset;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800245a:	b29a      	uxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002462:	b29b      	uxth	r3, r3
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21a      	sxth	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	861a      	strh	r2, [r3, #48]	; 0x30
	DataStruct->Mag_Y_RAW -= DataStruct->Mag_Y_Offset;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800247c:	b29b      	uxth	r3, r3
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	b21a      	sxth	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	865a      	strh	r2, [r3, #50]	; 0x32
	DataStruct->Mag_Z_RAW -= DataStruct->Mag_Z_Offset;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800248e:	b29a      	uxth	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002496:	b29b      	uxth	r3, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	b29b      	uxth	r3, r3
 800249c:	b21a      	sxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	869a      	strh	r2, [r3, #52]	; 0x34


	DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_Gyro_LSB* D2R;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80024a8:	ee07 3a90 	vmov	s15, r3
 80024ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b0:	4b42      	ldr	r3, [pc, #264]	; (80025bc <MPU6050_Parsing+0x2ac>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024ba:	ee16 0a90 	vmov	r0, s13
 80024be:	f7fe f85b 	bl	8000578 <__aeabi_f2d>
 80024c2:	a33b      	add	r3, pc, #236	; (adr r3, 80025b0 <MPU6050_Parsing+0x2a0>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fe f8ae 	bl	8000628 <__aeabi_dmul>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fae2 	bl	8000a9c <__aeabi_d2f>
 80024d8:	4602      	mov	r2, r0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	621a      	str	r2, [r3, #32]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_Gyro_LSB* D2R;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ec:	4b33      	ldr	r3, [pc, #204]	; (80025bc <MPU6050_Parsing+0x2ac>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024f6:	ee16 0a90 	vmov	r0, s13
 80024fa:	f7fe f83d 	bl	8000578 <__aeabi_f2d>
 80024fe:	a32c      	add	r3, pc, #176	; (adr r3, 80025b0 <MPU6050_Parsing+0x2a0>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fe f890 	bl	8000628 <__aeabi_dmul>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f7fe fac4 	bl	8000a9c <__aeabi_d2f>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_Gyro_LSB* D2R;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002520:	ee07 3a90 	vmov	s15, r3
 8002524:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002528:	4b24      	ldr	r3, [pc, #144]	; (80025bc <MPU6050_Parsing+0x2ac>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002532:	ee16 0a90 	vmov	r0, s13
 8002536:	f7fe f81f 	bl	8000578 <__aeabi_f2d>
 800253a:	a31d      	add	r3, pc, #116	; (adr r3, 80025b0 <MPU6050_Parsing+0x2a0>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe f872 	bl	8000628 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe faa6 	bl	8000a9c <__aeabi_d2f>
 8002550:	4602      	mov	r2, r0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_Acc_LSB;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <MPU6050_Parsing+0x2b0>)
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_Acc_LSB;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MPU6050_Parsing+0x2b0>)
 8002584:	ed93 7a00 	vldr	s14, [r3]
 8002588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_Acc_LSB;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <MPU6050_Parsing+0x2b0>)
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	e00a      	b.n	80025c4 <MPU6050_Parsing+0x2b4>
 80025ae:	bf00      	nop
 80025b0:	a252dd11 	.word	0xa252dd11
 80025b4:	3f91df46 	.word	0x3f91df46
 80025b8:	200022bc 	.word	0x200022bc
 80025bc:	20000004 	.word	0x20000004
 80025c0:	20000008 	.word	0x20000008
 80025c4:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <MPU6050_Parsing_NoOffest>:

void MPU6050_Parsing_NoOffest(MPU6050_t *DataStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	DataStruct->Accel_X_RAW = -(MPU6050_rx_buf[0] << 8 | MPU6050_rx_buf[1]);
 80025d8:	4b97      	ldr	r3, [pc, #604]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	b21a      	sxth	r2, r3
 80025e0:	4b95      	ldr	r3, [pc, #596]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 80025e2:	785b      	ldrb	r3, [r3, #1]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b21b      	sxth	r3, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	425b      	negs	r3, r3
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	b21a      	sxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	801a      	strh	r2, [r3, #0]
	DataStruct->Accel_Y_RAW = (MPU6050_rx_buf[2] << 8 | MPU6050_rx_buf[3]);
 80025f6:	4b90      	ldr	r3, [pc, #576]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 80025f8:	789b      	ldrb	r3, [r3, #2]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	b21a      	sxth	r2, r3
 80025fe:	4b8e      	ldr	r3, [pc, #568]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002600:	78db      	ldrb	r3, [r3, #3]
 8002602:	b21b      	sxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b21a      	sxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	805a      	strh	r2, [r3, #2]
	DataStruct->Accel_Z_RAW = (MPU6050_rx_buf[4] << 8 | MPU6050_rx_buf[5]);
 800260c:	4b8a      	ldr	r3, [pc, #552]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	4b88      	ldr	r3, [pc, #544]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002616:	795b      	ldrb	r3, [r3, #5]
 8002618:	b21b      	sxth	r3, r3
 800261a:	4313      	orrs	r3, r2
 800261c:	b21a      	sxth	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gyro_X_RAW = (MPU6050_rx_buf[8] << 8 | MPU6050_rx_buf[9]);
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002624:	7a1b      	ldrb	r3, [r3, #8]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	b21a      	sxth	r2, r3
 800262a:	4b83      	ldr	r3, [pc, #524]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 800262c:	7a5b      	ldrb	r3, [r3, #9]
 800262e:	b21b      	sxth	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b21a      	sxth	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW = -(MPU6050_rx_buf[10] << 8 | MPU6050_rx_buf[11]);
 8002638:	4b7f      	ldr	r3, [pc, #508]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 800263a:	7a9b      	ldrb	r3, [r3, #10]
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	b21a      	sxth	r2, r3
 8002640:	4b7d      	ldr	r3, [pc, #500]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002642:	7adb      	ldrb	r3, [r3, #11]
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	b21b      	sxth	r3, r3
 800264a:	b29b      	uxth	r3, r3
 800264c:	425b      	negs	r3, r3
 800264e:	b29b      	uxth	r3, r3
 8002650:	b21a      	sxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW = -(MPU6050_rx_buf[12] << 8 | MPU6050_rx_buf[13]);
 8002656:	4b78      	ldr	r3, [pc, #480]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002658:	7b1b      	ldrb	r3, [r3, #12]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	b21a      	sxth	r2, r3
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002660:	7b5b      	ldrb	r3, [r3, #13]
 8002662:	b21b      	sxth	r3, r3
 8002664:	4313      	orrs	r3, r2
 8002666:	b21b      	sxth	r3, r3
 8002668:	b29b      	uxth	r3, r3
 800266a:	425b      	negs	r3, r3
 800266c:	b29b      	uxth	r3, r3
 800266e:	b21a      	sxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	831a      	strh	r2, [r3, #24]

	DataStruct->Mag_X_RAW = (MPU6050_rx_buf[14] << 8 | MPU6050_rx_buf[15]);
 8002674:	4b70      	ldr	r3, [pc, #448]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002676:	7b9b      	ldrb	r3, [r3, #14]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	b21a      	sxth	r2, r3
 800267c:	4b6e      	ldr	r3, [pc, #440]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 800267e:	7bdb      	ldrb	r3, [r3, #15]
 8002680:	b21b      	sxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	b21a      	sxth	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	861a      	strh	r2, [r3, #48]	; 0x30
	DataStruct->Mag_Z_RAW = -(MPU6050_rx_buf[16] << 8 | MPU6050_rx_buf[17]);
 800268a:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 800268c:	7c1b      	ldrb	r3, [r3, #16]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	4b69      	ldr	r3, [pc, #420]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 8002694:	7c5b      	ldrb	r3, [r3, #17]
 8002696:	b21b      	sxth	r3, r3
 8002698:	4313      	orrs	r3, r2
 800269a:	b21b      	sxth	r3, r3
 800269c:	b29b      	uxth	r3, r3
 800269e:	425b      	negs	r3, r3
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	869a      	strh	r2, [r3, #52]	; 0x34
	DataStruct->Mag_Y_RAW = -(MPU6050_rx_buf[18] << 8 | MPU6050_rx_buf[19]);
 80026a8:	4b63      	ldr	r3, [pc, #396]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 80026aa:	7c9b      	ldrb	r3, [r3, #18]
 80026ac:	021b      	lsls	r3, r3, #8
 80026ae:	b21a      	sxth	r2, r3
 80026b0:	4b61      	ldr	r3, [pc, #388]	; (8002838 <MPU6050_Parsing_NoOffest+0x268>)
 80026b2:	7cdb      	ldrb	r3, [r3, #19]
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	425b      	negs	r3, r3
 80026be:	b29b      	uxth	r3, r3
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	865a      	strh	r2, [r3, #50]	; 0x32

	DataStruct->Gyro_X_RAW -= DataStruct->Gyro_X_Offset;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b21a      	sxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyro_Y_RAW -= DataStruct->Gyro_Y_Offset;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b21a      	sxth	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	82da      	strh	r2, [r3, #22]
	DataStruct->Gyro_Z_RAW -= DataStruct->Gyro_Z_Offset;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002708:	b29b      	uxth	r3, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	b29b      	uxth	r3, r3
 800270e:	b21a      	sxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	831a      	strh	r2, [r3, #24]


	DataStruct->Gx = DataStruct->Gyro_X_RAW / MPU6050_Gyro_LSB* D2R;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002722:	4b46      	ldr	r3, [pc, #280]	; (800283c <MPU6050_Parsing_NoOffest+0x26c>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800272c:	ee16 0a90 	vmov	r0, s13
 8002730:	f7fd ff22 	bl	8000578 <__aeabi_f2d>
 8002734:	a33e      	add	r3, pc, #248	; (adr r3, 8002830 <MPU6050_Parsing_NoOffest+0x260>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd ff75 	bl	8000628 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe f9a9 	bl	8000a9c <__aeabi_d2f>
 800274a:	4602      	mov	r2, r0
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	621a      	str	r2, [r3, #32]
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / MPU6050_Gyro_LSB* D2R;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275e:	4b37      	ldr	r3, [pc, #220]	; (800283c <MPU6050_Parsing_NoOffest+0x26c>)
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002768:	ee16 0a90 	vmov	r0, s13
 800276c:	f7fd ff04 	bl	8000578 <__aeabi_f2d>
 8002770:	a32f      	add	r3, pc, #188	; (adr r3, 8002830 <MPU6050_Parsing_NoOffest+0x260>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fd ff57 	bl	8000628 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe f98b 	bl	8000a9c <__aeabi_d2f>
 8002786:	4602      	mov	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / MPU6050_Gyro_LSB* D2R;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800279a:	4b28      	ldr	r3, [pc, #160]	; (800283c <MPU6050_Parsing_NoOffest+0x26c>)
 800279c:	edd3 7a00 	vldr	s15, [r3]
 80027a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027a4:	ee16 0a90 	vmov	r0, s13
 80027a8:	f7fd fee6 	bl	8000578 <__aeabi_f2d>
 80027ac:	a320      	add	r3, pc, #128	; (adr r3, 8002830 <MPU6050_Parsing_NoOffest+0x260>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff39 	bl	8000628 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe f96d 	bl	8000a9c <__aeabi_d2f>
 80027c2:	4602      	mov	r2, r0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	629a      	str	r2, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Accel_X_RAW / MPU6050_Acc_LSB;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MPU6050_Parsing_NoOffest+0x270>)
 80027d8:	ed93 7a00 	vldr	s14, [r3]
 80027dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / MPU6050_Acc_LSB;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <MPU6050_Parsing_NoOffest+0x270>)
 80027f6:	ed93 7a00 	vldr	s14, [r3]
 80027fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Accel_Z_RAW / MPU6050_Acc_LSB;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800280a:	ee07 3a90 	vmov	s15, r3
 800280e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <MPU6050_Parsing_NoOffest+0x270>)
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	f3af 8000 	nop.w
 8002830:	a252dd11 	.word	0xa252dd11
 8002834:	3f91df46 	.word	0x3f91df46
 8002838:	200022bc 	.word	0x200022bc
 800283c:	20000004 	.word	0x20000004
 8002840:	20000008 	.word	0x20000008

08002844 <MS5611_Reset>:
uint8_t MS5611_tx;
uint8_t MS5611_rx;


void MS5611_Reset(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	MS5611_tx = CMD_RESET;
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <MS5611_Reset+0x40>)
 8002850:	221e      	movs	r2, #30
 8002852:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1 , &MS5611_tx, 1, 100);
 8002854:	2364      	movs	r3, #100	; 0x64
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2301      	movs	r3, #1
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <MS5611_Reset+0x40>)
 800285c:	21ee      	movs	r1, #238	; 0xee
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f001 f8c4 	bl	80039ec <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8002864:	200a      	movs	r0, #10
 8002866:	f000 f99f 	bl	8002ba8 <HAL_Delay>
	//For Temperature > 20 Celsius
	DataStruct->T2 = 0;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2200      	movs	r2, #0
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
	DataStruct->OFF2 = 0;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c
	DataStruct->SENS2 = 0;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200022e0 	.word	0x200022e0

08002888 <MS5611_ReadProm>:

void MS5611_ReadProm(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af02      	add	r7, sp, #8
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
		MS5611_tx = CMD_PROM_C0;
 8002892:	4b8a      	ldr	r3, [pc, #552]	; (8002abc <MS5611_ReadProm+0x234>)
 8002894:	22a0      	movs	r2, #160	; 0xa0
 8002896:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8002898:	2364      	movs	r3, #100	; 0x64
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2301      	movs	r3, #1
 800289e:	4a87      	ldr	r2, [pc, #540]	; (8002abc <MS5611_ReadProm+0x234>)
 80028a0:	21ee      	movs	r1, #238	; 0xee
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f001 f8a2 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80028a8:	2364      	movs	r3, #100	; 0x64
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2302      	movs	r3, #2
 80028ae:	4a84      	ldr	r2, [pc, #528]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80028b0:	21ee      	movs	r1, #238	; 0xee
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f001 f998 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[0] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	b21a      	sxth	r2, r3
 80028c0:	4b7f      	ldr	r3, [pc, #508]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 80028d0:	200a      	movs	r0, #10
 80028d2:	f000 f969 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C1;
 80028d6:	4b79      	ldr	r3, [pc, #484]	; (8002abc <MS5611_ReadProm+0x234>)
 80028d8:	22a2      	movs	r2, #162	; 0xa2
 80028da:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80028dc:	2364      	movs	r3, #100	; 0x64
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	2301      	movs	r3, #1
 80028e2:	4a76      	ldr	r2, [pc, #472]	; (8002abc <MS5611_ReadProm+0x234>)
 80028e4:	21ee      	movs	r1, #238	; 0xee
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f001 f880 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80028ec:	2364      	movs	r3, #100	; 0x64
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2302      	movs	r3, #2
 80028f2:	4a73      	ldr	r2, [pc, #460]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80028f4:	21ee      	movs	r1, #238	; 0xee
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f001 f976 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[1] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80028fc:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	021b      	lsls	r3, r3, #8
 8002902:	b21a      	sxth	r2, r3
 8002904:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	b21b      	sxth	r3, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	b21b      	sxth	r3, r3
 800290e:	b29a      	uxth	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	805a      	strh	r2, [r3, #2]
		HAL_Delay(10);
 8002914:	200a      	movs	r0, #10
 8002916:	f000 f947 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C2;
 800291a:	4b68      	ldr	r3, [pc, #416]	; (8002abc <MS5611_ReadProm+0x234>)
 800291c:	22a4      	movs	r2, #164	; 0xa4
 800291e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8002920:	2364      	movs	r3, #100	; 0x64
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2301      	movs	r3, #1
 8002926:	4a65      	ldr	r2, [pc, #404]	; (8002abc <MS5611_ReadProm+0x234>)
 8002928:	21ee      	movs	r1, #238	; 0xee
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 f85e 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8002930:	2364      	movs	r3, #100	; 0x64
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2302      	movs	r3, #2
 8002936:	4a62      	ldr	r2, [pc, #392]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002938:	21ee      	movs	r1, #238	; 0xee
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f001 f954 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[2] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8002940:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	b21a      	sxth	r2, r3
 8002948:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <MS5611_ReadProm+0x238>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	b21b      	sxth	r3, r3
 800294e:	4313      	orrs	r3, r2
 8002950:	b21b      	sxth	r3, r3
 8002952:	b29a      	uxth	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8002958:	200a      	movs	r0, #10
 800295a:	f000 f925 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C3;
 800295e:	4b57      	ldr	r3, [pc, #348]	; (8002abc <MS5611_ReadProm+0x234>)
 8002960:	22a6      	movs	r2, #166	; 0xa6
 8002962:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8002964:	2364      	movs	r3, #100	; 0x64
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2301      	movs	r3, #1
 800296a:	4a54      	ldr	r2, [pc, #336]	; (8002abc <MS5611_ReadProm+0x234>)
 800296c:	21ee      	movs	r1, #238	; 0xee
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f001 f83c 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8002974:	2364      	movs	r3, #100	; 0x64
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2302      	movs	r3, #2
 800297a:	4a51      	ldr	r2, [pc, #324]	; (8002ac0 <MS5611_ReadProm+0x238>)
 800297c:	21ee      	movs	r1, #238	; 0xee
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f001 f932 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[3] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8002984:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	b21a      	sxth	r2, r3
 800298c:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <MS5611_ReadProm+0x238>)
 800298e:	785b      	ldrb	r3, [r3, #1]
 8002990:	b21b      	sxth	r3, r3
 8002992:	4313      	orrs	r3, r2
 8002994:	b21b      	sxth	r3, r3
 8002996:	b29a      	uxth	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	80da      	strh	r2, [r3, #6]
		HAL_Delay(10);
 800299c:	200a      	movs	r0, #10
 800299e:	f000 f903 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C4;
 80029a2:	4b46      	ldr	r3, [pc, #280]	; (8002abc <MS5611_ReadProm+0x234>)
 80029a4:	22a8      	movs	r2, #168	; 0xa8
 80029a6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80029a8:	2364      	movs	r3, #100	; 0x64
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	4a43      	ldr	r2, [pc, #268]	; (8002abc <MS5611_ReadProm+0x234>)
 80029b0:	21ee      	movs	r1, #238	; 0xee
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f001 f81a 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80029b8:	2364      	movs	r3, #100	; 0x64
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2302      	movs	r3, #2
 80029be:	4a40      	ldr	r2, [pc, #256]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80029c0:	21ee      	movs	r1, #238	; 0xee
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f001 f910 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[4] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80029c8:	4b3d      	ldr	r3, [pc, #244]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	4b3b      	ldr	r3, [pc, #236]	; (8002ac0 <MS5611_ReadProm+0x238>)
 80029d2:	785b      	ldrb	r3, [r3, #1]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	4313      	orrs	r3, r2
 80029d8:	b21b      	sxth	r3, r3
 80029da:	b29a      	uxth	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	811a      	strh	r2, [r3, #8]
		HAL_Delay(10);
 80029e0:	200a      	movs	r0, #10
 80029e2:	f000 f8e1 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C5;
 80029e6:	4b35      	ldr	r3, [pc, #212]	; (8002abc <MS5611_ReadProm+0x234>)
 80029e8:	22aa      	movs	r2, #170	; 0xaa
 80029ea:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80029ec:	2364      	movs	r3, #100	; 0x64
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2301      	movs	r3, #1
 80029f2:	4a32      	ldr	r2, [pc, #200]	; (8002abc <MS5611_ReadProm+0x234>)
 80029f4:	21ee      	movs	r1, #238	; 0xee
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fff8 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80029fc:	2364      	movs	r3, #100	; 0x64
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2302      	movs	r3, #2
 8002a02:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a04:	21ee      	movs	r1, #238	; 0xee
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f001 f8ee 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[5] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8002a0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	815a      	strh	r2, [r3, #10]
		HAL_Delay(10);
 8002a24:	200a      	movs	r0, #10
 8002a26:	f000 f8bf 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C6;
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <MS5611_ReadProm+0x234>)
 8002a2c:	22ac      	movs	r2, #172	; 0xac
 8002a2e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8002a30:	2364      	movs	r3, #100	; 0x64
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2301      	movs	r3, #1
 8002a36:	4a21      	ldr	r2, [pc, #132]	; (8002abc <MS5611_ReadProm+0x234>)
 8002a38:	21ee      	movs	r1, #238	; 0xee
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 ffd6 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8002a40:	2364      	movs	r3, #100	; 0x64
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2302      	movs	r3, #2
 8002a46:	4a1e      	ldr	r2, [pc, #120]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a48:	21ee      	movs	r1, #238	; 0xee
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f001 f8cc 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[6] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	b21a      	sxth	r2, r3
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	819a      	strh	r2, [r3, #12]
		HAL_Delay(10);
 8002a68:	200a      	movs	r0, #10
 8002a6a:	f000 f89d 	bl	8002ba8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C7;
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <MS5611_ReadProm+0x234>)
 8002a70:	22ae      	movs	r2, #174	; 0xae
 8002a72:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8002a74:	2364      	movs	r3, #100	; 0x64
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	2301      	movs	r3, #1
 8002a7a:	4a10      	ldr	r2, [pc, #64]	; (8002abc <MS5611_ReadProm+0x234>)
 8002a7c:	21ee      	movs	r1, #238	; 0xee
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 ffb4 	bl	80039ec <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8002a84:	2364      	movs	r3, #100	; 0x64
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2302      	movs	r3, #2
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a8c:	21ee      	movs	r1, #238	; 0xee
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f001 f8aa 	bl	8003be8 <HAL_I2C_Master_Receive>
		DataStruct->C[7] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <MS5611_ReadProm+0x238>)
 8002a9e:	785b      	ldrb	r3, [r3, #1]
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	81da      	strh	r2, [r3, #14]
		HAL_Delay(10);
 8002aac:	200a      	movs	r0, #10
 8002aae:	f000 f87b 	bl	8002ba8 <HAL_Delay>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200022e0 	.word	0x200022e0
 8002ac0:	200022d4 	.word	0x200022d4

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 fba3 	bl	8003238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	200f      	movs	r0, #15
 8002af4:	f000 f808 	bl	8002b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7fe ffd4 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b10:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <HAL_InitTick+0x54>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_InitTick+0x58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fbad 	bl	8003286 <HAL_SYSTICK_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d80a      	bhi.n	8002b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	f04f 30ff 	mov.w	r0, #4294967295
 8002b44:	f000 fb83 	bl	800324e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b48:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <HAL_InitTick+0x5c>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000010 	.word	0x20000010
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	200022e4 	.word	0x200022e4

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	200022e4 	.word	0x200022e4

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d005      	beq.n	8002bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_Delay+0x44>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bce:	bf00      	nop
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f7      	bhi.n	8002bd0 <HAL_Delay+0x28>
  {
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000010 	.word	0x20000010

08002bf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e033      	b.n	8002c6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe ff70 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d118      	bne.n	8002c60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c36:	f023 0302 	bic.w	r3, r3, #2
 8002c3a:	f043 0202 	orr.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f94a 	bl	8002edc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5e:	e001      	b.n	8002c64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x1c>
 8002c90:	2302      	movs	r3, #2
 8002c92:	e113      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x244>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b09      	cmp	r3, #9
 8002ca2:	d925      	bls.n	8002cf0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68d9      	ldr	r1, [r3, #12]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b1e      	subs	r3, #30
 8002cba:	2207      	movs	r2, #7
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	4603      	mov	r3, r0
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4403      	add	r3, r0
 8002ce2:	3b1e      	subs	r3, #30
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e022      	b.n	8002d36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6919      	ldr	r1, [r3, #16]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	2207      	movs	r2, #7
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	400a      	ands	r2, r1
 8002d12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4618      	mov	r0, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4403      	add	r3, r0
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b06      	cmp	r3, #6
 8002d3c:	d824      	bhi.n	8002d88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b05      	subs	r3, #5
 8002d50:	221f      	movs	r2, #31
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b05      	subs	r3, #5
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
 8002d86:	e04c      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d824      	bhi.n	8002dda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b23      	subs	r3, #35	; 0x23
 8002da2:	221f      	movs	r2, #31
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	3b23      	subs	r3, #35	; 0x23
 8002dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd8:	e023      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	3b41      	subs	r3, #65	; 0x41
 8002dec:	221f      	movs	r2, #31
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	400a      	ands	r2, r1
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	3b41      	subs	r3, #65	; 0x41
 8002e16:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e22:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_ADC_ConfigChannel+0x250>)
 8002e24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a28      	ldr	r2, [pc, #160]	; (8002ecc <HAL_ADC_ConfigChannel+0x254>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d10f      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1d8>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b12      	cmp	r3, #18
 8002e36:	d10b      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_ADC_ConfigChannel+0x254>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d12b      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x23a>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <HAL_ADC_ConfigChannel+0x258>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <HAL_ADC_ConfigChannel+0x1f4>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b11      	cmp	r3, #17
 8002e6a:	d122      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <HAL_ADC_ConfigChannel+0x258>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_ADC_ConfigChannel+0x25c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_ADC_ConfigChannel+0x260>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0c9a      	lsrs	r2, r3, #18
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f9      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40012300 	.word	0x40012300
 8002ecc:	40012000 	.word	0x40012000
 8002ed0:	10000012 	.word	0x10000012
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	431bde83 	.word	0x431bde83

08002edc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee4:	4b79      	ldr	r3, [pc, #484]	; (80030cc <ADC_Init+0x1f0>)
 8002ee6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	021a      	lsls	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6899      	ldr	r1, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	4a58      	ldr	r2, [pc, #352]	; (80030d0 <ADC_Init+0x1f4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d022      	beq.n	8002fba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	e00f      	b.n	8002fda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0202 	bic.w	r2, r2, #2
 8002fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7e1b      	ldrb	r3, [r3, #24]
 8002ff4:	005a      	lsls	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003016:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003026:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	3b01      	subs	r3, #1
 8003034:	035a      	lsls	r2, r3, #13
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	e007      	b.n	8003050 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	3b01      	subs	r3, #1
 800306c:	051a      	lsls	r2, r3, #20
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003092:	025a      	lsls	r2, r3, #9
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	029a      	lsls	r2, r3, #10
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40012300 	.word	0x40012300
 80030d0:	0f000001 	.word	0x0f000001

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003106:	4a04      	ldr	r2, [pc, #16]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60d3      	str	r3, [r2, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	db0a      	blt.n	8003162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	490c      	ldr	r1, [pc, #48]	; (8003184 <__NVIC_SetPriority+0x4c>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	0112      	lsls	r2, r2, #4
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	440b      	add	r3, r1
 800315c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003160:	e00a      	b.n	8003178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	b2da      	uxtb	r2, r3
 8003166:	4908      	ldr	r1, [pc, #32]	; (8003188 <__NVIC_SetPriority+0x50>)
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	3b04      	subs	r3, #4
 8003170:	0112      	lsls	r2, r2, #4
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	440b      	add	r3, r1
 8003176:	761a      	strb	r2, [r3, #24]
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000e100 	.word	0xe000e100
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	; 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f1c3 0307 	rsb	r3, r3, #7
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	bf28      	it	cs
 80031aa:	2304      	movcs	r3, #4
 80031ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3304      	adds	r3, #4
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <NVIC_EncodePriority+0x30>
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3b03      	subs	r3, #3
 80031ba:	e000      	b.n	80031be <NVIC_EncodePriority+0x32>
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	401a      	ands	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	43d9      	mvns	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	4313      	orrs	r3, r2
         );
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003204:	d301      	bcc.n	800320a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003206:	2301      	movs	r3, #1
 8003208:	e00f      	b.n	800322a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <SysTick_Config+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3b01      	subs	r3, #1
 8003210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003212:	210f      	movs	r1, #15
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f7ff ff8e 	bl	8003138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <SysTick_Config+0x40>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <SysTick_Config+0x40>)
 8003224:	2207      	movs	r2, #7
 8003226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff47 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800324e:	b580      	push	{r7, lr}
 8003250:	b086      	sub	sp, #24
 8003252:	af00      	add	r7, sp, #0
 8003254:	4603      	mov	r3, r0
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003260:	f7ff ff5c 	bl	800311c <__NVIC_GetPriorityGrouping>
 8003264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	6978      	ldr	r0, [r7, #20]
 800326c:	f7ff ff8e 	bl	800318c <NVIC_EncodePriority>
 8003270:	4602      	mov	r2, r0
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff5d 	bl	8003138 <__NVIC_SetPriority>
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff ffb0 	bl	80031f4 <SysTick_Config>
 8003294:	4603      	mov	r3, r0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Start_IT+0x26>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e040      	b.n	8003346 <HAL_DMA_Start_IT+0xa8>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d12f      	bne.n	8003338 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f85c 	bl	80033aa <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	223f      	movs	r2, #63	; 0x3f
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0216 	orr.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0208 	orr.w	r2, r2, #8
 8003324:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e005      	b.n	8003344 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003340:	2302      	movs	r3, #2
 8003342:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d004      	beq.n	800336c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e00c      	b.n	8003386 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2205      	movs	r2, #5
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0201 	bic.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b085      	sub	sp, #20
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033c6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d108      	bne.n	80033ea <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033e8:	e007      	b.n	80033fa <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	60da      	str	r2, [r3, #12]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e165      	b.n	80036f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003424:	2201      	movs	r2, #1
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	429a      	cmp	r2, r3
 800343e:	f040 8154 	bne.w	80036ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d005      	beq.n	800345a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	2b02      	cmp	r3, #2
 8003458:	d130      	bne.n	80034bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	2203      	movs	r2, #3
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003490:	2201      	movs	r2, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 0201 	and.w	r2, r3, #1
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d017      	beq.n	80034f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2203      	movs	r2, #3
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d123      	bne.n	800354c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	08da      	lsrs	r2, r3, #3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3208      	adds	r2, #8
 800350c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	220f      	movs	r2, #15
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	08da      	lsrs	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	3208      	adds	r2, #8
 8003546:	69b9      	ldr	r1, [r7, #24]
 8003548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4013      	ands	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80ae 	beq.w	80036ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b5d      	ldr	r3, [pc, #372]	; (8003708 <HAL_GPIO_Init+0x300>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	4a5c      	ldr	r2, [pc, #368]	; (8003708 <HAL_GPIO_Init+0x300>)
 8003598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800359c:	6453      	str	r3, [r2, #68]	; 0x44
 800359e:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_GPIO_Init+0x300>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035aa:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_GPIO_Init+0x304>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	220f      	movs	r2, #15
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	; (8003710 <HAL_GPIO_Init+0x308>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d025      	beq.n	8003622 <HAL_GPIO_Init+0x21a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_GPIO_Init+0x30c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x216>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4d      	ldr	r2, [pc, #308]	; (8003718 <HAL_GPIO_Init+0x310>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x212>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4c      	ldr	r2, [pc, #304]	; (800371c <HAL_GPIO_Init+0x314>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x20e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4b      	ldr	r2, [pc, #300]	; (8003720 <HAL_GPIO_Init+0x318>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x20a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4a      	ldr	r2, [pc, #296]	; (8003724 <HAL_GPIO_Init+0x31c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x206>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a49      	ldr	r2, [pc, #292]	; (8003728 <HAL_GPIO_Init+0x320>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x202>
 8003606:	2306      	movs	r3, #6
 8003608:	e00c      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360a:	2307      	movs	r3, #7
 800360c:	e00a      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x21c>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	; (800370c <HAL_GPIO_Init+0x304>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b3a      	ldr	r3, [pc, #232]	; (800372c <HAL_GPIO_Init+0x324>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a31      	ldr	r2, [pc, #196]	; (800372c <HAL_GPIO_Init+0x324>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_GPIO_Init+0x324>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a26      	ldr	r2, [pc, #152]	; (800372c <HAL_GPIO_Init+0x324>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b25      	ldr	r3, [pc, #148]	; (800372c <HAL_GPIO_Init+0x324>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_GPIO_Init+0x324>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <HAL_GPIO_Init+0x324>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <HAL_GPIO_Init+0x324>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f ae96 	bls.w	8003424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
 800373c:	4613      	mov	r3, r2
 800373e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800374c:	e003      	b.n	8003756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800374e:	887b      	ldrh	r3, [r7, #2]
 8003750:	041a      	lsls	r2, r3, #16
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	619a      	str	r2, [r3, #24]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e12b      	b.n	80039ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe f9f6 	bl	8001b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c8:	f002 f81a 	bl	8005800 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a81      	ldr	r2, [pc, #516]	; (80039d8 <HAL_I2C_Init+0x274>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d807      	bhi.n	80037e8 <HAL_I2C_Init+0x84>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a80      	ldr	r2, [pc, #512]	; (80039dc <HAL_I2C_Init+0x278>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e006      	b.n	80037f6 <HAL_I2C_Init+0x92>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a7d      	ldr	r2, [pc, #500]	; (80039e0 <HAL_I2C_Init+0x27c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0e7      	b.n	80039ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a78      	ldr	r2, [pc, #480]	; (80039e4 <HAL_I2C_Init+0x280>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a6a      	ldr	r2, [pc, #424]	; (80039d8 <HAL_I2C_Init+0x274>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d802      	bhi.n	8003838 <HAL_I2C_Init+0xd4>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	e009      	b.n	800384c <HAL_I2C_Init+0xe8>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	4a69      	ldr	r2, [pc, #420]	; (80039e8 <HAL_I2C_Init+0x284>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	3301      	adds	r3, #1
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800385e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	495c      	ldr	r1, [pc, #368]	; (80039d8 <HAL_I2C_Init+0x274>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d819      	bhi.n	80038a0 <HAL_I2C_Init+0x13c>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e59      	subs	r1, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb1 f3f3 	udiv	r3, r1, r3
 800387a:	1c59      	adds	r1, r3, #1
 800387c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003880:	400b      	ands	r3, r1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_I2C_Init+0x138>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e59      	subs	r1, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fbb1 f3f3 	udiv	r3, r1, r3
 8003894:	3301      	adds	r3, #1
 8003896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389a:	e051      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 800389c:	2304      	movs	r3, #4
 800389e:	e04f      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <HAL_I2C_Init+0x168>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf0c      	ite	eq
 80038c4:	2301      	moveq	r3, #1
 80038c6:	2300      	movne	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e012      	b.n	80038f2 <HAL_I2C_Init+0x18e>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_I2C_Init+0x196>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e022      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <HAL_I2C_Init+0x1bc>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1e58      	subs	r0, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	440b      	add	r3, r1
 8003910:	fbb0 f3f3 	udiv	r3, r0, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391e:	e00f      	b.n	8003940 <HAL_I2C_Init+0x1dc>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	0099      	lsls	r1, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	fbb0 f3f3 	udiv	r3, r0, r3
 8003936:	3301      	adds	r3, #1
 8003938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800393c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	4313      	orrs	r3, r2
 8003946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800396e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6911      	ldr	r1, [r2, #16]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68d2      	ldr	r2, [r2, #12]
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	430b      	orrs	r3, r1
 8003982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	000186a0 	.word	0x000186a0
 80039dc:	001e847f 	.word	0x001e847f
 80039e0:	003d08ff 	.word	0x003d08ff
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	10624dd3 	.word	0x10624dd3

080039ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
 80039fc:	4613      	mov	r3, r2
 80039fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a00:	f7ff f8c6 	bl	8002b90 <HAL_GetTick>
 8003a04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 80e0 	bne.w	8003bd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2319      	movs	r3, #25
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4970      	ldr	r1, [pc, #448]	; (8003be0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f001 fbce 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0d3      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2C_Master_Transmit+0x50>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d007      	beq.n	8003a62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2221      	movs	r2, #33	; 0x21
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a50      	ldr	r2, [pc, #320]	; (8003be4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aa4:	8979      	ldrh	r1, [r7, #10]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6a3a      	ldr	r2, [r7, #32]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 ffa8 	bl	8004a00 <I2C_MasterRequestWrite>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e08d      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ad0:	e066      	b.n	8003ba0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6a39      	ldr	r1, [r7, #32]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f001 fc48 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_I2C_Master_Transmit+0x188>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	6a39      	ldr	r1, [r7, #32]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f001 fc38 	bl	80053ee <I2C_WaitOnBTFFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00d      	beq.n	8003ba0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d107      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01a      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d194      	bne.n	8003ad2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfc:	f7fe ffc8 	bl	8002b90 <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 820b 	bne.w	8004026 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2319      	movs	r3, #25
 8003c16:	2201      	movs	r2, #1
 8003c18:	497c      	ldr	r1, [pc, #496]	; (8003e0c <HAL_I2C_Master_Receive+0x224>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f001 fad0 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	e1fe      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2C_Master_Receive+0x50>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e1f7      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d007      	beq.n	8003c5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2222      	movs	r2, #34	; 0x22
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2210      	movs	r2, #16
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	893a      	ldrh	r2, [r7, #8]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_I2C_Master_Receive+0x228>)
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ca0:	8979      	ldrh	r1, [r7, #10]
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 ff2c 	bl	8004b04 <I2C_MasterRequestRead>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e1b8      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d113      	bne.n	8003ce6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e18c      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	61fb      	str	r3, [r7, #28]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	e16c      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d11b      	bne.n	8003d66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	e14c      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d8c:	e138      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	f200 80f1 	bhi.w	8003f7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d123      	bne.n	8003de8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f001 fb63 	bl	8005470 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e139      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003de6:	e10b      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d14e      	bne.n	8003e8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	2200      	movs	r2, #0
 8003df8:	4906      	ldr	r1, [pc, #24]	; (8003e14 <HAL_I2C_Master_Receive+0x22c>)
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f001 f9e0 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e10e      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
 8003e0a:	bf00      	nop
 8003e0c:	00100002 	.word	0x00100002
 8003e10:	ffff0000 	.word	0xffff0000
 8003e14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e8c:	e0b8      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e94:	2200      	movs	r2, #0
 8003e96:	4966      	ldr	r1, [pc, #408]	; (8004030 <HAL_I2C_Master_Receive+0x448>)
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f001 f991 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0bf      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	494f      	ldr	r1, [pc, #316]	; (8004030 <HAL_I2C_Master_Receive+0x448>)
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f001 f963 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e091      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	1c5a      	adds	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f78:	e042      	b.n	8004000 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f001 fa76 	bl	8005470 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e04c      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	b2d2      	uxtb	r2, r2
 8003f9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d118      	bne.n	8004000 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	f47f aec2 	bne.w	8003d8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	00010004 	.word	0x00010004

08004034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	817b      	strh	r3, [r7, #10]
 8004046:	460b      	mov	r3, r1
 8004048:	813b      	strh	r3, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800404e:	f7fe fd9f 	bl	8002b90 <HAL_GetTick>
 8004052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 80d9 	bne.w	8004214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2319      	movs	r3, #25
 8004068:	2201      	movs	r2, #1
 800406a:	496d      	ldr	r1, [pc, #436]	; (8004220 <HAL_I2C_Mem_Write+0x1ec>)
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f001 f8a7 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
 800407a:	e0cc      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_I2C_Mem_Write+0x56>
 8004086:	2302      	movs	r3, #2
 8004088:	e0c5      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d007      	beq.n	80040b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2221      	movs	r2, #33	; 0x21
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2240      	movs	r2, #64	; 0x40
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4a4d      	ldr	r2, [pc, #308]	; (8004224 <HAL_I2C_Mem_Write+0x1f0>)
 80040f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040f2:	88f8      	ldrh	r0, [r7, #6]
 80040f4:	893a      	ldrh	r2, [r7, #8]
 80040f6:	8979      	ldrh	r1, [r7, #10]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	4603      	mov	r3, r0
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 fdcc 	bl	8004ca0 <I2C_RequestMemoryWrite>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d052      	beq.n	80041b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e081      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f001 f928 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06b      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11b      	bne.n	80041b4 <HAL_I2C_Mem_Write+0x180>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d017      	beq.n	80041b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	781a      	ldrb	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1aa      	bne.n	8004112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f001 f914 	bl	80053ee <I2C_WaitOnBTFFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00d      	beq.n	80041e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e016      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	00100002 	.word	0x00100002
 8004224:	ffff0000 	.word	0xffff0000

08004228 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08c      	sub	sp, #48	; 0x30
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004242:	f7fe fca5 	bl	8002b90 <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b20      	cmp	r3, #32
 8004252:	f040 8208 	bne.w	8004666 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2319      	movs	r3, #25
 800425c:	2201      	movs	r2, #1
 800425e:	497b      	ldr	r1, [pc, #492]	; (800444c <HAL_I2C_Mem_Read+0x224>)
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 ffad 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800426c:	2302      	movs	r3, #2
 800426e:	e1fb      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2C_Mem_Read+0x56>
 800427a:	2302      	movs	r3, #2
 800427c:	e1f4      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	d007      	beq.n	80042a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2222      	movs	r2, #34	; 0x22
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a5b      	ldr	r2, [pc, #364]	; (8004450 <HAL_I2C_Mem_Read+0x228>)
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e6:	88f8      	ldrh	r0, [r7, #6]
 80042e8:	893a      	ldrh	r2, [r7, #8]
 80042ea:	8979      	ldrh	r1, [r7, #10]
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	9301      	str	r3, [sp, #4]
 80042f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	4603      	mov	r3, r0
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fd68 	bl	8004dcc <I2C_RequestMemoryRead>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e1b0      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d113      	bne.n	8004336 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430e:	2300      	movs	r3, #0
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	623b      	str	r3, [r7, #32]
 8004322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	e184      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	2b01      	cmp	r3, #1
 800433c:	d11b      	bne.n	8004376 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	e164      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	2b02      	cmp	r3, #2
 800437c:	d11b      	bne.n	80043b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800439c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	e144      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	617b      	str	r3, [r7, #20]
 80043ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80043cc:	e138      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	f200 80f1 	bhi.w	80045ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d123      	bne.n	8004428 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f001 f843 	bl	8005470 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e139      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004426:	e10b      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	2b02      	cmp	r3, #2
 800442e:	d14e      	bne.n	80044ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004436:	2200      	movs	r2, #0
 8004438:	4906      	ldr	r1, [pc, #24]	; (8004454 <HAL_I2C_Mem_Read+0x22c>)
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 fec0 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e10e      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
 800444a:	bf00      	nop
 800444c:	00100002 	.word	0x00100002
 8004450:	ffff0000 	.word	0xffff0000
 8004454:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044cc:	e0b8      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2200      	movs	r2, #0
 80044d6:	4966      	ldr	r1, [pc, #408]	; (8004670 <HAL_I2C_Mem_Read+0x448>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 fe71 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0bf      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2200      	movs	r2, #0
 8004532:	494f      	ldr	r1, [pc, #316]	; (8004670 <HAL_I2C_Mem_Read+0x448>)
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fe43 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e091      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	b29a      	uxth	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b8:	e042      	b.n	8004640 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 ff56 	bl	8005470 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e04c      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d118      	bne.n	8004640 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	f47f aec2 	bne.w	80043ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	00010004 	.word	0x00010004

08004674 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	; 0x30
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800468e:	f7fe fa7f 	bl	8002b90 <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	f040 8176 	bne.w	8004992 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046a6:	4b95      	ldr	r3, [pc, #596]	; (80048fc <HAL_I2C_Mem_Read_DMA+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	4a94      	ldr	r2, [pc, #592]	; (8004900 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0a1a      	lsrs	r2, r3, #8
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d116      	bne.n	80046fa <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e14c      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d0db      	beq.n	80046c0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004712:	2302      	movs	r3, #2
 8004714:	e13e      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d007      	beq.n	800473c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2222      	movs	r2, #34	; 0x22
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2240      	movs	r2, #64	; 0x40
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a62      	ldr	r2, [pc, #392]	; (8004904 <HAL_I2C_Mem_Read_DMA+0x290>)
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800477e:	897a      	ldrh	r2, [r7, #10]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80cc 	beq.w	8004938 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d02d      	beq.n	8004804 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	4a56      	ldr	r2, [pc, #344]	; (8004908 <HAL_I2C_Mem_Read_DMA+0x294>)
 80047ae:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	4a55      	ldr	r2, [pc, #340]	; (800490c <HAL_I2C_Mem_Read_DMA+0x298>)
 80047b6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	2200      	movs	r2, #0
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	2200      	movs	r2, #0
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	2200      	movs	r2, #0
 80047ce:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	2200      	movs	r2, #0
 80047d6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3310      	adds	r3, #16
 80047e2:	4619      	mov	r1, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	461a      	mov	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ee:	f7fe fd56 	bl	800329e <HAL_DMA_Start_IT>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80047f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f040 8087 	bne.w	8004910 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004802:	e013      	b.n	800482c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e0b3      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800482c:	88f8      	ldrh	r0, [r7, #6]
 800482e:	893a      	ldrh	r2, [r7, #8]
 8004830:	8979      	ldrh	r1, [r7, #10]
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	2323      	movs	r3, #35	; 0x23
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4603      	mov	r3, r0
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fac5 	bl	8004dcc <I2C_RequestMemoryRead>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d023      	beq.n	8004890 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fd7e 	bl	800334e <HAL_DMA_Abort_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	2200      	movs	r2, #0
 800485e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800486e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e081      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	2b01      	cmp	r3, #1
 8004896:	d108      	bne.n	80048aa <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e007      	b.n	80048ba <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	61bb      	str	r3, [r7, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	61bb      	str	r3, [r7, #24]
 80048ce:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f6:	605a      	str	r2, [r3, #4]
 80048f8:	e049      	b.n	800498e <HAL_I2C_Mem_Read_DMA+0x31a>
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000
 8004900:	14f8b589 	.word	0x14f8b589
 8004904:	ffff0000 	.word	0xffff0000
 8004908:	08004f9d 	.word	0x08004f9d
 800490c:	08005147 	.word	0x08005147
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f043 0210 	orr.w	r2, r3, #16
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e02d      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004938:	88f8      	ldrh	r0, [r7, #6]
 800493a:	893a      	ldrh	r2, [r7, #8]
 800493c:	8979      	ldrh	r1, [r7, #10]
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	2323      	movs	r3, #35	; 0x23
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	4603      	mov	r3, r0
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 fa3f 	bl	8004dcc <I2C_RequestMemoryRead>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e01d      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e000      	b.n	8004994 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8004992:	2302      	movs	r3, #2
  }
}
 8004994:	4618      	mov	r0, r3
 8004996:	3728      	adds	r7, #40	; 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d006      	beq.n	8004a2a <I2C_MasterRequestWrite+0x2a>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d003      	beq.n	8004a2a <I2C_MasterRequestWrite+0x2a>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a28:	d108      	bne.n	8004a3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e00b      	b.n	8004a54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b12      	cmp	r3, #18
 8004a42:	d107      	bne.n	8004a54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fbad 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7a:	d103      	bne.n	8004a84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e035      	b.n	8004af4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d108      	bne.n	8004aa4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	461a      	mov	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004aa0:	611a      	str	r2, [r3, #16]
 8004aa2:	e01b      	b.n	8004adc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004aa4:	897b      	ldrh	r3, [r7, #10]
 8004aa6:	11db      	asrs	r3, r3, #7
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f063 030f 	orn	r3, r3, #15
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	490e      	ldr	r1, [pc, #56]	; (8004afc <I2C_MasterRequestWrite+0xfc>)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fbd3 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e010      	b.n	8004af4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	4907      	ldr	r1, [pc, #28]	; (8004b00 <I2C_MasterRequestWrite+0x100>)
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fbc3 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	00010008 	.word	0x00010008
 8004b00:	00010002 	.word	0x00010002

08004b04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	607a      	str	r2, [r7, #4]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	460b      	mov	r3, r1
 8004b12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d006      	beq.n	8004b3e <I2C_MasterRequestRead+0x3a>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d003      	beq.n	8004b3e <I2C_MasterRequestRead+0x3a>
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b3c:	d108      	bne.n	8004b50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e00b      	b.n	8004b68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	2b11      	cmp	r3, #17
 8004b56:	d107      	bne.n	8004b68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fb23 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d103      	bne.n	8004b98 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e079      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba4:	d108      	bne.n	8004bb8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ba6:	897b      	ldrh	r3, [r7, #10]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]
 8004bb6:	e05f      	b.n	8004c78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bb8:	897b      	ldrh	r3, [r7, #10]
 8004bba:	11db      	asrs	r3, r3, #7
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0306 	and.w	r3, r3, #6
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f063 030f 	orn	r3, r3, #15
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4930      	ldr	r1, [pc, #192]	; (8004c98 <I2C_MasterRequestRead+0x194>)
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fb49 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e054      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	4929      	ldr	r1, [pc, #164]	; (8004c9c <I2C_MasterRequestRead+0x198>)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fb39 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e044      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fac1 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c52:	d103      	bne.n	8004c5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e017      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	11db      	asrs	r3, r3, #7
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	f003 0306 	and.w	r3, r3, #6
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f063 030e 	orn	r3, r3, #14
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	4907      	ldr	r1, [pc, #28]	; (8004c9c <I2C_MasterRequestRead+0x198>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 faf5 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	00010008 	.word	0x00010008
 8004c9c:	00010002 	.word	0x00010002

08004ca0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	817b      	strh	r3, [r7, #10]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	813b      	strh	r3, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fa72 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf0:	d103      	bne.n	8004cfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e05f      	b.n	8004dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cfe:	897b      	ldrh	r3, [r7, #10]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	492d      	ldr	r1, [pc, #180]	; (8004dc8 <I2C_RequestMemoryWrite+0x128>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 faaa 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e04c      	b.n	8004dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3c:	6a39      	ldr	r1, [r7, #32]
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 fb14 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d107      	bne.n	8004d62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e02b      	b.n	8004dbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d105      	bne.n	8004d78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d6c:	893b      	ldrh	r3, [r7, #8]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	611a      	str	r2, [r3, #16]
 8004d76:	e021      	b.n	8004dbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d78:	893b      	ldrh	r3, [r7, #8]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 faee 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e005      	b.n	8004dbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db2:	893b      	ldrh	r3, [r7, #8]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	00010002 	.word	0x00010002

08004dcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4603      	mov	r3, r0
 8004ddc:	817b      	strh	r3, [r7, #10]
 8004dde:	460b      	mov	r3, r1
 8004de0:	813b      	strh	r3, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f9d4 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	d103      	bne.n	8004e36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e0aa      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e3a:	897b      	ldrh	r3, [r7, #10]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	6a3a      	ldr	r2, [r7, #32]
 8004e4e:	4952      	ldr	r1, [pc, #328]	; (8004f98 <I2C_RequestMemoryRead+0x1cc>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fa0c 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e097      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e78:	6a39      	ldr	r1, [r7, #32]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa76 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d107      	bne.n	8004e9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e076      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d105      	bne.n	8004eb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ea8:	893b      	ldrh	r3, [r7, #8]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]
 8004eb2:	e021      	b.n	8004ef8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004eb4:	893b      	ldrh	r3, [r7, #8]
 8004eb6:	0a1b      	lsrs	r3, r3, #8
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	6a39      	ldr	r1, [r7, #32]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 fa50 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d107      	bne.n	8004eea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e050      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eee:	893b      	ldrh	r3, [r7, #8]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	6a39      	ldr	r1, [r7, #32]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fa35 	bl	800536c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00d      	beq.n	8004f24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d107      	bne.n	8004f20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e035      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f93d 	bl	80051c0 <I2C_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00d      	beq.n	8004f68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5a:	d103      	bne.n	8004f64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e013      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f68:	897b      	ldrh	r3, [r7, #10]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	6a3a      	ldr	r2, [r7, #32]
 8004f7c:	4906      	ldr	r1, [pc, #24]	; (8004f98 <I2C_RequestMemoryRead+0x1cc>)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f975 	bl	800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	00010002 	.word	0x00010002

08004f9c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004fce:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	2200      	movs	r2, #0
 8004fde:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	2200      	movs	r2, #0
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004ff6:	2b21      	cmp	r3, #33	; 0x21
 8004ff8:	d007      	beq.n	800500a <I2C_DMAXferCplt+0x6e>
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005000:	2b22      	cmp	r3, #34	; 0x22
 8005002:	d131      	bne.n	8005068 <I2C_DMAXferCplt+0xcc>
 8005004:	7cbb      	ldrb	r3, [r7, #18]
 8005006:	2b20      	cmp	r3, #32
 8005008:	d12e      	bne.n	8005068 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005018:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2200      	movs	r2, #0
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005020:	7cfb      	ldrb	r3, [r7, #19]
 8005022:	2b29      	cmp	r3, #41	; 0x29
 8005024:	d10a      	bne.n	800503c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2221      	movs	r2, #33	; 0x21
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2228      	movs	r2, #40	; 0x28
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f7ff fcbb 	bl	80049b0 <HAL_I2C_SlaveTxCpltCallback>
 800503a:	e00c      	b.n	8005056 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	2b2a      	cmp	r3, #42	; 0x2a
 8005040:	d109      	bne.n	8005056 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2222      	movs	r2, #34	; 0x22
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2228      	movs	r2, #40	; 0x28
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	f7ff fcb7 	bl	80049c4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005064:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005066:	e06a      	b.n	800513e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d064      	beq.n	800513e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d107      	bne.n	800508e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800509c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050a4:	d009      	beq.n	80050ba <I2C_DMAXferCplt+0x11e>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d006      	beq.n	80050ba <I2C_DMAXferCplt+0x11e>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050b2:	d002      	beq.n	80050ba <I2C_DMAXferCplt+0x11e>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d107      	bne.n	80050ca <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050d8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80050f8:	6978      	ldr	r0, [r7, #20]
 80050fa:	f7ff fc77 	bl	80049ec <HAL_I2C_ErrorCallback>
}
 80050fe:	e01e      	b.n	800513e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d10a      	bne.n	800512a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005122:	6978      	ldr	r0, [r7, #20]
 8005124:	f7ff fc58 	bl	80049d8 <HAL_I2C_MemRxCpltCallback>
}
 8005128:	e009      	b.n	800513e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2212      	movs	r2, #18
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005138:	6978      	ldr	r0, [r7, #20]
 800513a:	f7ff fc2f 	bl	800499c <HAL_I2C_MasterRxCpltCallback>
}
 800513e:	bf00      	nop
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	2200      	movs	r2, #0
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	2200      	movs	r2, #0
 8005172:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe f90c 	bl	8003392 <HAL_DMA_GetError>
 800517a:	4603      	mov	r3, r0
 800517c:	2b02      	cmp	r3, #2
 800517e:	d01b      	beq.n	80051b8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f043 0210 	orr.w	r2, r3, #16
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f7ff fc1a 	bl	80049ec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d0:	e025      	b.n	800521e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d021      	beq.n	800521e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fd fcd9 	bl	8002b90 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d116      	bne.n	800521e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f043 0220 	orr.w	r2, r3, #32
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e023      	b.n	8005266 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10d      	bne.n	8005244 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	e00c      	b.n	800525e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	43da      	mvns	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4013      	ands	r3, r2
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	429a      	cmp	r2, r3
 8005262:	d0b6      	beq.n	80051d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800527c:	e051      	b.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528c:	d123      	bne.n	80052d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0204 	orr.w	r2, r3, #4
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e046      	b.n	8005364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d021      	beq.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052de:	f7fd fc57 	bl	8002b90 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d116      	bne.n	8005322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f043 0220 	orr.w	r2, r3, #32
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e020      	b.n	8005364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	0c1b      	lsrs	r3, r3, #16
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10c      	bne.n	8005346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	bf14      	ite	ne
 800533e:	2301      	movne	r3, #1
 8005340:	2300      	moveq	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	e00b      	b.n	800535e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	43da      	mvns	r2, r3
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4013      	ands	r3, r2
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d18d      	bne.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005378:	e02d      	b.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f8ce 	bl	800551c <I2C_IsAcknowledgeFailed>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e02d      	b.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d021      	beq.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fd fbfd 	bl	8002b90 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d116      	bne.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e007      	b.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d1ca      	bne.n	800537a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	60f8      	str	r0, [r7, #12]
 80053f6:	60b9      	str	r1, [r7, #8]
 80053f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053fa:	e02d      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f88d 	bl	800551c <I2C_IsAcknowledgeFailed>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e02d      	b.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d021      	beq.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005414:	f7fd fbbc 	bl	8002b90 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e007      	b.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d1ca      	bne.n	80053fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800547c:	e042      	b.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b10      	cmp	r3, #16
 800548a:	d119      	bne.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0210 	mvn.w	r2, #16
 8005494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e029      	b.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c0:	f7fd fb66 	bl	8002b90 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d302      	bcc.n	80054d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d116      	bne.n	8005504 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	f043 0220 	orr.w	r2, r3, #32
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e007      	b.n	8005514 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550e:	2b40      	cmp	r3, #64	; 0x40
 8005510:	d1b5      	bne.n	800547e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005532:	d11b      	bne.n	800556c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800553c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	f043 0204 	orr.w	r2, r3, #4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
	...

0800557c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4b20      	ldr	r3, [pc, #128]	; (800560c <HAL_PWREx_EnableOverDrive+0x90>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a1f      	ldr	r2, [pc, #124]	; (800560c <HAL_PWREx_EnableOverDrive+0x90>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_PWREx_EnableOverDrive+0x90>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055a2:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <HAL_PWREx_EnableOverDrive+0x94>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055a8:	f7fd faf2 	bl	8002b90 <HAL_GetTick>
 80055ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055ae:	e009      	b.n	80055c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055b0:	f7fd faee 	bl	8002b90 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055be:	d901      	bls.n	80055c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e01f      	b.n	8005604 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_PWREx_EnableOverDrive+0x98>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d1ee      	bne.n	80055b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <HAL_PWREx_EnableOverDrive+0x9c>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055d8:	f7fd fada 	bl	8002b90 <HAL_GetTick>
 80055dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055de:	e009      	b.n	80055f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055e0:	f7fd fad6 	bl	8002b90 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055ee:	d901      	bls.n	80055f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e007      	b.n	8005604 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055f4:	4b07      	ldr	r3, [pc, #28]	; (8005614 <HAL_PWREx_EnableOverDrive+0x98>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005600:	d1ee      	bne.n	80055e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40023800 	.word	0x40023800
 8005610:	420e0040 	.word	0x420e0040
 8005614:	40007000 	.word	0x40007000
 8005618:	420e0044 	.word	0x420e0044

0800561c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0cc      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005630:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d90c      	bls.n	8005658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0b8      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d020      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005670:	4b59      	ldr	r3, [pc, #356]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a58      	ldr	r2, [pc, #352]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800567a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005688:	4b53      	ldr	r3, [pc, #332]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4a52      	ldr	r2, [pc, #328]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005694:	4b50      	ldr	r3, [pc, #320]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	494d      	ldr	r1, [pc, #308]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d044      	beq.n	800573c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ba:	4b47      	ldr	r3, [pc, #284]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d119      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e07f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d003      	beq.n	80056da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d107      	bne.n	80056ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e06f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ea:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e067      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056fa:	4b37      	ldr	r3, [pc, #220]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 0203 	bic.w	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4934      	ldr	r1, [pc, #208]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005708:	4313      	orrs	r3, r2
 800570a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800570c:	f7fd fa40 	bl	8002b90 <HAL_GetTick>
 8005710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	e00a      	b.n	800572a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7fd fa3c 	bl	8002b90 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005722:	4293      	cmp	r3, r2
 8005724:	d901      	bls.n	800572a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e04f      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800572a:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 020c 	and.w	r2, r3, #12
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d1eb      	bne.n	8005714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800573c:	4b25      	ldr	r3, [pc, #148]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d20c      	bcs.n	8005764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e032      	b.n	80057ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4916      	ldr	r1, [pc, #88]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	4313      	orrs	r3, r2
 8005780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800578e:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	490e      	ldr	r1, [pc, #56]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057a2:	f000 f841 	bl	8005828 <HAL_RCC_GetSysClockFreq>
 80057a6:	4602      	mov	r2, r0
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	490a      	ldr	r1, [pc, #40]	; (80057dc <HAL_RCC_ClockConfig+0x1c0>)
 80057b4:	5ccb      	ldrb	r3, [r1, r3]
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_ClockConfig+0x1c8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd f9a0 	bl	8002b08 <HAL_InitTick>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40023c00 	.word	0x40023c00
 80057d8:	40023800 	.word	0x40023800
 80057dc:	08009ca0 	.word	0x08009ca0
 80057e0:	20000000 	.word	0x20000000
 80057e4:	2000000c 	.word	0x2000000c

080057e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ec:	4b03      	ldr	r3, [pc, #12]	; (80057fc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ee:	681b      	ldr	r3, [r3, #0]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000000 	.word	0x20000000

08005800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005804:	f7ff fff0 	bl	80057e8 <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0a9b      	lsrs	r3, r3, #10
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4903      	ldr	r1, [pc, #12]	; (8005824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	08009cb0 	.word	0x08009cb0

08005828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800582c:	b0a6      	sub	sp, #152	; 0x98
 800582e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800584e:	4bc8      	ldr	r3, [pc, #800]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b0c      	cmp	r3, #12
 8005858:	f200 817e 	bhi.w	8005b58 <HAL_RCC_GetSysClockFreq+0x330>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <HAL_RCC_GetSysClockFreq+0x3c>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005899 	.word	0x08005899
 8005868:	08005b59 	.word	0x08005b59
 800586c:	08005b59 	.word	0x08005b59
 8005870:	08005b59 	.word	0x08005b59
 8005874:	080058a1 	.word	0x080058a1
 8005878:	08005b59 	.word	0x08005b59
 800587c:	08005b59 	.word	0x08005b59
 8005880:	08005b59 	.word	0x08005b59
 8005884:	080058a9 	.word	0x080058a9
 8005888:	08005b59 	.word	0x08005b59
 800588c:	08005b59 	.word	0x08005b59
 8005890:	08005b59 	.word	0x08005b59
 8005894:	08005a13 	.word	0x08005a13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005898:	4bb6      	ldr	r3, [pc, #728]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x34c>)
 800589a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800589e:	e15f      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a0:	4bb5      	ldr	r3, [pc, #724]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x350>)
 80058a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80058a6:	e15b      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058a8:	4bb1      	ldr	r3, [pc, #708]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b4:	4bae      	ldr	r3, [pc, #696]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d031      	beq.n	8005924 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c0:	4bab      	ldr	r3, [pc, #684]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	099b      	lsrs	r3, r3, #6
 80058c6:	2200      	movs	r2, #0
 80058c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80058ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d2:	663b      	str	r3, [r7, #96]	; 0x60
 80058d4:	2300      	movs	r3, #0
 80058d6:	667b      	str	r3, [r7, #100]	; 0x64
 80058d8:	4ba7      	ldr	r3, [pc, #668]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x350>)
 80058da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80058de:	462a      	mov	r2, r5
 80058e0:	fb03 f202 	mul.w	r2, r3, r2
 80058e4:	2300      	movs	r3, #0
 80058e6:	4621      	mov	r1, r4
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	4aa2      	ldr	r2, [pc, #648]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x350>)
 80058f0:	4621      	mov	r1, r4
 80058f2:	fba1 1202 	umull	r1, r2, r1, r2
 80058f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058f8:	460a      	mov	r2, r1
 80058fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80058fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80058fe:	4413      	add	r3, r2
 8005900:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005902:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005906:	2200      	movs	r2, #0
 8005908:	65bb      	str	r3, [r7, #88]	; 0x58
 800590a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800590c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005910:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005914:	f7fb f912 	bl	8000b3c <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005922:	e064      	b.n	80059ee <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005924:	4b92      	ldr	r3, [pc, #584]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	099b      	lsrs	r3, r3, #6
 800592a:	2200      	movs	r2, #0
 800592c:	653b      	str	r3, [r7, #80]	; 0x50
 800592e:	657a      	str	r2, [r7, #84]	; 0x54
 8005930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005936:	64bb      	str	r3, [r7, #72]	; 0x48
 8005938:	2300      	movs	r3, #0
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800593c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005940:	4622      	mov	r2, r4
 8005942:	462b      	mov	r3, r5
 8005944:	f04f 0000 	mov.w	r0, #0
 8005948:	f04f 0100 	mov.w	r1, #0
 800594c:	0159      	lsls	r1, r3, #5
 800594e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005952:	0150      	lsls	r0, r2, #5
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4621      	mov	r1, r4
 800595a:	1a51      	subs	r1, r2, r1
 800595c:	6139      	str	r1, [r7, #16]
 800595e:	4629      	mov	r1, r5
 8005960:	eb63 0301 	sbc.w	r3, r3, r1
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005972:	4659      	mov	r1, fp
 8005974:	018b      	lsls	r3, r1, #6
 8005976:	4651      	mov	r1, sl
 8005978:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800597c:	4651      	mov	r1, sl
 800597e:	018a      	lsls	r2, r1, #6
 8005980:	4651      	mov	r1, sl
 8005982:	ebb2 0801 	subs.w	r8, r2, r1
 8005986:	4659      	mov	r1, fp
 8005988:	eb63 0901 	sbc.w	r9, r3, r1
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005998:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800599c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a0:	4690      	mov	r8, r2
 80059a2:	4699      	mov	r9, r3
 80059a4:	4623      	mov	r3, r4
 80059a6:	eb18 0303 	adds.w	r3, r8, r3
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	462b      	mov	r3, r5
 80059ae:	eb49 0303 	adc.w	r3, r9, r3
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	f04f 0200 	mov.w	r2, #0
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c0:	4629      	mov	r1, r5
 80059c2:	028b      	lsls	r3, r1, #10
 80059c4:	4621      	mov	r1, r4
 80059c6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059ca:	4621      	mov	r1, r4
 80059cc:	028a      	lsls	r2, r1, #10
 80059ce:	4610      	mov	r0, r2
 80059d0:	4619      	mov	r1, r3
 80059d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059d6:	2200      	movs	r2, #0
 80059d8:	643b      	str	r3, [r7, #64]	; 0x40
 80059da:	647a      	str	r2, [r7, #68]	; 0x44
 80059dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059e0:	f7fb f8ac 	bl	8000b3c <__aeabi_uldivmod>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4613      	mov	r3, r2
 80059ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059ee:	4b60      	ldr	r3, [pc, #384]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	0c1b      	lsrs	r3, r3, #16
 80059f4:	f003 0303 	and.w	r3, r3, #3
 80059f8:	3301      	adds	r3, #1
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005a00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005a10:	e0a6      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a12:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d02a      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	099b      	lsrs	r3, r3, #6
 8005a30:	2200      	movs	r2, #0
 8005a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4b4e      	ldr	r3, [pc, #312]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a40:	fb03 f201 	mul.w	r2, r3, r1
 8005a44:	2300      	movs	r3, #0
 8005a46:	fb00 f303 	mul.w	r3, r0, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	4a4a      	ldr	r2, [pc, #296]	; (8005b78 <HAL_RCC_GetSysClockFreq+0x350>)
 8005a4e:	fba0 1202 	umull	r1, r2, r0, r2
 8005a52:	677a      	str	r2, [r7, #116]	; 0x74
 8005a54:	460a      	mov	r2, r1
 8005a56:	673a      	str	r2, [r7, #112]	; 0x70
 8005a58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005a5a:	4413      	add	r3, r2
 8005a5c:	677b      	str	r3, [r7, #116]	; 0x74
 8005a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a62:	2200      	movs	r2, #0
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30
 8005a66:	637a      	str	r2, [r7, #52]	; 0x34
 8005a68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a6c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005a70:	f7fb f864 	bl	8000b3c <__aeabi_uldivmod>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4613      	mov	r3, r2
 8005a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a7e:	e05b      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a80:	4b3b      	ldr	r3, [pc, #236]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	2200      	movs	r2, #0
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	2300      	movs	r3, #0
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	f04f 0000 	mov.w	r0, #0
 8005aa4:	f04f 0100 	mov.w	r1, #0
 8005aa8:	0159      	lsls	r1, r3, #5
 8005aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aae:	0150      	lsls	r0, r2, #5
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005aba:	4649      	mov	r1, r9
 8005abc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005acc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ad0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ad4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ad8:	eb63 050b 	sbc.w	r5, r3, fp
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	00eb      	lsls	r3, r5, #3
 8005ae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aea:	00e2      	lsls	r2, r4, #3
 8005aec:	4614      	mov	r4, r2
 8005aee:	461d      	mov	r5, r3
 8005af0:	4643      	mov	r3, r8
 8005af2:	18e3      	adds	r3, r4, r3
 8005af4:	603b      	str	r3, [r7, #0]
 8005af6:	464b      	mov	r3, r9
 8005af8:	eb45 0303 	adc.w	r3, r5, r3
 8005afc:	607b      	str	r3, [r7, #4]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	028b      	lsls	r3, r1, #10
 8005b0e:	4621      	mov	r1, r4
 8005b10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b14:	4621      	mov	r1, r4
 8005b16:	028a      	lsls	r2, r1, #10
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b20:	2200      	movs	r2, #0
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	61fa      	str	r2, [r7, #28]
 8005b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b2a:	f7fb f807 	bl	8000b3c <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4613      	mov	r3, r2
 8005b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005b38:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <HAL_RCC_GetSysClockFreq+0x348>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	0f1b      	lsrs	r3, r3, #28
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005b56:	e003      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005b5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005b5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3798      	adds	r7, #152	; 0x98
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b6e:	bf00      	nop
 8005b70:	40023800 	.word	0x40023800
 8005b74:	00f42400 	.word	0x00f42400
 8005b78:	016e3600 	.word	0x016e3600

08005b7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e28d      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8083 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005b9c:	4b94      	ldr	r3, [pc, #592]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d019      	beq.n	8005bdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ba8:	4b91      	ldr	r3, [pc, #580]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d106      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bb4:	4b8e      	ldr	r3, [pc, #568]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc0:	d00c      	beq.n	8005bdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc2:	4b8b      	ldr	r3, [pc, #556]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005bca:	2b0c      	cmp	r3, #12
 8005bcc:	d112      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bce:	4b88      	ldr	r3, [pc, #544]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bda:	d10b      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bdc:	4b84      	ldr	r3, [pc, #528]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05b      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x124>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d157      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e25a      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCC_OscConfig+0x90>
 8005bfe:	4b7c      	ldr	r3, [pc, #496]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a7b      	ldr	r2, [pc, #492]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e01d      	b.n	8005c48 <HAL_RCC_OscConfig+0xcc>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCC_OscConfig+0xb4>
 8005c16:	4b76      	ldr	r3, [pc, #472]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a75      	ldr	r2, [pc, #468]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	4b73      	ldr	r3, [pc, #460]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a72      	ldr	r2, [pc, #456]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e00b      	b.n	8005c48 <HAL_RCC_OscConfig+0xcc>
 8005c30:	4b6f      	ldr	r3, [pc, #444]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a6e      	ldr	r2, [pc, #440]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b6c      	ldr	r3, [pc, #432]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fc ff9e 	bl	8002b90 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fc ff9a 	bl	8002b90 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e21f      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6a:	4b61      	ldr	r3, [pc, #388]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0xdc>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fc ff8a 	bl	8002b90 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fc ff86 	bl	8002b90 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	; 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e20b      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c92:	4b57      	ldr	r3, [pc, #348]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x104>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d06f      	beq.n	8005d8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cae:	4b50      	ldr	r3, [pc, #320]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d017      	beq.n	8005cea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005cba:	4b4d      	ldr	r3, [pc, #308]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d105      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005cc6:	4b4a      	ldr	r3, [pc, #296]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00b      	beq.n	8005cea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cd2:	4b47      	ldr	r3, [pc, #284]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005cda:	2b0c      	cmp	r3, #12
 8005cdc:	d11c      	bne.n	8005d18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cde:	4b44      	ldr	r3, [pc, #272]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d116      	bne.n	8005d18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cea:	4b41      	ldr	r3, [pc, #260]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d005      	beq.n	8005d02 <HAL_RCC_OscConfig+0x186>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d001      	beq.n	8005d02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e1d3      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d02:	4b3b      	ldr	r3, [pc, #236]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	4937      	ldr	r1, [pc, #220]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d16:	e03a      	b.n	8005d8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d020      	beq.n	8005d62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d20:	4b34      	ldr	r3, [pc, #208]	; (8005df4 <HAL_RCC_OscConfig+0x278>)
 8005d22:	2201      	movs	r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d26:	f7fc ff33 	bl	8002b90 <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d2e:	f7fc ff2f 	bl	8002b90 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e1b4      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d40:	4b2b      	ldr	r3, [pc, #172]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4c:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	4925      	ldr	r1, [pc, #148]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	600b      	str	r3, [r1, #0]
 8005d60:	e015      	b.n	8005d8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d62:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <HAL_RCC_OscConfig+0x278>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d68:	f7fc ff12 	bl	8002b90 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d70:	f7fc ff0e 	bl	8002b90 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e193      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d82:	4b1b      	ldr	r3, [pc, #108]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0308 	and.w	r3, r3, #8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d036      	beq.n	8005e08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d016      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <HAL_RCC_OscConfig+0x27c>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da8:	f7fc fef2 	bl	8002b90 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005db0:	f7fc feee 	bl	8002b90 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e173      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_OscConfig+0x274>)
 8005dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x234>
 8005dce:	e01b      	b.n	8005e08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dd0:	4b09      	ldr	r3, [pc, #36]	; (8005df8 <HAL_RCC_OscConfig+0x27c>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd6:	f7fc fedb 	bl	8002b90 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ddc:	e00e      	b.n	8005dfc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dde:	f7fc fed7 	bl	8002b90 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d907      	bls.n	8005dfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e15c      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
 8005df0:	40023800 	.word	0x40023800
 8005df4:	42470000 	.word	0x42470000
 8005df8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dfc:	4b8a      	ldr	r3, [pc, #552]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1ea      	bne.n	8005dde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 8097 	beq.w	8005f44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e16:	2300      	movs	r3, #0
 8005e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e1a:	4b83      	ldr	r3, [pc, #524]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10f      	bne.n	8005e46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	4b7f      	ldr	r3, [pc, #508]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	4a7e      	ldr	r2, [pc, #504]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e34:	6413      	str	r3, [r2, #64]	; 0x40
 8005e36:	4b7c      	ldr	r3, [pc, #496]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e42:	2301      	movs	r3, #1
 8005e44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e46:	4b79      	ldr	r3, [pc, #484]	; (800602c <HAL_RCC_OscConfig+0x4b0>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d118      	bne.n	8005e84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e52:	4b76      	ldr	r3, [pc, #472]	; (800602c <HAL_RCC_OscConfig+0x4b0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a75      	ldr	r2, [pc, #468]	; (800602c <HAL_RCC_OscConfig+0x4b0>)
 8005e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e5e:	f7fc fe97 	bl	8002b90 <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e66:	f7fc fe93 	bl	8002b90 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e118      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e78:	4b6c      	ldr	r3, [pc, #432]	; (800602c <HAL_RCC_OscConfig+0x4b0>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f0      	beq.n	8005e66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCC_OscConfig+0x31e>
 8005e8c:	4b66      	ldr	r3, [pc, #408]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e90:	4a65      	ldr	r2, [pc, #404]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	6713      	str	r3, [r2, #112]	; 0x70
 8005e98:	e01c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x358>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x340>
 8005ea2:	4b61      	ldr	r3, [pc, #388]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea6:	4a60      	ldr	r2, [pc, #384]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005ea8:	f043 0304 	orr.w	r3, r3, #4
 8005eac:	6713      	str	r3, [r2, #112]	; 0x70
 8005eae:	4b5e      	ldr	r3, [pc, #376]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	4a5d      	ldr	r2, [pc, #372]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0x358>
 8005ebc:	4b5a      	ldr	r3, [pc, #360]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec0:	4a59      	ldr	r2, [pc, #356]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ec8:	4b57      	ldr	r3, [pc, #348]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	4a56      	ldr	r2, [pc, #344]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005ece:	f023 0304 	bic.w	r3, r3, #4
 8005ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005edc:	f7fc fe58 	bl	8002b90 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ee2:	e00a      	b.n	8005efa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee4:	f7fc fe54 	bl	8002b90 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e0d7      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efa:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0ee      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x368>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fc fe42 	bl	8002b90 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f10:	f7fc fe3e 	bl	8002b90 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e0c1      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f26:	4b40      	ldr	r3, [pc, #256]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1ee      	bne.n	8005f10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f32:	7dfb      	ldrb	r3, [r7, #23]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d105      	bne.n	8005f44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f38:	4b3b      	ldr	r3, [pc, #236]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	4a3a      	ldr	r2, [pc, #232]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80ad 	beq.w	80060a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 030c 	and.w	r3, r3, #12
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d060      	beq.n	800601c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d145      	bne.n	8005fee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f62:	4b33      	ldr	r3, [pc, #204]	; (8006030 <HAL_RCC_OscConfig+0x4b4>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f68:	f7fc fe12 	bl	8002b90 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f6e:	e008      	b.n	8005f82 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f70:	f7fc fe0e 	bl	8002b90 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d901      	bls.n	8005f82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e093      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1f0      	bne.n	8005f70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69da      	ldr	r2, [r3, #28]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	019b      	lsls	r3, r3, #6
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	061b      	lsls	r3, r3, #24
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	071b      	lsls	r3, r3, #28
 8005fba:	491b      	ldr	r1, [pc, #108]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_RCC_OscConfig+0x4b4>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc6:	f7fc fde3 	bl	8002b90 <HAL_GetTick>
 8005fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fce:	f7fc fddf 	bl	8002b90 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e064      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe0:	4b11      	ldr	r3, [pc, #68]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d0f0      	beq.n	8005fce <HAL_RCC_OscConfig+0x452>
 8005fec:	e05c      	b.n	80060a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fee:	4b10      	ldr	r3, [pc, #64]	; (8006030 <HAL_RCC_OscConfig+0x4b4>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff4:	f7fc fdcc 	bl	8002b90 <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ffc:	f7fc fdc8 	bl	8002b90 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e04d      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600e:	4b06      	ldr	r3, [pc, #24]	; (8006028 <HAL_RCC_OscConfig+0x4ac>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1f0      	bne.n	8005ffc <HAL_RCC_OscConfig+0x480>
 800601a:	e045      	b.n	80060a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d107      	bne.n	8006034 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e040      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
 8006028:	40023800 	.word	0x40023800
 800602c:	40007000 	.word	0x40007000
 8006030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006034:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <HAL_RCC_OscConfig+0x538>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d030      	beq.n	80060a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d129      	bne.n	80060a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605a:	429a      	cmp	r2, r3
 800605c:	d122      	bne.n	80060a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006064:	4013      	ands	r3, r2
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800606a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800606c:	4293      	cmp	r3, r2
 800606e:	d119      	bne.n	80060a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	3b01      	subs	r3, #1
 800607e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006080:	429a      	cmp	r2, r3
 8006082:	d10f      	bne.n	80060a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006090:	429a      	cmp	r2, r3
 8006092:	d107      	bne.n	80060a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d001      	beq.n	80060a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40023800 	.word	0x40023800

080060b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e07b      	b.n	80061c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d108      	bne.n	80060e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060da:	d009      	beq.n	80060f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	61da      	str	r2, [r3, #28]
 80060e2:	e005      	b.n	80060f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb fe2a 	bl	8001d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006126:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	431a      	orrs	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800616a:	431a      	orrs	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006174:	ea42 0103 	orr.w	r1, r2, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	f003 0104 	and.w	r1, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	f003 0210 	and.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69da      	ldr	r2, [r3, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
	...

080061cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061d0:	4904      	ldr	r1, [pc, #16]	; (80061e4 <MX_FATFS_Init+0x18>)
 80061d2:	4805      	ldr	r0, [pc, #20]	; (80061e8 <MX_FATFS_Init+0x1c>)
 80061d4:	f002 ff7c 	bl	80090d0 <FATFS_LinkDriver>
 80061d8:	4603      	mov	r3, r0
 80061da:	461a      	mov	r2, r3
 80061dc:	4b03      	ldr	r3, [pc, #12]	; (80061ec <MX_FATFS_Init+0x20>)
 80061de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061e0:	bf00      	nop
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200022ec 	.word	0x200022ec
 80061e8:	20000014 	.word	0x20000014
 80061ec:	200022e8 	.word	0x200022e8

080061f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800620a:	4b06      	ldr	r3, [pc, #24]	; (8006224 <USER_initialize+0x24>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <USER_initialize+0x24>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20000011 	.word	0x20000011

08006228 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <USER_status+0x24>)
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <USER_status+0x24>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	20000011 	.word	0x20000011

08006250 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006260:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
 800627a:	4603      	mov	r3, r0
 800627c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800627e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	4603      	mov	r3, r0
 8006294:	603a      	str	r2, [r7, #0]
 8006296:	71fb      	strb	r3, [r7, #7]
 8006298:	460b      	mov	r3, r1
 800629a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	73fb      	strb	r3, [r7, #15]
    return res;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4603      	mov	r3, r0
 80062b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <disk_status+0x30>)
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	79fa      	ldrb	r2, [r7, #7]
 80062c8:	4905      	ldr	r1, [pc, #20]	; (80062e0 <disk_status+0x30>)
 80062ca:	440a      	add	r2, r1
 80062cc:	7a12      	ldrb	r2, [r2, #8]
 80062ce:	4610      	mov	r0, r2
 80062d0:	4798      	blx	r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20002518 	.word	0x20002518

080062e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4603      	mov	r3, r0
 80062ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	4a0d      	ldr	r2, [pc, #52]	; (800632c <disk_initialize+0x48>)
 80062f6:	5cd3      	ldrb	r3, [r2, r3]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d111      	bne.n	8006320 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	4a0b      	ldr	r2, [pc, #44]	; (800632c <disk_initialize+0x48>)
 8006300:	2101      	movs	r1, #1
 8006302:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	4a09      	ldr	r2, [pc, #36]	; (800632c <disk_initialize+0x48>)
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	4906      	ldr	r1, [pc, #24]	; (800632c <disk_initialize+0x48>)
 8006314:	440a      	add	r2, r1
 8006316:	7a12      	ldrb	r2, [r2, #8]
 8006318:	4610      	mov	r0, r2
 800631a:	4798      	blx	r3
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20002518 	.word	0x20002518

08006330 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	4a0a      	ldr	r2, [pc, #40]	; (800636c <disk_read+0x3c>)
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	689c      	ldr	r4, [r3, #8]
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	4a07      	ldr	r2, [pc, #28]	; (800636c <disk_read+0x3c>)
 8006350:	4413      	add	r3, r2
 8006352:	7a18      	ldrb	r0, [r3, #8]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	47a0      	blx	r4
 800635c:	4603      	mov	r3, r0
 800635e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
}
 8006362:	4618      	mov	r0, r3
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	bd90      	pop	{r4, r7, pc}
 800636a:	bf00      	nop
 800636c:	20002518 	.word	0x20002518

08006370 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006380:	7bfb      	ldrb	r3, [r7, #15]
 8006382:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <disk_write+0x3c>)
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68dc      	ldr	r4, [r3, #12]
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	4a07      	ldr	r2, [pc, #28]	; (80063ac <disk_write+0x3c>)
 8006390:	4413      	add	r3, r2
 8006392:	7a18      	ldrb	r0, [r3, #8]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	47a0      	blx	r4
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]
  return res;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd90      	pop	{r4, r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20002518 	.word	0x20002518

080063b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	603a      	str	r2, [r7, #0]
 80063ba:	71fb      	strb	r3, [r7, #7]
 80063bc:	460b      	mov	r3, r1
 80063be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <disk_ioctl+0x38>)
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	79fa      	ldrb	r2, [r7, #7]
 80063ce:	4906      	ldr	r1, [pc, #24]	; (80063e8 <disk_ioctl+0x38>)
 80063d0:	440a      	add	r2, r1
 80063d2:	7a10      	ldrb	r0, [r2, #8]
 80063d4:	79b9      	ldrb	r1, [r7, #6]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	4798      	blx	r3
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20002518 	.word	0x20002518

080063ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80063fc:	89fb      	ldrh	r3, [r7, #14]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	b21a      	sxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b21b      	sxth	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b21b      	sxth	r3, r3
 800640c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800640e:	89fb      	ldrh	r3, [r7, #14]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3303      	adds	r3, #3
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	3202      	adds	r2, #2
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	3201      	adds	r2, #1
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	021b      	lsls	r3, r3, #8
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	7812      	ldrb	r2, [r2, #0]
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
	return rv;
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	887a      	ldrh	r2, [r7, #2]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	887b      	ldrh	r3, [r7, #2]
 800647c:	0a1b      	lsrs	r3, r3, #8
 800647e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	887a      	ldrh	r2, [r7, #2]
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	0a1b      	lsrs	r3, r3, #8
 80064b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00d      	beq.n	8006526 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	1c53      	adds	r3, r2, #1
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	6179      	str	r1, [r7, #20]
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	3b01      	subs	r3, #1
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f1      	bne.n	800650a <mem_cpy+0x1a>
	}
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006532:	b480      	push	{r7}
 8006534:	b087      	sub	sp, #28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	617a      	str	r2, [r7, #20]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3b01      	subs	r3, #1
 8006552:	607b      	str	r3, [r7, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f3      	bne.n	8006542 <mem_set+0x10>
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	61fa      	str	r2, [r7, #28]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	4619      	mov	r1, r3
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	61ba      	str	r2, [r7, #24]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	1acb      	subs	r3, r1, r3
 8006594:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3b01      	subs	r3, #1
 800659a:	607b      	str	r3, [r7, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <mem_cmp+0x40>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0eb      	beq.n	8006580 <mem_cmp+0x18>

	return r;
 80065a8:	697b      	ldr	r3, [r7, #20]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3724      	adds	r7, #36	; 0x24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065c0:	e002      	b.n	80065c8 <chk_chr+0x12>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3301      	adds	r3, #1
 80065c6:	607b      	str	r3, [r7, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d005      	beq.n	80065dc <chk_chr+0x26>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	461a      	mov	r2, r3
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	4293      	cmp	r3, r2
 80065da:	d1f2      	bne.n	80065c2 <chk_chr+0xc>
	return *str;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	781b      	ldrb	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	60fb      	str	r3, [r7, #12]
 80065fe:	e029      	b.n	8006654 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006600:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <chk_lock+0xb4>)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	4413      	add	r3, r2
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d01d      	beq.n	800664a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800660e:	4a24      	ldr	r2, [pc, #144]	; (80066a0 <chk_lock+0xb4>)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	4413      	add	r3, r2
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d116      	bne.n	800664e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006620:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <chk_lock+0xb4>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4413      	add	r3, r2
 8006628:	3304      	adds	r3, #4
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006630:	429a      	cmp	r2, r3
 8006632:	d10c      	bne.n	800664e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006634:	4a1a      	ldr	r2, [pc, #104]	; (80066a0 <chk_lock+0xb4>)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	4413      	add	r3, r2
 800663c:	3308      	adds	r3, #8
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006644:	429a      	cmp	r2, r3
 8006646:	d102      	bne.n	800664e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006648:	e007      	b.n	800665a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800664a:	2301      	movs	r3, #1
 800664c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d9d2      	bls.n	8006600 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d109      	bne.n	8006674 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <chk_lock+0x80>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d101      	bne.n	8006670 <chk_lock+0x84>
 800666c:	2300      	movs	r3, #0
 800666e:	e010      	b.n	8006692 <chk_lock+0xa6>
 8006670:	2312      	movs	r3, #18
 8006672:	e00e      	b.n	8006692 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <chk_lock+0xa0>
 800667a:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <chk_lock+0xb4>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	4413      	add	r3, r2
 8006682:	330c      	adds	r3, #12
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668a:	d101      	bne.n	8006690 <chk_lock+0xa4>
 800668c:	2310      	movs	r3, #16
 800668e:	e000      	b.n	8006692 <chk_lock+0xa6>
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	200022f8 	.word	0x200022f8

080066a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066aa:	2300      	movs	r3, #0
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	e002      	b.n	80066b6 <enq_lock+0x12>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3301      	adds	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d806      	bhi.n	80066ca <enq_lock+0x26>
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <enq_lock+0x40>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	4413      	add	r3, r2
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f2      	bne.n	80066b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	bf14      	ite	ne
 80066d0:	2301      	movne	r3, #1
 80066d2:	2300      	moveq	r3, #0
 80066d4:	b2db      	uxtb	r3, r3
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	200022f8 	.word	0x200022f8

080066e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80066f2:	2300      	movs	r3, #0
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e01f      	b.n	8006738 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80066f8:	4a41      	ldr	r2, [pc, #260]	; (8006800 <inc_lock+0x118>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	4413      	add	r3, r2
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d113      	bne.n	8006732 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800670a:	4a3d      	ldr	r2, [pc, #244]	; (8006800 <inc_lock+0x118>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	4413      	add	r3, r2
 8006712:	3304      	adds	r3, #4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800671a:	429a      	cmp	r2, r3
 800671c:	d109      	bne.n	8006732 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800671e:	4a38      	ldr	r2, [pc, #224]	; (8006800 <inc_lock+0x118>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	4413      	add	r3, r2
 8006726:	3308      	adds	r3, #8
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800672e:	429a      	cmp	r2, r3
 8006730:	d006      	beq.n	8006740 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d9dc      	bls.n	80066f8 <inc_lock+0x10>
 800673e:	e000      	b.n	8006742 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006740:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d132      	bne.n	80067ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	e002      	b.n	8006754 <inc_lock+0x6c>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d806      	bhi.n	8006768 <inc_lock+0x80>
 800675a:	4a29      	ldr	r2, [pc, #164]	; (8006800 <inc_lock+0x118>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	4413      	add	r3, r2
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1f2      	bne.n	800674e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b02      	cmp	r3, #2
 800676c:	d101      	bne.n	8006772 <inc_lock+0x8a>
 800676e:	2300      	movs	r3, #0
 8006770:	e040      	b.n	80067f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4922      	ldr	r1, [pc, #136]	; (8006800 <inc_lock+0x118>)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	440b      	add	r3, r1
 800677e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	491e      	ldr	r1, [pc, #120]	; (8006800 <inc_lock+0x118>)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	440b      	add	r3, r1
 800678c:	3304      	adds	r3, #4
 800678e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	491a      	ldr	r1, [pc, #104]	; (8006800 <inc_lock+0x118>)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	440b      	add	r3, r1
 800679c:	3308      	adds	r3, #8
 800679e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80067a0:	4a17      	ldr	r2, [pc, #92]	; (8006800 <inc_lock+0x118>)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	4413      	add	r3, r2
 80067a8:	330c      	adds	r3, #12
 80067aa:	2200      	movs	r2, #0
 80067ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <inc_lock+0xe0>
 80067b4:	4a12      	ldr	r2, [pc, #72]	; (8006800 <inc_lock+0x118>)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	4413      	add	r3, r2
 80067bc:	330c      	adds	r3, #12
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <inc_lock+0xe0>
 80067c4:	2300      	movs	r3, #0
 80067c6:	e015      	b.n	80067f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d108      	bne.n	80067e0 <inc_lock+0xf8>
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <inc_lock+0x118>)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	4413      	add	r3, r2
 80067d6:	330c      	adds	r3, #12
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	e001      	b.n	80067e4 <inc_lock+0xfc>
 80067e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e4:	4906      	ldr	r1, [pc, #24]	; (8006800 <inc_lock+0x118>)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	440b      	add	r3, r1
 80067ec:	330c      	adds	r3, #12
 80067ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3714      	adds	r7, #20
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	200022f8 	.word	0x200022f8

08006804 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3b01      	subs	r3, #1
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d825      	bhi.n	8006864 <dec_lock+0x60>
		n = Files[i].ctr;
 8006818:	4a17      	ldr	r2, [pc, #92]	; (8006878 <dec_lock+0x74>)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	4413      	add	r3, r2
 8006820:	330c      	adds	r3, #12
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006826:	89fb      	ldrh	r3, [r7, #14]
 8006828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682c:	d101      	bne.n	8006832 <dec_lock+0x2e>
 800682e:	2300      	movs	r3, #0
 8006830:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006832:	89fb      	ldrh	r3, [r7, #14]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <dec_lock+0x3a>
 8006838:	89fb      	ldrh	r3, [r7, #14]
 800683a:	3b01      	subs	r3, #1
 800683c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800683e:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <dec_lock+0x74>)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	4413      	add	r3, r2
 8006846:	330c      	adds	r3, #12
 8006848:	89fa      	ldrh	r2, [r7, #14]
 800684a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d105      	bne.n	800685e <dec_lock+0x5a>
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <dec_lock+0x74>)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	4413      	add	r3, r2
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	737b      	strb	r3, [r7, #13]
 8006862:	e001      	b.n	8006868 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006864:	2302      	movs	r3, #2
 8006866:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006868:	7b7b      	ldrb	r3, [r7, #13]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	200022f8 	.word	0x200022f8

0800687c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e010      	b.n	80068ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800688a:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <clear_lock+0x44>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	4413      	add	r3, r2
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d105      	bne.n	80068a6 <clear_lock+0x2a>
 800689a:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <clear_lock+0x44>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3301      	adds	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d9eb      	bls.n	800688a <clear_lock+0xe>
	}
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	200022f8 	.word	0x200022f8

080068c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	78db      	ldrb	r3, [r3, #3]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d034      	beq.n	8006942 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7858      	ldrb	r0, [r3, #1]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068e8:	2301      	movs	r3, #1
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	f7ff fd40 	bl	8006370 <disk_write>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
 80068fa:	e022      	b.n	8006942 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	429a      	cmp	r2, r3
 8006910:	d217      	bcs.n	8006942 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	789b      	ldrb	r3, [r3, #2]
 8006916:	613b      	str	r3, [r7, #16]
 8006918:	e010      	b.n	800693c <sync_window+0x78>
					wsect += fs->fsize;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	7858      	ldrb	r0, [r3, #1]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800692e:	2301      	movs	r3, #1
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	f7ff fd1d 	bl	8006370 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3b01      	subs	r3, #1
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d8eb      	bhi.n	800691a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d01b      	beq.n	800699c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff ffad 	bl	80068c4 <sync_window>
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d113      	bne.n	800699c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7858      	ldrb	r0, [r3, #1]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800697e:	2301      	movs	r3, #1
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	f7ff fcd5 	bl	8006330 <disk_read>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800698c:	f04f 33ff 	mov.w	r3, #4294967295
 8006990:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006992:	2301      	movs	r3, #1
 8006994:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff ff87 	bl	80068c4 <sync_window>
 80069b6:	4603      	mov	r3, r0
 80069b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d159      	bne.n	8006a74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d149      	bne.n	8006a5c <sync_fs+0xb4>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	791b      	ldrb	r3, [r3, #4]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d145      	bne.n	8006a5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	899b      	ldrh	r3, [r3, #12]
 80069da:	461a      	mov	r2, r3
 80069dc:	2100      	movs	r1, #0
 80069de:	f7ff fda8 	bl	8006532 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3338      	adds	r3, #56	; 0x38
 80069e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069ea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7ff fd37 	bl	8006462 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3338      	adds	r3, #56	; 0x38
 80069f8:	4921      	ldr	r1, [pc, #132]	; (8006a80 <sync_fs+0xd8>)
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fd4c 	bl	8006498 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3338      	adds	r3, #56	; 0x38
 8006a04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a08:	491e      	ldr	r1, [pc, #120]	; (8006a84 <sync_fs+0xdc>)
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff fd44 	bl	8006498 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3338      	adds	r3, #56	; 0x38
 8006a14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f7ff fd3a 	bl	8006498 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3338      	adds	r3, #56	; 0x38
 8006a28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f7ff fd30 	bl	8006498 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	1c5a      	adds	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	7858      	ldrb	r0, [r3, #1]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a50:	2301      	movs	r3, #1
 8006a52:	f7ff fc8d 	bl	8006370 <disk_write>
			fs->fsi_flag = 0;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	785b      	ldrb	r3, [r3, #1]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7ff fca3 	bl	80063b0 <disk_ioctl>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <sync_fs+0xcc>
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	41615252 	.word	0x41615252
 8006a84:	61417272 	.word	0x61417272

08006a88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	3b02      	subs	r3, #2
 8006a96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	3b02      	subs	r3, #2
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d301      	bcc.n	8006aa8 <clust2sect+0x20>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	e008      	b.n	8006aba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	895b      	ldrh	r3, [r3, #10]
 8006aac:	461a      	mov	r2, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	fb03 f202 	mul.w	r2, r3, r2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	4413      	add	r3, r2
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b086      	sub	sp, #24
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d904      	bls.n	8006ae6 <get_fat+0x20>
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e0bb      	b.n	8006c64 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295
 8006af0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	f000 8083 	beq.w	8006c02 <get_fat+0x13c>
 8006afc:	2b03      	cmp	r3, #3
 8006afe:	f300 80a7 	bgt.w	8006c50 <get_fat+0x18a>
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d002      	beq.n	8006b0c <get_fat+0x46>
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d056      	beq.n	8006bb8 <get_fat+0xf2>
 8006b0a:	e0a1      	b.n	8006c50 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	085b      	lsrs	r3, r3, #1
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	899b      	ldrh	r3, [r3, #12]
 8006b22:	4619      	mov	r1, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b2a:	4413      	add	r3, r2
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6938      	ldr	r0, [r7, #16]
 8006b30:	f7ff ff0c 	bl	800694c <move_window>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f040 808d 	bne.w	8006c56 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	60fa      	str	r2, [r7, #12]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	8992      	ldrh	r2, [r2, #12]
 8006b46:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b4a:	fb01 f202 	mul.w	r2, r1, r2
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4413      	add	r3, r2
 8006b54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	899b      	ldrh	r3, [r3, #12]
 8006b62:	4619      	mov	r1, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7ff feec 	bl	800694c <move_window>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d16f      	bne.n	8006c5a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	899b      	ldrh	r3, [r3, #12]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b86:	fb01 f202 	mul.w	r2, r1, r2
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	461a      	mov	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <get_fat+0xe8>
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	091b      	lsrs	r3, r3, #4
 8006bac:	e002      	b.n	8006bb4 <get_fat+0xee>
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb4:	617b      	str	r3, [r7, #20]
			break;
 8006bb6:	e055      	b.n	8006c64 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	899b      	ldrh	r3, [r3, #12]
 8006bc0:	085b      	lsrs	r3, r3, #1
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bcc:	4413      	add	r3, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6938      	ldr	r0, [r7, #16]
 8006bd2:	f7ff febb 	bl	800694c <move_window>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d140      	bne.n	8006c5e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	8992      	ldrh	r2, [r2, #12]
 8006bea:	fbb3 f0f2 	udiv	r0, r3, r2
 8006bee:	fb00 f202 	mul.w	r2, r0, r2
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff fbf8 	bl	80063ec <ld_word>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	617b      	str	r3, [r7, #20]
			break;
 8006c00:	e030      	b.n	8006c64 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	899b      	ldrh	r3, [r3, #12]
 8006c0a:	089b      	lsrs	r3, r3, #2
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c16:	4413      	add	r3, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6938      	ldr	r0, [r7, #16]
 8006c1c:	f7ff fe96 	bl	800694c <move_window>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d11d      	bne.n	8006c62 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	8992      	ldrh	r2, [r2, #12]
 8006c34:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c38:	fb00 f202 	mul.w	r2, r0, r2
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	440b      	add	r3, r1
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fbeb 	bl	800641c <ld_dword>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c4c:	617b      	str	r3, [r7, #20]
			break;
 8006c4e:	e009      	b.n	8006c64 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c50:	2301      	movs	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e006      	b.n	8006c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c56:	bf00      	nop
 8006c58:	e004      	b.n	8006c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c5a:	bf00      	nop
 8006c5c:	e002      	b.n	8006c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c5e:	bf00      	nop
 8006c60:	e000      	b.n	8006c64 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c62:	bf00      	nop
		}
	}

	return val;
 8006c64:	697b      	ldr	r3, [r7, #20]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c6e:	b590      	push	{r4, r7, lr}
 8006c70:	b089      	sub	sp, #36	; 0x24
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	f240 8102 	bls.w	8006e8a <put_fat+0x21c>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	f080 80fc 	bcs.w	8006e8a <put_fat+0x21c>
		switch (fs->fs_type) {
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	f000 80b6 	beq.w	8006e08 <put_fat+0x19a>
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	f300 80fd 	bgt.w	8006e9c <put_fat+0x22e>
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d003      	beq.n	8006cae <put_fat+0x40>
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	f000 8083 	beq.w	8006db2 <put_fat+0x144>
 8006cac:	e0f6      	b.n	8006e9c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	4413      	add	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	899b      	ldrh	r3, [r3, #12]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ccc:	4413      	add	r3, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff fe3b 	bl	800694c <move_window>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cda:	7ffb      	ldrb	r3, [r7, #31]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f040 80d6 	bne.w	8006e8e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	61ba      	str	r2, [r7, #24]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	8992      	ldrh	r2, [r2, #12]
 8006cf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cf6:	fb00 f202 	mul.w	r2, r0, r2
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <put_fat+0xb8>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	b25a      	sxtb	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	b25b      	sxtb	r3, r3
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	e001      	b.n	8006d2a <put_fat+0xbc>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	899b      	ldrh	r3, [r3, #12]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d44:	4413      	add	r3, r2
 8006d46:	4619      	mov	r1, r3
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff fdff 	bl	800694c <move_window>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d52:	7ffb      	ldrb	r3, [r7, #31]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f040 809c 	bne.w	8006e92 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	899b      	ldrh	r3, [r3, #12]
 8006d64:	461a      	mov	r2, r3
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d6c:	fb00 f202 	mul.w	r2, r0, r2
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	440b      	add	r3, r1
 8006d74:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <put_fat+0x11a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e00e      	b.n	8006da6 <put_fat+0x138>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b25b      	sxtb	r3, r3
 8006d8e:	f023 030f 	bic.w	r3, r3, #15
 8006d92:	b25a      	sxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	b25b      	sxtb	r3, r3
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	4313      	orrs	r3, r2
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	70da      	strb	r2, [r3, #3]
			break;
 8006db0:	e074      	b.n	8006e9c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	899b      	ldrh	r3, [r3, #12]
 8006dba:	085b      	lsrs	r3, r3, #1
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fdbe 	bl	800694c <move_window>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dd4:	7ffb      	ldrb	r3, [r7, #31]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d15d      	bne.n	8006e96 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	8992      	ldrh	r2, [r2, #12]
 8006de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dec:	fb00 f202 	mul.w	r2, r0, r2
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	440b      	add	r3, r1
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	b292      	uxth	r2, r2
 8006df8:	4611      	mov	r1, r2
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fb31 	bl	8006462 <st_word>
			fs->wflag = 1;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2201      	movs	r2, #1
 8006e04:	70da      	strb	r2, [r3, #3]
			break;
 8006e06:	e049      	b.n	8006e9c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	899b      	ldrh	r3, [r3, #12]
 8006e10:	089b      	lsrs	r3, r3, #2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	4619      	mov	r1, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff fd93 	bl	800694c <move_window>
 8006e26:	4603      	mov	r3, r0
 8006e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e2a:	7ffb      	ldrb	r3, [r7, #31]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d134      	bne.n	8006e9a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	8992      	ldrh	r2, [r2, #12]
 8006e44:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e48:	fb00 f202 	mul.w	r2, r0, r2
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	440b      	add	r3, r1
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fae3 	bl	800641c <ld_dword>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006e5c:	4323      	orrs	r3, r4
 8006e5e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	8992      	ldrh	r2, [r2, #12]
 8006e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e72:	fb00 f202 	mul.w	r2, r0, r2
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	440b      	add	r3, r1
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fb0b 	bl	8006498 <st_dword>
			fs->wflag = 1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	70da      	strb	r2, [r3, #3]
			break;
 8006e88:	e008      	b.n	8006e9c <put_fat+0x22e>
		}
	}
 8006e8a:	bf00      	nop
 8006e8c:	e006      	b.n	8006e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e8e:	bf00      	nop
 8006e90:	e004      	b.n	8006e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e92:	bf00      	nop
 8006e94:	e002      	b.n	8006e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <put_fat+0x22e>
			if (res != FR_OK) break;
 8006e9a:	bf00      	nop
	return res;
 8006e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3724      	adds	r7, #36	; 0x24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd90      	pop	{r4, r7, pc}

08006ea6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b088      	sub	sp, #32
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d904      	bls.n	8006ecc <remove_chain+0x26>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d301      	bcc.n	8006ed0 <remove_chain+0x2a>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e04b      	b.n	8006f68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	69b8      	ldr	r0, [r7, #24]
 8006ede:	f7ff fec6 	bl	8006c6e <put_fat>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006ee6:	7ffb      	ldrb	r3, [r7, #31]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <remove_chain+0x4a>
 8006eec:	7ffb      	ldrb	r3, [r7, #31]
 8006eee:	e03b      	b.n	8006f68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff fde7 	bl	8006ac6 <get_fat>
 8006ef8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d031      	beq.n	8006f64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <remove_chain+0x64>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e02e      	b.n	8006f68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f10:	d101      	bne.n	8006f16 <remove_chain+0x70>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e028      	b.n	8006f68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f16:	2200      	movs	r2, #0
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	69b8      	ldr	r0, [r7, #24]
 8006f1c:	f7ff fea7 	bl	8006c6e <put_fat>
 8006f20:	4603      	mov	r3, r0
 8006f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f24:	7ffb      	ldrb	r3, [r7, #31]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <remove_chain+0x88>
 8006f2a:	7ffb      	ldrb	r3, [r7, #31]
 8006f2c:	e01c      	b.n	8006f68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	3b02      	subs	r3, #2
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d20b      	bcs.n	8006f54 <remove_chain+0xae>
			fs->free_clst++;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	791b      	ldrb	r3, [r3, #4]
 8006f4a:	f043 0301 	orr.w	r3, r3, #1
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d3c6      	bcc.n	8006ef0 <remove_chain+0x4a>
 8006f62:	e000      	b.n	8006f66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006f64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10d      	bne.n	8006fa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <create_chain+0x2c>
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d31b      	bcc.n	8006fd4 <create_chain+0x64>
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	61bb      	str	r3, [r7, #24]
 8006fa0:	e018      	b.n	8006fd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f7ff fd8e 	bl	8006ac6 <get_fat>
 8006faa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d801      	bhi.n	8006fb6 <create_chain+0x46>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e070      	b.n	8007098 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d101      	bne.n	8006fc2 <create_chain+0x52>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e06a      	b.n	8007098 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d201      	bcs.n	8006fd0 <create_chain+0x60>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	e063      	b.n	8007098 <create_chain+0x128>
		scl = clst;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d307      	bcc.n	8006ff8 <create_chain+0x88>
				ncl = 2;
 8006fe8:	2302      	movs	r3, #2
 8006fea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d901      	bls.n	8006ff8 <create_chain+0x88>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	e04f      	b.n	8007098 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006ff8:	69f9      	ldr	r1, [r7, #28]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fd63 	bl	8006ac6 <get_fat>
 8007000:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d003      	beq.n	8007016 <create_chain+0xa6>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d101      	bne.n	800701a <create_chain+0xaa>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	e03e      	b.n	8007098 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	429a      	cmp	r2, r3
 8007020:	d1da      	bne.n	8006fd8 <create_chain+0x68>
 8007022:	2300      	movs	r3, #0
 8007024:	e038      	b.n	8007098 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007026:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007028:	f04f 32ff 	mov.w	r2, #4294967295
 800702c:	69f9      	ldr	r1, [r7, #28]
 800702e:	6938      	ldr	r0, [r7, #16]
 8007030:	f7ff fe1d 	bl	8006c6e <put_fat>
 8007034:	4603      	mov	r3, r0
 8007036:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007038:	7dfb      	ldrb	r3, [r7, #23]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <create_chain+0xe2>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d006      	beq.n	8007052 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6938      	ldr	r0, [r7, #16]
 800704a:	f7ff fe10 	bl	8006c6e <put_fat>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d116      	bne.n	8007086 <create_chain+0x116>
		fs->last_clst = ncl;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	69fa      	ldr	r2, [r7, #28]
 800705c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	3b02      	subs	r3, #2
 8007068:	429a      	cmp	r2, r3
 800706a:	d804      	bhi.n	8007076 <create_chain+0x106>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	1e5a      	subs	r2, r3, #1
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	711a      	strb	r2, [r3, #4]
 8007084:	e007      	b.n	8007096 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d102      	bne.n	8007092 <create_chain+0x122>
 800708c:	f04f 33ff 	mov.w	r3, #4294967295
 8007090:	e000      	b.n	8007094 <create_chain+0x124>
 8007092:	2301      	movs	r3, #1
 8007094:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007096:	69fb      	ldr	r3, [r7, #28]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3720      	adds	r7, #32
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	3304      	adds	r3, #4
 80070b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	899b      	ldrh	r3, [r3, #12]
 80070bc:	461a      	mov	r2, r3
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	8952      	ldrh	r2, [r2, #10]
 80070c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80070cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1d1a      	adds	r2, r3, #4
 80070d2:	613a      	str	r2, [r7, #16]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <clmt_clust+0x42>
 80070de:	2300      	movs	r3, #0
 80070e0:	e010      	b.n	8007104 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d307      	bcc.n	80070fa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3304      	adds	r3, #4
 80070f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80070f8:	e7e9      	b.n	80070ce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80070fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
}
 8007104:	4618      	mov	r0, r3
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007126:	d204      	bcs.n	8007132 <dir_sdi+0x22>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007132:	2302      	movs	r3, #2
 8007134:	e071      	b.n	800721a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <dir_sdi+0x46>
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d902      	bls.n	8007156 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007154:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10c      	bne.n	8007176 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	8912      	ldrh	r2, [r2, #8]
 8007164:	4293      	cmp	r3, r2
 8007166:	d301      	bcc.n	800716c <dir_sdi+0x5c>
 8007168:	2302      	movs	r3, #2
 800716a:	e056      	b.n	800721a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	61da      	str	r2, [r3, #28]
 8007174:	e02d      	b.n	80071d2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	895b      	ldrh	r3, [r3, #10]
 800717a:	461a      	mov	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	899b      	ldrh	r3, [r3, #12]
 8007180:	fb02 f303 	mul.w	r3, r2, r3
 8007184:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007186:	e019      	b.n	80071bc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6979      	ldr	r1, [r7, #20]
 800718c:	4618      	mov	r0, r3
 800718e:	f7ff fc9a 	bl	8006ac6 <get_fat>
 8007192:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d101      	bne.n	80071a0 <dir_sdi+0x90>
 800719c:	2301      	movs	r3, #1
 800719e:	e03c      	b.n	800721a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d904      	bls.n	80071b0 <dir_sdi+0xa0>
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d301      	bcc.n	80071b4 <dir_sdi+0xa4>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e032      	b.n	800721a <dir_sdi+0x10a>
			ofs -= csz;
 80071b4:	683a      	ldr	r2, [r7, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d2e1      	bcs.n	8007188 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80071c4:	6979      	ldr	r1, [r7, #20]
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f7ff fc5e 	bl	8006a88 <clust2sect>
 80071cc:	4602      	mov	r2, r0
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <dir_sdi+0xd4>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e01a      	b.n	800721a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	899b      	ldrh	r3, [r3, #12]
 80071ec:	4619      	mov	r1, r3
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80071f4:	441a      	add	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	899b      	ldrh	r3, [r3, #12]
 8007204:	461a      	mov	r2, r3
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	fbb3 f0f2 	udiv	r0, r3, r2
 800720c:	fb00 f202 	mul.w	r2, r0, r2
 8007210:	1a9b      	subs	r3, r3, r2
 8007212:	18ca      	adds	r2, r1, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	3320      	adds	r3, #32
 8007238:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <dir_next+0x28>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007248:	d301      	bcc.n	800724e <dir_next+0x2c>
 800724a:	2304      	movs	r3, #4
 800724c:	e0bb      	b.n	80073c6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	899b      	ldrh	r3, [r3, #12]
 8007252:	461a      	mov	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	fbb3 f1f2 	udiv	r1, r3, r2
 800725a:	fb01 f202 	mul.w	r2, r1, r2
 800725e:	1a9b      	subs	r3, r3, r2
 8007260:	2b00      	cmp	r3, #0
 8007262:	f040 809d 	bne.w	80073a0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	8912      	ldrh	r2, [r2, #8]
 8007280:	4293      	cmp	r3, r2
 8007282:	f0c0 808d 	bcc.w	80073a0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	61da      	str	r2, [r3, #28]
 800728c:	2304      	movs	r3, #4
 800728e:	e09a      	b.n	80073c6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	899b      	ldrh	r3, [r3, #12]
 8007294:	461a      	mov	r2, r3
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	fbb3 f3f2 	udiv	r3, r3, r2
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	8952      	ldrh	r2, [r2, #10]
 80072a0:	3a01      	subs	r2, #1
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d17b      	bne.n	80073a0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7ff fc08 	bl	8006ac6 <get_fat>
 80072b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d801      	bhi.n	80072c2 <dir_next+0xa0>
 80072be:	2302      	movs	r3, #2
 80072c0:	e081      	b.n	80073c6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d101      	bne.n	80072ce <dir_next+0xac>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e07b      	b.n	80073c6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d359      	bcc.n	800738c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	61da      	str	r2, [r3, #28]
 80072e4:	2304      	movs	r3, #4
 80072e6:	e06e      	b.n	80073c6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	4619      	mov	r1, r3
 80072f0:	4610      	mov	r0, r2
 80072f2:	f7ff fe3d 	bl	8006f70 <create_chain>
 80072f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <dir_next+0xe0>
 80072fe:	2307      	movs	r3, #7
 8007300:	e061      	b.n	80073c6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <dir_next+0xea>
 8007308:	2302      	movs	r3, #2
 800730a:	e05c      	b.n	80073c6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d101      	bne.n	8007318 <dir_next+0xf6>
 8007314:	2301      	movs	r3, #1
 8007316:	e056      	b.n	80073c6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fad3 	bl	80068c4 <sync_window>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <dir_next+0x106>
 8007324:	2301      	movs	r3, #1
 8007326:	e04e      	b.n	80073c6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	899b      	ldrh	r3, [r3, #12]
 8007332:	461a      	mov	r2, r3
 8007334:	2100      	movs	r1, #0
 8007336:	f7ff f8fc 	bl	8006532 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800733a:	2300      	movs	r3, #0
 800733c:	613b      	str	r3, [r7, #16]
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff fba1 	bl	8006a88 <clust2sect>
 8007346:	4602      	mov	r2, r0
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	635a      	str	r2, [r3, #52]	; 0x34
 800734c:	e012      	b.n	8007374 <dir_next+0x152>
						fs->wflag = 1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f7ff fab5 	bl	80068c4 <sync_window>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <dir_next+0x142>
 8007360:	2301      	movs	r3, #1
 8007362:	e030      	b.n	80073c6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3301      	adds	r3, #1
 8007368:	613b      	str	r3, [r7, #16]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736e:	1c5a      	adds	r2, r3, #1
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	635a      	str	r2, [r3, #52]	; 0x34
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	895b      	ldrh	r3, [r3, #10]
 8007378:	461a      	mov	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	4293      	cmp	r3, r2
 800737e:	d3e6      	bcc.n	800734e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff fb77 	bl	8006a88 <clust2sect>
 800739a:	4602      	mov	r2, r0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	899b      	ldrh	r3, [r3, #12]
 80073b0:	461a      	mov	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80073b8:	fb00 f202 	mul.w	r2, r0, r2
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	18ca      	adds	r2, r1, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b086      	sub	sp, #24
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073de:	2100      	movs	r1, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff fe95 	bl	8007110 <dir_sdi>
 80073e6:	4603      	mov	r3, r0
 80073e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d12b      	bne.n	8007448 <dir_alloc+0x7a>
		n = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69db      	ldr	r3, [r3, #28]
 80073f8:	4619      	mov	r1, r3
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff faa6 	bl	800694c <move_window>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11d      	bne.n	8007446 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2be5      	cmp	r3, #229	; 0xe5
 8007412:	d004      	beq.n	800741e <dir_alloc+0x50>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d107      	bne.n	800742e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	3301      	adds	r3, #1
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d102      	bne.n	8007432 <dir_alloc+0x64>
 800742c:	e00c      	b.n	8007448 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800742e:	2300      	movs	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007432:	2101      	movs	r1, #1
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fef4 	bl	8007222 <dir_next>
 800743a:	4603      	mov	r3, r0
 800743c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0d7      	beq.n	80073f4 <dir_alloc+0x26>
 8007444:	e000      	b.n	8007448 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007446:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	2b04      	cmp	r3, #4
 800744c:	d101      	bne.n	8007452 <dir_alloc+0x84>
 800744e:	2307      	movs	r3, #7
 8007450:	75fb      	strb	r3, [r7, #23]
	return res;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	331a      	adds	r3, #26
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe ffbe 	bl	80063ec <ld_word>
 8007470:	4603      	mov	r3, r0
 8007472:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d109      	bne.n	8007490 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	3314      	adds	r3, #20
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe ffb3 	bl	80063ec <ld_word>
 8007486:	4603      	mov	r3, r0
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007490:	68fb      	ldr	r3, [r7, #12]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	331a      	adds	r3, #26
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	b292      	uxth	r2, r2
 80074ae:	4611      	mov	r1, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe ffd6 	bl	8006462 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d109      	bne.n	80074d2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f103 0214 	add.w	r2, r3, #20
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	0c1b      	lsrs	r3, r3, #16
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fe ffc8 	bl	8006462 <st_word>
	}
}
 80074d2:	bf00      	nop
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074dc:	b590      	push	{r4, r7, lr}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	331a      	adds	r3, #26
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe ff7e 	bl	80063ec <ld_word>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <cmp_lfn+0x1e>
 80074f6:	2300      	movs	r3, #0
 80074f8:	e059      	b.n	80075ae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	4613      	mov	r3, r2
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007510:	2301      	movs	r3, #1
 8007512:	81fb      	strh	r3, [r7, #14]
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	e033      	b.n	8007582 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800751a:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <cmp_lfn+0xdc>)
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	4413      	add	r3, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7fe ff5f 	bl	80063ec <ld_word>
 800752e:	4603      	mov	r3, r0
 8007530:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007532:	89fb      	ldrh	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01a      	beq.n	800756e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	2bfe      	cmp	r3, #254	; 0xfe
 800753c:	d812      	bhi.n	8007564 <cmp_lfn+0x88>
 800753e:	89bb      	ldrh	r3, [r7, #12]
 8007540:	4618      	mov	r0, r3
 8007542:	f001 fe11 	bl	8009168 <ff_wtoupper>
 8007546:	4603      	mov	r3, r0
 8007548:	461c      	mov	r4, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	617a      	str	r2, [r7, #20]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fe05 	bl	8009168 <ff_wtoupper>
 800755e:	4603      	mov	r3, r0
 8007560:	429c      	cmp	r4, r3
 8007562:	d001      	beq.n	8007568 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007564:	2300      	movs	r3, #0
 8007566:	e022      	b.n	80075ae <cmp_lfn+0xd2>
			}
			wc = uc;
 8007568:	89bb      	ldrh	r3, [r7, #12]
 800756a:	81fb      	strh	r3, [r7, #14]
 800756c:	e006      	b.n	800757c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800756e:	89bb      	ldrh	r3, [r7, #12]
 8007570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007574:	4293      	cmp	r3, r2
 8007576:	d001      	beq.n	800757c <cmp_lfn+0xa0>
 8007578:	2300      	movs	r3, #0
 800757a:	e018      	b.n	80075ae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	3301      	adds	r3, #1
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b0c      	cmp	r3, #12
 8007586:	d9c8      	bls.n	800751a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <cmp_lfn+0xd0>
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <cmp_lfn+0xd0>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <cmp_lfn+0xd0>
 80075a8:	2300      	movs	r3, #0
 80075aa:	e000      	b.n	80075ae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075ac:	2301      	movs	r3, #1
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	371c      	adds	r7, #28
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd90      	pop	{r4, r7, pc}
 80075b6:	bf00      	nop
 80075b8:	08009d38 	.word	0x08009d38

080075bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4611      	mov	r1, r2
 80075c8:	461a      	mov	r2, r3
 80075ca:	460b      	mov	r3, r1
 80075cc:	71fb      	strb	r3, [r7, #7]
 80075ce:	4613      	mov	r3, r2
 80075d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	330d      	adds	r3, #13
 80075d6:	79ba      	ldrb	r2, [r7, #6]
 80075d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	330b      	adds	r3, #11
 80075de:	220f      	movs	r2, #15
 80075e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	330c      	adds	r3, #12
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	331a      	adds	r3, #26
 80075ee:	2100      	movs	r1, #0
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe ff36 	bl	8006462 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	1e5a      	subs	r2, r3, #1
 80075fa:	4613      	mov	r3, r2
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007606:	2300      	movs	r3, #0
 8007608:	82fb      	strh	r3, [r7, #22]
 800760a:	2300      	movs	r3, #0
 800760c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800760e:	8afb      	ldrh	r3, [r7, #22]
 8007610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007614:	4293      	cmp	r3, r2
 8007616:	d007      	beq.n	8007628 <put_lfn+0x6c>
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	61fa      	str	r2, [r7, #28]
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4413      	add	r3, r2
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007628:	4a17      	ldr	r2, [pc, #92]	; (8007688 <put_lfn+0xcc>)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	4413      	add	r3, r2
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4413      	add	r3, r2
 8007636:	8afa      	ldrh	r2, [r7, #22]
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe ff11 	bl	8006462 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <put_lfn+0x90>
 8007646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800764a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	3301      	adds	r3, #1
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b0c      	cmp	r3, #12
 8007656:	d9da      	bls.n	800760e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007658:	8afb      	ldrh	r3, [r7, #22]
 800765a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800765e:	4293      	cmp	r3, r2
 8007660:	d006      	beq.n	8007670 <put_lfn+0xb4>
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d103      	bne.n	8007678 <put_lfn+0xbc>
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007676:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	79fa      	ldrb	r2, [r7, #7]
 800767c:	701a      	strb	r2, [r3, #0]
}
 800767e:	bf00      	nop
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	08009d38 	.word	0x08009d38

0800768c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	; 0x30
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800769a:	220b      	movs	r2, #11
 800769c:	68b9      	ldr	r1, [r7, #8]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7fe ff26 	bl	80064f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	d92b      	bls.n	8007702 <gen_numname+0x76>
		sr = seq;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076ae:	e022      	b.n	80076f6 <gen_numname+0x6a>
			wc = *lfn++;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	1c9a      	adds	r2, r3, #2
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80076be:	e017      	b.n	80076f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	005a      	lsls	r2, r3, #1
 80076c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	4413      	add	r3, r2
 80076cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076d0:	085b      	lsrs	r3, r3, #1
 80076d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <gen_numname+0x5e>
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80076e4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80076e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	3301      	adds	r3, #1
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d9e4      	bls.n	80076c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d8      	bne.n	80076b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007702:	2307      	movs	r3, #7
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	b2db      	uxtb	r3, r3
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800771a:	2b39      	cmp	r3, #57	; 0x39
 800771c:	d904      	bls.n	8007728 <gen_numname+0x9c>
 800771e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007722:	3307      	adds	r3, #7
 8007724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	62ba      	str	r2, [r7, #40]	; 0x28
 800772e:	3330      	adds	r3, #48	; 0x30
 8007730:	443b      	add	r3, r7
 8007732:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007736:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	091b      	lsrs	r3, r3, #4
 800773e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1df      	bne.n	8007706 <gen_numname+0x7a>
	ns[i] = '~';
 8007746:	f107 0214 	add.w	r2, r7, #20
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	4413      	add	r3, r2
 800774e:	227e      	movs	r2, #126	; 0x7e
 8007750:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007752:	2300      	movs	r3, #0
 8007754:	627b      	str	r3, [r7, #36]	; 0x24
 8007756:	e002      	b.n	800775e <gen_numname+0xd2>
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	3301      	adds	r3, #1
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	429a      	cmp	r2, r3
 8007764:	d205      	bcs.n	8007772 <gen_numname+0xe6>
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	4413      	add	r3, r2
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b20      	cmp	r3, #32
 8007770:	d1f2      	bne.n	8007758 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	2b07      	cmp	r3, #7
 8007776:	d807      	bhi.n	8007788 <gen_numname+0xfc>
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	62ba      	str	r2, [r7, #40]	; 0x28
 800777e:	3330      	adds	r3, #48	; 0x30
 8007780:	443b      	add	r3, r7
 8007782:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007786:	e000      	b.n	800778a <gen_numname+0xfe>
 8007788:	2120      	movs	r1, #32
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	627a      	str	r2, [r7, #36]	; 0x24
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	460a      	mov	r2, r1
 8007796:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	2b07      	cmp	r3, #7
 800779c:	d9e9      	bls.n	8007772 <gen_numname+0xe6>
}
 800779e:	bf00      	nop
 80077a0:	bf00      	nop
 80077a2:	3730      	adds	r7, #48	; 0x30
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077b4:	230b      	movs	r3, #11
 80077b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	0852      	lsrs	r2, r2, #1
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b2da      	uxtb	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1c59      	adds	r1, r3, #1
 80077c8:	6079      	str	r1, [r7, #4]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	4413      	add	r3, r2
 80077ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1ed      	bne.n	80077b8 <sum_sfn+0x10>
	return sum;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fc88 	bl	8007110 <dir_sdi>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <dir_find+0x24>
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	e0a9      	b.n	8007962 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800780e:	23ff      	movs	r3, #255	; 0xff
 8007810:	753b      	strb	r3, [r7, #20]
 8007812:	7d3b      	ldrb	r3, [r7, #20]
 8007814:	757b      	strb	r3, [r7, #21]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	4619      	mov	r1, r3
 8007824:	6938      	ldr	r0, [r7, #16]
 8007826:	f7ff f891 	bl	800694c <move_window>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 8090 	bne.w	8007956 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800783e:	7dbb      	ldrb	r3, [r7, #22]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d102      	bne.n	800784a <dir_find+0x60>
 8007844:	2304      	movs	r3, #4
 8007846:	75fb      	strb	r3, [r7, #23]
 8007848:	e08a      	b.n	8007960 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	330b      	adds	r3, #11
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007856:	73fb      	strb	r3, [r7, #15]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	7bfa      	ldrb	r2, [r7, #15]
 800785c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800785e:	7dbb      	ldrb	r3, [r7, #22]
 8007860:	2be5      	cmp	r3, #229	; 0xe5
 8007862:	d007      	beq.n	8007874 <dir_find+0x8a>
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	f003 0308 	and.w	r3, r3, #8
 800786a:	2b00      	cmp	r3, #0
 800786c:	d009      	beq.n	8007882 <dir_find+0x98>
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b0f      	cmp	r3, #15
 8007872:	d006      	beq.n	8007882 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007874:	23ff      	movs	r3, #255	; 0xff
 8007876:	757b      	strb	r3, [r7, #21]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f04f 32ff 	mov.w	r2, #4294967295
 800787e:	631a      	str	r2, [r3, #48]	; 0x30
 8007880:	e05e      	b.n	8007940 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b0f      	cmp	r3, #15
 8007886:	d136      	bne.n	80078f6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d154      	bne.n	8007940 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007896:	7dbb      	ldrb	r3, [r7, #22]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00d      	beq.n	80078bc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	7b5b      	ldrb	r3, [r3, #13]
 80078a6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80078a8:	7dbb      	ldrb	r3, [r7, #22]
 80078aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ae:	75bb      	strb	r3, [r7, #22]
 80078b0:	7dbb      	ldrb	r3, [r7, #22]
 80078b2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695a      	ldr	r2, [r3, #20]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078bc:	7dba      	ldrb	r2, [r7, #22]
 80078be:	7d7b      	ldrb	r3, [r7, #21]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d115      	bne.n	80078f0 <dir_find+0x106>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	330d      	adds	r3, #13
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	7d3a      	ldrb	r2, [r7, #20]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d10e      	bne.n	80078f0 <dir_find+0x106>
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	4619      	mov	r1, r3
 80078dc:	4610      	mov	r0, r2
 80078de:	f7ff fdfd 	bl	80074dc <cmp_lfn>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <dir_find+0x106>
 80078e8:	7d7b      	ldrb	r3, [r7, #21]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	e000      	b.n	80078f2 <dir_find+0x108>
 80078f0:	23ff      	movs	r3, #255	; 0xff
 80078f2:	757b      	strb	r3, [r7, #21]
 80078f4:	e024      	b.n	8007940 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80078f6:	7d7b      	ldrb	r3, [r7, #21]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d109      	bne.n	8007910 <dir_find+0x126>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff ff51 	bl	80077a8 <sum_sfn>
 8007906:	4603      	mov	r3, r0
 8007908:	461a      	mov	r2, r3
 800790a:	7d3b      	ldrb	r3, [r7, #20]
 800790c:	4293      	cmp	r3, r2
 800790e:	d024      	beq.n	800795a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <dir_find+0x14a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a18      	ldr	r0, [r3, #32]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	3324      	adds	r3, #36	; 0x24
 8007926:	220b      	movs	r2, #11
 8007928:	4619      	mov	r1, r3
 800792a:	f7fe fe1d 	bl	8006568 <mem_cmp>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d014      	beq.n	800795e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007934:	23ff      	movs	r3, #255	; 0xff
 8007936:	757b      	strb	r3, [r7, #21]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f04f 32ff 	mov.w	r2, #4294967295
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007940:	2100      	movs	r1, #0
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fc6d 	bl	8007222 <dir_next>
 8007948:	4603      	mov	r3, r0
 800794a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f43f af65 	beq.w	800781e <dir_find+0x34>
 8007954:	e004      	b.n	8007960 <dir_find+0x176>
		if (res != FR_OK) break;
 8007956:	bf00      	nop
 8007958:	e002      	b.n	8007960 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800795a:	bf00      	nop
 800795c:	e000      	b.n	8007960 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800795e:	bf00      	nop

	return res;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08c      	sub	sp, #48	; 0x30
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007980:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <dir_register+0x20>
 8007988:	2306      	movs	r3, #6
 800798a:	e0e0      	b.n	8007b4e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800798c:	2300      	movs	r3, #0
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
 8007990:	e002      	b.n	8007998 <dir_register+0x2c>
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	3301      	adds	r3, #1
 8007996:	627b      	str	r3, [r7, #36]	; 0x24
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1f4      	bne.n	8007992 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80079ae:	f107 030c 	add.w	r3, r7, #12
 80079b2:	220c      	movs	r2, #12
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fe fd9b 	bl	80064f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	f003 0301 	and.w	r3, r3, #1
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d032      	beq.n	8007a2a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2240      	movs	r2, #64	; 0x40
 80079c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80079cc:	2301      	movs	r3, #1
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80079d0:	e016      	b.n	8007a00 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	f107 010c 	add.w	r1, r7, #12
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f7ff fe53 	bl	800768c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7ff feff 	bl	80077ea <dir_find>
 80079ec:	4603      	mov	r3, r0
 80079ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80079f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	3301      	adds	r3, #1
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	2b63      	cmp	r3, #99	; 0x63
 8007a04:	d9e5      	bls.n	80079d2 <dir_register+0x66>
 8007a06:	e000      	b.n	8007a0a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	2b64      	cmp	r3, #100	; 0x64
 8007a0e:	d101      	bne.n	8007a14 <dir_register+0xa8>
 8007a10:	2307      	movs	r3, #7
 8007a12:	e09c      	b.n	8007b4e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d002      	beq.n	8007a22 <dir_register+0xb6>
 8007a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a20:	e095      	b.n	8007b4e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a22:	7dfa      	ldrb	r2, [r7, #23]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a2a:	7dfb      	ldrb	r3, [r7, #23]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <dir_register+0xd8>
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	330c      	adds	r3, #12
 8007a38:	4a47      	ldr	r2, [pc, #284]	; (8007b58 <dir_register+0x1ec>)
 8007a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	3301      	adds	r3, #1
 8007a42:	e000      	b.n	8007a46 <dir_register+0xda>
 8007a44:	2301      	movs	r3, #1
 8007a46:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a48:	6a39      	ldr	r1, [r7, #32]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff fcbf 	bl	80073ce <dir_alloc>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d148      	bne.n	8007af0 <dir_register+0x184>
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	623b      	str	r3, [r7, #32]
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d042      	beq.n	8007af0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	015b      	lsls	r3, r3, #5
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7ff fb4a 	bl	8007110 <dir_sdi>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d132      	bne.n	8007af0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3324      	adds	r3, #36	; 0x24
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fe8a 	bl	80077a8 <sum_sfn>
 8007a94:	4603      	mov	r3, r0
 8007a96:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	69f8      	ldr	r0, [r7, #28]
 8007aa0:	f7fe ff54 	bl	800694c <move_window>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d11d      	bne.n	8007aee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	6918      	ldr	r0, [r3, #16]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a19      	ldr	r1, [r3, #32]
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7efb      	ldrb	r3, [r7, #27]
 8007ac0:	f7ff fd7c 	bl	80075bc <put_lfn>
				fs->wflag = 1;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007aca:	2100      	movs	r1, #0
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7ff fba8 	bl	8007222 <dir_next>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d107      	bne.n	8007af0 <dir_register+0x184>
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	623b      	str	r3, [r7, #32]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1d5      	bne.n	8007a98 <dir_register+0x12c>
 8007aec:	e000      	b.n	8007af0 <dir_register+0x184>
				if (res != FR_OK) break;
 8007aee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d128      	bne.n	8007b4a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	4619      	mov	r1, r3
 8007afe:	69f8      	ldr	r0, [r7, #28]
 8007b00:	f7fe ff24 	bl	800694c <move_window>
 8007b04:	4603      	mov	r3, r0
 8007b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d11b      	bne.n	8007b4a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	2220      	movs	r2, #32
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe fd09 	bl	8006532 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a18      	ldr	r0, [r3, #32]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3324      	adds	r3, #36	; 0x24
 8007b28:	220b      	movs	r2, #11
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f7fe fce0 	bl	80064f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	f002 0218 	and.w	r2, r2, #24
 8007b40:	b2d2      	uxtb	r2, r2
 8007b42:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2201      	movs	r2, #1
 8007b48:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3730      	adds	r7, #48	; 0x30
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	4ec4ec4f 	.word	0x4ec4ec4f

08007b5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	; 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	61ba      	str	r2, [r7, #24]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4413      	add	r3, r2
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b8c:	2b1f      	cmp	r3, #31
 8007b8e:	d940      	bls.n	8007c12 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007b90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b92:	2b2f      	cmp	r3, #47	; 0x2f
 8007b94:	d006      	beq.n	8007ba4 <create_name+0x48>
 8007b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b98:	2b5c      	cmp	r3, #92	; 0x5c
 8007b9a:	d110      	bne.n	8007bbe <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007b9c:	e002      	b.n	8007ba4 <create_name+0x48>
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	61bb      	str	r3, [r7, #24]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	4413      	add	r3, r2
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b2f      	cmp	r3, #47	; 0x2f
 8007bae:	d0f6      	beq.n	8007b9e <create_name+0x42>
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b5c      	cmp	r3, #92	; 0x5c
 8007bba:	d0f0      	beq.n	8007b9e <create_name+0x42>
			break;
 8007bbc:	e02a      	b.n	8007c14 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8007bc2:	d901      	bls.n	8007bc8 <create_name+0x6c>
 8007bc4:	2306      	movs	r3, #6
 8007bc6:	e17d      	b.n	8007ec4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f001 fa8c 	bl	80090f0 <ff_convert>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <create_name+0x8a>
 8007be2:	2306      	movs	r3, #6
 8007be4:	e16e      	b.n	8007ec4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be8:	2b7f      	cmp	r3, #127	; 0x7f
 8007bea:	d809      	bhi.n	8007c00 <create_name+0xa4>
 8007bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bee:	4619      	mov	r1, r3
 8007bf0:	488d      	ldr	r0, [pc, #564]	; (8007e28 <create_name+0x2cc>)
 8007bf2:	f7fe fce0 	bl	80065b6 <chk_chr>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <create_name+0xa4>
 8007bfc:	2306      	movs	r3, #6
 8007bfe:	e161      	b.n	8007ec4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	1c5a      	adds	r2, r3, #1
 8007c04:	617a      	str	r2, [r7, #20]
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c0e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007c10:	e7b4      	b.n	8007b7c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007c12:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	441a      	add	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c20:	2b1f      	cmp	r3, #31
 8007c22:	d801      	bhi.n	8007c28 <create_name+0xcc>
 8007c24:	2304      	movs	r3, #4
 8007c26:	e000      	b.n	8007c2a <create_name+0xce>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c2e:	e011      	b.n	8007c54 <create_name+0xf8>
		w = lfn[di - 1];
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007c36:	3b01      	subs	r3, #1
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d002      	beq.n	8007c4e <create_name+0xf2>
 8007c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c4c:	d106      	bne.n	8007c5c <create_name+0x100>
		di--;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1ea      	bne.n	8007c30 <create_name+0xd4>
 8007c5a:	e000      	b.n	8007c5e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007c5c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	005b      	lsls	r3, r3, #1
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <create_name+0x118>
 8007c70:	2306      	movs	r3, #6
 8007c72:	e127      	b.n	8007ec4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3324      	adds	r3, #36	; 0x24
 8007c78:	220b      	movs	r2, #11
 8007c7a:	2120      	movs	r1, #32
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fe fc58 	bl	8006532 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
 8007c86:	e002      	b.n	8007c8e <create_name+0x132>
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	61bb      	str	r3, [r7, #24]
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	005b      	lsls	r3, r3, #1
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	2b20      	cmp	r3, #32
 8007c9a:	d0f5      	beq.n	8007c88 <create_name+0x12c>
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca8:	d0ee      	beq.n	8007c88 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d009      	beq.n	8007cc4 <create_name+0x168>
 8007cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb4:	f043 0303 	orr.w	r3, r3, #3
 8007cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007cbc:	e002      	b.n	8007cc4 <create_name+0x168>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d009      	beq.n	8007cde <create_name+0x182>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	2b2e      	cmp	r3, #46	; 0x2e
 8007cdc:	d1ef      	bne.n	8007cbe <create_name+0x162>

	i = b = 0; ni = 8;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	2308      	movs	r3, #8
 8007cea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	61ba      	str	r2, [r7, #24]
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007cfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 8090 	beq.w	8007e24 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d006      	beq.n	8007d18 <create_name+0x1bc>
 8007d0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d0e:	d10a      	bne.n	8007d26 <create_name+0x1ca>
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d006      	beq.n	8007d26 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d1c:	f043 0303 	orr.w	r3, r3, #3
 8007d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d24:	e07d      	b.n	8007e22 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d26:	6a3a      	ldr	r2, [r7, #32]
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d203      	bcs.n	8007d36 <create_name+0x1da>
 8007d2e:	69ba      	ldr	r2, [r7, #24]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d123      	bne.n	8007d7e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b0b      	cmp	r3, #11
 8007d3a:	d106      	bne.n	8007d4a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d40:	f043 0303 	orr.w	r3, r3, #3
 8007d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d48:	e075      	b.n	8007e36 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d005      	beq.n	8007d5e <create_name+0x202>
 8007d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d56:	f043 0303 	orr.w	r3, r3, #3
 8007d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d866      	bhi.n	8007e34 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	2308      	movs	r3, #8
 8007d6c:	623b      	str	r3, [r7, #32]
 8007d6e:	230b      	movs	r3, #11
 8007d70:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007d72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d7c:	e051      	b.n	8007e22 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007d7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d80:	2b7f      	cmp	r3, #127	; 0x7f
 8007d82:	d914      	bls.n	8007dae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 f9b1 	bl	80090f0 <ff_convert>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007d92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <create_name+0x246>
 8007d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d9a:	3b80      	subs	r3, #128	; 0x80
 8007d9c:	4a23      	ldr	r2, [pc, #140]	; (8007e2c <create_name+0x2d0>)
 8007d9e:	5cd3      	ldrb	r3, [r2, r3]
 8007da0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007da6:	f043 0302 	orr.w	r3, r3, #2
 8007daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007dae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <create_name+0x268>
 8007db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db6:	4619      	mov	r1, r3
 8007db8:	481d      	ldr	r0, [pc, #116]	; (8007e30 <create_name+0x2d4>)
 8007dba:	f7fe fbfc 	bl	80065b6 <chk_chr>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d008      	beq.n	8007dd6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007dc4:	235f      	movs	r3, #95	; 0x5f
 8007dc6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dcc:	f043 0303 	orr.w	r3, r3, #3
 8007dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007dd4:	e01b      	b.n	8007e0e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d909      	bls.n	8007df0 <create_name+0x294>
 8007ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dde:	2b5a      	cmp	r3, #90	; 0x5a
 8007de0:	d806      	bhi.n	8007df0 <create_name+0x294>
					b |= 2;
 8007de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007de6:	f043 0302 	orr.w	r3, r3, #2
 8007dea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dee:	e00e      	b.n	8007e0e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df2:	2b60      	cmp	r3, #96	; 0x60
 8007df4:	d90b      	bls.n	8007e0e <create_name+0x2b2>
 8007df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df8:	2b7a      	cmp	r3, #122	; 0x7a
 8007dfa:	d808      	bhi.n	8007e0e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e00:	f043 0301 	orr.w	r3, r3, #1
 8007e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e0a:	3b20      	subs	r3, #32
 8007e0c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	623a      	str	r2, [r7, #32]
 8007e14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e16:	b2d1      	uxtb	r1, r2
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	460a      	mov	r2, r1
 8007e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007e22:	e763      	b.n	8007cec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007e24:	bf00      	nop
 8007e26:	e006      	b.n	8007e36 <create_name+0x2da>
 8007e28:	08009c58 	.word	0x08009c58
 8007e2c:	08009cb8 	.word	0x08009cb8
 8007e30:	08009c64 	.word	0x08009c64
			if (si > di) break;			/* No extension */
 8007e34:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e3c:	2be5      	cmp	r3, #229	; 0xe5
 8007e3e:	d103      	bne.n	8007e48 <create_name+0x2ec>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2205      	movs	r2, #5
 8007e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d104      	bne.n	8007e58 <create_name+0x2fc>
 8007e4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e5c:	f003 030c 	and.w	r3, r3, #12
 8007e60:	2b0c      	cmp	r3, #12
 8007e62:	d005      	beq.n	8007e70 <create_name+0x314>
 8007e64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d105      	bne.n	8007e7c <create_name+0x320>
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d117      	bne.n	8007eb8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d105      	bne.n	8007ea0 <create_name+0x344>
 8007e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e98:	f043 0310 	orr.w	r3, r3, #16
 8007e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ea4:	f003 030c 	and.w	r3, r3, #12
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d105      	bne.n	8007eb8 <create_name+0x35c>
 8007eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb0:	f043 0308 	orr.w	r3, r3, #8
 8007eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ebe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007ec2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3728      	adds	r7, #40	; 0x28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ee0:	e002      	b.n	8007ee8 <follow_path+0x1c>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b2f      	cmp	r3, #47	; 0x2f
 8007eee:	d0f8      	beq.n	8007ee2 <follow_path+0x16>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b5c      	cmp	r3, #92	; 0x5c
 8007ef6:	d0f4      	beq.n	8007ee2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2200      	movs	r2, #0
 8007efc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b1f      	cmp	r3, #31
 8007f04:	d80a      	bhi.n	8007f1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2280      	movs	r2, #128	; 0x80
 8007f0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff f8fd 	bl	8007110 <dir_sdi>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]
 8007f1a:	e048      	b.n	8007fae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f1c:	463b      	mov	r3, r7
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff fe1b 	bl	8007b5c <create_name>
 8007f26:	4603      	mov	r3, r0
 8007f28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d139      	bne.n	8007fa4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff fc5a 	bl	80077ea <dir_find>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00a      	beq.n	8007f5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d12c      	bne.n	8007fa8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f4e:	7afb      	ldrb	r3, [r7, #11]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d127      	bne.n	8007fa8 <follow_path+0xdc>
 8007f58:	2305      	movs	r3, #5
 8007f5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f5c:	e024      	b.n	8007fa8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d121      	bne.n	8007fac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	799b      	ldrb	r3, [r3, #6]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f74:	2305      	movs	r3, #5
 8007f76:	75fb      	strb	r3, [r7, #23]
 8007f78:	e019      	b.n	8007fae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	8992      	ldrh	r2, [r2, #12]
 8007f88:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f8c:	fb00 f202 	mul.w	r2, r0, r2
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	440b      	add	r3, r1
 8007f94:	4619      	mov	r1, r3
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff fa60 	bl	800745c <ld_clust>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fa2:	e7bb      	b.n	8007f1c <follow_path+0x50>
			if (res != FR_OK) break;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <follow_path+0xe2>
				break;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fac:	bf00      	nop
			}
		}
	}

	return res;
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d031      	beq.n	8008032 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	617b      	str	r3, [r7, #20]
 8007fd4:	e002      	b.n	8007fdc <get_ldnumber+0x24>
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b1f      	cmp	r3, #31
 8007fe2:	d903      	bls.n	8007fec <get_ldnumber+0x34>
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b3a      	cmp	r3, #58	; 0x3a
 8007fea:	d1f4      	bne.n	8007fd6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b3a      	cmp	r3, #58	; 0x3a
 8007ff2:	d11c      	bne.n	800802e <get_ldnumber+0x76>
			tp = *path;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	60fa      	str	r2, [r7, #12]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	3b30      	subs	r3, #48	; 0x30
 8008004:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b09      	cmp	r3, #9
 800800a:	d80e      	bhi.n	800802a <get_ldnumber+0x72>
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	429a      	cmp	r2, r3
 8008012:	d10a      	bne.n	800802a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d107      	bne.n	800802a <get_ldnumber+0x72>
					vol = (int)i;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	3301      	adds	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	e002      	b.n	8008034 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800802e:	2300      	movs	r3, #0
 8008030:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008032:	693b      	ldr	r3, [r7, #16]
}
 8008034:	4618      	mov	r0, r3
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	70da      	strb	r2, [r3, #3]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f04f 32ff 	mov.w	r2, #4294967295
 8008056:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7fe fc76 	bl	800694c <move_window>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <check_fs+0x2a>
 8008066:	2304      	movs	r3, #4
 8008068:	e038      	b.n	80080dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3338      	adds	r3, #56	; 0x38
 800806e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe f9ba 	bl	80063ec <ld_word>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008080:	429a      	cmp	r2, r3
 8008082:	d001      	beq.n	8008088 <check_fs+0x48>
 8008084:	2303      	movs	r3, #3
 8008086:	e029      	b.n	80080dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800808e:	2be9      	cmp	r3, #233	; 0xe9
 8008090:	d009      	beq.n	80080a6 <check_fs+0x66>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008098:	2beb      	cmp	r3, #235	; 0xeb
 800809a:	d11e      	bne.n	80080da <check_fs+0x9a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80080a2:	2b90      	cmp	r3, #144	; 0x90
 80080a4:	d119      	bne.n	80080da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3338      	adds	r3, #56	; 0x38
 80080aa:	3336      	adds	r3, #54	; 0x36
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fe f9b5 	bl	800641c <ld_dword>
 80080b2:	4603      	mov	r3, r0
 80080b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080b8:	4a0a      	ldr	r2, [pc, #40]	; (80080e4 <check_fs+0xa4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d101      	bne.n	80080c2 <check_fs+0x82>
 80080be:	2300      	movs	r3, #0
 80080c0:	e00c      	b.n	80080dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3338      	adds	r3, #56	; 0x38
 80080c6:	3352      	adds	r3, #82	; 0x52
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fe f9a7 	bl	800641c <ld_dword>
 80080ce:	4603      	mov	r3, r0
 80080d0:	4a05      	ldr	r2, [pc, #20]	; (80080e8 <check_fs+0xa8>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d101      	bne.n	80080da <check_fs+0x9a>
 80080d6:	2300      	movs	r3, #0
 80080d8:	e000      	b.n	80080dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080da:	2302      	movs	r3, #2
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	00544146 	.word	0x00544146
 80080e8:	33544146 	.word	0x33544146

080080ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b096      	sub	sp, #88	; 0x58
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff ff59 	bl	8007fb8 <get_ldnumber>
 8008106:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810a:	2b00      	cmp	r3, #0
 800810c:	da01      	bge.n	8008112 <find_volume+0x26>
 800810e:	230b      	movs	r3, #11
 8008110:	e265      	b.n	80085de <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008112:	4a9f      	ldr	r2, [pc, #636]	; (8008390 <find_volume+0x2a4>)
 8008114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800811c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <find_volume+0x3a>
 8008122:	230c      	movs	r3, #12
 8008124:	e25b      	b.n	80085de <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800812a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800812c:	79fb      	ldrb	r3, [r7, #7]
 800812e:	f023 0301 	bic.w	r3, r3, #1
 8008132:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d01a      	beq.n	8008172 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe f8b5 	bl	80062b0 <disk_status>
 8008146:	4603      	mov	r3, r0
 8008148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800814c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10c      	bne.n	8008172 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <find_volume+0x82>
 800815e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800816a:	230a      	movs	r3, #10
 800816c:	e237      	b.n	80085de <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800816e:	2300      	movs	r3, #0
 8008170:	e235      	b.n	80085de <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817a:	b2da      	uxtb	r2, r3
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe f8ad 	bl	80062e4 <disk_initialize>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800819c:	2303      	movs	r3, #3
 800819e:	e21e      	b.n	80085de <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d007      	beq.n	80081b6 <find_volume+0xca>
 80081a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80081b2:	230a      	movs	r3, #10
 80081b4:	e213      	b.n	80085de <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	7858      	ldrb	r0, [r3, #1]
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	330c      	adds	r3, #12
 80081be:	461a      	mov	r2, r3
 80081c0:	2102      	movs	r1, #2
 80081c2:	f7fe f8f5 	bl	80063b0 <disk_ioctl>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <find_volume+0xe4>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e206      	b.n	80085de <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	899b      	ldrh	r3, [r3, #12]
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d80d      	bhi.n	80081f6 <find_volume+0x10a>
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	899b      	ldrh	r3, [r3, #12]
 80081de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e2:	d308      	bcc.n	80081f6 <find_volume+0x10a>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e6:	899b      	ldrh	r3, [r3, #12]
 80081e8:	461a      	mov	r2, r3
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	899b      	ldrh	r3, [r3, #12]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	4013      	ands	r3, r2
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <find_volume+0x10e>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e1f1      	b.n	80085de <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008202:	f7ff ff1d 	bl	8008040 <check_fs>
 8008206:	4603      	mov	r3, r0
 8008208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800820c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008210:	2b02      	cmp	r3, #2
 8008212:	d149      	bne.n	80082a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008214:	2300      	movs	r3, #0
 8008216:	643b      	str	r3, [r7, #64]	; 0x40
 8008218:	e01e      	b.n	8008258 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800821a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008228:	4413      	add	r3, r2
 800822a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800822c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822e:	3304      	adds	r3, #4
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d006      	beq.n	8008244 <find_volume+0x158>
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	3308      	adds	r3, #8
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe f8ee 	bl	800641c <ld_dword>
 8008240:	4602      	mov	r2, r0
 8008242:	e000      	b.n	8008246 <find_volume+0x15a>
 8008244:	2200      	movs	r2, #0
 8008246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	3358      	adds	r3, #88	; 0x58
 800824c:	443b      	add	r3, r7
 800824e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008254:	3301      	adds	r3, #1
 8008256:	643b      	str	r3, [r7, #64]	; 0x40
 8008258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825a:	2b03      	cmp	r3, #3
 800825c:	d9dd      	bls.n	800821a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800825e:	2300      	movs	r3, #0
 8008260:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <find_volume+0x182>
 8008268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826a:	3b01      	subs	r3, #1
 800826c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800826e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	3358      	adds	r3, #88	; 0x58
 8008274:	443b      	add	r3, r7
 8008276:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800827a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800827c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800827e:	2b00      	cmp	r3, #0
 8008280:	d005      	beq.n	800828e <find_volume+0x1a2>
 8008282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008286:	f7ff fedb 	bl	8008040 <check_fs>
 800828a:	4603      	mov	r3, r0
 800828c:	e000      	b.n	8008290 <find_volume+0x1a4>
 800828e:	2303      	movs	r3, #3
 8008290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008298:	2b01      	cmp	r3, #1
 800829a:	d905      	bls.n	80082a8 <find_volume+0x1bc>
 800829c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829e:	3301      	adds	r3, #1
 80082a0:	643b      	str	r3, [r7, #64]	; 0x40
 80082a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d9e2      	bls.n	800826e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80082a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d101      	bne.n	80082b4 <find_volume+0x1c8>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e194      	b.n	80085de <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80082b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d901      	bls.n	80082c0 <find_volume+0x1d4>
 80082bc:	230d      	movs	r3, #13
 80082be:	e18e      	b.n	80085de <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	3338      	adds	r3, #56	; 0x38
 80082c4:	330b      	adds	r3, #11
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe f890 	bl	80063ec <ld_word>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	899b      	ldrh	r3, [r3, #12]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d001      	beq.n	80082dc <find_volume+0x1f0>
 80082d8:	230d      	movs	r3, #13
 80082da:	e180      	b.n	80085de <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	3338      	adds	r3, #56	; 0x38
 80082e0:	3316      	adds	r3, #22
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe f882 	bl	80063ec <ld_word>
 80082e8:	4603      	mov	r3, r0
 80082ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d106      	bne.n	8008300 <find_volume+0x214>
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	3338      	adds	r3, #56	; 0x38
 80082f6:	3324      	adds	r3, #36	; 0x24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe f88f 	bl	800641c <ld_dword>
 80082fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008304:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800830c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008312:	789b      	ldrb	r3, [r3, #2]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d005      	beq.n	8008324 <find_volume+0x238>
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	789b      	ldrb	r3, [r3, #2]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d001      	beq.n	8008324 <find_volume+0x238>
 8008320:	230d      	movs	r3, #13
 8008322:	e15c      	b.n	80085de <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	789b      	ldrb	r3, [r3, #2]
 8008328:	461a      	mov	r2, r3
 800832a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800832c:	fb02 f303 	mul.w	r3, r2, r3
 8008330:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008338:	b29a      	uxth	r2, r3
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	895b      	ldrh	r3, [r3, #10]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d008      	beq.n	8008358 <find_volume+0x26c>
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	895b      	ldrh	r3, [r3, #10]
 800834a:	461a      	mov	r2, r3
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	895b      	ldrh	r3, [r3, #10]
 8008350:	3b01      	subs	r3, #1
 8008352:	4013      	ands	r3, r2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <find_volume+0x270>
 8008358:	230d      	movs	r3, #13
 800835a:	e140      	b.n	80085de <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	3338      	adds	r3, #56	; 0x38
 8008360:	3311      	adds	r3, #17
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe f842 	bl	80063ec <ld_word>
 8008368:	4603      	mov	r3, r0
 800836a:	461a      	mov	r2, r3
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	891b      	ldrh	r3, [r3, #8]
 8008374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008376:	8992      	ldrh	r2, [r2, #12]
 8008378:	0952      	lsrs	r2, r2, #5
 800837a:	b292      	uxth	r2, r2
 800837c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008380:	fb01 f202 	mul.w	r2, r1, r2
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <find_volume+0x2a8>
 800838c:	230d      	movs	r3, #13
 800838e:	e126      	b.n	80085de <find_volume+0x4f2>
 8008390:	200022f0 	.word	0x200022f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	3338      	adds	r3, #56	; 0x38
 8008398:	3313      	adds	r3, #19
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe f826 	bl	80063ec <ld_word>
 80083a0:	4603      	mov	r3, r0
 80083a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80083a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <find_volume+0x2cc>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	3338      	adds	r3, #56	; 0x38
 80083ae:	3320      	adds	r3, #32
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe f833 	bl	800641c <ld_dword>
 80083b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	3338      	adds	r3, #56	; 0x38
 80083bc:	330e      	adds	r3, #14
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe f814 	bl	80063ec <ld_word>
 80083c4:	4603      	mov	r3, r0
 80083c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80083c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <find_volume+0x2e6>
 80083ce:	230d      	movs	r3, #13
 80083d0:	e105      	b.n	80085de <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80083d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d6:	4413      	add	r3, r2
 80083d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083da:	8911      	ldrh	r1, [r2, #8]
 80083dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083de:	8992      	ldrh	r2, [r2, #12]
 80083e0:	0952      	lsrs	r2, r2, #5
 80083e2:	b292      	uxth	r2, r2
 80083e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80083e8:	b292      	uxth	r2, r2
 80083ea:	4413      	add	r3, r2
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80083ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d201      	bcs.n	80083fa <find_volume+0x30e>
 80083f6:	230d      	movs	r3, #13
 80083f8:	e0f1      	b.n	80085de <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008402:	8952      	ldrh	r2, [r2, #10]
 8008404:	fbb3 f3f2 	udiv	r3, r3, r2
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <find_volume+0x328>
 8008410:	230d      	movs	r3, #13
 8008412:	e0e4      	b.n	80085de <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008414:	2303      	movs	r3, #3
 8008416:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008420:	4293      	cmp	r3, r2
 8008422:	d802      	bhi.n	800842a <find_volume+0x33e>
 8008424:	2302      	movs	r3, #2
 8008426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008430:	4293      	cmp	r3, r2
 8008432:	d802      	bhi.n	800843a <find_volume+0x34e>
 8008434:	2301      	movs	r3, #1
 8008436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008446:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008448:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800844a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800844c:	441a      	add	r2, r3
 800844e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008450:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008452:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	441a      	add	r2, r3
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800845c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008460:	2b03      	cmp	r3, #3
 8008462:	d11e      	bne.n	80084a2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	3338      	adds	r3, #56	; 0x38
 8008468:	332a      	adds	r3, #42	; 0x2a
 800846a:	4618      	mov	r0, r3
 800846c:	f7fd ffbe 	bl	80063ec <ld_word>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <find_volume+0x38e>
 8008476:	230d      	movs	r3, #13
 8008478:	e0b1      	b.n	80085de <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	891b      	ldrh	r3, [r3, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d001      	beq.n	8008486 <find_volume+0x39a>
 8008482:	230d      	movs	r3, #13
 8008484:	e0ab      	b.n	80085de <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	3338      	adds	r3, #56	; 0x38
 800848a:	332c      	adds	r3, #44	; 0x2c
 800848c:	4618      	mov	r0, r3
 800848e:	f7fd ffc5 	bl	800641c <ld_dword>
 8008492:	4602      	mov	r2, r0
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	647b      	str	r3, [r7, #68]	; 0x44
 80084a0:	e01f      	b.n	80084e2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80084a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a4:	891b      	ldrh	r3, [r3, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <find_volume+0x3c2>
 80084aa:	230d      	movs	r3, #13
 80084ac:	e097      	b.n	80085de <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b4:	441a      	add	r2, r3
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80084ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d103      	bne.n	80084ca <find_volume+0x3de>
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	005b      	lsls	r3, r3, #1
 80084c8:	e00a      	b.n	80084e0 <find_volume+0x3f4>
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	69da      	ldr	r2, [r3, #28]
 80084ce:	4613      	mov	r3, r2
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	4413      	add	r3, r2
 80084d4:	085a      	lsrs	r2, r3, #1
 80084d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80084e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	6a1a      	ldr	r2, [r3, #32]
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	899b      	ldrh	r3, [r3, #12]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ee:	440b      	add	r3, r1
 80084f0:	3b01      	subs	r3, #1
 80084f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084f4:	8989      	ldrh	r1, [r1, #12]
 80084f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d201      	bcs.n	8008502 <find_volume+0x416>
 80084fe:	230d      	movs	r3, #13
 8008500:	e06d      	b.n	80085de <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	f04f 32ff 	mov.w	r2, #4294967295
 8008508:	619a      	str	r2, [r3, #24]
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	2280      	movs	r2, #128	; 0x80
 8008516:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800851c:	2b03      	cmp	r3, #3
 800851e:	d149      	bne.n	80085b4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	3338      	adds	r3, #56	; 0x38
 8008524:	3330      	adds	r3, #48	; 0x30
 8008526:	4618      	mov	r0, r3
 8008528:	f7fd ff60 	bl	80063ec <ld_word>
 800852c:	4603      	mov	r3, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	d140      	bne.n	80085b4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008534:	3301      	adds	r3, #1
 8008536:	4619      	mov	r1, r3
 8008538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800853a:	f7fe fa07 	bl	800694c <move_window>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d137      	bne.n	80085b4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	2200      	movs	r2, #0
 8008548:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	3338      	adds	r3, #56	; 0x38
 800854e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008552:	4618      	mov	r0, r3
 8008554:	f7fd ff4a 	bl	80063ec <ld_word>
 8008558:	4603      	mov	r3, r0
 800855a:	461a      	mov	r2, r3
 800855c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008560:	429a      	cmp	r2, r3
 8008562:	d127      	bne.n	80085b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	3338      	adds	r3, #56	; 0x38
 8008568:	4618      	mov	r0, r3
 800856a:	f7fd ff57 	bl	800641c <ld_dword>
 800856e:	4603      	mov	r3, r0
 8008570:	4a1d      	ldr	r2, [pc, #116]	; (80085e8 <find_volume+0x4fc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d11e      	bne.n	80085b4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	3338      	adds	r3, #56	; 0x38
 800857a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800857e:	4618      	mov	r0, r3
 8008580:	f7fd ff4c 	bl	800641c <ld_dword>
 8008584:	4603      	mov	r3, r0
 8008586:	4a19      	ldr	r2, [pc, #100]	; (80085ec <find_volume+0x500>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d113      	bne.n	80085b4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	3338      	adds	r3, #56	; 0x38
 8008590:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008594:	4618      	mov	r0, r3
 8008596:	f7fd ff41 	bl	800641c <ld_dword>
 800859a:	4602      	mov	r2, r0
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	3338      	adds	r3, #56	; 0x38
 80085a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fd ff37 	bl	800641c <ld_dword>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80085b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80085ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80085bc:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <find_volume+0x504>)
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	3301      	adds	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <find_volume+0x504>)
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <find_volume+0x504>)
 80085ca:	881a      	ldrh	r2, [r3, #0]
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <find_volume+0x508>)
 80085d4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80085d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085d8:	f7fe f950 	bl	800687c <clear_lock>
#endif
	return FR_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3758      	adds	r7, #88	; 0x58
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	41615252 	.word	0x41615252
 80085ec:	61417272 	.word	0x61417272
 80085f0:	200022f4 	.word	0x200022f4
 80085f4:	20002318 	.word	0x20002318

080085f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008602:	2309      	movs	r3, #9
 8008604:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01c      	beq.n	8008646 <validate+0x4e>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d018      	beq.n	8008646 <validate+0x4e>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d013      	beq.n	8008646 <validate+0x4e>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	889a      	ldrh	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	88db      	ldrh	r3, [r3, #6]
 8008628:	429a      	cmp	r2, r3
 800862a:	d10c      	bne.n	8008646 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	785b      	ldrb	r3, [r3, #1]
 8008632:	4618      	mov	r0, r3
 8008634:	f7fd fe3c 	bl	80062b0 <disk_status>
 8008638:	4603      	mov	r3, r0
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <validate+0x4e>
			res = FR_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <validate+0x5a>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	e000      	b.n	8008654 <validate+0x5c>
 8008652:	2300      	movs	r3, #0
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	6013      	str	r3, [r2, #0]
	return res;
 8008658:	7bfb      	ldrb	r3, [r7, #15]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b088      	sub	sp, #32
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	4613      	mov	r3, r2
 8008670:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008676:	f107 0310 	add.w	r3, r7, #16
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fc9c 	bl	8007fb8 <get_ldnumber>
 8008680:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	2b00      	cmp	r3, #0
 8008686:	da01      	bge.n	800868c <f_mount+0x28>
 8008688:	230b      	movs	r3, #11
 800868a:	e02b      	b.n	80086e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800868c:	4a17      	ldr	r2, [pc, #92]	; (80086ec <f_mount+0x88>)
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008694:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800869c:	69b8      	ldr	r0, [r7, #24]
 800869e:	f7fe f8ed 	bl	800687c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2200      	movs	r2, #0
 80086a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	490d      	ldr	r1, [pc, #52]	; (80086ec <f_mount+0x88>)
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <f_mount+0x66>
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d001      	beq.n	80086ce <f_mount+0x6a>
 80086ca:	2300      	movs	r3, #0
 80086cc:	e00a      	b.n	80086e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80086ce:	f107 010c 	add.w	r1, r7, #12
 80086d2:	f107 0308 	add.w	r3, r7, #8
 80086d6:	2200      	movs	r2, #0
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fd07 	bl	80080ec <find_volume>
 80086de:	4603      	mov	r3, r0
 80086e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80086e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	200022f0 	.word	0x200022f0

080086f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b09a      	sub	sp, #104	; 0x68
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <f_open+0x18>
 8008704:	2309      	movs	r3, #9
 8008706:	e1bb      	b.n	8008a80 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800870e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008710:	79fa      	ldrb	r2, [r7, #7]
 8008712:	f107 0114 	add.w	r1, r7, #20
 8008716:	f107 0308 	add.w	r3, r7, #8
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fce6 	bl	80080ec <find_volume>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008726:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800872a:	2b00      	cmp	r3, #0
 800872c:	f040 819f 	bne.w	8008a6e <f_open+0x37e>
		dj.obj.fs = fs;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	f107 0318 	add.w	r3, r7, #24
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff fbc5 	bl	8007ecc <follow_path>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008748:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11a      	bne.n	8008786 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008754:	b25b      	sxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	da03      	bge.n	8008762 <f_open+0x72>
				res = FR_INVALID_NAME;
 800875a:	2306      	movs	r3, #6
 800875c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008760:	e011      	b.n	8008786 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	f023 0301 	bic.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	461a      	mov	r2, r3
 8008774:	f107 0318 	add.w	r3, r7, #24
 8008778:	4611      	mov	r1, r2
 800877a:	4618      	mov	r0, r3
 800877c:	f7fd ff36 	bl	80065ec <chk_lock>
 8008780:	4603      	mov	r3, r0
 8008782:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	f003 031c 	and.w	r3, r3, #28
 800878c:	2b00      	cmp	r3, #0
 800878e:	d07f      	beq.n	8008890 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008790:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008794:	2b00      	cmp	r3, #0
 8008796:	d017      	beq.n	80087c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008798:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800879c:	2b04      	cmp	r3, #4
 800879e:	d10e      	bne.n	80087be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80087a0:	f7fd ff80 	bl	80066a4 <enq_lock>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d006      	beq.n	80087b8 <f_open+0xc8>
 80087aa:	f107 0318 	add.w	r3, r7, #24
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff f8dc 	bl	800796c <dir_register>
 80087b4:	4603      	mov	r3, r0
 80087b6:	e000      	b.n	80087ba <f_open+0xca>
 80087b8:	2312      	movs	r3, #18
 80087ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	f043 0308 	orr.w	r3, r3, #8
 80087c4:	71fb      	strb	r3, [r7, #7]
 80087c6:	e010      	b.n	80087ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80087c8:	7fbb      	ldrb	r3, [r7, #30]
 80087ca:	f003 0311 	and.w	r3, r3, #17
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <f_open+0xea>
					res = FR_DENIED;
 80087d2:	2307      	movs	r3, #7
 80087d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80087d8:	e007      	b.n	80087ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80087da:	79fb      	ldrb	r3, [r7, #7]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <f_open+0xfa>
 80087e4:	2308      	movs	r3, #8
 80087e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80087ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d168      	bne.n	80088c4 <f_open+0x1d4>
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d063      	beq.n	80088c4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80087fc:	f7fd fcf8 	bl	80061f0 <get_fattime>
 8008800:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	330e      	adds	r3, #14
 8008806:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008808:	4618      	mov	r0, r3
 800880a:	f7fd fe45 	bl	8006498 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	3316      	adds	r3, #22
 8008812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008814:	4618      	mov	r0, r3
 8008816:	f7fd fe3f 	bl	8006498 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800881a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881c:	330b      	adds	r3, #11
 800881e:	2220      	movs	r2, #32
 8008820:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe fe17 	bl	800745c <ld_clust>
 800882e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008834:	2200      	movs	r2, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fe2f 	bl	800749a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	331c      	adds	r3, #28
 8008840:	2100      	movs	r1, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f7fd fe28 	bl	8006498 <st_dword>
					fs->wflag = 1;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2201      	movs	r2, #1
 800884c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800884e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008850:	2b00      	cmp	r3, #0
 8008852:	d037      	beq.n	80088c4 <f_open+0x1d4>
						dw = fs->winsect;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008858:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800885a:	f107 0318 	add.w	r3, r7, #24
 800885e:	2200      	movs	r2, #0
 8008860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fb1f 	bl	8006ea6 <remove_chain>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800886e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008872:	2b00      	cmp	r3, #0
 8008874:	d126      	bne.n	80088c4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe f866 	bl	800694c <move_window>
 8008880:	4603      	mov	r3, r0
 8008882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800888a:	3a01      	subs	r2, #1
 800888c:	615a      	str	r2, [r3, #20]
 800888e:	e019      	b.n	80088c4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008894:	2b00      	cmp	r3, #0
 8008896:	d115      	bne.n	80088c4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008898:	7fbb      	ldrb	r3, [r7, #30]
 800889a:	f003 0310 	and.w	r3, r3, #16
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <f_open+0x1ba>
					res = FR_NO_FILE;
 80088a2:	2304      	movs	r3, #4
 80088a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80088a8:	e00c      	b.n	80088c4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d007      	beq.n	80088c4 <f_open+0x1d4>
 80088b4:	7fbb      	ldrb	r3, [r7, #30]
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <f_open+0x1d4>
						res = FR_DENIED;
 80088be:	2307      	movs	r3, #7
 80088c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80088c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d128      	bne.n	800891e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	f003 0308 	and.w	r3, r3, #8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088dc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80088e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	bf14      	ite	ne
 80088f6:	2301      	movne	r3, #1
 80088f8:	2300      	moveq	r3, #0
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	f107 0318 	add.w	r3, r7, #24
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd feef 	bl	80066e8 <inc_lock>
 800890a:	4602      	mov	r2, r0
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <f_open+0x22e>
 8008918:	2302      	movs	r3, #2
 800891a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800891e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 80a3 	bne.w	8008a6e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800892c:	4611      	mov	r1, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fd94 	bl	800745c <ld_clust>
 8008934:	4602      	mov	r2, r0
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	331c      	adds	r3, #28
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd fd6c 	bl	800641c <ld_dword>
 8008944:	4602      	mov	r2, r0
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	88da      	ldrh	r2, [r3, #6]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	79fa      	ldrb	r2, [r7, #7]
 8008962:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3330      	adds	r3, #48	; 0x30
 800897a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800897e:	2100      	movs	r1, #0
 8008980:	4618      	mov	r0, r3
 8008982:	f7fd fdd6 	bl	8006532 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	f003 0320 	and.w	r3, r3, #32
 800898c:	2b00      	cmp	r3, #0
 800898e:	d06e      	beq.n	8008a6e <f_open+0x37e>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d06a      	beq.n	8008a6e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	895b      	ldrh	r3, [r3, #10]
 80089a4:	461a      	mov	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	899b      	ldrh	r3, [r3, #12]
 80089aa:	fb02 f303 	mul.w	r3, r2, r3
 80089ae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089bc:	e016      	b.n	80089ec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe f87f 	bl	8006ac6 <get_fat>
 80089c8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80089ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d802      	bhi.n	80089d6 <f_open+0x2e6>
 80089d0:	2302      	movs	r3, #2
 80089d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80089d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d102      	bne.n	80089e4 <f_open+0x2f4>
 80089de:	2301      	movs	r3, #1
 80089e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d103      	bne.n	80089fc <f_open+0x30c>
 80089f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d8e0      	bhi.n	80089be <f_open+0x2ce>
				}
				fp->clust = clst;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a00:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d131      	bne.n	8008a6e <f_open+0x37e>
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	899b      	ldrh	r3, [r3, #12]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a16:	fb01 f202 	mul.w	r2, r1, r2
 8008a1a:	1a9b      	subs	r3, r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d026      	beq.n	8008a6e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe f82f 	bl	8006a88 <clust2sect>
 8008a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d103      	bne.n	8008a3a <f_open+0x34a>
						res = FR_INT_ERR;
 8008a32:	2302      	movs	r3, #2
 8008a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008a38:	e019      	b.n	8008a6e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	899b      	ldrh	r3, [r3, #12]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a42:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a48:	441a      	add	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	7858      	ldrb	r0, [r3, #1]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f7fd fc67 	bl	8006330 <disk_read>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <f_open+0x37e>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <f_open+0x38c>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008a7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3768      	adds	r7, #104	; 0x68
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08c      	sub	sp, #48	; 0x30
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f107 0210 	add.w	r2, r7, #16
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fda5 	bl	80085f8 <validate>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <f_write+0x44>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	7d5b      	ldrb	r3, [r3, #21]
 8008ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <f_write+0x4a>
 8008acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ad0:	e16a      	b.n	8008da8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <f_write+0x5a>
 8008ade:	2307      	movs	r3, #7
 8008ae0:	e162      	b.n	8008da8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	441a      	add	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	699b      	ldr	r3, [r3, #24]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	f080 814c 	bcs.w	8008d8c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	43db      	mvns	r3, r3
 8008afa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008afc:	e146      	b.n	8008d8c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	8992      	ldrh	r2, [r2, #12]
 8008b06:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b0a:	fb01 f202 	mul.w	r2, r1, r2
 8008b0e:	1a9b      	subs	r3, r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f040 80f1 	bne.w	8008cf8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	8992      	ldrh	r2, [r2, #12]
 8008b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	8952      	ldrh	r2, [r2, #10]
 8008b26:	3a01      	subs	r2, #1
 8008b28:	4013      	ands	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d143      	bne.n	8008bba <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d11a      	bne.n	8008b7c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fa10 	bl	8006f70 <create_chain>
 8008b50:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b52:	e013      	b.n	8008b7c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	4619      	mov	r1, r3
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7fe fa9c 	bl	80070a0 <clmt_clust>
 8008b68:	62b8      	str	r0, [r7, #40]	; 0x28
 8008b6a:	e007      	b.n	8008b7c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f7fe f9fb 	bl	8006f70 <create_chain>
 8008b7a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 8109 	beq.w	8008d96 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d104      	bne.n	8008b94 <f_write+0x10c>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	755a      	strb	r2, [r3, #21]
 8008b90:	2302      	movs	r3, #2
 8008b92:	e109      	b.n	8008da8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d104      	bne.n	8008ba6 <f_write+0x11e>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	755a      	strb	r2, [r3, #21]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e100      	b.n	8008da8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008baa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d102      	bne.n	8008bba <f_write+0x132>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	7d1b      	ldrb	r3, [r3, #20]
 8008bbe:	b25b      	sxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da18      	bge.n	8008bf6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	7858      	ldrb	r0, [r3, #1]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6a1a      	ldr	r2, [r3, #32]
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f7fd fbcc 	bl	8006370 <disk_write>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d004      	beq.n	8008be8 <f_write+0x160>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2201      	movs	r2, #1
 8008be2:	755a      	strb	r2, [r3, #21]
 8008be4:	2301      	movs	r3, #1
 8008be6:	e0df      	b.n	8008da8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	7d1b      	ldrb	r3, [r3, #20]
 8008bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	69db      	ldr	r3, [r3, #28]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f7fd ff42 	bl	8006a88 <clust2sect>
 8008c04:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d104      	bne.n	8008c16 <f_write+0x18e>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	755a      	strb	r2, [r3, #21]
 8008c12:	2302      	movs	r3, #2
 8008c14:	e0c8      	b.n	8008da8 <f_write+0x320>
			sect += csect;
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	4413      	add	r3, r2
 8008c1c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	899b      	ldrh	r3, [r3, #12]
 8008c22:	461a      	mov	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c2a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d043      	beq.n	8008cba <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	6a3b      	ldr	r3, [r7, #32]
 8008c36:	4413      	add	r3, r2
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	8952      	ldrh	r2, [r2, #10]
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d905      	bls.n	8008c4c <f_write+0x1c4>
					cc = fs->csize - csect;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	895b      	ldrh	r3, [r3, #10]
 8008c44:	461a      	mov	r2, r3
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	7858      	ldrb	r0, [r3, #1]
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	69f9      	ldr	r1, [r7, #28]
 8008c56:	f7fd fb8b 	bl	8006370 <disk_write>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d004      	beq.n	8008c6a <f_write+0x1e2>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	755a      	strb	r2, [r3, #21]
 8008c66:	2301      	movs	r3, #1
 8008c68:	e09e      	b.n	8008da8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6a1a      	ldr	r2, [r3, #32]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	6a3a      	ldr	r2, [r7, #32]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d918      	bls.n	8008caa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1a      	ldr	r2, [r3, #32]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	8992      	ldrh	r2, [r2, #12]
 8008c8a:	fb02 f303 	mul.w	r3, r2, r3
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	18d1      	adds	r1, r2, r3
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	899b      	ldrh	r3, [r3, #12]
 8008c96:	461a      	mov	r2, r3
 8008c98:	f7fd fc2a 	bl	80064f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	899b      	ldrh	r3, [r3, #12]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	fb02 f303 	mul.w	r3, r2, r3
 8008cb6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008cb8:	e04b      	b.n	8008d52 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d016      	beq.n	8008cf2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d210      	bcs.n	8008cf2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	7858      	ldrb	r0, [r3, #1]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cda:	2301      	movs	r3, #1
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	f7fd fb27 	bl	8006330 <disk_read>
 8008ce2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	755a      	strb	r2, [r3, #21]
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e05a      	b.n	8008da8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	899b      	ldrh	r3, [r3, #12]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	8992      	ldrh	r2, [r2, #12]
 8008d06:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d0a:	fb01 f202 	mul.w	r2, r1, r2
 8008d0e:	1a9b      	subs	r3, r3, r2
 8008d10:	1ac3      	subs	r3, r0, r3
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d901      	bls.n	8008d20 <f_write+0x298>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	699b      	ldr	r3, [r3, #24]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	8992      	ldrh	r2, [r2, #12]
 8008d2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d32:	fb00 f202 	mul.w	r2, r0, r2
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	440b      	add	r3, r1
 8008d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3c:	69f9      	ldr	r1, [r7, #28]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd fbd6 	bl	80064f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	7d1b      	ldrb	r3, [r3, #20]
 8008d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	4413      	add	r3, r2
 8008d58:	61fb      	str	r3, [r7, #28]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	441a      	add	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	619a      	str	r2, [r3, #24]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	bf38      	it	cc
 8008d72:	461a      	movcc	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	60da      	str	r2, [r3, #12]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	441a      	add	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f47f aeb5 	bne.w	8008afe <f_write+0x76>
 8008d94:	e000      	b.n	8008d98 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008d96:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	7d1b      	ldrb	r3, [r3, #20]
 8008d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3730      	adds	r7, #48	; 0x30
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f107 0208 	add.w	r2, r7, #8
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fc19 	bl	80085f8 <validate>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d168      	bne.n	8008ea2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	7d1b      	ldrb	r3, [r3, #20]
 8008dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d062      	beq.n	8008ea2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	7d1b      	ldrb	r3, [r3, #20]
 8008de0:	b25b      	sxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da15      	bge.n	8008e12 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	7858      	ldrb	r0, [r3, #1]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1a      	ldr	r2, [r3, #32]
 8008df4:	2301      	movs	r3, #1
 8008df6:	f7fd fabb 	bl	8006370 <disk_write>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <f_sync+0x54>
 8008e00:	2301      	movs	r3, #1
 8008e02:	e04f      	b.n	8008ea4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7d1b      	ldrb	r3, [r3, #20]
 8008e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e12:	f7fd f9ed 	bl	80061f0 <get_fattime>
 8008e16:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f7fd fd93 	bl	800694c <move_window>
 8008e26:	4603      	mov	r3, r0
 8008e28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d138      	bne.n	8008ea2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	330b      	adds	r3, #11
 8008e3a:	781a      	ldrb	r2, [r3, #0]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	330b      	adds	r3, #11
 8008e40:	f042 0220 	orr.w	r2, r2, #32
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	461a      	mov	r2, r3
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	f7fe fb21 	bl	800749a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f103 021c 	add.w	r2, r3, #28
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f7fd fb17 	bl	8006498 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3316      	adds	r3, #22
 8008e6e:	6939      	ldr	r1, [r7, #16]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7fd fb11 	bl	8006498 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3312      	adds	r3, #18
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fd faf0 	bl	8006462 <st_word>
					fs->wflag = 1;
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2201      	movs	r2, #1
 8008e86:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fd fd8c 	bl	80069a8 <sync_fs>
 8008e90:	4603      	mov	r3, r0
 8008e92:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	7d1b      	ldrb	r3, [r3, #20]
 8008e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3718      	adds	r7, #24
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff ff7b 	bl	8008db0 <f_sync>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d118      	bne.n	8008ef6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f107 0208 	add.w	r2, r7, #8
 8008eca:	4611      	mov	r1, r2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff fb93 	bl	80085f8 <validate>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10c      	bne.n	8008ef6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fd fc8f 	bl	8006804 <dec_lock>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d102      	bne.n	8008ef6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	d103      	bne.n	8008f1a <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008f12:	210d      	movs	r1, #13
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7ff fff3 	bl	8008f00 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db25      	blt.n	8008f72 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	60fa      	str	r2, [r7, #12]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	4413      	add	r3, r2
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b3c      	cmp	r3, #60	; 0x3c
 8008f38:	dd12      	ble.n	8008f60 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f103 010c 	add.w	r1, r3, #12
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	f107 0308 	add.w	r3, r7, #8
 8008f4a:	f7ff fd9d 	bl	8008a88 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d101      	bne.n	8008f5a <putc_bfd+0x5a>
 8008f56:	2300      	movs	r3, #0
 8008f58:	e001      	b.n	8008f5e <putc_bfd+0x5e>
 8008f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	609a      	str	r2, [r3, #8]
 8008f70:	e000      	b.n	8008f74 <putc_bfd+0x74>
	if (i < 0) return;
 8008f72:	bf00      	nop
}
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	db16      	blt.n	8008fb8 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f103 010c 	add.w	r1, r3, #12
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	f107 030c 	add.w	r3, r7, #12
 8008f9e:	f7ff fd73 	bl	8008a88 <f_write>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d107      	bne.n	8008fb8 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d102      	bne.n	8008fb8 <putc_flush+0x3e>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	e001      	b.n	8008fbc <putc_flush+0x42>
	return EOF;
 8008fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	683a      	ldr	r2, [r7, #0]
 8008fd2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	609a      	str	r2, [r3, #8]
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b096      	sub	sp, #88	; 0x58
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008ff8:	f107 030c 	add.w	r3, r7, #12
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff ffe0 	bl	8008fc4 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009004:	e009      	b.n	800901a <f_puts+0x2c>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	781a      	ldrb	r2, [r3, #0]
 800900e:	f107 030c 	add.w	r3, r7, #12
 8009012:	4611      	mov	r1, r2
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff ff73 	bl	8008f00 <putc_bfd>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f1      	bne.n	8009006 <f_puts+0x18>
	return putc_flush(&pb);
 8009022:	f107 030c 	add.w	r3, r7, #12
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff ffa7 	bl	8008f7a <putc_flush>
 800902c:	4603      	mov	r3, r0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3758      	adds	r7, #88	; 0x58
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009038:	b480      	push	{r7}
 800903a:	b087      	sub	sp, #28
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009046:	2301      	movs	r3, #1
 8009048:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800904e:	4b1f      	ldr	r3, [pc, #124]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d131      	bne.n	80090bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009058:	4b1c      	ldr	r3, [pc, #112]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 800905a:	7a5b      	ldrb	r3, [r3, #9]
 800905c:	b2db      	uxtb	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009062:	2100      	movs	r1, #0
 8009064:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009066:	4b19      	ldr	r3, [pc, #100]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009068:	7a5b      	ldrb	r3, [r3, #9]
 800906a:	b2db      	uxtb	r3, r3
 800906c:	4a17      	ldr	r2, [pc, #92]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009076:	4b15      	ldr	r3, [pc, #84]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009078:	7a5b      	ldrb	r3, [r3, #9]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	461a      	mov	r2, r3
 800907e:	4b13      	ldr	r3, [pc, #76]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009080:	4413      	add	r3, r2
 8009082:	79fa      	ldrb	r2, [r7, #7]
 8009084:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009086:	4b11      	ldr	r3, [pc, #68]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009088:	7a5b      	ldrb	r3, [r3, #9]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	b2d1      	uxtb	r1, r2
 8009090:	4a0e      	ldr	r2, [pc, #56]	; (80090cc <FATFS_LinkDriverEx+0x94>)
 8009092:	7251      	strb	r1, [r2, #9]
 8009094:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009096:	7dbb      	ldrb	r3, [r7, #22]
 8009098:	3330      	adds	r3, #48	; 0x30
 800909a:	b2da      	uxtb	r2, r3
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	3301      	adds	r3, #1
 80090a4:	223a      	movs	r2, #58	; 0x3a
 80090a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	3302      	adds	r3, #2
 80090ac:	222f      	movs	r2, #47	; 0x2f
 80090ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	3303      	adds	r3, #3
 80090b4:	2200      	movs	r2, #0
 80090b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	20002518 	.word	0x20002518

080090d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090da:	2200      	movs	r2, #0
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ffaa 	bl	8009038 <FATFS_LinkDriverEx>
 80090e4:	4603      	mov	r3, r0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090fc:	88fb      	ldrh	r3, [r7, #6]
 80090fe:	2b7f      	cmp	r3, #127	; 0x7f
 8009100:	d802      	bhi.n	8009108 <ff_convert+0x18>
		c = chr;
 8009102:	88fb      	ldrh	r3, [r7, #6]
 8009104:	81fb      	strh	r3, [r7, #14]
 8009106:	e025      	b.n	8009154 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00b      	beq.n	8009126 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	2bff      	cmp	r3, #255	; 0xff
 8009112:	d805      	bhi.n	8009120 <ff_convert+0x30>
 8009114:	88fb      	ldrh	r3, [r7, #6]
 8009116:	3b80      	subs	r3, #128	; 0x80
 8009118:	4a12      	ldr	r2, [pc, #72]	; (8009164 <ff_convert+0x74>)
 800911a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800911e:	e000      	b.n	8009122 <ff_convert+0x32>
 8009120:	2300      	movs	r3, #0
 8009122:	81fb      	strh	r3, [r7, #14]
 8009124:	e016      	b.n	8009154 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009126:	2300      	movs	r3, #0
 8009128:	81fb      	strh	r3, [r7, #14]
 800912a:	e009      	b.n	8009140 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800912c:	89fb      	ldrh	r3, [r7, #14]
 800912e:	4a0d      	ldr	r2, [pc, #52]	; (8009164 <ff_convert+0x74>)
 8009130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009134:	88fa      	ldrh	r2, [r7, #6]
 8009136:	429a      	cmp	r2, r3
 8009138:	d006      	beq.n	8009148 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800913a:	89fb      	ldrh	r3, [r7, #14]
 800913c:	3301      	adds	r3, #1
 800913e:	81fb      	strh	r3, [r7, #14]
 8009140:	89fb      	ldrh	r3, [r7, #14]
 8009142:	2b7f      	cmp	r3, #127	; 0x7f
 8009144:	d9f2      	bls.n	800912c <ff_convert+0x3c>
 8009146:	e000      	b.n	800914a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009148:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800914a:	89fb      	ldrh	r3, [r7, #14]
 800914c:	3380      	adds	r3, #128	; 0x80
 800914e:	b29b      	uxth	r3, r3
 8009150:	b2db      	uxtb	r3, r3
 8009152:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009154:	89fb      	ldrh	r3, [r7, #14]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	08009d48 	.word	0x08009d48

08009168 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009178:	d201      	bcs.n	800917e <ff_wtoupper+0x16>
 800917a:	4b3e      	ldr	r3, [pc, #248]	; (8009274 <ff_wtoupper+0x10c>)
 800917c:	e000      	b.n	8009180 <ff_wtoupper+0x18>
 800917e:	4b3e      	ldr	r3, [pc, #248]	; (8009278 <ff_wtoupper+0x110>)
 8009180:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	1c9a      	adds	r2, r3, #2
 8009186:	617a      	str	r2, [r7, #20]
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800918c:	8a7b      	ldrh	r3, [r7, #18]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d068      	beq.n	8009264 <ff_wtoupper+0xfc>
 8009192:	88fa      	ldrh	r2, [r7, #6]
 8009194:	8a7b      	ldrh	r3, [r7, #18]
 8009196:	429a      	cmp	r2, r3
 8009198:	d364      	bcc.n	8009264 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	1c9a      	adds	r2, r3, #2
 800919e:	617a      	str	r2, [r7, #20]
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	823b      	strh	r3, [r7, #16]
 80091a4:	8a3b      	ldrh	r3, [r7, #16]
 80091a6:	0a1b      	lsrs	r3, r3, #8
 80091a8:	81fb      	strh	r3, [r7, #14]
 80091aa:	8a3b      	ldrh	r3, [r7, #16]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80091b0:	88fa      	ldrh	r2, [r7, #6]
 80091b2:	8a79      	ldrh	r1, [r7, #18]
 80091b4:	8a3b      	ldrh	r3, [r7, #16]
 80091b6:	440b      	add	r3, r1
 80091b8:	429a      	cmp	r2, r3
 80091ba:	da49      	bge.n	8009250 <ff_wtoupper+0xe8>
			switch (cmd) {
 80091bc:	89fb      	ldrh	r3, [r7, #14]
 80091be:	2b08      	cmp	r3, #8
 80091c0:	d84f      	bhi.n	8009262 <ff_wtoupper+0xfa>
 80091c2:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <ff_wtoupper+0x60>)
 80091c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c8:	080091ed 	.word	0x080091ed
 80091cc:	080091ff 	.word	0x080091ff
 80091d0:	08009215 	.word	0x08009215
 80091d4:	0800921d 	.word	0x0800921d
 80091d8:	08009225 	.word	0x08009225
 80091dc:	0800922d 	.word	0x0800922d
 80091e0:	08009235 	.word	0x08009235
 80091e4:	0800923d 	.word	0x0800923d
 80091e8:	08009245 	.word	0x08009245
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091ec:	88fa      	ldrh	r2, [r7, #6]
 80091ee:	8a7b      	ldrh	r3, [r7, #18]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4413      	add	r3, r2
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	80fb      	strh	r3, [r7, #6]
 80091fc:	e027      	b.n	800924e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091fe:	88fa      	ldrh	r2, [r7, #6]
 8009200:	8a7b      	ldrh	r3, [r7, #18]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	b29b      	uxth	r3, r3
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	b29b      	uxth	r3, r3
 800920c:	88fa      	ldrh	r2, [r7, #6]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	80fb      	strh	r3, [r7, #6]
 8009212:	e01c      	b.n	800924e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	3b10      	subs	r3, #16
 8009218:	80fb      	strh	r3, [r7, #6]
 800921a:	e018      	b.n	800924e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800921c:	88fb      	ldrh	r3, [r7, #6]
 800921e:	3b20      	subs	r3, #32
 8009220:	80fb      	strh	r3, [r7, #6]
 8009222:	e014      	b.n	800924e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	3b30      	subs	r3, #48	; 0x30
 8009228:	80fb      	strh	r3, [r7, #6]
 800922a:	e010      	b.n	800924e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800922c:	88fb      	ldrh	r3, [r7, #6]
 800922e:	3b1a      	subs	r3, #26
 8009230:	80fb      	strh	r3, [r7, #6]
 8009232:	e00c      	b.n	800924e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	3308      	adds	r3, #8
 8009238:	80fb      	strh	r3, [r7, #6]
 800923a:	e008      	b.n	800924e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800923c:	88fb      	ldrh	r3, [r7, #6]
 800923e:	3b50      	subs	r3, #80	; 0x50
 8009240:	80fb      	strh	r3, [r7, #6]
 8009242:	e004      	b.n	800924e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800924a:	80fb      	strh	r3, [r7, #6]
 800924c:	bf00      	nop
			}
			break;
 800924e:	e008      	b.n	8009262 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009250:	89fb      	ldrh	r3, [r7, #14]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d195      	bne.n	8009182 <ff_wtoupper+0x1a>
 8009256:	8a3b      	ldrh	r3, [r7, #16]
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4413      	add	r3, r2
 800925e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009260:	e78f      	b.n	8009182 <ff_wtoupper+0x1a>
			break;
 8009262:	bf00      	nop
	}

	return chr;
 8009264:	88fb      	ldrh	r3, [r7, #6]
}
 8009266:	4618      	mov	r0, r3
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	08009e48 	.word	0x08009e48
 8009278:	0800a03c 	.word	0x0800a03c

0800927c <trunc>:
 800927c:	ec51 0b10 	vmov	r0, r1, d0
 8009280:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009284:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009288:	2b13      	cmp	r3, #19
 800928a:	b5d0      	push	{r4, r6, r7, lr}
 800928c:	460c      	mov	r4, r1
 800928e:	dc10      	bgt.n	80092b2 <trunc+0x36>
 8009290:	2b00      	cmp	r3, #0
 8009292:	bfa5      	ittet	ge
 8009294:	4a11      	ldrge	r2, [pc, #68]	; (80092dc <trunc+0x60>)
 8009296:	fa42 f303 	asrge.w	r3, r2, r3
 800929a:	2100      	movlt	r1, #0
 800929c:	2100      	movge	r1, #0
 800929e:	bfb9      	ittee	lt
 80092a0:	2000      	movlt	r0, #0
 80092a2:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80092a6:	2000      	movge	r0, #0
 80092a8:	ea24 0103 	bicge.w	r1, r4, r3
 80092ac:	ec41 0b10 	vmov	d0, r0, r1
 80092b0:	bdd0      	pop	{r4, r6, r7, pc}
 80092b2:	2b33      	cmp	r3, #51	; 0x33
 80092b4:	dd08      	ble.n	80092c8 <trunc+0x4c>
 80092b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ba:	d1f7      	bne.n	80092ac <trunc+0x30>
 80092bc:	ee10 2a10 	vmov	r2, s0
 80092c0:	460b      	mov	r3, r1
 80092c2:	f7f6 fffb 	bl	80002bc <__adddf3>
 80092c6:	e7f1      	b.n	80092ac <trunc+0x30>
 80092c8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	fa23 f202 	lsr.w	r2, r3, r2
 80092d4:	ea20 0602 	bic.w	r6, r0, r2
 80092d8:	4630      	mov	r0, r6
 80092da:	e7e7      	b.n	80092ac <trunc+0x30>
 80092dc:	000fffff 	.word	0x000fffff

080092e0 <__errno>:
 80092e0:	4b01      	ldr	r3, [pc, #4]	; (80092e8 <__errno+0x8>)
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000028 	.word	0x20000028

080092ec <__libc_init_array>:
 80092ec:	b570      	push	{r4, r5, r6, lr}
 80092ee:	4d0d      	ldr	r5, [pc, #52]	; (8009324 <__libc_init_array+0x38>)
 80092f0:	4c0d      	ldr	r4, [pc, #52]	; (8009328 <__libc_init_array+0x3c>)
 80092f2:	1b64      	subs	r4, r4, r5
 80092f4:	10a4      	asrs	r4, r4, #2
 80092f6:	2600      	movs	r6, #0
 80092f8:	42a6      	cmp	r6, r4
 80092fa:	d109      	bne.n	8009310 <__libc_init_array+0x24>
 80092fc:	4d0b      	ldr	r5, [pc, #44]	; (800932c <__libc_init_array+0x40>)
 80092fe:	4c0c      	ldr	r4, [pc, #48]	; (8009330 <__libc_init_array+0x44>)
 8009300:	f000 fc8e 	bl	8009c20 <_init>
 8009304:	1b64      	subs	r4, r4, r5
 8009306:	10a4      	asrs	r4, r4, #2
 8009308:	2600      	movs	r6, #0
 800930a:	42a6      	cmp	r6, r4
 800930c:	d105      	bne.n	800931a <__libc_init_array+0x2e>
 800930e:	bd70      	pop	{r4, r5, r6, pc}
 8009310:	f855 3b04 	ldr.w	r3, [r5], #4
 8009314:	4798      	blx	r3
 8009316:	3601      	adds	r6, #1
 8009318:	e7ee      	b.n	80092f8 <__libc_init_array+0xc>
 800931a:	f855 3b04 	ldr.w	r3, [r5], #4
 800931e:	4798      	blx	r3
 8009320:	3601      	adds	r6, #1
 8009322:	e7f2      	b.n	800930a <__libc_init_array+0x1e>
 8009324:	0800a134 	.word	0x0800a134
 8009328:	0800a134 	.word	0x0800a134
 800932c:	0800a134 	.word	0x0800a134
 8009330:	0800a138 	.word	0x0800a138

08009334 <memset>:
 8009334:	4402      	add	r2, r0
 8009336:	4603      	mov	r3, r0
 8009338:	4293      	cmp	r3, r2
 800933a:	d100      	bne.n	800933e <memset+0xa>
 800933c:	4770      	bx	lr
 800933e:	f803 1b01 	strb.w	r1, [r3], #1
 8009342:	e7f9      	b.n	8009338 <memset+0x4>

08009344 <siprintf>:
 8009344:	b40e      	push	{r1, r2, r3}
 8009346:	b500      	push	{lr}
 8009348:	b09c      	sub	sp, #112	; 0x70
 800934a:	ab1d      	add	r3, sp, #116	; 0x74
 800934c:	9002      	str	r0, [sp, #8]
 800934e:	9006      	str	r0, [sp, #24]
 8009350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009354:	4809      	ldr	r0, [pc, #36]	; (800937c <siprintf+0x38>)
 8009356:	9107      	str	r1, [sp, #28]
 8009358:	9104      	str	r1, [sp, #16]
 800935a:	4909      	ldr	r1, [pc, #36]	; (8009380 <siprintf+0x3c>)
 800935c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009360:	9105      	str	r1, [sp, #20]
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	a902      	add	r1, sp, #8
 8009368:	f000 f868 	bl	800943c <_svfiprintf_r>
 800936c:	9b02      	ldr	r3, [sp, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	b01c      	add	sp, #112	; 0x70
 8009374:	f85d eb04 	ldr.w	lr, [sp], #4
 8009378:	b003      	add	sp, #12
 800937a:	4770      	bx	lr
 800937c:	20000028 	.word	0x20000028
 8009380:	ffff0208 	.word	0xffff0208

08009384 <__ssputs_r>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	688e      	ldr	r6, [r1, #8]
 800938a:	429e      	cmp	r6, r3
 800938c:	4682      	mov	sl, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4690      	mov	r8, r2
 8009392:	461f      	mov	r7, r3
 8009394:	d838      	bhi.n	8009408 <__ssputs_r+0x84>
 8009396:	898a      	ldrh	r2, [r1, #12]
 8009398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800939c:	d032      	beq.n	8009404 <__ssputs_r+0x80>
 800939e:	6825      	ldr	r5, [r4, #0]
 80093a0:	6909      	ldr	r1, [r1, #16]
 80093a2:	eba5 0901 	sub.w	r9, r5, r1
 80093a6:	6965      	ldr	r5, [r4, #20]
 80093a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093b0:	3301      	adds	r3, #1
 80093b2:	444b      	add	r3, r9
 80093b4:	106d      	asrs	r5, r5, #1
 80093b6:	429d      	cmp	r5, r3
 80093b8:	bf38      	it	cc
 80093ba:	461d      	movcc	r5, r3
 80093bc:	0553      	lsls	r3, r2, #21
 80093be:	d531      	bpl.n	8009424 <__ssputs_r+0xa0>
 80093c0:	4629      	mov	r1, r5
 80093c2:	f000 fb63 	bl	8009a8c <_malloc_r>
 80093c6:	4606      	mov	r6, r0
 80093c8:	b950      	cbnz	r0, 80093e0 <__ssputs_r+0x5c>
 80093ca:	230c      	movs	r3, #12
 80093cc:	f8ca 3000 	str.w	r3, [sl]
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e0:	6921      	ldr	r1, [r4, #16]
 80093e2:	464a      	mov	r2, r9
 80093e4:	f000 fabe 	bl	8009964 <memcpy>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	6126      	str	r6, [r4, #16]
 80093f6:	6165      	str	r5, [r4, #20]
 80093f8:	444e      	add	r6, r9
 80093fa:	eba5 0509 	sub.w	r5, r5, r9
 80093fe:	6026      	str	r6, [r4, #0]
 8009400:	60a5      	str	r5, [r4, #8]
 8009402:	463e      	mov	r6, r7
 8009404:	42be      	cmp	r6, r7
 8009406:	d900      	bls.n	800940a <__ssputs_r+0x86>
 8009408:	463e      	mov	r6, r7
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	4632      	mov	r2, r6
 800940e:	4641      	mov	r1, r8
 8009410:	f000 fab6 	bl	8009980 <memmove>
 8009414:	68a3      	ldr	r3, [r4, #8]
 8009416:	1b9b      	subs	r3, r3, r6
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	4433      	add	r3, r6
 800941e:	6023      	str	r3, [r4, #0]
 8009420:	2000      	movs	r0, #0
 8009422:	e7db      	b.n	80093dc <__ssputs_r+0x58>
 8009424:	462a      	mov	r2, r5
 8009426:	f000 fba5 	bl	8009b74 <_realloc_r>
 800942a:	4606      	mov	r6, r0
 800942c:	2800      	cmp	r0, #0
 800942e:	d1e1      	bne.n	80093f4 <__ssputs_r+0x70>
 8009430:	6921      	ldr	r1, [r4, #16]
 8009432:	4650      	mov	r0, sl
 8009434:	f000 fabe 	bl	80099b4 <_free_r>
 8009438:	e7c7      	b.n	80093ca <__ssputs_r+0x46>
	...

0800943c <_svfiprintf_r>:
 800943c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009440:	4698      	mov	r8, r3
 8009442:	898b      	ldrh	r3, [r1, #12]
 8009444:	061b      	lsls	r3, r3, #24
 8009446:	b09d      	sub	sp, #116	; 0x74
 8009448:	4607      	mov	r7, r0
 800944a:	460d      	mov	r5, r1
 800944c:	4614      	mov	r4, r2
 800944e:	d50e      	bpl.n	800946e <_svfiprintf_r+0x32>
 8009450:	690b      	ldr	r3, [r1, #16]
 8009452:	b963      	cbnz	r3, 800946e <_svfiprintf_r+0x32>
 8009454:	2140      	movs	r1, #64	; 0x40
 8009456:	f000 fb19 	bl	8009a8c <_malloc_r>
 800945a:	6028      	str	r0, [r5, #0]
 800945c:	6128      	str	r0, [r5, #16]
 800945e:	b920      	cbnz	r0, 800946a <_svfiprintf_r+0x2e>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	e0d1      	b.n	800960e <_svfiprintf_r+0x1d2>
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	616b      	str	r3, [r5, #20]
 800946e:	2300      	movs	r3, #0
 8009470:	9309      	str	r3, [sp, #36]	; 0x24
 8009472:	2320      	movs	r3, #32
 8009474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009478:	f8cd 800c 	str.w	r8, [sp, #12]
 800947c:	2330      	movs	r3, #48	; 0x30
 800947e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009628 <_svfiprintf_r+0x1ec>
 8009482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009486:	f04f 0901 	mov.w	r9, #1
 800948a:	4623      	mov	r3, r4
 800948c:	469a      	mov	sl, r3
 800948e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009492:	b10a      	cbz	r2, 8009498 <_svfiprintf_r+0x5c>
 8009494:	2a25      	cmp	r2, #37	; 0x25
 8009496:	d1f9      	bne.n	800948c <_svfiprintf_r+0x50>
 8009498:	ebba 0b04 	subs.w	fp, sl, r4
 800949c:	d00b      	beq.n	80094b6 <_svfiprintf_r+0x7a>
 800949e:	465b      	mov	r3, fp
 80094a0:	4622      	mov	r2, r4
 80094a2:	4629      	mov	r1, r5
 80094a4:	4638      	mov	r0, r7
 80094a6:	f7ff ff6d 	bl	8009384 <__ssputs_r>
 80094aa:	3001      	adds	r0, #1
 80094ac:	f000 80aa 	beq.w	8009604 <_svfiprintf_r+0x1c8>
 80094b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094b2:	445a      	add	r2, fp
 80094b4:	9209      	str	r2, [sp, #36]	; 0x24
 80094b6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f000 80a2 	beq.w	8009604 <_svfiprintf_r+0x1c8>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ca:	f10a 0a01 	add.w	sl, sl, #1
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d6:	931a      	str	r3, [sp, #104]	; 0x68
 80094d8:	4654      	mov	r4, sl
 80094da:	2205      	movs	r2, #5
 80094dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094e0:	4851      	ldr	r0, [pc, #324]	; (8009628 <_svfiprintf_r+0x1ec>)
 80094e2:	f7f6 fe95 	bl	8000210 <memchr>
 80094e6:	9a04      	ldr	r2, [sp, #16]
 80094e8:	b9d8      	cbnz	r0, 8009522 <_svfiprintf_r+0xe6>
 80094ea:	06d0      	lsls	r0, r2, #27
 80094ec:	bf44      	itt	mi
 80094ee:	2320      	movmi	r3, #32
 80094f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f4:	0711      	lsls	r1, r2, #28
 80094f6:	bf44      	itt	mi
 80094f8:	232b      	movmi	r3, #43	; 0x2b
 80094fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009502:	2b2a      	cmp	r3, #42	; 0x2a
 8009504:	d015      	beq.n	8009532 <_svfiprintf_r+0xf6>
 8009506:	9a07      	ldr	r2, [sp, #28]
 8009508:	4654      	mov	r4, sl
 800950a:	2000      	movs	r0, #0
 800950c:	f04f 0c0a 	mov.w	ip, #10
 8009510:	4621      	mov	r1, r4
 8009512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009516:	3b30      	subs	r3, #48	; 0x30
 8009518:	2b09      	cmp	r3, #9
 800951a:	d94e      	bls.n	80095ba <_svfiprintf_r+0x17e>
 800951c:	b1b0      	cbz	r0, 800954c <_svfiprintf_r+0x110>
 800951e:	9207      	str	r2, [sp, #28]
 8009520:	e014      	b.n	800954c <_svfiprintf_r+0x110>
 8009522:	eba0 0308 	sub.w	r3, r0, r8
 8009526:	fa09 f303 	lsl.w	r3, r9, r3
 800952a:	4313      	orrs	r3, r2
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	46a2      	mov	sl, r4
 8009530:	e7d2      	b.n	80094d8 <_svfiprintf_r+0x9c>
 8009532:	9b03      	ldr	r3, [sp, #12]
 8009534:	1d19      	adds	r1, r3, #4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	9103      	str	r1, [sp, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	bfbb      	ittet	lt
 800953e:	425b      	neglt	r3, r3
 8009540:	f042 0202 	orrlt.w	r2, r2, #2
 8009544:	9307      	strge	r3, [sp, #28]
 8009546:	9307      	strlt	r3, [sp, #28]
 8009548:	bfb8      	it	lt
 800954a:	9204      	strlt	r2, [sp, #16]
 800954c:	7823      	ldrb	r3, [r4, #0]
 800954e:	2b2e      	cmp	r3, #46	; 0x2e
 8009550:	d10c      	bne.n	800956c <_svfiprintf_r+0x130>
 8009552:	7863      	ldrb	r3, [r4, #1]
 8009554:	2b2a      	cmp	r3, #42	; 0x2a
 8009556:	d135      	bne.n	80095c4 <_svfiprintf_r+0x188>
 8009558:	9b03      	ldr	r3, [sp, #12]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	9203      	str	r2, [sp, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfb8      	it	lt
 8009564:	f04f 33ff 	movlt.w	r3, #4294967295
 8009568:	3402      	adds	r4, #2
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009638 <_svfiprintf_r+0x1fc>
 8009570:	7821      	ldrb	r1, [r4, #0]
 8009572:	2203      	movs	r2, #3
 8009574:	4650      	mov	r0, sl
 8009576:	f7f6 fe4b 	bl	8000210 <memchr>
 800957a:	b140      	cbz	r0, 800958e <_svfiprintf_r+0x152>
 800957c:	2340      	movs	r3, #64	; 0x40
 800957e:	eba0 000a 	sub.w	r0, r0, sl
 8009582:	fa03 f000 	lsl.w	r0, r3, r0
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	4303      	orrs	r3, r0
 800958a:	3401      	adds	r4, #1
 800958c:	9304      	str	r3, [sp, #16]
 800958e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009592:	4826      	ldr	r0, [pc, #152]	; (800962c <_svfiprintf_r+0x1f0>)
 8009594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009598:	2206      	movs	r2, #6
 800959a:	f7f6 fe39 	bl	8000210 <memchr>
 800959e:	2800      	cmp	r0, #0
 80095a0:	d038      	beq.n	8009614 <_svfiprintf_r+0x1d8>
 80095a2:	4b23      	ldr	r3, [pc, #140]	; (8009630 <_svfiprintf_r+0x1f4>)
 80095a4:	bb1b      	cbnz	r3, 80095ee <_svfiprintf_r+0x1b2>
 80095a6:	9b03      	ldr	r3, [sp, #12]
 80095a8:	3307      	adds	r3, #7
 80095aa:	f023 0307 	bic.w	r3, r3, #7
 80095ae:	3308      	adds	r3, #8
 80095b0:	9303      	str	r3, [sp, #12]
 80095b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b4:	4433      	add	r3, r6
 80095b6:	9309      	str	r3, [sp, #36]	; 0x24
 80095b8:	e767      	b.n	800948a <_svfiprintf_r+0x4e>
 80095ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80095be:	460c      	mov	r4, r1
 80095c0:	2001      	movs	r0, #1
 80095c2:	e7a5      	b.n	8009510 <_svfiprintf_r+0xd4>
 80095c4:	2300      	movs	r3, #0
 80095c6:	3401      	adds	r4, #1
 80095c8:	9305      	str	r3, [sp, #20]
 80095ca:	4619      	mov	r1, r3
 80095cc:	f04f 0c0a 	mov.w	ip, #10
 80095d0:	4620      	mov	r0, r4
 80095d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d6:	3a30      	subs	r2, #48	; 0x30
 80095d8:	2a09      	cmp	r2, #9
 80095da:	d903      	bls.n	80095e4 <_svfiprintf_r+0x1a8>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0c5      	beq.n	800956c <_svfiprintf_r+0x130>
 80095e0:	9105      	str	r1, [sp, #20]
 80095e2:	e7c3      	b.n	800956c <_svfiprintf_r+0x130>
 80095e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e8:	4604      	mov	r4, r0
 80095ea:	2301      	movs	r3, #1
 80095ec:	e7f0      	b.n	80095d0 <_svfiprintf_r+0x194>
 80095ee:	ab03      	add	r3, sp, #12
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	462a      	mov	r2, r5
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <_svfiprintf_r+0x1f8>)
 80095f6:	a904      	add	r1, sp, #16
 80095f8:	4638      	mov	r0, r7
 80095fa:	f3af 8000 	nop.w
 80095fe:	1c42      	adds	r2, r0, #1
 8009600:	4606      	mov	r6, r0
 8009602:	d1d6      	bne.n	80095b2 <_svfiprintf_r+0x176>
 8009604:	89ab      	ldrh	r3, [r5, #12]
 8009606:	065b      	lsls	r3, r3, #25
 8009608:	f53f af2c 	bmi.w	8009464 <_svfiprintf_r+0x28>
 800960c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960e:	b01d      	add	sp, #116	; 0x74
 8009610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009614:	ab03      	add	r3, sp, #12
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	462a      	mov	r2, r5
 800961a:	4b06      	ldr	r3, [pc, #24]	; (8009634 <_svfiprintf_r+0x1f8>)
 800961c:	a904      	add	r1, sp, #16
 800961e:	4638      	mov	r0, r7
 8009620:	f000 f87a 	bl	8009718 <_printf_i>
 8009624:	e7eb      	b.n	80095fe <_svfiprintf_r+0x1c2>
 8009626:	bf00      	nop
 8009628:	0800a0f8 	.word	0x0800a0f8
 800962c:	0800a102 	.word	0x0800a102
 8009630:	00000000 	.word	0x00000000
 8009634:	08009385 	.word	0x08009385
 8009638:	0800a0fe 	.word	0x0800a0fe

0800963c <_printf_common>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	4616      	mov	r6, r2
 8009642:	4699      	mov	r9, r3
 8009644:	688a      	ldr	r2, [r1, #8]
 8009646:	690b      	ldr	r3, [r1, #16]
 8009648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800964c:	4293      	cmp	r3, r2
 800964e:	bfb8      	it	lt
 8009650:	4613      	movlt	r3, r2
 8009652:	6033      	str	r3, [r6, #0]
 8009654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009658:	4607      	mov	r7, r0
 800965a:	460c      	mov	r4, r1
 800965c:	b10a      	cbz	r2, 8009662 <_printf_common+0x26>
 800965e:	3301      	adds	r3, #1
 8009660:	6033      	str	r3, [r6, #0]
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	0699      	lsls	r1, r3, #26
 8009666:	bf42      	ittt	mi
 8009668:	6833      	ldrmi	r3, [r6, #0]
 800966a:	3302      	addmi	r3, #2
 800966c:	6033      	strmi	r3, [r6, #0]
 800966e:	6825      	ldr	r5, [r4, #0]
 8009670:	f015 0506 	ands.w	r5, r5, #6
 8009674:	d106      	bne.n	8009684 <_printf_common+0x48>
 8009676:	f104 0a19 	add.w	sl, r4, #25
 800967a:	68e3      	ldr	r3, [r4, #12]
 800967c:	6832      	ldr	r2, [r6, #0]
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	42ab      	cmp	r3, r5
 8009682:	dc26      	bgt.n	80096d2 <_printf_common+0x96>
 8009684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009688:	1e13      	subs	r3, r2, #0
 800968a:	6822      	ldr	r2, [r4, #0]
 800968c:	bf18      	it	ne
 800968e:	2301      	movne	r3, #1
 8009690:	0692      	lsls	r2, r2, #26
 8009692:	d42b      	bmi.n	80096ec <_printf_common+0xb0>
 8009694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009698:	4649      	mov	r1, r9
 800969a:	4638      	mov	r0, r7
 800969c:	47c0      	blx	r8
 800969e:	3001      	adds	r0, #1
 80096a0:	d01e      	beq.n	80096e0 <_printf_common+0xa4>
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	68e5      	ldr	r5, [r4, #12]
 80096a6:	6832      	ldr	r2, [r6, #0]
 80096a8:	f003 0306 	and.w	r3, r3, #6
 80096ac:	2b04      	cmp	r3, #4
 80096ae:	bf08      	it	eq
 80096b0:	1aad      	subeq	r5, r5, r2
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	6922      	ldr	r2, [r4, #16]
 80096b6:	bf0c      	ite	eq
 80096b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096bc:	2500      	movne	r5, #0
 80096be:	4293      	cmp	r3, r2
 80096c0:	bfc4      	itt	gt
 80096c2:	1a9b      	subgt	r3, r3, r2
 80096c4:	18ed      	addgt	r5, r5, r3
 80096c6:	2600      	movs	r6, #0
 80096c8:	341a      	adds	r4, #26
 80096ca:	42b5      	cmp	r5, r6
 80096cc:	d11a      	bne.n	8009704 <_printf_common+0xc8>
 80096ce:	2000      	movs	r0, #0
 80096d0:	e008      	b.n	80096e4 <_printf_common+0xa8>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4652      	mov	r2, sl
 80096d6:	4649      	mov	r1, r9
 80096d8:	4638      	mov	r0, r7
 80096da:	47c0      	blx	r8
 80096dc:	3001      	adds	r0, #1
 80096de:	d103      	bne.n	80096e8 <_printf_common+0xac>
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295
 80096e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e8:	3501      	adds	r5, #1
 80096ea:	e7c6      	b.n	800967a <_printf_common+0x3e>
 80096ec:	18e1      	adds	r1, r4, r3
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	2030      	movs	r0, #48	; 0x30
 80096f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096f6:	4422      	add	r2, r4
 80096f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009700:	3302      	adds	r3, #2
 8009702:	e7c7      	b.n	8009694 <_printf_common+0x58>
 8009704:	2301      	movs	r3, #1
 8009706:	4622      	mov	r2, r4
 8009708:	4649      	mov	r1, r9
 800970a:	4638      	mov	r0, r7
 800970c:	47c0      	blx	r8
 800970e:	3001      	adds	r0, #1
 8009710:	d0e6      	beq.n	80096e0 <_printf_common+0xa4>
 8009712:	3601      	adds	r6, #1
 8009714:	e7d9      	b.n	80096ca <_printf_common+0x8e>
	...

08009718 <_printf_i>:
 8009718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	7e0f      	ldrb	r7, [r1, #24]
 800971e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009720:	2f78      	cmp	r7, #120	; 0x78
 8009722:	4691      	mov	r9, r2
 8009724:	4680      	mov	r8, r0
 8009726:	460c      	mov	r4, r1
 8009728:	469a      	mov	sl, r3
 800972a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800972e:	d807      	bhi.n	8009740 <_printf_i+0x28>
 8009730:	2f62      	cmp	r7, #98	; 0x62
 8009732:	d80a      	bhi.n	800974a <_printf_i+0x32>
 8009734:	2f00      	cmp	r7, #0
 8009736:	f000 80d8 	beq.w	80098ea <_printf_i+0x1d2>
 800973a:	2f58      	cmp	r7, #88	; 0x58
 800973c:	f000 80a3 	beq.w	8009886 <_printf_i+0x16e>
 8009740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009748:	e03a      	b.n	80097c0 <_printf_i+0xa8>
 800974a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800974e:	2b15      	cmp	r3, #21
 8009750:	d8f6      	bhi.n	8009740 <_printf_i+0x28>
 8009752:	a101      	add	r1, pc, #4	; (adr r1, 8009758 <_printf_i+0x40>)
 8009754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009758:	080097b1 	.word	0x080097b1
 800975c:	080097c5 	.word	0x080097c5
 8009760:	08009741 	.word	0x08009741
 8009764:	08009741 	.word	0x08009741
 8009768:	08009741 	.word	0x08009741
 800976c:	08009741 	.word	0x08009741
 8009770:	080097c5 	.word	0x080097c5
 8009774:	08009741 	.word	0x08009741
 8009778:	08009741 	.word	0x08009741
 800977c:	08009741 	.word	0x08009741
 8009780:	08009741 	.word	0x08009741
 8009784:	080098d1 	.word	0x080098d1
 8009788:	080097f5 	.word	0x080097f5
 800978c:	080098b3 	.word	0x080098b3
 8009790:	08009741 	.word	0x08009741
 8009794:	08009741 	.word	0x08009741
 8009798:	080098f3 	.word	0x080098f3
 800979c:	08009741 	.word	0x08009741
 80097a0:	080097f5 	.word	0x080097f5
 80097a4:	08009741 	.word	0x08009741
 80097a8:	08009741 	.word	0x08009741
 80097ac:	080098bb 	.word	0x080098bb
 80097b0:	682b      	ldr	r3, [r5, #0]
 80097b2:	1d1a      	adds	r2, r3, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	602a      	str	r2, [r5, #0]
 80097b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097c0:	2301      	movs	r3, #1
 80097c2:	e0a3      	b.n	800990c <_printf_i+0x1f4>
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	6829      	ldr	r1, [r5, #0]
 80097c8:	0606      	lsls	r6, r0, #24
 80097ca:	f101 0304 	add.w	r3, r1, #4
 80097ce:	d50a      	bpl.n	80097e6 <_printf_i+0xce>
 80097d0:	680e      	ldr	r6, [r1, #0]
 80097d2:	602b      	str	r3, [r5, #0]
 80097d4:	2e00      	cmp	r6, #0
 80097d6:	da03      	bge.n	80097e0 <_printf_i+0xc8>
 80097d8:	232d      	movs	r3, #45	; 0x2d
 80097da:	4276      	negs	r6, r6
 80097dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e0:	485e      	ldr	r0, [pc, #376]	; (800995c <_printf_i+0x244>)
 80097e2:	230a      	movs	r3, #10
 80097e4:	e019      	b.n	800981a <_printf_i+0x102>
 80097e6:	680e      	ldr	r6, [r1, #0]
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097ee:	bf18      	it	ne
 80097f0:	b236      	sxthne	r6, r6
 80097f2:	e7ef      	b.n	80097d4 <_printf_i+0xbc>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	6820      	ldr	r0, [r4, #0]
 80097f8:	1d19      	adds	r1, r3, #4
 80097fa:	6029      	str	r1, [r5, #0]
 80097fc:	0601      	lsls	r1, r0, #24
 80097fe:	d501      	bpl.n	8009804 <_printf_i+0xec>
 8009800:	681e      	ldr	r6, [r3, #0]
 8009802:	e002      	b.n	800980a <_printf_i+0xf2>
 8009804:	0646      	lsls	r6, r0, #25
 8009806:	d5fb      	bpl.n	8009800 <_printf_i+0xe8>
 8009808:	881e      	ldrh	r6, [r3, #0]
 800980a:	4854      	ldr	r0, [pc, #336]	; (800995c <_printf_i+0x244>)
 800980c:	2f6f      	cmp	r7, #111	; 0x6f
 800980e:	bf0c      	ite	eq
 8009810:	2308      	moveq	r3, #8
 8009812:	230a      	movne	r3, #10
 8009814:	2100      	movs	r1, #0
 8009816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800981a:	6865      	ldr	r5, [r4, #4]
 800981c:	60a5      	str	r5, [r4, #8]
 800981e:	2d00      	cmp	r5, #0
 8009820:	bfa2      	ittt	ge
 8009822:	6821      	ldrge	r1, [r4, #0]
 8009824:	f021 0104 	bicge.w	r1, r1, #4
 8009828:	6021      	strge	r1, [r4, #0]
 800982a:	b90e      	cbnz	r6, 8009830 <_printf_i+0x118>
 800982c:	2d00      	cmp	r5, #0
 800982e:	d04d      	beq.n	80098cc <_printf_i+0x1b4>
 8009830:	4615      	mov	r5, r2
 8009832:	fbb6 f1f3 	udiv	r1, r6, r3
 8009836:	fb03 6711 	mls	r7, r3, r1, r6
 800983a:	5dc7      	ldrb	r7, [r0, r7]
 800983c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009840:	4637      	mov	r7, r6
 8009842:	42bb      	cmp	r3, r7
 8009844:	460e      	mov	r6, r1
 8009846:	d9f4      	bls.n	8009832 <_printf_i+0x11a>
 8009848:	2b08      	cmp	r3, #8
 800984a:	d10b      	bne.n	8009864 <_printf_i+0x14c>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	07de      	lsls	r6, r3, #31
 8009850:	d508      	bpl.n	8009864 <_printf_i+0x14c>
 8009852:	6923      	ldr	r3, [r4, #16]
 8009854:	6861      	ldr	r1, [r4, #4]
 8009856:	4299      	cmp	r1, r3
 8009858:	bfde      	ittt	le
 800985a:	2330      	movle	r3, #48	; 0x30
 800985c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009860:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009864:	1b52      	subs	r2, r2, r5
 8009866:	6122      	str	r2, [r4, #16]
 8009868:	f8cd a000 	str.w	sl, [sp]
 800986c:	464b      	mov	r3, r9
 800986e:	aa03      	add	r2, sp, #12
 8009870:	4621      	mov	r1, r4
 8009872:	4640      	mov	r0, r8
 8009874:	f7ff fee2 	bl	800963c <_printf_common>
 8009878:	3001      	adds	r0, #1
 800987a:	d14c      	bne.n	8009916 <_printf_i+0x1fe>
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	b004      	add	sp, #16
 8009882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009886:	4835      	ldr	r0, [pc, #212]	; (800995c <_printf_i+0x244>)
 8009888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800988c:	6829      	ldr	r1, [r5, #0]
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	f851 6b04 	ldr.w	r6, [r1], #4
 8009894:	6029      	str	r1, [r5, #0]
 8009896:	061d      	lsls	r5, r3, #24
 8009898:	d514      	bpl.n	80098c4 <_printf_i+0x1ac>
 800989a:	07df      	lsls	r7, r3, #31
 800989c:	bf44      	itt	mi
 800989e:	f043 0320 	orrmi.w	r3, r3, #32
 80098a2:	6023      	strmi	r3, [r4, #0]
 80098a4:	b91e      	cbnz	r6, 80098ae <_printf_i+0x196>
 80098a6:	6823      	ldr	r3, [r4, #0]
 80098a8:	f023 0320 	bic.w	r3, r3, #32
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	2310      	movs	r3, #16
 80098b0:	e7b0      	b.n	8009814 <_printf_i+0xfc>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	f043 0320 	orr.w	r3, r3, #32
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	2378      	movs	r3, #120	; 0x78
 80098bc:	4828      	ldr	r0, [pc, #160]	; (8009960 <_printf_i+0x248>)
 80098be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098c2:	e7e3      	b.n	800988c <_printf_i+0x174>
 80098c4:	0659      	lsls	r1, r3, #25
 80098c6:	bf48      	it	mi
 80098c8:	b2b6      	uxthmi	r6, r6
 80098ca:	e7e6      	b.n	800989a <_printf_i+0x182>
 80098cc:	4615      	mov	r5, r2
 80098ce:	e7bb      	b.n	8009848 <_printf_i+0x130>
 80098d0:	682b      	ldr	r3, [r5, #0]
 80098d2:	6826      	ldr	r6, [r4, #0]
 80098d4:	6961      	ldr	r1, [r4, #20]
 80098d6:	1d18      	adds	r0, r3, #4
 80098d8:	6028      	str	r0, [r5, #0]
 80098da:	0635      	lsls	r5, r6, #24
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	d501      	bpl.n	80098e4 <_printf_i+0x1cc>
 80098e0:	6019      	str	r1, [r3, #0]
 80098e2:	e002      	b.n	80098ea <_printf_i+0x1d2>
 80098e4:	0670      	lsls	r0, r6, #25
 80098e6:	d5fb      	bpl.n	80098e0 <_printf_i+0x1c8>
 80098e8:	8019      	strh	r1, [r3, #0]
 80098ea:	2300      	movs	r3, #0
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	4615      	mov	r5, r2
 80098f0:	e7ba      	b.n	8009868 <_printf_i+0x150>
 80098f2:	682b      	ldr	r3, [r5, #0]
 80098f4:	1d1a      	adds	r2, r3, #4
 80098f6:	602a      	str	r2, [r5, #0]
 80098f8:	681d      	ldr	r5, [r3, #0]
 80098fa:	6862      	ldr	r2, [r4, #4]
 80098fc:	2100      	movs	r1, #0
 80098fe:	4628      	mov	r0, r5
 8009900:	f7f6 fc86 	bl	8000210 <memchr>
 8009904:	b108      	cbz	r0, 800990a <_printf_i+0x1f2>
 8009906:	1b40      	subs	r0, r0, r5
 8009908:	6060      	str	r0, [r4, #4]
 800990a:	6863      	ldr	r3, [r4, #4]
 800990c:	6123      	str	r3, [r4, #16]
 800990e:	2300      	movs	r3, #0
 8009910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009914:	e7a8      	b.n	8009868 <_printf_i+0x150>
 8009916:	6923      	ldr	r3, [r4, #16]
 8009918:	462a      	mov	r2, r5
 800991a:	4649      	mov	r1, r9
 800991c:	4640      	mov	r0, r8
 800991e:	47d0      	blx	sl
 8009920:	3001      	adds	r0, #1
 8009922:	d0ab      	beq.n	800987c <_printf_i+0x164>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	079b      	lsls	r3, r3, #30
 8009928:	d413      	bmi.n	8009952 <_printf_i+0x23a>
 800992a:	68e0      	ldr	r0, [r4, #12]
 800992c:	9b03      	ldr	r3, [sp, #12]
 800992e:	4298      	cmp	r0, r3
 8009930:	bfb8      	it	lt
 8009932:	4618      	movlt	r0, r3
 8009934:	e7a4      	b.n	8009880 <_printf_i+0x168>
 8009936:	2301      	movs	r3, #1
 8009938:	4632      	mov	r2, r6
 800993a:	4649      	mov	r1, r9
 800993c:	4640      	mov	r0, r8
 800993e:	47d0      	blx	sl
 8009940:	3001      	adds	r0, #1
 8009942:	d09b      	beq.n	800987c <_printf_i+0x164>
 8009944:	3501      	adds	r5, #1
 8009946:	68e3      	ldr	r3, [r4, #12]
 8009948:	9903      	ldr	r1, [sp, #12]
 800994a:	1a5b      	subs	r3, r3, r1
 800994c:	42ab      	cmp	r3, r5
 800994e:	dcf2      	bgt.n	8009936 <_printf_i+0x21e>
 8009950:	e7eb      	b.n	800992a <_printf_i+0x212>
 8009952:	2500      	movs	r5, #0
 8009954:	f104 0619 	add.w	r6, r4, #25
 8009958:	e7f5      	b.n	8009946 <_printf_i+0x22e>
 800995a:	bf00      	nop
 800995c:	0800a109 	.word	0x0800a109
 8009960:	0800a11a 	.word	0x0800a11a

08009964 <memcpy>:
 8009964:	440a      	add	r2, r1
 8009966:	4291      	cmp	r1, r2
 8009968:	f100 33ff 	add.w	r3, r0, #4294967295
 800996c:	d100      	bne.n	8009970 <memcpy+0xc>
 800996e:	4770      	bx	lr
 8009970:	b510      	push	{r4, lr}
 8009972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800997a:	4291      	cmp	r1, r2
 800997c:	d1f9      	bne.n	8009972 <memcpy+0xe>
 800997e:	bd10      	pop	{r4, pc}

08009980 <memmove>:
 8009980:	4288      	cmp	r0, r1
 8009982:	b510      	push	{r4, lr}
 8009984:	eb01 0402 	add.w	r4, r1, r2
 8009988:	d902      	bls.n	8009990 <memmove+0x10>
 800998a:	4284      	cmp	r4, r0
 800998c:	4623      	mov	r3, r4
 800998e:	d807      	bhi.n	80099a0 <memmove+0x20>
 8009990:	1e43      	subs	r3, r0, #1
 8009992:	42a1      	cmp	r1, r4
 8009994:	d008      	beq.n	80099a8 <memmove+0x28>
 8009996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800999a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800999e:	e7f8      	b.n	8009992 <memmove+0x12>
 80099a0:	4402      	add	r2, r0
 80099a2:	4601      	mov	r1, r0
 80099a4:	428a      	cmp	r2, r1
 80099a6:	d100      	bne.n	80099aa <memmove+0x2a>
 80099a8:	bd10      	pop	{r4, pc}
 80099aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80099b2:	e7f7      	b.n	80099a4 <memmove+0x24>

080099b4 <_free_r>:
 80099b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d044      	beq.n	8009a44 <_free_r+0x90>
 80099ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099be:	9001      	str	r0, [sp, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f1a1 0404 	sub.w	r4, r1, #4
 80099c6:	bfb8      	it	lt
 80099c8:	18e4      	addlt	r4, r4, r3
 80099ca:	f000 f913 	bl	8009bf4 <__malloc_lock>
 80099ce:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <_free_r+0x94>)
 80099d0:	9801      	ldr	r0, [sp, #4]
 80099d2:	6813      	ldr	r3, [r2, #0]
 80099d4:	b933      	cbnz	r3, 80099e4 <_free_r+0x30>
 80099d6:	6063      	str	r3, [r4, #4]
 80099d8:	6014      	str	r4, [r2, #0]
 80099da:	b003      	add	sp, #12
 80099dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099e0:	f000 b90e 	b.w	8009c00 <__malloc_unlock>
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d908      	bls.n	80099fa <_free_r+0x46>
 80099e8:	6825      	ldr	r5, [r4, #0]
 80099ea:	1961      	adds	r1, r4, r5
 80099ec:	428b      	cmp	r3, r1
 80099ee:	bf01      	itttt	eq
 80099f0:	6819      	ldreq	r1, [r3, #0]
 80099f2:	685b      	ldreq	r3, [r3, #4]
 80099f4:	1949      	addeq	r1, r1, r5
 80099f6:	6021      	streq	r1, [r4, #0]
 80099f8:	e7ed      	b.n	80099d6 <_free_r+0x22>
 80099fa:	461a      	mov	r2, r3
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	b10b      	cbz	r3, 8009a04 <_free_r+0x50>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d9fa      	bls.n	80099fa <_free_r+0x46>
 8009a04:	6811      	ldr	r1, [r2, #0]
 8009a06:	1855      	adds	r5, r2, r1
 8009a08:	42a5      	cmp	r5, r4
 8009a0a:	d10b      	bne.n	8009a24 <_free_r+0x70>
 8009a0c:	6824      	ldr	r4, [r4, #0]
 8009a0e:	4421      	add	r1, r4
 8009a10:	1854      	adds	r4, r2, r1
 8009a12:	42a3      	cmp	r3, r4
 8009a14:	6011      	str	r1, [r2, #0]
 8009a16:	d1e0      	bne.n	80099da <_free_r+0x26>
 8009a18:	681c      	ldr	r4, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	6053      	str	r3, [r2, #4]
 8009a1e:	4421      	add	r1, r4
 8009a20:	6011      	str	r1, [r2, #0]
 8009a22:	e7da      	b.n	80099da <_free_r+0x26>
 8009a24:	d902      	bls.n	8009a2c <_free_r+0x78>
 8009a26:	230c      	movs	r3, #12
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	e7d6      	b.n	80099da <_free_r+0x26>
 8009a2c:	6825      	ldr	r5, [r4, #0]
 8009a2e:	1961      	adds	r1, r4, r5
 8009a30:	428b      	cmp	r3, r1
 8009a32:	bf04      	itt	eq
 8009a34:	6819      	ldreq	r1, [r3, #0]
 8009a36:	685b      	ldreq	r3, [r3, #4]
 8009a38:	6063      	str	r3, [r4, #4]
 8009a3a:	bf04      	itt	eq
 8009a3c:	1949      	addeq	r1, r1, r5
 8009a3e:	6021      	streq	r1, [r4, #0]
 8009a40:	6054      	str	r4, [r2, #4]
 8009a42:	e7ca      	b.n	80099da <_free_r+0x26>
 8009a44:	b003      	add	sp, #12
 8009a46:	bd30      	pop	{r4, r5, pc}
 8009a48:	20002524 	.word	0x20002524

08009a4c <sbrk_aligned>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	4e0e      	ldr	r6, [pc, #56]	; (8009a88 <sbrk_aligned+0x3c>)
 8009a50:	460c      	mov	r4, r1
 8009a52:	6831      	ldr	r1, [r6, #0]
 8009a54:	4605      	mov	r5, r0
 8009a56:	b911      	cbnz	r1, 8009a5e <sbrk_aligned+0x12>
 8009a58:	f000 f8bc 	bl	8009bd4 <_sbrk_r>
 8009a5c:	6030      	str	r0, [r6, #0]
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4628      	mov	r0, r5
 8009a62:	f000 f8b7 	bl	8009bd4 <_sbrk_r>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	d00a      	beq.n	8009a80 <sbrk_aligned+0x34>
 8009a6a:	1cc4      	adds	r4, r0, #3
 8009a6c:	f024 0403 	bic.w	r4, r4, #3
 8009a70:	42a0      	cmp	r0, r4
 8009a72:	d007      	beq.n	8009a84 <sbrk_aligned+0x38>
 8009a74:	1a21      	subs	r1, r4, r0
 8009a76:	4628      	mov	r0, r5
 8009a78:	f000 f8ac 	bl	8009bd4 <_sbrk_r>
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d101      	bne.n	8009a84 <sbrk_aligned+0x38>
 8009a80:	f04f 34ff 	mov.w	r4, #4294967295
 8009a84:	4620      	mov	r0, r4
 8009a86:	bd70      	pop	{r4, r5, r6, pc}
 8009a88:	20002528 	.word	0x20002528

08009a8c <_malloc_r>:
 8009a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	1ccd      	adds	r5, r1, #3
 8009a92:	f025 0503 	bic.w	r5, r5, #3
 8009a96:	3508      	adds	r5, #8
 8009a98:	2d0c      	cmp	r5, #12
 8009a9a:	bf38      	it	cc
 8009a9c:	250c      	movcc	r5, #12
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	db01      	blt.n	8009aa8 <_malloc_r+0x1c>
 8009aa4:	42a9      	cmp	r1, r5
 8009aa6:	d905      	bls.n	8009ab4 <_malloc_r+0x28>
 8009aa8:	230c      	movs	r3, #12
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	2600      	movs	r6, #0
 8009aae:	4630      	mov	r0, r6
 8009ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab4:	4e2e      	ldr	r6, [pc, #184]	; (8009b70 <_malloc_r+0xe4>)
 8009ab6:	f000 f89d 	bl	8009bf4 <__malloc_lock>
 8009aba:	6833      	ldr	r3, [r6, #0]
 8009abc:	461c      	mov	r4, r3
 8009abe:	bb34      	cbnz	r4, 8009b0e <_malloc_r+0x82>
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	f7ff ffc2 	bl	8009a4c <sbrk_aligned>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	4604      	mov	r4, r0
 8009acc:	d14d      	bne.n	8009b6a <_malloc_r+0xde>
 8009ace:	6834      	ldr	r4, [r6, #0]
 8009ad0:	4626      	mov	r6, r4
 8009ad2:	2e00      	cmp	r6, #0
 8009ad4:	d140      	bne.n	8009b58 <_malloc_r+0xcc>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4631      	mov	r1, r6
 8009ada:	4638      	mov	r0, r7
 8009adc:	eb04 0803 	add.w	r8, r4, r3
 8009ae0:	f000 f878 	bl	8009bd4 <_sbrk_r>
 8009ae4:	4580      	cmp	r8, r0
 8009ae6:	d13a      	bne.n	8009b5e <_malloc_r+0xd2>
 8009ae8:	6821      	ldr	r1, [r4, #0]
 8009aea:	3503      	adds	r5, #3
 8009aec:	1a6d      	subs	r5, r5, r1
 8009aee:	f025 0503 	bic.w	r5, r5, #3
 8009af2:	3508      	adds	r5, #8
 8009af4:	2d0c      	cmp	r5, #12
 8009af6:	bf38      	it	cc
 8009af8:	250c      	movcc	r5, #12
 8009afa:	4629      	mov	r1, r5
 8009afc:	4638      	mov	r0, r7
 8009afe:	f7ff ffa5 	bl	8009a4c <sbrk_aligned>
 8009b02:	3001      	adds	r0, #1
 8009b04:	d02b      	beq.n	8009b5e <_malloc_r+0xd2>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	442b      	add	r3, r5
 8009b0a:	6023      	str	r3, [r4, #0]
 8009b0c:	e00e      	b.n	8009b2c <_malloc_r+0xa0>
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	1b52      	subs	r2, r2, r5
 8009b12:	d41e      	bmi.n	8009b52 <_malloc_r+0xc6>
 8009b14:	2a0b      	cmp	r2, #11
 8009b16:	d916      	bls.n	8009b46 <_malloc_r+0xba>
 8009b18:	1961      	adds	r1, r4, r5
 8009b1a:	42a3      	cmp	r3, r4
 8009b1c:	6025      	str	r5, [r4, #0]
 8009b1e:	bf18      	it	ne
 8009b20:	6059      	strne	r1, [r3, #4]
 8009b22:	6863      	ldr	r3, [r4, #4]
 8009b24:	bf08      	it	eq
 8009b26:	6031      	streq	r1, [r6, #0]
 8009b28:	5162      	str	r2, [r4, r5]
 8009b2a:	604b      	str	r3, [r1, #4]
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f104 060b 	add.w	r6, r4, #11
 8009b32:	f000 f865 	bl	8009c00 <__malloc_unlock>
 8009b36:	f026 0607 	bic.w	r6, r6, #7
 8009b3a:	1d23      	adds	r3, r4, #4
 8009b3c:	1af2      	subs	r2, r6, r3
 8009b3e:	d0b6      	beq.n	8009aae <_malloc_r+0x22>
 8009b40:	1b9b      	subs	r3, r3, r6
 8009b42:	50a3      	str	r3, [r4, r2]
 8009b44:	e7b3      	b.n	8009aae <_malloc_r+0x22>
 8009b46:	6862      	ldr	r2, [r4, #4]
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	bf0c      	ite	eq
 8009b4c:	6032      	streq	r2, [r6, #0]
 8009b4e:	605a      	strne	r2, [r3, #4]
 8009b50:	e7ec      	b.n	8009b2c <_malloc_r+0xa0>
 8009b52:	4623      	mov	r3, r4
 8009b54:	6864      	ldr	r4, [r4, #4]
 8009b56:	e7b2      	b.n	8009abe <_malloc_r+0x32>
 8009b58:	4634      	mov	r4, r6
 8009b5a:	6876      	ldr	r6, [r6, #4]
 8009b5c:	e7b9      	b.n	8009ad2 <_malloc_r+0x46>
 8009b5e:	230c      	movs	r3, #12
 8009b60:	603b      	str	r3, [r7, #0]
 8009b62:	4638      	mov	r0, r7
 8009b64:	f000 f84c 	bl	8009c00 <__malloc_unlock>
 8009b68:	e7a1      	b.n	8009aae <_malloc_r+0x22>
 8009b6a:	6025      	str	r5, [r4, #0]
 8009b6c:	e7de      	b.n	8009b2c <_malloc_r+0xa0>
 8009b6e:	bf00      	nop
 8009b70:	20002524 	.word	0x20002524

08009b74 <_realloc_r>:
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	460e      	mov	r6, r1
 8009b7e:	b921      	cbnz	r1, 8009b8a <_realloc_r+0x16>
 8009b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b84:	4611      	mov	r1, r2
 8009b86:	f7ff bf81 	b.w	8009a8c <_malloc_r>
 8009b8a:	b92a      	cbnz	r2, 8009b98 <_realloc_r+0x24>
 8009b8c:	f7ff ff12 	bl	80099b4 <_free_r>
 8009b90:	4625      	mov	r5, r4
 8009b92:	4628      	mov	r0, r5
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	f000 f838 	bl	8009c0c <_malloc_usable_size_r>
 8009b9c:	4284      	cmp	r4, r0
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	d802      	bhi.n	8009ba8 <_realloc_r+0x34>
 8009ba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ba6:	d812      	bhi.n	8009bce <_realloc_r+0x5a>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4640      	mov	r0, r8
 8009bac:	f7ff ff6e 	bl	8009a8c <_malloc_r>
 8009bb0:	4605      	mov	r5, r0
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0ed      	beq.n	8009b92 <_realloc_r+0x1e>
 8009bb6:	42bc      	cmp	r4, r7
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4631      	mov	r1, r6
 8009bbc:	bf28      	it	cs
 8009bbe:	463a      	movcs	r2, r7
 8009bc0:	f7ff fed0 	bl	8009964 <memcpy>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f7ff fef4 	bl	80099b4 <_free_r>
 8009bcc:	e7e1      	b.n	8009b92 <_realloc_r+0x1e>
 8009bce:	4635      	mov	r5, r6
 8009bd0:	e7df      	b.n	8009b92 <_realloc_r+0x1e>
	...

08009bd4 <_sbrk_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_sbrk_r+0x1c>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f8 f932 	bl	8001e48 <_sbrk>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_sbrk_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_sbrk_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	2000252c 	.word	0x2000252c

08009bf4 <__malloc_lock>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__malloc_lock+0x8>)
 8009bf6:	f000 b811 	b.w	8009c1c <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	20002530 	.word	0x20002530

08009c00 <__malloc_unlock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__malloc_unlock+0x8>)
 8009c02:	f000 b80c 	b.w	8009c1e <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	20002530 	.word	0x20002530

08009c0c <_malloc_usable_size_r>:
 8009c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c10:	1f18      	subs	r0, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfbc      	itt	lt
 8009c16:	580b      	ldrlt	r3, [r1, r0]
 8009c18:	18c0      	addlt	r0, r0, r3
 8009c1a:	4770      	bx	lr

08009c1c <__retarget_lock_acquire_recursive>:
 8009c1c:	4770      	bx	lr

08009c1e <__retarget_lock_release_recursive>:
 8009c1e:	4770      	bx	lr

08009c20 <_init>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	bf00      	nop
 8009c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c26:	bc08      	pop	{r3}
 8009c28:	469e      	mov	lr, r3
 8009c2a:	4770      	bx	lr

08009c2c <_fini>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr
