
SensorMain2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009698  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c64  08009868  08009868  00019868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4cc  0800a4cc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4d4  0800a4d4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4d4  0800a4d4  0001a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002684  20000090  0800a56c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002714  0800a56c  00022714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cc7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1a  00000000  00000000  00030d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000337a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  000346b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024eef  00000000  00000000  00035460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a86  00000000  00000000  0005a34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da041  00000000  00000000  00071dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014be16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004238  00000000  00000000  0014be68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009850 	.word	0x08009850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08009850 	.word	0x08009850

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_d2iz>:
 8000628:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800062c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000630:	d215      	bcs.n	800065e <__aeabi_d2iz+0x36>
 8000632:	d511      	bpl.n	8000658 <__aeabi_d2iz+0x30>
 8000634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800063c:	d912      	bls.n	8000664 <__aeabi_d2iz+0x3c>
 800063e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800064a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064e:	fa23 f002 	lsr.w	r0, r3, r2
 8000652:	bf18      	it	ne
 8000654:	4240      	negne	r0, r0
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000662:	d105      	bne.n	8000670 <__aeabi_d2iz+0x48>
 8000664:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800066e:	4770      	bx	lr
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_uldivmod>:
 8000678:	b953      	cbnz	r3, 8000690 <__aeabi_uldivmod+0x18>
 800067a:	b94a      	cbnz	r2, 8000690 <__aeabi_uldivmod+0x18>
 800067c:	2900      	cmp	r1, #0
 800067e:	bf08      	it	eq
 8000680:	2800      	cmpeq	r0, #0
 8000682:	bf1c      	itt	ne
 8000684:	f04f 31ff 	movne.w	r1, #4294967295
 8000688:	f04f 30ff 	movne.w	r0, #4294967295
 800068c:	f000 b974 	b.w	8000978 <__aeabi_idiv0>
 8000690:	f1ad 0c08 	sub.w	ip, sp, #8
 8000694:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000698:	f000 f806 	bl	80006a8 <__udivmoddi4>
 800069c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr

080006a8 <__udivmoddi4>:
 80006a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ac:	9d08      	ldr	r5, [sp, #32]
 80006ae:	4604      	mov	r4, r0
 80006b0:	468e      	mov	lr, r1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d14d      	bne.n	8000752 <__udivmoddi4+0xaa>
 80006b6:	428a      	cmp	r2, r1
 80006b8:	4694      	mov	ip, r2
 80006ba:	d969      	bls.n	8000790 <__udivmoddi4+0xe8>
 80006bc:	fab2 f282 	clz	r2, r2
 80006c0:	b152      	cbz	r2, 80006d8 <__udivmoddi4+0x30>
 80006c2:	fa01 f302 	lsl.w	r3, r1, r2
 80006c6:	f1c2 0120 	rsb	r1, r2, #32
 80006ca:	fa20 f101 	lsr.w	r1, r0, r1
 80006ce:	fa0c fc02 	lsl.w	ip, ip, r2
 80006d2:	ea41 0e03 	orr.w	lr, r1, r3
 80006d6:	4094      	lsls	r4, r2
 80006d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006dc:	0c21      	lsrs	r1, r4, #16
 80006de:	fbbe f6f8 	udiv	r6, lr, r8
 80006e2:	fa1f f78c 	uxth.w	r7, ip
 80006e6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006ee:	fb06 f107 	mul.w	r1, r6, r7
 80006f2:	4299      	cmp	r1, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x64>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f106 30ff 	add.w	r0, r6, #4294967295
 80006fe:	f080 811f 	bcs.w	8000940 <__udivmoddi4+0x298>
 8000702:	4299      	cmp	r1, r3
 8000704:	f240 811c 	bls.w	8000940 <__udivmoddi4+0x298>
 8000708:	3e02      	subs	r6, #2
 800070a:	4463      	add	r3, ip
 800070c:	1a5b      	subs	r3, r3, r1
 800070e:	b2a4      	uxth	r4, r4
 8000710:	fbb3 f0f8 	udiv	r0, r3, r8
 8000714:	fb08 3310 	mls	r3, r8, r0, r3
 8000718:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800071c:	fb00 f707 	mul.w	r7, r0, r7
 8000720:	42a7      	cmp	r7, r4
 8000722:	d90a      	bls.n	800073a <__udivmoddi4+0x92>
 8000724:	eb1c 0404 	adds.w	r4, ip, r4
 8000728:	f100 33ff 	add.w	r3, r0, #4294967295
 800072c:	f080 810a 	bcs.w	8000944 <__udivmoddi4+0x29c>
 8000730:	42a7      	cmp	r7, r4
 8000732:	f240 8107 	bls.w	8000944 <__udivmoddi4+0x29c>
 8000736:	4464      	add	r4, ip
 8000738:	3802      	subs	r0, #2
 800073a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800073e:	1be4      	subs	r4, r4, r7
 8000740:	2600      	movs	r6, #0
 8000742:	b11d      	cbz	r5, 800074c <__udivmoddi4+0xa4>
 8000744:	40d4      	lsrs	r4, r2
 8000746:	2300      	movs	r3, #0
 8000748:	e9c5 4300 	strd	r4, r3, [r5]
 800074c:	4631      	mov	r1, r6
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	428b      	cmp	r3, r1
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0xc2>
 8000756:	2d00      	cmp	r5, #0
 8000758:	f000 80ef 	beq.w	800093a <__udivmoddi4+0x292>
 800075c:	2600      	movs	r6, #0
 800075e:	e9c5 0100 	strd	r0, r1, [r5]
 8000762:	4630      	mov	r0, r6
 8000764:	4631      	mov	r1, r6
 8000766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076a:	fab3 f683 	clz	r6, r3
 800076e:	2e00      	cmp	r6, #0
 8000770:	d14a      	bne.n	8000808 <__udivmoddi4+0x160>
 8000772:	428b      	cmp	r3, r1
 8000774:	d302      	bcc.n	800077c <__udivmoddi4+0xd4>
 8000776:	4282      	cmp	r2, r0
 8000778:	f200 80f9 	bhi.w	800096e <__udivmoddi4+0x2c6>
 800077c:	1a84      	subs	r4, r0, r2
 800077e:	eb61 0303 	sbc.w	r3, r1, r3
 8000782:	2001      	movs	r0, #1
 8000784:	469e      	mov	lr, r3
 8000786:	2d00      	cmp	r5, #0
 8000788:	d0e0      	beq.n	800074c <__udivmoddi4+0xa4>
 800078a:	e9c5 4e00 	strd	r4, lr, [r5]
 800078e:	e7dd      	b.n	800074c <__udivmoddi4+0xa4>
 8000790:	b902      	cbnz	r2, 8000794 <__udivmoddi4+0xec>
 8000792:	deff      	udf	#255	; 0xff
 8000794:	fab2 f282 	clz	r2, r2
 8000798:	2a00      	cmp	r2, #0
 800079a:	f040 8092 	bne.w	80008c2 <__udivmoddi4+0x21a>
 800079e:	eba1 010c 	sub.w	r1, r1, ip
 80007a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a6:	fa1f fe8c 	uxth.w	lr, ip
 80007aa:	2601      	movs	r6, #1
 80007ac:	0c20      	lsrs	r0, r4, #16
 80007ae:	fbb1 f3f7 	udiv	r3, r1, r7
 80007b2:	fb07 1113 	mls	r1, r7, r3, r1
 80007b6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ba:	fb0e f003 	mul.w	r0, lr, r3
 80007be:	4288      	cmp	r0, r1
 80007c0:	d908      	bls.n	80007d4 <__udivmoddi4+0x12c>
 80007c2:	eb1c 0101 	adds.w	r1, ip, r1
 80007c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x12a>
 80007cc:	4288      	cmp	r0, r1
 80007ce:	f200 80cb 	bhi.w	8000968 <__udivmoddi4+0x2c0>
 80007d2:	4643      	mov	r3, r8
 80007d4:	1a09      	subs	r1, r1, r0
 80007d6:	b2a4      	uxth	r4, r4
 80007d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007dc:	fb07 1110 	mls	r1, r7, r0, r1
 80007e0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007e4:	fb0e fe00 	mul.w	lr, lr, r0
 80007e8:	45a6      	cmp	lr, r4
 80007ea:	d908      	bls.n	80007fe <__udivmoddi4+0x156>
 80007ec:	eb1c 0404 	adds.w	r4, ip, r4
 80007f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007f4:	d202      	bcs.n	80007fc <__udivmoddi4+0x154>
 80007f6:	45a6      	cmp	lr, r4
 80007f8:	f200 80bb 	bhi.w	8000972 <__udivmoddi4+0x2ca>
 80007fc:	4608      	mov	r0, r1
 80007fe:	eba4 040e 	sub.w	r4, r4, lr
 8000802:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000806:	e79c      	b.n	8000742 <__udivmoddi4+0x9a>
 8000808:	f1c6 0720 	rsb	r7, r6, #32
 800080c:	40b3      	lsls	r3, r6
 800080e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000812:	ea4c 0c03 	orr.w	ip, ip, r3
 8000816:	fa20 f407 	lsr.w	r4, r0, r7
 800081a:	fa01 f306 	lsl.w	r3, r1, r6
 800081e:	431c      	orrs	r4, r3
 8000820:	40f9      	lsrs	r1, r7
 8000822:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000826:	fa00 f306 	lsl.w	r3, r0, r6
 800082a:	fbb1 f8f9 	udiv	r8, r1, r9
 800082e:	0c20      	lsrs	r0, r4, #16
 8000830:	fa1f fe8c 	uxth.w	lr, ip
 8000834:	fb09 1118 	mls	r1, r9, r8, r1
 8000838:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800083c:	fb08 f00e 	mul.w	r0, r8, lr
 8000840:	4288      	cmp	r0, r1
 8000842:	fa02 f206 	lsl.w	r2, r2, r6
 8000846:	d90b      	bls.n	8000860 <__udivmoddi4+0x1b8>
 8000848:	eb1c 0101 	adds.w	r1, ip, r1
 800084c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000850:	f080 8088 	bcs.w	8000964 <__udivmoddi4+0x2bc>
 8000854:	4288      	cmp	r0, r1
 8000856:	f240 8085 	bls.w	8000964 <__udivmoddi4+0x2bc>
 800085a:	f1a8 0802 	sub.w	r8, r8, #2
 800085e:	4461      	add	r1, ip
 8000860:	1a09      	subs	r1, r1, r0
 8000862:	b2a4      	uxth	r4, r4
 8000864:	fbb1 f0f9 	udiv	r0, r1, r9
 8000868:	fb09 1110 	mls	r1, r9, r0, r1
 800086c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000870:	fb00 fe0e 	mul.w	lr, r0, lr
 8000874:	458e      	cmp	lr, r1
 8000876:	d908      	bls.n	800088a <__udivmoddi4+0x1e2>
 8000878:	eb1c 0101 	adds.w	r1, ip, r1
 800087c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000880:	d26c      	bcs.n	800095c <__udivmoddi4+0x2b4>
 8000882:	458e      	cmp	lr, r1
 8000884:	d96a      	bls.n	800095c <__udivmoddi4+0x2b4>
 8000886:	3802      	subs	r0, #2
 8000888:	4461      	add	r1, ip
 800088a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800088e:	fba0 9402 	umull	r9, r4, r0, r2
 8000892:	eba1 010e 	sub.w	r1, r1, lr
 8000896:	42a1      	cmp	r1, r4
 8000898:	46c8      	mov	r8, r9
 800089a:	46a6      	mov	lr, r4
 800089c:	d356      	bcc.n	800094c <__udivmoddi4+0x2a4>
 800089e:	d053      	beq.n	8000948 <__udivmoddi4+0x2a0>
 80008a0:	b15d      	cbz	r5, 80008ba <__udivmoddi4+0x212>
 80008a2:	ebb3 0208 	subs.w	r2, r3, r8
 80008a6:	eb61 010e 	sbc.w	r1, r1, lr
 80008aa:	fa01 f707 	lsl.w	r7, r1, r7
 80008ae:	fa22 f306 	lsr.w	r3, r2, r6
 80008b2:	40f1      	lsrs	r1, r6
 80008b4:	431f      	orrs	r7, r3
 80008b6:	e9c5 7100 	strd	r7, r1, [r5]
 80008ba:	2600      	movs	r6, #0
 80008bc:	4631      	mov	r1, r6
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	f1c2 0320 	rsb	r3, r2, #32
 80008c6:	40d8      	lsrs	r0, r3
 80008c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008cc:	fa21 f303 	lsr.w	r3, r1, r3
 80008d0:	4091      	lsls	r1, r2
 80008d2:	4301      	orrs	r1, r0
 80008d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d8:	fa1f fe8c 	uxth.w	lr, ip
 80008dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008e0:	fb07 3610 	mls	r6, r7, r0, r3
 80008e4:	0c0b      	lsrs	r3, r1, #16
 80008e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ea:	fb00 f60e 	mul.w	r6, r0, lr
 80008ee:	429e      	cmp	r6, r3
 80008f0:	fa04 f402 	lsl.w	r4, r4, r2
 80008f4:	d908      	bls.n	8000908 <__udivmoddi4+0x260>
 80008f6:	eb1c 0303 	adds.w	r3, ip, r3
 80008fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80008fe:	d22f      	bcs.n	8000960 <__udivmoddi4+0x2b8>
 8000900:	429e      	cmp	r6, r3
 8000902:	d92d      	bls.n	8000960 <__udivmoddi4+0x2b8>
 8000904:	3802      	subs	r0, #2
 8000906:	4463      	add	r3, ip
 8000908:	1b9b      	subs	r3, r3, r6
 800090a:	b289      	uxth	r1, r1
 800090c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000910:	fb07 3316 	mls	r3, r7, r6, r3
 8000914:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000918:	fb06 f30e 	mul.w	r3, r6, lr
 800091c:	428b      	cmp	r3, r1
 800091e:	d908      	bls.n	8000932 <__udivmoddi4+0x28a>
 8000920:	eb1c 0101 	adds.w	r1, ip, r1
 8000924:	f106 38ff 	add.w	r8, r6, #4294967295
 8000928:	d216      	bcs.n	8000958 <__udivmoddi4+0x2b0>
 800092a:	428b      	cmp	r3, r1
 800092c:	d914      	bls.n	8000958 <__udivmoddi4+0x2b0>
 800092e:	3e02      	subs	r6, #2
 8000930:	4461      	add	r1, ip
 8000932:	1ac9      	subs	r1, r1, r3
 8000934:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000938:	e738      	b.n	80007ac <__udivmoddi4+0x104>
 800093a:	462e      	mov	r6, r5
 800093c:	4628      	mov	r0, r5
 800093e:	e705      	b.n	800074c <__udivmoddi4+0xa4>
 8000940:	4606      	mov	r6, r0
 8000942:	e6e3      	b.n	800070c <__udivmoddi4+0x64>
 8000944:	4618      	mov	r0, r3
 8000946:	e6f8      	b.n	800073a <__udivmoddi4+0x92>
 8000948:	454b      	cmp	r3, r9
 800094a:	d2a9      	bcs.n	80008a0 <__udivmoddi4+0x1f8>
 800094c:	ebb9 0802 	subs.w	r8, r9, r2
 8000950:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000954:	3801      	subs	r0, #1
 8000956:	e7a3      	b.n	80008a0 <__udivmoddi4+0x1f8>
 8000958:	4646      	mov	r6, r8
 800095a:	e7ea      	b.n	8000932 <__udivmoddi4+0x28a>
 800095c:	4620      	mov	r0, r4
 800095e:	e794      	b.n	800088a <__udivmoddi4+0x1e2>
 8000960:	4640      	mov	r0, r8
 8000962:	e7d1      	b.n	8000908 <__udivmoddi4+0x260>
 8000964:	46d0      	mov	r8, sl
 8000966:	e77b      	b.n	8000860 <__udivmoddi4+0x1b8>
 8000968:	3b02      	subs	r3, #2
 800096a:	4461      	add	r1, ip
 800096c:	e732      	b.n	80007d4 <__udivmoddi4+0x12c>
 800096e:	4630      	mov	r0, r6
 8000970:	e709      	b.n	8000786 <__udivmoddi4+0xde>
 8000972:	4464      	add	r4, ip
 8000974:	3802      	subs	r0, #2
 8000976:	e742      	b.n	80007fe <__udivmoddi4+0x156>

08000978 <__aeabi_idiv0>:
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2110      	movs	r1, #16
 8000984:	4803      	ldr	r0, [pc, #12]	; (8000994 <SELECT+0x18>)
 8000986:	f002 feb9 	bl	80036fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800098a:	2001      	movs	r0, #1
 800098c:	f002 f9a6 	bl	8002cdc <HAL_Delay>
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000

08000998 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2110      	movs	r1, #16
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <DESELECT+0x18>)
 80009a2:	f002 feab 	bl	80036fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f002 f998 	bl	8002cdc <HAL_Delay>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40020000 	.word	0x40020000

080009b4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009be:	bf00      	nop
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SPI_TxByte+0x30>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d1f8      	bne.n	80009c0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80009ce:	1df9      	adds	r1, r7, #7
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	2201      	movs	r2, #1
 80009d4:	4803      	ldr	r0, [pc, #12]	; (80009e4 <SPI_TxByte+0x30>)
 80009d6:	f004 fc42 	bl	800525e <HAL_SPI_Transmit>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20002260 	.word	0x20002260

080009e8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009f4:	bf00      	nop
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <SPI_TxBuffer+0x30>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	f003 0302 	and.w	r3, r3, #2
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d1f8      	bne.n	80009f6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000a04:	887a      	ldrh	r2, [r7, #2]
 8000a06:	2364      	movs	r3, #100	; 0x64
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <SPI_TxBuffer+0x30>)
 8000a0c:	f004 fc27 	bl	800525e <HAL_SPI_Transmit>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20002260 	.word	0x20002260

08000a1c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000a22:	23ff      	movs	r3, #255	; 0xff
 8000a24:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000a26:	bf00      	nop
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <SPI_RxByte+0x34>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d1f8      	bne.n	8000a28 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000a36:	1dba      	adds	r2, r7, #6
 8000a38:	1df9      	adds	r1, r7, #7
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <SPI_RxByte+0x34>)
 8000a42:	f004 fd48 	bl	80054d6 <HAL_SPI_TransmitReceive>

	return data;
 8000a46:	79bb      	ldrb	r3, [r7, #6]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20002260 	.word	0x20002260

08000a54 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000a5c:	f7ff ffde 	bl	8000a1c <SPI_RxByte>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	701a      	strb	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <SD_ReadyWait+0x30>)
 8000a78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a7c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000a7e:	f7ff ffcd 	bl	8000a1c <SPI_RxByte>
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d003      	beq.n	8000a94 <SD_ReadyWait+0x24>
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <SD_ReadyWait+0x30>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f4      	bne.n	8000a7e <SD_ReadyWait+0xe>

	return res;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000ae 	.word	0x200000ae

08000aa4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000aaa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000aae:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ab0:	f7ff ff72 	bl	8000998 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	e005      	b.n	8000ac6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	f7ff ff7a 	bl	80009b4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	2b09      	cmp	r3, #9
 8000aca:	ddf6      	ble.n	8000aba <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000acc:	f7ff ff56 	bl	800097c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ae4:	2395      	movs	r3, #149	; 0x95
 8000ae6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2106      	movs	r1, #6
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff7b 	bl	80009e8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000af2:	e002      	b.n	8000afa <SD_PowerOn+0x56>
	{
		cnt--;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000afa:	f7ff ff8f 	bl	8000a1c <SPI_RxByte>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d002      	beq.n	8000b0a <SD_PowerOn+0x66>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f4      	bne.n	8000af4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000b0a:	f7ff ff45 	bl	8000998 <DESELECT>
	SPI_TxByte(0XFF);
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	f7ff ff50 	bl	80009b4 <SPI_TxByte>

	PowerFlag = 1;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <SD_PowerOn+0x80>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000b1 	.word	0x200000b1

08000b28 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <SD_PowerOff+0x14>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	200000b1 	.word	0x200000b1

08000b40 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <SD_CheckPower+0x14>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000b1 	.word	0x200000b1

08000b58 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <SD_RxDataBlock+0x58>)
 8000b64:	22c8      	movs	r2, #200	; 0xc8
 8000b66:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000b68:	f7ff ff58 	bl	8000a1c <SPI_RxByte>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2bff      	cmp	r3, #255	; 0xff
 8000b74:	d103      	bne.n	8000b7e <SD_RxDataBlock+0x26>
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <SD_RxDataBlock+0x58>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1f4      	bne.n	8000b68 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	d001      	beq.n	8000b88 <SD_RxDataBlock+0x30>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e00f      	b.n	8000ba8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff60 	bl	8000a54 <SPI_RxBytePtr>
	} while(len--);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	603a      	str	r2, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d1f4      	bne.n	8000b88 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000b9e:	f7ff ff3d 	bl	8000a1c <SPI_RxByte>
	SPI_RxByte();
 8000ba2:	f7ff ff3b 	bl	8000a1c <SPI_RxByte>

	return TRUE;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000ac 	.word	0x200000ac

08000bb4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000bc4:	f7ff ff54 	bl	8000a70 <SD_ReadyWait>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d001      	beq.n	8000bd2 <SD_TxDataBlock+0x1e>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e02f      	b.n	8000c32 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000bd2:	78fb      	ldrb	r3, [r7, #3]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff feed 	bl	80009b4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	2bfd      	cmp	r3, #253	; 0xfd
 8000bde:	d020      	beq.n	8000c22 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000be0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff feff 	bl	80009e8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000bea:	f7ff ff17 	bl	8000a1c <SPI_RxByte>
		SPI_RxByte();
 8000bee:	f7ff ff15 	bl	8000a1c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000bf2:	e00b      	b.n	8000c0c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000bf4:	f7ff ff12 	bl	8000a1c <SPI_RxByte>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d006      	beq.n	8000c14 <SD_TxDataBlock+0x60>
			i++;
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000c0c:	7bbb      	ldrb	r3, [r7, #14]
 8000c0e:	2b40      	cmp	r3, #64	; 0x40
 8000c10:	d9f0      	bls.n	8000bf4 <SD_TxDataBlock+0x40>
 8000c12:	e000      	b.n	8000c16 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000c14:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000c16:	bf00      	nop
 8000c18:	f7ff ff00 	bl	8000a1c <SPI_RxByte>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0fa      	beq.n	8000c18 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	2b05      	cmp	r3, #5
 8000c2a:	d101      	bne.n	8000c30 <SD_TxDataBlock+0x7c>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	6039      	str	r1, [r7, #0]
 8000c44:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000c46:	f7ff ff13 	bl	8000a70 <SD_ReadyWait>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2bff      	cmp	r3, #255	; 0xff
 8000c4e:	d001      	beq.n	8000c54 <SD_SendCmd+0x1a>
 8000c50:	23ff      	movs	r3, #255	; 0xff
 8000c52:	e042      	b.n	8000cda <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff feac 	bl	80009b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fea6 	bl	80009b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	0c1b      	lsrs	r3, r3, #16
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fea0 	bl	80009b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	0a1b      	lsrs	r3, r3, #8
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fe9a 	bl	80009b4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fe95 	bl	80009b4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b40      	cmp	r3, #64	; 0x40
 8000c8e:	d102      	bne.n	8000c96 <SD_SendCmd+0x5c>
 8000c90:	2395      	movs	r3, #149	; 0x95
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e007      	b.n	8000ca6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b48      	cmp	r3, #72	; 0x48
 8000c9a:	d102      	bne.n	8000ca2 <SD_SendCmd+0x68>
 8000c9c:	2387      	movs	r3, #135	; 0x87
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e001      	b.n	8000ca6 <SD_SendCmd+0x6c>
	else crc = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe83 	bl	80009b4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b4c      	cmp	r3, #76	; 0x4c
 8000cb2:	d101      	bne.n	8000cb8 <SD_SendCmd+0x7e>
 8000cb4:	f7ff feb2 	bl	8000a1c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000cb8:	230a      	movs	r3, #10
 8000cba:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000cbc:	f7ff feae 	bl	8000a1c <SPI_RxByte>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000cc4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da05      	bge.n	8000cd8 <SD_SendCmd+0x9e>
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	73bb      	strb	r3, [r7, #14]
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d1f1      	bne.n	8000cbc <SD_SendCmd+0x82>

	return res;
 8000cd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SD_disk_initialize+0x14>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e0d1      	b.n	8000e9c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000cf8:	4b6a      	ldr	r3, [pc, #424]	; (8000ea4 <SD_disk_initialize+0x1c0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <SD_disk_initialize+0x2a>
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <SD_disk_initialize+0x1c0>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	e0c6      	b.n	8000e9c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8000d0e:	f7ff fec9 	bl	8000aa4 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000d12:	f7ff fe33 	bl	800097c <SELECT>

	/* check disk type */
	type = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2040      	movs	r0, #64	; 0x40
 8000d1e:	f7ff ff8c 	bl	8000c3a <SD_SendCmd>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	f040 80a1 	bne.w	8000e6c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <SD_disk_initialize+0x1c4>)
 8000d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d30:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000d32:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d36:	2048      	movs	r0, #72	; 0x48
 8000d38:	f7ff ff7f 	bl	8000c3a <SD_SendCmd>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d155      	bne.n	8000dee <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e00c      	b.n	8000d62 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000d48:	7bfc      	ldrb	r4, [r7, #15]
 8000d4a:	f7ff fe67 	bl	8000a1c <SPI_RxByte>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	f104 0310 	add.w	r3, r4, #16
 8000d56:	443b      	add	r3, r7
 8000d58:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d9ef      	bls.n	8000d48 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000d68:	7abb      	ldrb	r3, [r7, #10]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d17e      	bne.n	8000e6c <SD_disk_initialize+0x188>
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	2baa      	cmp	r3, #170	; 0xaa
 8000d72:	d17b      	bne.n	8000e6c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d74:	2100      	movs	r1, #0
 8000d76:	2077      	movs	r0, #119	; 0x77
 8000d78:	f7ff ff5f 	bl	8000c3a <SD_SendCmd>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d807      	bhi.n	8000d92 <SD_disk_initialize+0xae>
 8000d82:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d86:	2069      	movs	r0, #105	; 0x69
 8000d88:	f7ff ff57 	bl	8000c3a <SD_SendCmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000d92:	4b45      	ldr	r3, [pc, #276]	; (8000ea8 <SD_disk_initialize+0x1c4>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1ec      	bne.n	8000d74 <SD_disk_initialize+0x90>
 8000d9a:	e000      	b.n	8000d9e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d9c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d9e:	4b42      	ldr	r3, [pc, #264]	; (8000ea8 <SD_disk_initialize+0x1c4>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d062      	beq.n	8000e6c <SD_disk_initialize+0x188>
 8000da6:	2100      	movs	r1, #0
 8000da8:	207a      	movs	r0, #122	; 0x7a
 8000daa:	f7ff ff46 	bl	8000c3a <SD_SendCmd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d15b      	bne.n	8000e6c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	e00c      	b.n	8000dd4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000dba:	7bfc      	ldrb	r4, [r7, #15]
 8000dbc:	f7ff fe2e 	bl	8000a1c <SPI_RxByte>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f104 0310 	add.w	r3, r4, #16
 8000dc8:	443b      	add	r3, r7
 8000dca:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b03      	cmp	r3, #3
 8000dd8:	d9ef      	bls.n	8000dba <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000dda:	7a3b      	ldrb	r3, [r7, #8]
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SD_disk_initialize+0x104>
 8000de4:	230c      	movs	r3, #12
 8000de6:	e000      	b.n	8000dea <SD_disk_initialize+0x106>
 8000de8:	2304      	movs	r3, #4
 8000dea:	73bb      	strb	r3, [r7, #14]
 8000dec:	e03e      	b.n	8000e6c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000dee:	2100      	movs	r1, #0
 8000df0:	2077      	movs	r0, #119	; 0x77
 8000df2:	f7ff ff22 	bl	8000c3a <SD_SendCmd>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d808      	bhi.n	8000e0e <SD_disk_initialize+0x12a>
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2069      	movs	r0, #105	; 0x69
 8000e00:	f7ff ff1b 	bl	8000c3a <SD_SendCmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d801      	bhi.n	8000e0e <SD_disk_initialize+0x12a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e000      	b.n	8000e10 <SD_disk_initialize+0x12c>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d10e      	bne.n	8000e36 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2077      	movs	r0, #119	; 0x77
 8000e1c:	f7ff ff0d 	bl	8000c3a <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d80e      	bhi.n	8000e44 <SD_disk_initialize+0x160>
 8000e26:	2100      	movs	r1, #0
 8000e28:	2069      	movs	r0, #105	; 0x69
 8000e2a:	f7ff ff06 	bl	8000c3a <SD_SendCmd>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <SD_disk_initialize+0x160>
 8000e34:	e00c      	b.n	8000e50 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e36:	2100      	movs	r1, #0
 8000e38:	2041      	movs	r0, #65	; 0x41
 8000e3a:	f7ff fefe 	bl	8000c3a <SD_SendCmd>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <SD_disk_initialize+0x1c4>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1e2      	bne.n	8000e12 <SD_disk_initialize+0x12e>
 8000e4c:	e000      	b.n	8000e50 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000e4e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <SD_disk_initialize+0x1c4>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d007      	beq.n	8000e68 <SD_disk_initialize+0x184>
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	2050      	movs	r0, #80	; 0x50
 8000e5e:	f7ff feec 	bl	8000c3a <SD_SendCmd>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SD_disk_initialize+0x188>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000e6c:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <SD_disk_initialize+0x1c8>)
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000e72:	f7ff fd91 	bl	8000998 <DESELECT>
	SPI_RxByte();
 8000e76:	f7ff fdd1 	bl	8000a1c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d008      	beq.n	8000e92 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <SD_disk_initialize+0x1c0>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SD_disk_initialize+0x1c0>)
 8000e8e:	701a      	strb	r2, [r3, #0]
 8000e90:	e001      	b.n	8000e96 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e92:	f7ff fe49 	bl	8000b28 <SD_PowerOff>
	}

	return Stat;
 8000e96:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <SD_disk_initialize+0x1c0>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	200000ac 	.word	0x200000ac
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SD_disk_status+0x14>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e002      	b.n	8000eca <SD_disk_status+0x1a>
	return Stat;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SD_disk_status+0x28>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000000 	.word	0x20000000

08000edc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <SD_disk_read+0x1c>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <SD_disk_read+0x20>
 8000ef8:	2304      	movs	r3, #4
 8000efa:	e051      	b.n	8000fa0 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000efc:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <SD_disk_read+0xcc>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SD_disk_read+0x32>
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e048      	b.n	8000fa0 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	; (8000fac <SD_disk_read+0xd0>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <SD_disk_read+0x44>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	025b      	lsls	r3, r3, #9
 8000f1e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f20:	f7ff fd2c 	bl	800097c <SELECT>

	if (count == 1)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d111      	bne.n	8000f4e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	2051      	movs	r0, #81	; 0x51
 8000f2e:	f7ff fe84 	bl	8000c3a <SD_SendCmd>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d129      	bne.n	8000f8c <SD_disk_read+0xb0>
 8000f38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f3c:	68b8      	ldr	r0, [r7, #8]
 8000f3e:	f7ff fe0b 	bl	8000b58 <SD_RxDataBlock>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d021      	beq.n	8000f8c <SD_disk_read+0xb0>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	e01e      	b.n	8000f8c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	2052      	movs	r0, #82	; 0x52
 8000f52:	f7ff fe72 	bl	8000c3a <SD_SendCmd>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d117      	bne.n	8000f8c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f60:	68b8      	ldr	r0, [r7, #8]
 8000f62:	f7ff fdf9 	bl	8000b58 <SD_RxDataBlock>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00a      	beq.n	8000f82 <SD_disk_read+0xa6>
				buff += 512;
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f72:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1ed      	bne.n	8000f5c <SD_disk_read+0x80>
 8000f80:	e000      	b.n	8000f84 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f82:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	204c      	movs	r0, #76	; 0x4c
 8000f88:	f7ff fe57 	bl	8000c3a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f8c:	f7ff fd04 	bl	8000998 <DESELECT>
	SPI_RxByte();
 8000f90:	f7ff fd44 	bl	8000a1c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf14      	ite	ne
 8000f9a:	2301      	movne	r3, #1
 8000f9c:	2300      	moveq	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	200000b0 	.word	0x200000b0

08000fb0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <SD_disk_write+0x1c>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <SD_disk_write+0x20>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e06b      	b.n	80010a8 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <SD_disk_write+0x100>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SD_disk_write+0x32>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e062      	b.n	80010a8 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <SD_disk_write+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SD_disk_write+0x44>
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	e059      	b.n	80010a8 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <SD_disk_write+0x104>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <SD_disk_write+0x56>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	025b      	lsls	r3, r3, #9
 8001004:	607b      	str	r3, [r7, #4]

	SELECT();
 8001006:	f7ff fcb9 	bl	800097c <SELECT>

	if (count == 1)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d110      	bne.n	8001032 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	2058      	movs	r0, #88	; 0x58
 8001014:	f7ff fe11 	bl	8000c3a <SD_SendCmd>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d13a      	bne.n	8001094 <SD_disk_write+0xe4>
 800101e:	21fe      	movs	r1, #254	; 0xfe
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f7ff fdc7 	bl	8000bb4 <SD_TxDataBlock>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d033      	beq.n	8001094 <SD_disk_write+0xe4>
			count = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	e030      	b.n	8001094 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <SD_disk_write+0x104>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d007      	beq.n	800104e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800103e:	2100      	movs	r1, #0
 8001040:	2077      	movs	r0, #119	; 0x77
 8001042:	f7ff fdfa 	bl	8000c3a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	2057      	movs	r0, #87	; 0x57
 800104a:	f7ff fdf6 	bl	8000c3a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	2059      	movs	r0, #89	; 0x59
 8001052:	f7ff fdf2 	bl	8000c3a <SD_SendCmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11b      	bne.n	8001094 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800105c:	21fc      	movs	r1, #252	; 0xfc
 800105e:	68b8      	ldr	r0, [r7, #8]
 8001060:	f7ff fda8 	bl	8000bb4 <SD_TxDataBlock>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <SD_disk_write+0xd0>
				buff += 512;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001070:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1ee      	bne.n	800105c <SD_disk_write+0xac>
 800107e:	e000      	b.n	8001082 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001080:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001082:	21fd      	movs	r1, #253	; 0xfd
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff fd95 	bl	8000bb4 <SD_TxDataBlock>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d101      	bne.n	8001094 <SD_disk_write+0xe4>
			{
				count = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001094:	f7ff fc80 	bl	8000998 <DESELECT>
	SPI_RxByte();
 8001098:	f7ff fcc0 	bl	8000a1c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	bf14      	ite	ne
 80010a2:	2301      	movne	r3, #1
 80010a4:	2300      	moveq	r3, #0
 80010a6:	b2db      	uxtb	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	200000b0 	.word	0x200000b0

080010b8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80010b8:	b590      	push	{r4, r7, lr}
 80010ba:	b08b      	sub	sp, #44	; 0x2c
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	603a      	str	r2, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	460b      	mov	r3, r1
 80010c6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SD_disk_ioctl+0x1e>
 80010d2:	2304      	movs	r3, #4
 80010d4:	e115      	b.n	8001302 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	2b05      	cmp	r3, #5
 80010e0:	d124      	bne.n	800112c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d012      	beq.n	8001110 <SD_disk_ioctl+0x58>
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	dc1a      	bgt.n	8001124 <SD_disk_ioctl+0x6c>
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <SD_disk_ioctl+0x40>
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d006      	beq.n	8001104 <SD_disk_ioctl+0x4c>
 80010f6:	e015      	b.n	8001124 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80010f8:	f7ff fd16 	bl	8000b28 <SD_PowerOff>
			res = RES_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001102:	e0fc      	b.n	80012fe <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001104:	f7ff fcce 	bl	8000aa4 <SD_PowerOn>
			res = RES_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800110e:	e0f6      	b.n	80012fe <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	1c5c      	adds	r4, r3, #1
 8001114:	f7ff fd14 	bl	8000b40 <SD_CheckPower>
 8001118:	4603      	mov	r3, r0
 800111a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800111c:	2300      	movs	r3, #0
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001122:	e0ec      	b.n	80012fe <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001124:	2304      	movs	r3, #4
 8001126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800112a:	e0e8      	b.n	80012fe <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800112c:	4b77      	ldr	r3, [pc, #476]	; (800130c <SD_disk_ioctl+0x254>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SD_disk_ioctl+0x86>
 800113a:	2303      	movs	r3, #3
 800113c:	e0e1      	b.n	8001302 <SD_disk_ioctl+0x24a>

		SELECT();
 800113e:	f7ff fc1d 	bl	800097c <SELECT>

		switch (ctrl)
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	2b0d      	cmp	r3, #13
 8001146:	f200 80cb 	bhi.w	80012e0 <SD_disk_ioctl+0x228>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <SD_disk_ioctl+0x98>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	0800124b 	.word	0x0800124b
 8001154:	08001189 	.word	0x08001189
 8001158:	0800123b 	.word	0x0800123b
 800115c:	080012e1 	.word	0x080012e1
 8001160:	080012e1 	.word	0x080012e1
 8001164:	080012e1 	.word	0x080012e1
 8001168:	080012e1 	.word	0x080012e1
 800116c:	080012e1 	.word	0x080012e1
 8001170:	080012e1 	.word	0x080012e1
 8001174:	080012e1 	.word	0x080012e1
 8001178:	080012e1 	.word	0x080012e1
 800117c:	0800125d 	.word	0x0800125d
 8001180:	08001281 	.word	0x08001281
 8001184:	080012a5 	.word	0x080012a5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001188:	2100      	movs	r1, #0
 800118a:	2049      	movs	r0, #73	; 0x49
 800118c:	f7ff fd55 	bl	8000c3a <SD_SendCmd>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 80a8 	bne.w	80012e8 <SD_disk_ioctl+0x230>
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2110      	movs	r1, #16
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fcda 	bl	8000b58 <SD_RxDataBlock>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 809e 	beq.w	80012e8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80011ac:	7b3b      	ldrb	r3, [r7, #12]
 80011ae:	099b      	lsrs	r3, r3, #6
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10e      	bne.n	80011d4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	7d3b      	ldrb	r3, [r7, #20]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	3301      	adds	r3, #1
 80011c8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80011ca:	8bfb      	ldrh	r3, [r7, #30]
 80011cc:	029a      	lsls	r2, r3, #10
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e02e      	b.n	8001232 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80011d4:	7c7b      	ldrb	r3, [r7, #17]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	7dbb      	ldrb	r3, [r7, #22]
 80011de:	09db      	lsrs	r3, r3, #7
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	7d7b      	ldrb	r3, [r7, #21]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	f003 0306 	and.w	r3, r3, #6
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3302      	adds	r3, #2
 80011f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80011fc:	7d3b      	ldrb	r3, [r7, #20]
 80011fe:	099b      	lsrs	r3, r3, #6
 8001200:	b2db      	uxtb	r3, r3
 8001202:	b29a      	uxth	r2, r3
 8001204:	7cfb      	ldrb	r3, [r7, #19]
 8001206:	b29b      	uxth	r3, r3
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	b29b      	uxth	r3, r3
 800120c:	4413      	add	r3, r2
 800120e:	b29a      	uxth	r2, r3
 8001210:	7cbb      	ldrb	r3, [r7, #18]
 8001212:	029b      	lsls	r3, r3, #10
 8001214:	b29b      	uxth	r3, r3
 8001216:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	3301      	adds	r3, #1
 8001222:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001224:	8bfa      	ldrh	r2, [r7, #30]
 8001226:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800122a:	3b09      	subs	r3, #9
 800122c:	409a      	lsls	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001238:	e056      	b.n	80012e8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001240:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001248:	e055      	b.n	80012f6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800124a:	f7ff fc11 	bl	8000a70 <SD_ReadyWait>
 800124e:	4603      	mov	r3, r0
 8001250:	2bff      	cmp	r3, #255	; 0xff
 8001252:	d14b      	bne.n	80012ec <SD_disk_ioctl+0x234>
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800125a:	e047      	b.n	80012ec <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800125c:	2100      	movs	r1, #0
 800125e:	2049      	movs	r0, #73	; 0x49
 8001260:	f7ff fceb 	bl	8000c3a <SD_SendCmd>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d142      	bne.n	80012f0 <SD_disk_ioctl+0x238>
 800126a:	2110      	movs	r1, #16
 800126c:	6a38      	ldr	r0, [r7, #32]
 800126e:	f7ff fc73 	bl	8000b58 <SD_RxDataBlock>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d03b      	beq.n	80012f0 <SD_disk_ioctl+0x238>
 8001278:	2300      	movs	r3, #0
 800127a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800127e:	e037      	b.n	80012f0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001280:	2100      	movs	r1, #0
 8001282:	204a      	movs	r0, #74	; 0x4a
 8001284:	f7ff fcd9 	bl	8000c3a <SD_SendCmd>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d132      	bne.n	80012f4 <SD_disk_ioctl+0x23c>
 800128e:	2110      	movs	r1, #16
 8001290:	6a38      	ldr	r0, [r7, #32]
 8001292:	f7ff fc61 	bl	8000b58 <SD_RxDataBlock>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d02b      	beq.n	80012f4 <SD_disk_ioctl+0x23c>
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80012a2:	e027      	b.n	80012f4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80012a4:	2100      	movs	r1, #0
 80012a6:	207a      	movs	r0, #122	; 0x7a
 80012a8:	f7ff fcc7 	bl	8000c3a <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d116      	bne.n	80012e0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012b8:	e00b      	b.n	80012d2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80012ba:	6a3c      	ldr	r4, [r7, #32]
 80012bc:	1c63      	adds	r3, r4, #1
 80012be:	623b      	str	r3, [r7, #32]
 80012c0:	f7ff fbac 	bl	8000a1c <SPI_RxByte>
 80012c4:	4603      	mov	r3, r0
 80012c6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80012c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012cc:	3301      	adds	r3, #1
 80012ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d9ef      	bls.n	80012ba <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80012e0:	2304      	movs	r3, #4
 80012e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012e6:	e006      	b.n	80012f6 <SD_disk_ioctl+0x23e>
			break;
 80012e8:	bf00      	nop
 80012ea:	e004      	b.n	80012f6 <SD_disk_ioctl+0x23e>
			break;
 80012ec:	bf00      	nop
 80012ee:	e002      	b.n	80012f6 <SD_disk_ioctl+0x23e>
			break;
 80012f0:	bf00      	nop
 80012f2:	e000      	b.n	80012f6 <SD_disk_ioctl+0x23e>
			break;
 80012f4:	bf00      	nop
		}

		DESELECT();
 80012f6:	f7ff fb4f 	bl	8000998 <DESELECT>
		SPI_RxByte();
 80012fa:	f7ff fb8f 	bl	8000a1c <SPI_RxByte>
	}

	return res;
 80012fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001302:	4618      	mov	r0, r3
 8001304:	372c      	adds	r7, #44	; 0x2c
 8001306:	46bd      	mov	sp, r7
 8001308:	bd90      	pop	{r4, r7, pc}
 800130a:	bf00      	nop
 800130c:	20000000 	.word	0x20000000

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0ca      	sub	sp, #296	; 0x128
 8001314:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f001 fc6f 	bl	8002bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 fde5 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f000 ff63 	bl	80021e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001322:	f000 fe4f 	bl	8001fc4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001326:	f000 fe9f 	bl	8002068 <MX_I2C1_Init>
  MX_I2C2_Init();
 800132a:	f000 fecb 	bl	80020c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 800132e:	f000 fef7 	bl	8002120 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001332:	f000 ff23 	bl	800217c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001336:	f004 fb3b 	bl	80059b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800133a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133e:	f001 fccd 	bl	8002cdc <HAL_Delay>
  f_mount(&fs, "", 0);
 8001342:	2200      	movs	r2, #0
 8001344:	49d1      	ldr	r1, [pc, #836]	; (800168c <main+0x37c>)
 8001346:	48d2      	ldr	r0, [pc, #840]	; (8001690 <main+0x380>)
 8001348:	f006 fe46 	bl	8007fd8 <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 800134c:	2213      	movs	r2, #19
 800134e:	49d1      	ldr	r1, [pc, #836]	; (8001694 <main+0x384>)
 8001350:	48d1      	ldr	r0, [pc, #836]	; (8001698 <main+0x388>)
 8001352:	f006 fe87 	bl	8008064 <f_open>

  f_lseek(&fil, 10);
 8001356:	210a      	movs	r1, #10
 8001358:	48cf      	ldr	r0, [pc, #828]	; (8001698 <main+0x388>)
 800135a:	f007 fa8b 	bl	8008874 <f_lseek>

  ssd1306_Init();
 800135e:	f001 fa49 	bl	80027f4 <ssd1306_Init>
    //ssd1306_Fill(White);
    ssd1306_SetCursor(5,5);
 8001362:	2105      	movs	r1, #5
 8001364:	2005      	movs	r0, #5
 8001366:	f001 fbfd 	bl	8002b64 <ssd1306_SetCursor>
    char retVal= ssd1306_WriteString("Hellos", Font_7x10, White);
 800136a:	4acc      	ldr	r2, [pc, #816]	; (800169c <main+0x38c>)
 800136c:	2301      	movs	r3, #1
 800136e:	ca06      	ldmia	r2, {r1, r2}
 8001370:	48cb      	ldr	r0, [pc, #812]	; (80016a0 <main+0x390>)
 8001372:	f001 fbd1 	bl	8002b18 <ssd1306_WriteString>
 8001376:	4603      	mov	r3, r0
 8001378:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
    ssd1306_UpdateScreen();
 800137c:	f001 fac8 	bl	8002910 <ssd1306_UpdateScreen>
  #define HMC5883L_REG_STATUS           (0x09)
  #define HMC5883L_REG_IDENT_A          (0x0A)
  #define HMC5883L_REG_IDENT_B          (0x0B)
  #define HMC5883L_REG_IDENT_C          (0x0C)

    uint8_t MPU6050_rx=0;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
    uint8_t MPU6050_rx_buf[20];
    uint8_t MPU6050_tx;
    float MPU6050_Gyro_LSB = 32.8;
 8001386:	4bc7      	ldr	r3, [pc, #796]	; (80016a4 <main+0x394>)
 8001388:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    float MPU6050_Acc_LSB = 4096.0;
 800138c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001390:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    int g_l;
    uint8_t tx;
    char str[10];char str1[10];char str2[10];char str3[10];char str4[10];char str5[10];char str6[10];char str7[10];char str8[10];char str9[10];char str10[10];
  // configure the MPU6050 (gyro/accelerometer)

    tx = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &tx, 1, 100);
 800139a:	2364      	movs	r3, #100	; 0x64
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	226b      	movs	r2, #107	; 0x6b
 80013ac:	21d0      	movs	r1, #208	; 0xd0
 80013ae:	48be      	ldr	r0, [pc, #760]	; (80016a8 <main+0x398>)
 80013b0:	f002 fb02 	bl	80039b8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80013b4:	200a      	movs	r0, #10
 80013b6:	f001 fc91 	bl	8002cdc <HAL_Delay>

    tx = 0x07; // Set No Sampling
 80013ba:	2307      	movs	r3, #7
 80013bc:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &tx, 1, 100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	2219      	movs	r2, #25
 80013d2:	21d0      	movs	r1, #208	; 0xd0
 80013d4:	48b4      	ldr	r0, [pc, #720]	; (80016a8 <main+0x398>)
 80013d6:	f002 faef 	bl	80039b8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80013da:	200a      	movs	r0, #10
 80013dc:	f001 fc7e 	bl	8002cdc <HAL_Delay>

    tx = 5; // Digital Low Pass Filter Setting
 80013e0:	2305      	movs	r3, #5
 80013e2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1, &tx, 1, 100);
 80013e6:	2364      	movs	r3, #100	; 0x64
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	2301      	movs	r3, #1
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2301      	movs	r3, #1
 80013f6:	221a      	movs	r2, #26
 80013f8:	21d0      	movs	r1, #208	; 0xd0
 80013fa:	48ab      	ldr	r0, [pc, #684]	; (80016a8 <main+0x398>)
 80013fc:	f002 fadc 	bl	80039b8 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001400:	200a      	movs	r0, #10
 8001402:	f001 fc6b 	bl	8002cdc <HAL_Delay>


    tx=0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &tx, 1, 100); // exit sleep
 800140c:	2364      	movs	r3, #100	; 0x64
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2301      	movs	r3, #1
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	226b      	movs	r2, #107	; 0x6b
 800141e:	21d0      	movs	r1, #208	; 0xd0
 8001420:	48a1      	ldr	r0, [pc, #644]	; (80016a8 <main+0x398>)
 8001422:	f002 fac9 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001426:	200a      	movs	r0, #10
 8001428:	f001 fc58 	bl	8002cdc <HAL_Delay>

  	tx=109;
 800142c:	236d      	movs	r3, #109	; 0x6d
 800142e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &tx, 1, 100); // sample rate = 8kHz / 110 = 72.7Hz
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2301      	movs	r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2219      	movs	r2, #25
 8001444:	21d0      	movs	r1, #208	; 0xd0
 8001446:	4898      	ldr	r0, [pc, #608]	; (80016a8 <main+0x398>)
 8001448:	f002 fab6 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 800144c:	200a      	movs	r0, #10
 800144e:	f001 fc45 	bl	8002cdc <HAL_Delay>

  	tx=0x18;
 8001452:	2318      	movs	r3, #24
 8001454:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &tx, 1, 100); // gyro full scale = +/- 2000dps
 8001458:	2364      	movs	r3, #100	; 0x64
 800145a:	9302      	str	r3, [sp, #8]
 800145c:	2301      	movs	r3, #1
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	221b      	movs	r2, #27
 800146a:	21d0      	movs	r1, #208	; 0xd0
 800146c:	488e      	ldr	r0, [pc, #568]	; (80016a8 <main+0x398>)
 800146e:	f002 faa3 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001472:	200a      	movs	r0, #10
 8001474:	f001 fc32 	bl	8002cdc <HAL_Delay>

  	tx=0x08;
 8001478:	2308      	movs	r3, #8
 800147a:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &tx, 1, 100); // accelerometer full scale = +/- 4g
 800147e:	2364      	movs	r3, #100	; 0x64
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2301      	movs	r3, #1
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	221c      	movs	r2, #28
 8001490:	21d0      	movs	r1, #208	; 0xd0
 8001492:	4885      	ldr	r0, [pc, #532]	; (80016a8 <main+0x398>)
 8001494:	f002 fa90 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f001 fc1f 	bl	8002cdc <HAL_Delay>

  	tx=0x01;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x38, 1, &tx, 1, 100); // enable INTA interrupt
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2301      	movs	r3, #1
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	2238      	movs	r2, #56	; 0x38
 80014b6:	21d0      	movs	r1, #208	; 0xd0
 80014b8:	487b      	ldr	r0, [pc, #492]	; (80016a8 <main+0x398>)
 80014ba:	f002 fa7d 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80014be:	200a      	movs	r0, #10
 80014c0:	f001 fc0c 	bl	8002cdc <HAL_Delay>

  // configure the HMC5883L (magnetometer)
  	tx=0x00;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6A, 1, &tx, 1, 100); // disable i2c master mode
 80014ca:	2364      	movs	r3, #100	; 0x64
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2301      	movs	r3, #1
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	226a      	movs	r2, #106	; 0x6a
 80014dc:	21d0      	movs	r1, #208	; 0xd0
 80014de:	4872      	ldr	r0, [pc, #456]	; (80016a8 <main+0x398>)
 80014e0:	f002 fa6a 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f001 fbf9 	bl	8002cdc <HAL_Delay>
  	tx=0x02;
 80014ea:	2302      	movs	r3, #2
 80014ec:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x37, 1, &tx, 1, 100); // enable i2c master bypass mode
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	2301      	movs	r3, #1
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2301      	movs	r3, #1
 8001500:	2237      	movs	r2, #55	; 0x37
 8001502:	21d0      	movs	r1, #208	; 0xd0
 8001504:	4868      	ldr	r0, [pc, #416]	; (80016a8 <main+0x398>)
 8001506:	f002 fa57 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 800150a:	200a      	movs	r0, #10
 800150c:	f001 fbe6 	bl	8002cdc <HAL_Delay>
  	tx=0x18;
 8001510:	2318      	movs	r3, #24
 8001512:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS , 0x00, 1, &tx, 1, 100); // sample rate = 75Hz
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	2301      	movs	r3, #1
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	2301      	movs	r3, #1
 8001526:	2200      	movs	r2, #0
 8001528:	213c      	movs	r1, #60	; 0x3c
 800152a:	485f      	ldr	r0, [pc, #380]	; (80016a8 <main+0x398>)
 800152c:	f002 fa44 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001530:	200a      	movs	r0, #10
 8001532:	f001 fbd3 	bl	8002cdc <HAL_Delay>
  	tx=0x60;
 8001536:	2360      	movs	r3, #96	; 0x60
 8001538:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS , 0x01, 1, &tx, 1, 100); // full scale = +/- 2.5 Gauss ////*
 800153c:	2364      	movs	r3, #100	; 0x64
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	2201      	movs	r2, #1
 800154e:	213c      	movs	r1, #60	; 0x3c
 8001550:	4855      	ldr	r0, [pc, #340]	; (80016a8 <main+0x398>)
 8001552:	f002 fa31 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001556:	200a      	movs	r0, #10
 8001558:	f001 fbc0 	bl	8002cdc <HAL_Delay>
  	tx=0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDRESS , 0x02, 1, &tx, 1, 100); // continuous measurement mode
 8001562:	2364      	movs	r3, #100	; 0x64
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2301      	movs	r3, #1
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2301      	movs	r3, #1
 8001572:	2202      	movs	r2, #2
 8001574:	213c      	movs	r1, #60	; 0x3c
 8001576:	484c      	ldr	r0, [pc, #304]	; (80016a8 <main+0x398>)
 8001578:	f002 fa1e 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f001 fbad 	bl	8002cdc <HAL_Delay>
	tx=0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &tx, 1, 100); // exit sleep
 8001588:	2364      	movs	r3, #100	; 0x64
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2301      	movs	r3, #1
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	226b      	movs	r2, #107	; 0x6b
 800159a:	21d0      	movs	r1, #208	; 0xd0
 800159c:	4842      	ldr	r0, [pc, #264]	; (80016a8 <main+0x398>)
 800159e:	f002 fa0b 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80015a2:	200a      	movs	r0, #10
 80015a4:	f001 fb9a 	bl	8002cdc <HAL_Delay>
  	tx=0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x37, 1, &tx, 1, 100); // disable i2c master bypass mode
 80015ae:	2364      	movs	r3, #100	; 0x64
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	2301      	movs	r3, #1
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	2237      	movs	r2, #55	; 0x37
 80015c0:	21d0      	movs	r1, #208	; 0xd0
 80015c2:	4839      	ldr	r0, [pc, #228]	; (80016a8 <main+0x398>)
 80015c4:	f002 f9f8 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f001 fb87 	bl	8002cdc <HAL_Delay>
	tx=0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &tx, 1, 100); // exit sleep
 80015d4:	2364      	movs	r3, #100	; 0x64
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	2301      	movs	r3, #1
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	2301      	movs	r3, #1
 80015e4:	226b      	movs	r2, #107	; 0x6b
 80015e6:	21d0      	movs	r1, #208	; 0xd0
 80015e8:	482f      	ldr	r0, [pc, #188]	; (80016a8 <main+0x398>)
 80015ea:	f002 f9e5 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80015ee:	200a      	movs	r0, #10
 80015f0:	f001 fb74 	bl	8002cdc <HAL_Delay>
  	tx=0x22;
 80015f4:	2322      	movs	r3, #34	; 0x22
 80015f6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6A, 1, &tx, 1, 100); // enable i2c master mode
 80015fa:	2364      	movs	r3, #100	; 0x64
 80015fc:	9302      	str	r3, [sp, #8]
 80015fe:	2301      	movs	r3, #1
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	226a      	movs	r2, #106	; 0x6a
 800160c:	21d0      	movs	r1, #208	; 0xd0
 800160e:	4826      	ldr	r0, [pc, #152]	; (80016a8 <main+0x398>)
 8001610:	f002 f9d2 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001614:	200a      	movs	r0, #10
 8001616:	f001 fb61 	bl	8002cdc <HAL_Delay>
  	tx=0b00001101;
 800161a:	230d      	movs	r3, #13
 800161c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x24, 1, &tx , 1, 100); //Master Clock to 400kHz
 8001620:	2364      	movs	r3, #100	; 0x64
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2301      	movs	r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	2224      	movs	r2, #36	; 0x24
 8001632:	21d0      	movs	r1, #208	; 0xd0
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <main+0x398>)
 8001636:	f002 f9bf 	bl	80039b8 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f001 fb4e 	bl	8002cdc <HAL_Delay>
	tx=0x00;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &tx, 1, 100); // exit sleep
 8001646:	2364      	movs	r3, #100	; 0x64
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	2301      	movs	r3, #1
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2301      	movs	r3, #1
 8001656:	226b      	movs	r2, #107	; 0x6b
 8001658:	21d0      	movs	r1, #208	; 0xd0
 800165a:	4813      	ldr	r0, [pc, #76]	; (80016a8 <main+0x398>)
 800165c:	f002 f9ac 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001660:	200a      	movs	r0, #10
 8001662:	f001 fb3b 	bl	8002cdc <HAL_Delay>

  // configure the MPU6050 to automatically read the magnetometer
  	tx= 0b10011110;
 8001666:	239e      	movs	r3, #158	; 0x9e
 8001668:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x25, 1, &tx , 1, 100); // slave 0 i2c address, read mode
 800166c:	2364      	movs	r3, #100	; 0x64
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	2301      	movs	r3, #1
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2301      	movs	r3, #1
 800167c:	2225      	movs	r2, #37	; 0x25
 800167e:	21d0      	movs	r1, #208	; 0xd0
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <main+0x398>)
 8001682:	f002 f999 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 8001686:	200a      	movs	r0, #10
 8001688:	e010      	b.n	80016ac <main+0x39c>
 800168a:	bf00      	nop
 800168c:	08009868 	.word	0x08009868
 8001690:	200000b4 	.word	0x200000b4
 8001694:	0800986c 	.word	0x0800986c
 8001698:	200010ec 	.word	0x200010ec
 800169c:	20000008 	.word	0x20000008
 80016a0:	08009878 	.word	0x08009878
 80016a4:	42033333 	.word	0x42033333
 80016a8:	20002164 	.word	0x20002164
 80016ac:	f001 fb16 	bl	8002cdc <HAL_Delay>
  	tx=0x03;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x26, 1, &tx, 1, 100); // slave 0 register = 0x03 (x axis)
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2301      	movs	r3, #1
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	2226      	movs	r2, #38	; 0x26
 80016c8:	21d0      	movs	r1, #208	; 0xd0
 80016ca:	48e4      	ldr	r0, [pc, #912]	; (8001a5c <main+0x74c>)
 80016cc:	f002 f974 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80016d0:	200a      	movs	r0, #10
 80016d2:	f001 fb03 	bl	8002cdc <HAL_Delay>
  	tx= 0b10000110;
 80016d6:	2386      	movs	r3, #134	; 0x86
 80016d8:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
  	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x27, 1, &tx ,  1, 100); // slave 0 transfer size = 6, enabled
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	2227      	movs	r2, #39	; 0x27
 80016ee:	21d0      	movs	r1, #208	; 0xd0
 80016f0:	48da      	ldr	r0, [pc, #872]	; (8001a5c <main+0x74c>)
 80016f2:	f002 f961 	bl	80039b8 <HAL_I2C_Mem_Write>
  	HAL_Delay(10);
 80016f6:	200a      	movs	r0, #10
 80016f8:	f001 faf0 	bl	8002cdc <HAL_Delay>
  //	HAL_Delay(10);

    	uint8_t rx_buffer[20];
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    	int count=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2108      	movs	r1, #8
 8001706:	48d6      	ldr	r0, [pc, #856]	; (8001a60 <main+0x750>)
 8001708:	f001 fff8 	bl	80036fc <HAL_GPIO_WritePin>
    {
      /* USER CODE END WHILE */


  	  	uint8_t rx_buffer[20];
  	  	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR,0x3B, 1, rx_buffer,20,100);
 800170c:	2364      	movs	r3, #100	; 0x64
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	2314      	movs	r3, #20
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	463b      	mov	r3, r7
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	223b      	movs	r2, #59	; 0x3b
 800171c:	21d0      	movs	r1, #208	; 0xd0
 800171e:	48cf      	ldr	r0, [pc, #828]	; (8001a5c <main+0x74c>)
 8001720:	f002 fa44 	bl	8003bac <HAL_I2C_Mem_Read>

  	  	// extract the raw values
  	  	int16_t  accel_x  = rx_buffer[0]  << 8 | rx_buffer[1];
 8001724:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001728:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001736:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800173a:	785b      	ldrb	r3, [r3, #1]
 800173c:	b21b      	sxth	r3, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
  	  	int16_t  accel_y  = rx_buffer[2]  << 8 | rx_buffer[3];
 8001744:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001748:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800174c:	789b      	ldrb	r3, [r3, #2]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b21a      	sxth	r2, r3
 8001752:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001756:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800175a:	78db      	ldrb	r3, [r3, #3]
 800175c:	b21b      	sxth	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  	  	int16_t  accel_z  = rx_buffer[4]  << 8 | rx_buffer[5];
 8001764:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001768:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800176c:	791b      	ldrb	r3, [r3, #4]
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	b21a      	sxth	r2, r3
 8001772:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001776:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800177a:	795b      	ldrb	r3, [r3, #5]
 800177c:	b21b      	sxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
  	  	int16_t  mpu_temp = rx_buffer[6]  << 8 | rx_buffer[7];
 8001784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001788:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800178c:	799b      	ldrb	r3, [r3, #6]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001796:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800179a:	79db      	ldrb	r3, [r3, #7]
 800179c:	b21b      	sxth	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
  	  	int16_t  gyro_x   = rx_buffer[8]  << 8 | rx_buffer[9];
 80017a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017ac:	7a1b      	ldrb	r3, [r3, #8]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	b21a      	sxth	r2, r3
 80017b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017ba:	7a5b      	ldrb	r3, [r3, #9]
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
  	  	int16_t  gyro_y   = rx_buffer[10] << 8 | rx_buffer[11];
 80017c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017cc:	7a9b      	ldrb	r3, [r3, #10]
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017da:	7adb      	ldrb	r3, [r3, #11]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
  	  	int16_t  gyro_z   = rx_buffer[12] << 8 | rx_buffer[13];
 80017e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017ec:	7b1b      	ldrb	r3, [r3, #12]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80017f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fa:	7b5b      	ldrb	r3, [r3, #13]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	4313      	orrs	r3, r2
 8001800:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
  	  	int16_t  magn_x   = rx_buffer[14] << 8 | rx_buffer[15];
 8001804:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800180c:	7b9b      	ldrb	r3, [r3, #14]
 800180e:	021b      	lsls	r3, r3, #8
 8001810:	b21a      	sxth	r2, r3
 8001812:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181a:	7bdb      	ldrb	r3, [r3, #15]
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
  	  	int16_t  magn_y   = rx_buffer[16] << 8 | rx_buffer[17];
 8001824:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001828:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800182c:	7c1b      	ldrb	r3, [r3, #16]
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001836:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800183a:	7c5b      	ldrb	r3, [r3, #17]
 800183c:	b21b      	sxth	r3, r3
 800183e:	4313      	orrs	r3, r2
 8001840:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  	  	int16_t  magn_z   = rx_buffer[18] << 8 | rx_buffer[19];
 8001844:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800184c:	7c9b      	ldrb	r3, [r3, #18]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001856:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800185a:	7cdb      	ldrb	r3, [r3, #19]
 800185c:	b21b      	sxth	r3, r3
 800185e:	4313      	orrs	r3, r2
 8001860:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4

  	  // convert accelerometer readings into G's
  	  	accel_x_g = accel_x / 8192.0f;
 8001864:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	; 0x106
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001870:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001a64 <main+0x754>
 8001874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001878:	edc7 7a3c 	vstr	s15, [r7, #240]	; 0xf0
  	  	accel_y_g = accel_y / 8192.0f;
 800187c:	f9b7 3104 	ldrsh.w	r3, [r7, #260]	; 0x104
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001888:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001a64 <main+0x754>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
  	  	accel_z_g = accel_z / 8192.0f;
 8001894:	f9b7 3102 	ldrsh.w	r3, [r7, #258]	; 0x102
 8001898:	ee07 3a90 	vmov	s15, r3
 800189c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018a0:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001a64 <main+0x754>
 80018a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a8:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8

  	  	// convert temperature reading into degrees Celsius
  	  	mpu_temp_c = mpu_temp / 340.0f + 36.53f;
 80018ac:	f9b7 3100 	ldrsh.w	r3, [r7, #256]	; 0x100
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b8:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001a68 <main+0x758>
 80018bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c0:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001a6c <main+0x75c>
 80018c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018c8:	edc7 7a39 	vstr	s15, [r7, #228]	; 0xe4

  	  	// convert gyro readings into Radians per second
  	  	gyro_x_rad = gyro_x / 939.650784f;
 80018cc:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d8:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001a70 <main+0x760>
 80018dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e0:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
  	  	gyro_y_rad = gyro_y / 939.650784f;
 80018e4:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001a70 <main+0x760>
 80018f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f8:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
  	  	gyro_z_rad = gyro_z / 939.650784f;
 80018fc:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001a70 <main+0x760>
 800190c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001910:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

  	  	// convert magnetometer readings into Gauss's
  	  	magn_x_gs = magn_x / 660.0f;
 8001914:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001920:	eddf 6a54 	vldr	s13, [pc, #336]	; 8001a74 <main+0x764>
 8001924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001928:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
  	  	magn_y_gs = magn_y / 660.0f;
 800192c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001938:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001a74 <main+0x764>
 800193c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001940:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
  	  	magn_z_gs = magn_z / 660.0f;
 8001944:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001a74 <main+0x764>
 8001954:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001958:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc


  	  g_h=accel_x_g;
 800195c:	edd7 7a3c 	vldr	s15, [r7, #240]	; 0xf0
 8001960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001964:	ee17 3a90 	vmov	r3, s15
 8001968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=accel_x_g-g_h;
 800196c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001978:	ed97 7a3c 	vldr	s14, [r7, #240]	; 0xf0
 800197c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001980:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001984:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001988:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001a7c <main+0x76c>
 800198c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001990:	ee17 0a90 	vmov	r0, s15
 8001994:	f7fe fdf0 	bl	8000578 <__aeabi_f2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	ec43 2b10 	vmov	d0, r2, r3
 80019a0:	f007 fa84 	bl	8008eac <trunc>
 80019a4:	ec53 2b10 	vmov	r2, r3, d0
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7fe fe3c 	bl	8000628 <__aeabi_d2iz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str, "%d.%d", g_h,g_l);
 80019b6:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 80019ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80019be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80019c2:	492d      	ldr	r1, [pc, #180]	; (8001a78 <main+0x768>)
 80019c4:	f007 fbee 	bl	80091a4 <siprintf>


  	  g_h=accel_y_g;
 80019c8:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80019cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d0:	ee17 3a90 	vmov	r3, s15
 80019d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=accel_y_g-g_h;
 80019d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 80019f0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80019f4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a7c <main+0x76c>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	ee17 0a90 	vmov	r0, s15
 8001a00:	f7fe fdba 	bl	8000578 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f007 fa4e 	bl	8008eac <trunc>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7fe fe06 	bl	8000628 <__aeabi_d2iz>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str2,"%d.%d", g_h,g_l);
 8001a22:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001a26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001a2e:	4912      	ldr	r1, [pc, #72]	; (8001a78 <main+0x768>)
 8001a30:	f007 fbb8 	bl	80091a4 <siprintf>


  	  g_h=accel_z_g;
 8001a34:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8001a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3c:	ee17 3a90 	vmov	r3, s15
 8001a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=accel_z_g-g_h;
 8001a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a50:	ed97 7a3a 	vldr	s14, [r7, #232]	; 0xe8
 8001a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a58:	e012      	b.n	8001a80 <main+0x770>
 8001a5a:	bf00      	nop
 8001a5c:	20002164 	.word	0x20002164
 8001a60:	40020800 	.word	0x40020800
 8001a64:	46000000 	.word	0x46000000
 8001a68:	43aa0000 	.word	0x43aa0000
 8001a6c:	42121eb8 	.word	0x42121eb8
 8001a70:	446ae9a6 	.word	0x446ae9a6
 8001a74:	44250000 	.word	0x44250000
 8001a78:	08009880 	.word	0x08009880
 8001a7c:	447a0000 	.word	0x447a0000
 8001a80:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001a84:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001a88:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8001a7c <main+0x76c>
 8001a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd70 	bl	8000578 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f007 fa04 	bl	8008eac <trunc>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7fe fdbc 	bl	8000628 <__aeabi_d2iz>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str3, "%d.%d", g_h,g_l);
 8001ab6:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001aba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001abe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001ac2:	49ea      	ldr	r1, [pc, #936]	; (8001e6c <main+0xb5c>)
 8001ac4:	f007 fb6e 	bl	80091a4 <siprintf>


  	  g_h=gyro_x_rad;
 8001ac8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8001acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=gyro_x_rad-g_h;
 8001ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001af0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001af4:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001e70 <main+0xb60>
 8001af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afc:	ee17 0a90 	vmov	r0, s15
 8001b00:	f7fe fd3a 	bl	8000578 <__aeabi_f2d>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	ec43 2b10 	vmov	d0, r2, r3
 8001b0c:	f007 f9ce 	bl	8008eac <trunc>
 8001b10:	ec53 2b10 	vmov	r2, r3, d0
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe fd86 	bl	8000628 <__aeabi_d2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str4, "%d.%d", g_h,g_l);
 8001b22:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8001b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b2e:	49cf      	ldr	r1, [pc, #828]	; (8001e6c <main+0xb5c>)
 8001b30:	f007 fb38 	bl	80091a4 <siprintf>


  	  g_h=gyro_y_rad;
 8001b34:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=gyro_y_rad-g_h;
 8001b44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b50:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001b5c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001b60:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001e70 <main+0xb60>
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	ee17 0a90 	vmov	r0, s15
 8001b6c:	f7fe fd04 	bl	8000578 <__aeabi_f2d>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ec43 2b10 	vmov	d0, r2, r3
 8001b78:	f007 f998 	bl	8008eac <trunc>
 8001b7c:	ec53 2b10 	vmov	r2, r3, d0
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe fd50 	bl	8000628 <__aeabi_d2iz>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str5, "%d.%d", g_h,g_l);
 8001b8e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8001b92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b9a:	49b4      	ldr	r1, [pc, #720]	; (8001e6c <main+0xb5c>)
 8001b9c:	f007 fb02 	bl	80091a4 <siprintf>


  	  g_h=gyro_z_rad;
 8001ba0:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8001ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba8:	ee17 3a90 	vmov	r3, s15
 8001bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=gyro_z_rad-g_h;
 8001bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc4:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001bc8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001bcc:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001e70 <main+0xb60>
 8001bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fcce 	bl	8000578 <__aeabi_f2d>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	ec43 2b10 	vmov	d0, r2, r3
 8001be4:	f007 f962 	bl	8008eac <trunc>
 8001be8:	ec53 2b10 	vmov	r2, r3, d0
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe fd1a 	bl	8000628 <__aeabi_d2iz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str6, "%d.%d", g_h,g_l);
 8001bfa:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001c06:	4999      	ldr	r1, [pc, #612]	; (8001e6c <main+0xb5c>)
 8001c08:	f007 facc 	bl	80091a4 <siprintf>


  	  g_h=magn_x;
 8001c0c:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8001c10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=magn_x-g_h;
 8001c14:	f9b7 20f8 	ldrsh.w	r2, [r7, #248]	; 0xf8
 8001c18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001c2a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001c2e:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001e70 <main+0xb60>
 8001c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c36:	ee17 0a90 	vmov	r0, s15
 8001c3a:	f7fe fc9d 	bl	8000578 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ec43 2b10 	vmov	d0, r2, r3
 8001c46:	f007 f931 	bl	8008eac <trunc>
 8001c4a:	ec53 2b10 	vmov	r2, r3, d0
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe fce9 	bl	8000628 <__aeabi_d2iz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str7, "%d.%d", g_h,g_l);
 8001c5c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c64:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001c68:	4980      	ldr	r1, [pc, #512]	; (8001e6c <main+0xb5c>)
 8001c6a:	f007 fa9b 	bl	80091a4 <siprintf>


  	  g_h=magn_y;
 8001c6e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8001c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=magn_y-g_h;
 8001c76:	f9b7 20f6 	ldrsh.w	r2, [r7, #246]	; 0xf6
 8001c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	ee07 3a90 	vmov	s15, r3
 8001c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c88:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001c8c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001c90:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001e70 <main+0xb60>
 8001c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c98:	ee17 0a90 	vmov	r0, s15
 8001c9c:	f7fe fc6c 	bl	8000578 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	ec43 2b10 	vmov	d0, r2, r3
 8001ca8:	f007 f900 	bl	8008eac <trunc>
 8001cac:	ec53 2b10 	vmov	r2, r3, d0
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe fcb8 	bl	8000628 <__aeabi_d2iz>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str8, "%d.%d", g_h,g_l);
 8001cbe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001cca:	4968      	ldr	r1, [pc, #416]	; (8001e6c <main+0xb5c>)
 8001ccc:	f007 fa6a 	bl	80091a4 <siprintf>


  	  g_h=magn_z;
 8001cd0:	f9b7 30f4 	ldrsh.w	r3, [r7, #244]	; 0xf4
 8001cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=magn_z-g_h;
 8001cd8:	f9b7 20f4 	ldrsh.w	r2, [r7, #244]	; 0xf4
 8001cdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cea:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001cee:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001cf2:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001e70 <main+0xb60>
 8001cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfa:	ee17 0a90 	vmov	r0, s15
 8001cfe:	f7fe fc3b 	bl	8000578 <__aeabi_f2d>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	ec43 2b10 	vmov	d0, r2, r3
 8001d0a:	f007 f8cf 	bl	8008eac <trunc>
 8001d0e:	ec53 2b10 	vmov	r2, r3, d0
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe fc87 	bl	8000628 <__aeabi_d2iz>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str9, "%d.%d", g_h,g_l);
 8001d20:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d28:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001d2c:	494f      	ldr	r1, [pc, #316]	; (8001e6c <main+0xb5c>)
 8001d2e:	f007 fa39 	bl	80091a4 <siprintf>


  	  g_h=mpu_temp_c;
 8001d32:	edd7 7a39 	vldr	s15, [r7, #228]	; 0xe4
 8001d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d3a:	ee17 3a90 	vmov	r3, s15
 8001d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  	  g_lf=mpu_temp_c-g_h;
 8001d42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d46:	ee07 3a90 	vmov	s15, r3
 8001d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d4e:	ed97 7a39 	vldr	s14, [r7, #228]	; 0xe4
 8001d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d56:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  	  g_l= trunc(g_lf*1000);
 8001d5a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001d5e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001e70 <main+0xb60>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	ee17 0a90 	vmov	r0, s15
 8001d6a:	f7fe fc05 	bl	8000578 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	ec43 2b10 	vmov	d0, r2, r3
 8001d76:	f007 f899 	bl	8008eac <trunc>
 8001d7a:	ec53 2b10 	vmov	r2, r3, d0
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe fc51 	bl	8000628 <__aeabi_d2iz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  	  sprintf(str10, "%d.%d", g_h,g_l);
 8001d8c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d94:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001d98:	4934      	ldr	r1, [pc, #208]	; (8001e6c <main+0xb5c>)
 8001d9a:	f007 fa03 	bl	80091a4 <siprintf>

  	  f_puts(str , &fil);
 8001d9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001da2:	4934      	ldr	r1, [pc, #208]	; (8001e74 <main+0xb64>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f007 f800 	bl	8008daa <f_puts>
  	  f_puts("  ", &fil);
 8001daa:	4932      	ldr	r1, [pc, #200]	; (8001e74 <main+0xb64>)
 8001dac:	4832      	ldr	r0, [pc, #200]	; (8001e78 <main+0xb68>)
 8001dae:	f006 fffc 	bl	8008daa <f_puts>
  	  f_puts(str2 , &fil);
 8001db2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001db6:	492f      	ldr	r1, [pc, #188]	; (8001e74 <main+0xb64>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f006 fff6 	bl	8008daa <f_puts>
  	  f_puts("  ", &fil);
 8001dbe:	492d      	ldr	r1, [pc, #180]	; (8001e74 <main+0xb64>)
 8001dc0:	482d      	ldr	r0, [pc, #180]	; (8001e78 <main+0xb68>)
 8001dc2:	f006 fff2 	bl	8008daa <f_puts>
  	  f_puts(str3 , &fil);
 8001dc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dca:	492a      	ldr	r1, [pc, #168]	; (8001e74 <main+0xb64>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f006 ffec 	bl	8008daa <f_puts>
  	  f_puts( "  ", &fil);
 8001dd2:	4928      	ldr	r1, [pc, #160]	; (8001e74 <main+0xb64>)
 8001dd4:	4828      	ldr	r0, [pc, #160]	; (8001e78 <main+0xb68>)
 8001dd6:	f006 ffe8 	bl	8008daa <f_puts>
  	  f_puts(str4 , &fil);
 8001dda:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dde:	4925      	ldr	r1, [pc, #148]	; (8001e74 <main+0xb64>)
 8001de0:	4618      	mov	r0, r3
 8001de2:	f006 ffe2 	bl	8008daa <f_puts>
  	  f_puts("  ", &fil);
 8001de6:	4923      	ldr	r1, [pc, #140]	; (8001e74 <main+0xb64>)
 8001de8:	4823      	ldr	r0, [pc, #140]	; (8001e78 <main+0xb68>)
 8001dea:	f006 ffde 	bl	8008daa <f_puts>
  	  f_puts(str5 , &fil);
 8001dee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001df2:	4920      	ldr	r1, [pc, #128]	; (8001e74 <main+0xb64>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f006 ffd8 	bl	8008daa <f_puts>
  	  f_puts("  ", &fil);
 8001dfa:	491e      	ldr	r1, [pc, #120]	; (8001e74 <main+0xb64>)
 8001dfc:	481e      	ldr	r0, [pc, #120]	; (8001e78 <main+0xb68>)
 8001dfe:	f006 ffd4 	bl	8008daa <f_puts>
  	  f_puts(str6 , &fil);
 8001e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e06:	491b      	ldr	r1, [pc, #108]	; (8001e74 <main+0xb64>)
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f006 ffce 	bl	8008daa <f_puts>
  	  f_puts( "  ", &fil);
 8001e0e:	4919      	ldr	r1, [pc, #100]	; (8001e74 <main+0xb64>)
 8001e10:	4819      	ldr	r0, [pc, #100]	; (8001e78 <main+0xb68>)
 8001e12:	f006 ffca 	bl	8008daa <f_puts>
  	  f_puts(str7 , &fil);
 8001e16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e1a:	4916      	ldr	r1, [pc, #88]	; (8001e74 <main+0xb64>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f006 ffc4 	bl	8008daa <f_puts>
  	  f_puts("  ", &fil);
 8001e22:	4914      	ldr	r1, [pc, #80]	; (8001e74 <main+0xb64>)
 8001e24:	4814      	ldr	r0, [pc, #80]	; (8001e78 <main+0xb68>)
 8001e26:	f006 ffc0 	bl	8008daa <f_puts>
  	  f_puts(str8 , &fil);
 8001e2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e2e:	4911      	ldr	r1, [pc, #68]	; (8001e74 <main+0xb64>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f006 ffba 	bl	8008daa <f_puts>
  	  f_puts("  ", &fil);
 8001e36:	490f      	ldr	r1, [pc, #60]	; (8001e74 <main+0xb64>)
 8001e38:	480f      	ldr	r0, [pc, #60]	; (8001e78 <main+0xb68>)
 8001e3a:	f006 ffb6 	bl	8008daa <f_puts>
  	  f_puts(str9 , &fil);
 8001e3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <main+0xb64>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f006 ffb0 	bl	8008daa <f_puts>
  	  f_puts( "  ", &fil);
 8001e4a:	490a      	ldr	r1, [pc, #40]	; (8001e74 <main+0xb64>)
 8001e4c:	480a      	ldr	r0, [pc, #40]	; (8001e78 <main+0xb68>)
 8001e4e:	f006 ffac 	bl	8008daa <f_puts>
  	  f_puts(str10 , &fil);
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	4907      	ldr	r1, [pc, #28]	; (8001e74 <main+0xb64>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f006 ffa6 	bl	8008daa <f_puts>
  	  f_puts( "  ", &fil);
 8001e5e:	4905      	ldr	r1, [pc, #20]	; (8001e74 <main+0xb64>)
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <main+0xb68>)
 8001e62:	f006 ffa2 	bl	8008daa <f_puts>
  	  f_puts( "\n", &fil);
 8001e66:	4903      	ldr	r1, [pc, #12]	; (8001e74 <main+0xb64>)
 8001e68:	e008      	b.n	8001e7c <main+0xb6c>
 8001e6a:	bf00      	nop
 8001e6c:	08009880 	.word	0x08009880
 8001e70:	447a0000 	.word	0x447a0000
 8001e74:	200010ec 	.word	0x200010ec
 8001e78:	08009888 	.word	0x08009888
 8001e7c:	4816      	ldr	r0, [pc, #88]	; (8001ed8 <main+0xbc8>)
 8001e7e:	f006 ff94 	bl	8008daa <f_puts>

  	  ssd1306_SetCursor(0,15);
 8001e82:	210f      	movs	r1, #15
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 fe6d 	bl	8002b64 <ssd1306_SetCursor>
  	  retVal= ssd1306_WriteString(str2, Font_7x10, White);
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <main+0xbcc>)
 8001e8c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001e90:	2301      	movs	r3, #1
 8001e92:	ca06      	ldmia	r2, {r1, r2}
 8001e94:	f000 fe40 	bl	8002b18 <ssd1306_WriteString>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
  	  ssd1306_UpdateScreen();
 8001e9e:	f000 fd37 	bl	8002910 <ssd1306_UpdateScreen>
      /* USER CODE BEGIN 3 */
  	  count++;
 8001ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	  if (count>5000){
 8001eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	f77f ac29 	ble.w	800170c <main+0x3fc>
  		f_close(&fil);
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <main+0xbd0>)
 8001ebc:	f006 fcb0 	bl	8008820 <f_close>
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	2108      	movs	r1, #8
 8001ec4:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <main+0xbd4>)
 8001ec6:	f001 fc19 	bl	80036fc <HAL_GPIO_WritePin>
 8001eca:	2300      	movs	r3, #0
  		break;
  	  }
    }
    /* USER CODE END 3 */

  }
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	0800988c 	.word	0x0800988c
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	200010ec 	.word	0x200010ec
 8001ee4:	40020800 	.word	0x40020800

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b094      	sub	sp, #80	; 0x50
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2234      	movs	r2, #52	; 0x34
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f007 f85c 	bl	8008fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <SystemClock_Config+0xd4>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <SystemClock_Config+0xd4>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <SystemClock_Config+0xd4>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <SystemClock_Config+0xd8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <SystemClock_Config+0xd8>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <SystemClock_Config+0xd8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f50:	2310      	movs	r3, #16
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f54:	2302      	movs	r3, #2
 8001f56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001f5c:	230c      	movs	r3, #12
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f60:	23b4      	movs	r3, #180	; 0xb4
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fe4b 	bl	8004c10 <HAL_RCC_OscConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f80:	f000 f99e 	bl	80022c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f84:	230f      	movs	r3, #15
 8001f86:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	2103      	movs	r1, #3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fb84 	bl	80046b0 <HAL_RCC_ClockConfig>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001fae:	f000 f987 	bl	80022c0 <Error_Handler>
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3750      	adds	r7, #80	; 0x50
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fca:	463b      	mov	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fd6:	4b21      	ldr	r3, [pc, #132]	; (800205c <MX_ADC1_Init+0x98>)
 8001fd8:	4a21      	ldr	r2, [pc, #132]	; (8002060 <MX_ADC1_Init+0x9c>)
 8001fda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <MX_ADC1_Init+0x98>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	; (800205c <MX_ADC1_Init+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <MX_ADC1_Init+0x98>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_ADC1_Init+0x98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <MX_ADC1_Init+0x98>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_ADC1_Init+0x98>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_ADC1_Init+0x98>)
 8002004:	4a17      	ldr	r2, [pc, #92]	; (8002064 <MX_ADC1_Init+0xa0>)
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_ADC1_Init+0x98>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_ADC1_Init+0x98>)
 8002010:	2201      	movs	r2, #1
 8002012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_ADC1_Init+0x98>)
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_ADC1_Init+0x98>)
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002022:	480e      	ldr	r0, [pc, #56]	; (800205c <MX_ADC1_Init+0x98>)
 8002024:	f000 fe7e 	bl	8002d24 <HAL_ADC_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800202e:	f000 f947 	bl	80022c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002032:	2301      	movs	r3, #1
 8002034:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002036:	2301      	movs	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800203e:	463b      	mov	r3, r7
 8002040:	4619      	mov	r1, r3
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <MX_ADC1_Init+0x98>)
 8002044:	f000 feb2 	bl	8002dac <HAL_ADC_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800204e:	f000 f937 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000211c 	.word	0x2000211c
 8002060:	40012000 	.word	0x40012000
 8002064:	0f000001 	.word	0x0f000001

08002068 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_I2C1_Init+0x50>)
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <MX_I2C1_Init+0x54>)
 8002070:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002074:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <MX_I2C1_Init+0x58>)
 8002076:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_I2C1_Init+0x50>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002080:	2200      	movs	r2, #0
 8002082:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800208a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <MX_I2C1_Init+0x50>)
 800208e:	2200      	movs	r2, #0
 8002090:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_I2C1_Init+0x50>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002098:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <MX_I2C1_Init+0x50>)
 80020a6:	f001 fb43 	bl	8003730 <HAL_I2C_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020b0:	f000 f906 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20002164 	.word	0x20002164
 80020bc:	40005400 	.word	0x40005400
 80020c0:	00061a80 	.word	0x00061a80

080020c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <MX_I2C2_Init+0x50>)
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <MX_I2C2_Init+0x54>)
 80020cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_I2C2_Init+0x50>)
 80020d0:	4a12      	ldr	r2, [pc, #72]	; (800211c <MX_I2C2_Init+0x58>)
 80020d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_I2C2_Init+0x50>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_I2C2_Init+0x50>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_I2C2_Init+0x50>)
 80020e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <MX_I2C2_Init+0x50>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_I2C2_Init+0x50>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <MX_I2C2_Init+0x50>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_I2C2_Init+0x50>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_I2C2_Init+0x50>)
 8002102:	f001 fb15 	bl	8003730 <HAL_I2C_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800210c:	f000 f8d8 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200021b8 	.word	0x200021b8
 8002118:	40005800 	.word	0x40005800
 800211c:	000186a0 	.word	0x000186a0

08002120 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <MX_I2C3_Init+0x50>)
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <MX_I2C3_Init+0x54>)
 8002128:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_I2C3_Init+0x50>)
 800212c:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_I2C3_Init+0x58>)
 800212e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_I2C3_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_I2C3_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_I2C3_Init+0x50>)
 800213e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002142:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <MX_I2C3_Init+0x50>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_I2C3_Init+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <MX_I2C3_Init+0x50>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_I2C3_Init+0x50>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <MX_I2C3_Init+0x50>)
 800215e:	f001 fae7 	bl	8003730 <HAL_I2C_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002168:	f000 f8aa 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	2000220c 	.word	0x2000220c
 8002174:	40005c00 	.word	0x40005c00
 8002178:	00061a80 	.word	0x00061a80

0800217c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <MX_SPI1_Init+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002188:	f44f 7282 	mov.w	r2, #260	; 0x104
 800218c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_SPI1_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_SPI1_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021c8:	220a      	movs	r2, #10
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_SPI1_Init+0x64>)
 80021ce:	f002 ffbd 	bl	800514c <HAL_SPI_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021d8:	f000 f872 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20002260 	.word	0x20002260
 80021e4:	40013000 	.word	0x40013000

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a2b      	ldr	r2, [pc, #172]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b29      	ldr	r3, [pc, #164]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a24      	ldr	r2, [pc, #144]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <MX_GPIO_Init+0xcc>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <MX_GPIO_Init+0xcc>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a1d      	ldr	r2, [pc, #116]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <MX_GPIO_Init+0xcc>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_GPIO_Init+0xcc>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	2108      	movs	r1, #8
 8002272:	4811      	ldr	r0, [pc, #68]	; (80022b8 <MX_GPIO_Init+0xd0>)
 8002274:	f001 fa42 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002278:	2308      	movs	r3, #8
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	480a      	ldr	r0, [pc, #40]	; (80022b8 <MX_GPIO_Init+0xd0>)
 8002290:	f001 f8a0 	bl	80033d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002294:	2318      	movs	r3, #24
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <MX_GPIO_Init+0xd4>)
 80022a8:	f001 f894 	bl	80033d4 <HAL_GPIO_Init>

}
 80022ac:	bf00      	nop
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020400 	.word	0x40020400

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>
	...

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	; (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	; 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_ADC_MspInit+0x7c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d127      	bne.n	800238e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_ADC_MspInit+0x80>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	4a15      	ldr	r2, [pc, #84]	; (800239c <HAL_ADC_MspInit+0x80>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6453      	str	r3, [r2, #68]	; 0x44
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <HAL_ADC_MspInit+0x80>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_ADC_MspInit+0x80>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_ADC_MspInit+0x80>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_ADC_MspInit+0x80>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002376:	2302      	movs	r3, #2
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237a:	2303      	movs	r3, #3
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4805      	ldr	r0, [pc, #20]	; (80023a0 <HAL_ADC_MspInit+0x84>)
 800238a:	f001 f823 	bl	80033d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40012000 	.word	0x40012000
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000

080023a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b090      	sub	sp, #64	; 0x40
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6b      	ldr	r2, [pc, #428]	; (8002570 <HAL_I2C_MspInit+0x1cc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12d      	bne.n	8002422 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a69      	ldr	r2, [pc, #420]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b67      	ldr	r3, [pc, #412]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e8:	2312      	movs	r3, #18
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f4:	2304      	movs	r3, #4
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fc:	4619      	mov	r1, r3
 80023fe:	485e      	ldr	r0, [pc, #376]	; (8002578 <HAL_I2C_MspInit+0x1d4>)
 8002400:	f000 ffe8 	bl	80033d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	4a59      	ldr	r2, [pc, #356]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 800240e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002412:	6413      	str	r3, [r2, #64]	; 0x40
 8002414:	4b57      	ldr	r3, [pc, #348]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002420:	e0a2      	b.n	8002568 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_I2C_MspInit+0x1d8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d14c      	bne.n	80024c6 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a4f      	ldr	r2, [pc, #316]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	623b      	str	r3, [r7, #32]
 8002446:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6313      	str	r3, [r2, #48]	; 0x30
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002476:	2304      	movs	r3, #4
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247e:	4619      	mov	r1, r3
 8002480:	483d      	ldr	r0, [pc, #244]	; (8002578 <HAL_I2C_MspInit+0x1d4>)
 8002482:	f000 ffa7 	bl	80033d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800248c:	2312      	movs	r3, #18
 800248e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002498:	2304      	movs	r3, #4
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a0:	4619      	mov	r1, r3
 80024a2:	4837      	ldr	r0, [pc, #220]	; (8002580 <HAL_I2C_MspInit+0x1dc>)
 80024a4:	f000 ff96 	bl	80033d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a30      	ldr	r2, [pc, #192]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	69bb      	ldr	r3, [r7, #24]
}
 80024c4:	e050      	b.n	8002568 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a2e      	ldr	r2, [pc, #184]	; (8002584 <HAL_I2C_MspInit+0x1e0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d14b      	bne.n	8002568 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024da:	f043 0304 	orr.w	r3, r3, #4
 80024de:	6313      	str	r3, [r2, #48]	; 0x30
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6313      	str	r3, [r2, #48]	; 0x30
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250e:	2312      	movs	r3, #18
 8002510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002516:	2303      	movs	r3, #3
 8002518:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800251a:	2304      	movs	r3, #4
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002522:	4619      	mov	r1, r3
 8002524:	4816      	ldr	r0, [pc, #88]	; (8002580 <HAL_I2C_MspInit+0x1dc>)
 8002526:	f000 ff55 	bl	80033d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800252a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002530:	2312      	movs	r3, #18
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800253c:	2304      	movs	r3, #4
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002544:	4619      	mov	r1, r3
 8002546:	4810      	ldr	r0, [pc, #64]	; (8002588 <HAL_I2C_MspInit+0x1e4>)
 8002548:	f000 ff44 	bl	80033d4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 8002556:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_I2C_MspInit+0x1d0>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	bf00      	nop
 800256a:	3740      	adds	r7, #64	; 0x40
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40005400 	.word	0x40005400
 8002574:	40023800 	.word	0x40023800
 8002578:	40020400 	.word	0x40020400
 800257c:	40005800 	.word	0x40005800
 8002580:	40020800 	.word	0x40020800
 8002584:	40005c00 	.word	0x40005c00
 8002588:	40020000 	.word	0x40020000

0800258c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a19      	ldr	r2, [pc, #100]	; (8002610 <HAL_SPI_MspInit+0x84>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d12b      	bne.n	8002606 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_SPI_MspInit+0x88>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a17      	ldr	r2, [pc, #92]	; (8002614 <HAL_SPI_MspInit+0x88>)
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_SPI_MspInit+0x88>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_SPI_MspInit+0x88>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a10      	ldr	r2, [pc, #64]	; (8002614 <HAL_SPI_MspInit+0x88>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_SPI_MspInit+0x88>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025e6:	23e0      	movs	r3, #224	; 0xe0
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f6:	2305      	movs	r3, #5
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	4805      	ldr	r0, [pc, #20]	; (8002618 <HAL_SPI_MspInit+0x8c>)
 8002602:	f000 fee7 	bl	80033d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002606:	bf00      	nop
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40013000 	.word	0x40013000
 8002614:	40023800 	.word	0x40023800
 8002618:	40020000 	.word	0x40020000

0800261c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <NMI_Handler+0x4>

08002622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <HardFault_Handler+0x4>

08002628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <MemManage_Handler+0x4>

0800262e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <UsageFault_Handler+0x4>

0800263a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <SysTick_Handler+0x34>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <SysTick_Handler+0x18>
		Timer1--;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <SysTick_Handler+0x34>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <SysTick_Handler+0x34>)
 800267a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 800267c:	4b07      	ldr	r3, [pc, #28]	; (800269c <SysTick_Handler+0x38>)
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <SysTick_Handler+0x2c>
		Timer2--;
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <SysTick_Handler+0x38>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b03      	ldr	r3, [pc, #12]	; (800269c <SysTick_Handler+0x38>)
 800268e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002690:	f000 fb04 	bl	8002c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	bd80      	pop	{r7, pc}
 8002698:	200000ac 	.word	0x200000ac
 800269c:	200000ae 	.word	0x200000ae

080026a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <_sbrk+0x5c>)
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_sbrk+0x60>)
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <_sbrk+0x64>)
 80026be:	4a12      	ldr	r2, [pc, #72]	; (8002708 <_sbrk+0x68>)
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d0:	f006 fc1e 	bl	8008f10 <__errno>
 80026d4:	4603      	mov	r3, r0
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a05      	ldr	r2, [pc, #20]	; (8002704 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20020000 	.word	0x20020000
 8002700:	00000400 	.word	0x00000400
 8002704:	200022b8 	.word	0x200022b8
 8002708:	20002718 	.word	0x20002718

0800270c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <SystemInit+0x20>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <SystemInit+0x20>)
 8002718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800271c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002734:	480d      	ldr	r0, [pc, #52]	; (800276c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002736:	490e      	ldr	r1, [pc, #56]	; (8002770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800274c:	4c0b      	ldr	r4, [pc, #44]	; (800277c <LoopFillZerobss+0x26>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800275a:	f7ff ffd7 	bl	800270c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800275e:	f006 fbdd 	bl	8008f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002762:	f7fe fdd5 	bl	8001310 <main>
  bx  lr    
 8002766:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800276c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002770:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002774:	0800a4dc 	.word	0x0800a4dc
  ldr r2, =_sbss
 8002778:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800277c:	20002714 	.word	0x20002714

08002780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC_IRQHandler>

08002782 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af04      	add	r7, sp, #16
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800279a:	f04f 33ff 	mov.w	r3, #4294967295
 800279e:	9302      	str	r3, [sp, #8]
 80027a0:	2301      	movs	r3, #1
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	1dfb      	adds	r3, r7, #7
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	2200      	movs	r2, #0
 80027ac:	2178      	movs	r1, #120	; 0x78
 80027ae:	4803      	ldr	r0, [pc, #12]	; (80027bc <ssd1306_WriteCommand+0x2c>)
 80027b0:	f001 f902 	bl	80039b8 <HAL_I2C_Mem_Write>
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200021b8 	.word	0x200021b8

080027c0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af04      	add	r7, sp, #16
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	9202      	str	r2, [sp, #8]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2301      	movs	r3, #1
 80027dc:	2240      	movs	r2, #64	; 0x40
 80027de:	2178      	movs	r1, #120	; 0x78
 80027e0:	4803      	ldr	r0, [pc, #12]	; (80027f0 <ssd1306_WriteData+0x30>)
 80027e2:	f001 f8e9 	bl	80039b8 <HAL_I2C_Mem_Write>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200021b8 	.word	0x200021b8

080027f4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80027f8:	f7ff ffc3 	bl	8002782 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80027fc:	2064      	movs	r0, #100	; 0x64
 80027fe:	f000 fa6d 	bl	8002cdc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002802:	2000      	movs	r0, #0
 8002804:	f000 f9da 	bl	8002bbc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002808:	2020      	movs	r0, #32
 800280a:	f7ff ffc1 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800280e:	2000      	movs	r0, #0
 8002810:	f7ff ffbe 	bl	8002790 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002814:	20b0      	movs	r0, #176	; 0xb0
 8002816:	f7ff ffbb 	bl	8002790 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800281a:	20c8      	movs	r0, #200	; 0xc8
 800281c:	f7ff ffb8 	bl	8002790 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff ffb5 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002826:	2010      	movs	r0, #16
 8002828:	f7ff ffb2 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800282c:	2040      	movs	r0, #64	; 0x40
 800282e:	f7ff ffaf 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002832:	20ff      	movs	r0, #255	; 0xff
 8002834:	f000 f9ae 	bl	8002b94 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002838:	20a1      	movs	r0, #161	; 0xa1
 800283a:	f7ff ffa9 	bl	8002790 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800283e:	20a6      	movs	r0, #166	; 0xa6
 8002840:	f7ff ffa6 	bl	8002790 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002844:	20a8      	movs	r0, #168	; 0xa8
 8002846:	f7ff ffa3 	bl	8002790 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800284a:	201f      	movs	r0, #31
 800284c:	f7ff ffa0 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002850:	20a4      	movs	r0, #164	; 0xa4
 8002852:	f7ff ff9d 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002856:	20d3      	movs	r0, #211	; 0xd3
 8002858:	f7ff ff9a 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff ff97 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002862:	20d5      	movs	r0, #213	; 0xd5
 8002864:	f7ff ff94 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002868:	20f0      	movs	r0, #240	; 0xf0
 800286a:	f7ff ff91 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800286e:	20d9      	movs	r0, #217	; 0xd9
 8002870:	f7ff ff8e 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002874:	2022      	movs	r0, #34	; 0x22
 8002876:	f7ff ff8b 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800287a:	20da      	movs	r0, #218	; 0xda
 800287c:	f7ff ff88 	bl	8002790 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002880:	2002      	movs	r0, #2
 8002882:	f7ff ff85 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002886:	20db      	movs	r0, #219	; 0xdb
 8002888:	f7ff ff82 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800288c:	2020      	movs	r0, #32
 800288e:	f7ff ff7f 	bl	8002790 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002892:	208d      	movs	r0, #141	; 0x8d
 8002894:	f7ff ff7c 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002898:	2014      	movs	r0, #20
 800289a:	f7ff ff79 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 f98c 	bl	8002bbc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f000 f80f 	bl	80028c8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80028aa:	f000 f831 	bl	8002910 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <ssd1306_Init+0xd0>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <ssd1306_Init+0xd0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80028ba:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <ssd1306_Init+0xd0>)
 80028bc:	2201      	movs	r2, #1
 80028be:	711a      	strb	r2, [r3, #4]
}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200024bc 	.word	0x200024bc

080028c8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e00d      	b.n	80028f4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <ssd1306_Fill+0x1a>
 80028de:	2100      	movs	r1, #0
 80028e0:	e000      	b.n	80028e4 <ssd1306_Fill+0x1c>
 80028e2:	21ff      	movs	r1, #255	; 0xff
 80028e4:	4a09      	ldr	r2, [pc, #36]	; (800290c <ssd1306_Fill+0x44>)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	460a      	mov	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fa:	d3ed      	bcc.n	80028d8 <ssd1306_Fill+0x10>
    }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200022bc 	.word	0x200022bc

08002910 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002916:	2300      	movs	r3, #0
 8002918:	71fb      	strb	r3, [r7, #7]
 800291a:	e016      	b.n	800294a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	3b50      	subs	r3, #80	; 0x50
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff34 	bl	8002790 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff ff31 	bl	8002790 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800292e:	2010      	movs	r0, #16
 8002930:	f7ff ff2e 	bl	8002790 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	01db      	lsls	r3, r3, #7
 8002938:	4a08      	ldr	r2, [pc, #32]	; (800295c <ssd1306_UpdateScreen+0x4c>)
 800293a:	4413      	add	r3, r2
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff3e 	bl	80027c0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	3301      	adds	r3, #1
 8002948:	71fb      	strb	r3, [r7, #7]
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d9e5      	bls.n	800291c <ssd1306_UpdateScreen+0xc>
    }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200022bc 	.word	0x200022bc

08002960 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
 800296a:	460b      	mov	r3, r1
 800296c:	71bb      	strb	r3, [r7, #6]
 800296e:	4613      	mov	r3, r2
 8002970:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	2b00      	cmp	r3, #0
 8002978:	db3d      	blt.n	80029f6 <ssd1306_DrawPixel+0x96>
 800297a:	79bb      	ldrb	r3, [r7, #6]
 800297c:	2b1f      	cmp	r3, #31
 800297e:	d83a      	bhi.n	80029f6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002980:	797b      	ldrb	r3, [r7, #5]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d11a      	bne.n	80029bc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002986:	79fa      	ldrb	r2, [r7, #7]
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	4603      	mov	r3, r0
 8002990:	01db      	lsls	r3, r3, #7
 8002992:	4413      	add	r3, r2
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <ssd1306_DrawPixel+0xa4>)
 8002996:	5cd3      	ldrb	r3, [r2, r3]
 8002998:	b25a      	sxtb	r2, r3
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b259      	sxtb	r1, r3
 80029ac:	79fa      	ldrb	r2, [r7, #7]
 80029ae:	4603      	mov	r3, r0
 80029b0:	01db      	lsls	r3, r3, #7
 80029b2:	4413      	add	r3, r2
 80029b4:	b2c9      	uxtb	r1, r1
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <ssd1306_DrawPixel+0xa4>)
 80029b8:	54d1      	strb	r1, [r2, r3]
 80029ba:	e01d      	b.n	80029f8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	79bb      	ldrb	r3, [r7, #6]
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	b2d8      	uxtb	r0, r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	01db      	lsls	r3, r3, #7
 80029c8:	4413      	add	r3, r2
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <ssd1306_DrawPixel+0xa4>)
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	b25a      	sxtb	r2, r3
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	4013      	ands	r3, r2
 80029e4:	b259      	sxtb	r1, r3
 80029e6:	79fa      	ldrb	r2, [r7, #7]
 80029e8:	4603      	mov	r3, r0
 80029ea:	01db      	lsls	r3, r3, #7
 80029ec:	4413      	add	r3, r2
 80029ee:	b2c9      	uxtb	r1, r1
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <ssd1306_DrawPixel+0xa4>)
 80029f2:	54d1      	strb	r1, [r2, r3]
 80029f4:	e000      	b.n	80029f8 <ssd1306_DrawPixel+0x98>
        return;
 80029f6:	bf00      	nop
    }
}
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	200022bc 	.word	0x200022bc

08002a08 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4604      	mov	r4, r0
 8002a10:	1d38      	adds	r0, r7, #4
 8002a12:	e880 0006 	stmia.w	r0, {r1, r2}
 8002a16:	461a      	mov	r2, r3
 8002a18:	4623      	mov	r3, r4
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	2b1f      	cmp	r3, #31
 8002a24:	d902      	bls.n	8002a2c <ssd1306_WriteChar+0x24>
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b7e      	cmp	r3, #126	; 0x7e
 8002a2a:	d901      	bls.n	8002a30 <ssd1306_WriteChar+0x28>
        return 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e06d      	b.n	8002b0c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a30:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	793b      	ldrb	r3, [r7, #4]
 8002a38:	4413      	add	r3, r2
 8002a3a:	2b80      	cmp	r3, #128	; 0x80
 8002a3c:	dc06      	bgt.n	8002a4c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002a3e:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002a40:	885b      	ldrh	r3, [r3, #2]
 8002a42:	461a      	mov	r2, r3
 8002a44:	797b      	ldrb	r3, [r7, #5]
 8002a46:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	dd01      	ble.n	8002a50 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e05d      	b.n	8002b0c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e04c      	b.n	8002af0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	3b20      	subs	r3, #32
 8002a5c:	7979      	ldrb	r1, [r7, #5]
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4619      	mov	r1, r3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	440b      	add	r3, r1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002a70:	2300      	movs	r3, #0
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	e034      	b.n	8002ae0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d012      	beq.n	8002aac <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	b2d8      	uxtb	r0, r3
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002a96:	885b      	ldrh	r3, [r3, #2]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	7bba      	ldrb	r2, [r7, #14]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7ff ff5b 	bl	8002960 <ssd1306_DrawPixel>
 8002aaa:	e016      	b.n	8002ada <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002aac:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b2d8      	uxtb	r0, r3
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002abc:	885b      	ldrh	r3, [r3, #2]
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b2d9      	uxtb	r1, r3
 8002ac8:	7bbb      	ldrb	r3, [r7, #14]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f7ff ff43 	bl	8002960 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	3301      	adds	r3, #1
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	793b      	ldrb	r3, [r7, #4]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d3c5      	bcc.n	8002a76 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3301      	adds	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	797b      	ldrb	r3, [r7, #5]
 8002af2:	461a      	mov	r2, r3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d3ad      	bcc.n	8002a56 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002afc:	881a      	ldrh	r2, [r3, #0]
 8002afe:	793b      	ldrb	r3, [r7, #4]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <ssd1306_WriteChar+0x10c>)
 8002b08:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3724      	adds	r7, #36	; 0x24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd90      	pop	{r4, r7, pc}
 8002b14:	200024bc 	.word	0x200024bc

08002b18 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	1d38      	adds	r0, r7, #4
 8002b22:	e880 0006 	stmia.w	r0, {r1, r2}
 8002b26:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002b28:	e012      	b.n	8002b50 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	7818      	ldrb	r0, [r3, #0]
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	1d3a      	adds	r2, r7, #4
 8002b32:	ca06      	ldmia	r2, {r1, r2}
 8002b34:	f7ff ff68 	bl	8002a08 <ssd1306_WriteChar>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d002      	beq.n	8002b4a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	e008      	b.n	8002b5c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e8      	bne.n	8002b2a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460a      	mov	r2, r1
 8002b6e:	71fb      	strb	r3, [r7, #7]
 8002b70:	4613      	mov	r3, r2
 8002b72:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <ssd1306_SetCursor+0x2c>)
 8002b7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002b7c:	79bb      	ldrb	r3, [r7, #6]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <ssd1306_SetCursor+0x2c>)
 8002b82:	805a      	strh	r2, [r3, #2]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	200024bc 	.word	0x200024bc

08002b94 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002b9e:	2381      	movs	r3, #129	; 0x81
 8002ba0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fdf3 	bl	8002790 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fdef 	bl	8002790 <ssd1306_WriteCommand>
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002bcc:	23af      	movs	r3, #175	; 0xaf
 8002bce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <ssd1306_SetDisplayOn+0x38>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	715a      	strb	r2, [r3, #5]
 8002bd6:	e004      	b.n	8002be2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002bd8:	23ae      	movs	r3, #174	; 0xae
 8002bda:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <ssd1306_SetDisplayOn+0x38>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fdd3 	bl	8002790 <ssd1306_WriteCommand>
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200024bc 	.word	0x200024bc

08002bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bfc:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_Init+0x40>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0d      	ldr	r2, [pc, #52]	; (8002c38 <HAL_Init+0x40>)
 8002c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_Init+0x40>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_Init+0x40>)
 8002c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_Init+0x40>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_Init+0x40>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c20:	2003      	movs	r0, #3
 8002c22:	f000 fba3 	bl	800336c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c26:	200f      	movs	r0, #15
 8002c28:	f000 f808 	bl	8002c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c2c:	f7ff fb4e 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023c00 	.word	0x40023c00

08002c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c44:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_InitTick+0x54>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_InitTick+0x58>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fbad 	bl	80033ba <HAL_SYSTICK_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e00e      	b.n	8002c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0f      	cmp	r3, #15
 8002c6e:	d80a      	bhi.n	8002c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c70:	2200      	movs	r2, #0
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	f000 fb83 	bl	8003382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <HAL_InitTick+0x5c>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e000      	b.n	8002c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000004 	.word	0x20000004
 8002c94:	20000014 	.word	0x20000014
 8002c98:	20000010 	.word	0x20000010

08002c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x20>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x24>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_IncTick+0x24>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000014 	.word	0x20000014
 8002cc0:	200024c4 	.word	0x200024c4

08002cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_GetTick+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	200024c4 	.word	0x200024c4

08002cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7ff ffee 	bl	8002cc4 <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d005      	beq.n	8002d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_Delay+0x44>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4413      	add	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d02:	bf00      	nop
 8002d04:	f7ff ffde 	bl	8002cc4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d8f7      	bhi.n	8002d04 <HAL_Delay+0x28>
  {
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000014 	.word	0x20000014

08002d24 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e033      	b.n	8002da2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff faea 	bl	800231c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d6a:	f023 0302 	bic.w	r3, r3, #2
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f94a 	bl	8003010 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f023 0303 	bic.w	r3, r3, #3
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	; 0x40
 8002d92:	e001      	b.n	8002d98 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
	...

08002dac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x1c>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e113      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x244>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b09      	cmp	r3, #9
 8002dd6:	d925      	bls.n	8002e24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68d9      	ldr	r1, [r3, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	3b1e      	subs	r3, #30
 8002dee:	2207      	movs	r2, #7
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68d9      	ldr	r1, [r3, #12]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	4603      	mov	r3, r0
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4403      	add	r3, r0
 8002e16:	3b1e      	subs	r3, #30
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
 8002e22:	e022      	b.n	8002e6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	2207      	movs	r2, #7
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4403      	add	r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d824      	bhi.n	8002ebc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	3b05      	subs	r3, #5
 8002e84:	221f      	movs	r2, #31
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	400a      	ands	r2, r1
 8002e92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b05      	subs	r3, #5
 8002eae:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eba:	e04c      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d824      	bhi.n	8002f0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b23      	subs	r3, #35	; 0x23
 8002ed6:	221f      	movs	r2, #31
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43da      	mvns	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b23      	subs	r3, #35	; 0x23
 8002f00:	fa00 f203 	lsl.w	r2, r0, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0c:	e023      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3b41      	subs	r3, #65	; 0x41
 8002f20:	221f      	movs	r2, #31
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b41      	subs	r3, #65	; 0x41
 8002f4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f56:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_ADC_ConfigChannel+0x250>)
 8002f58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a28      	ldr	r2, [pc, #160]	; (8003000 <HAL_ADC_ConfigChannel+0x254>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10f      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d8>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b12      	cmp	r3, #18
 8002f6a:	d10b      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1d      	ldr	r2, [pc, #116]	; (8003000 <HAL_ADC_ConfigChannel+0x254>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d12b      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x23a>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <HAL_ADC_ConfigChannel+0x258>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x1f4>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b11      	cmp	r3, #17
 8002f9e:	d122      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a11      	ldr	r2, [pc, #68]	; (8003004 <HAL_ADC_ConfigChannel+0x258>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d111      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_ADC_ConfigChannel+0x25c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a11      	ldr	r2, [pc, #68]	; (800300c <HAL_ADC_ConfigChannel+0x260>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	0c9a      	lsrs	r2, r3, #18
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fd8:	e002      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f9      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	40012300 	.word	0x40012300
 8003000:	40012000 	.word	0x40012000
 8003004:	10000012 	.word	0x10000012
 8003008:	20000004 	.word	0x20000004
 800300c:	431bde83 	.word	0x431bde83

08003010 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003018:	4b79      	ldr	r3, [pc, #484]	; (8003200 <ADC_Init+0x1f0>)
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	431a      	orrs	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	4a58      	ldr	r2, [pc, #352]	; (8003204 <ADC_Init+0x1f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	e00f      	b.n	800310e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800310c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0202 	bic.w	r2, r2, #2
 800311c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	7e1b      	ldrb	r3, [r3, #24]
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800314a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800315a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	3b01      	subs	r3, #1
 8003168:	035a      	lsls	r2, r3, #13
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e007      	b.n	8003184 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003182:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	3b01      	subs	r3, #1
 80031a0:	051a      	lsls	r2, r3, #20
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031c6:	025a      	lsls	r2, r3, #9
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	029a      	lsls	r2, r3, #10
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40012300 	.word	0x40012300
 8003204:	0f000001 	.word	0x0f000001

08003208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <__NVIC_GetPriorityGrouping+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0307 	and.w	r3, r3, #7
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	; (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff8e 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff47 	bl	8003208 <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003394:	f7ff ff5c 	bl	8003250 <__NVIC_GetPriorityGrouping>
 8003398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff ff8e 	bl	80032c0 <NVIC_EncodePriority>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff5d 	bl	800326c <__NVIC_SetPriority>
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffb0 	bl	8003328 <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	e165      	b.n	80036bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033f0:	2201      	movs	r2, #1
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	429a      	cmp	r2, r3
 800340a:	f040 8154 	bne.w	80036b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d005      	beq.n	8003426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003422:	2b02      	cmp	r3, #2
 8003424:	d130      	bne.n	8003488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	2203      	movs	r2, #3
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43db      	mvns	r3, r3
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	4013      	ands	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800345c:	2201      	movs	r2, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 0201 	and.w	r2, r3, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b03      	cmp	r3, #3
 8003492:	d017      	beq.n	80034c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d123      	bne.n	8003518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	08da      	lsrs	r2, r3, #3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3208      	adds	r2, #8
 80034d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	08da      	lsrs	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3208      	adds	r2, #8
 8003512:	69b9      	ldr	r1, [r7, #24]
 8003514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	2203      	movs	r2, #3
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80ae 	beq.w	80036b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_GPIO_Init+0x300>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a5c      	ldr	r2, [pc, #368]	; (80036d4 <HAL_GPIO_Init+0x300>)
 8003564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b5a      	ldr	r3, [pc, #360]	; (80036d4 <HAL_GPIO_Init+0x300>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003576:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_GPIO_Init+0x304>)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	3302      	adds	r3, #2
 800357e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	220f      	movs	r2, #15
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4f      	ldr	r2, [pc, #316]	; (80036dc <HAL_GPIO_Init+0x308>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d025      	beq.n	80035ee <HAL_GPIO_Init+0x21a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	; (80036e0 <HAL_GPIO_Init+0x30c>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01f      	beq.n	80035ea <HAL_GPIO_Init+0x216>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4d      	ldr	r2, [pc, #308]	; (80036e4 <HAL_GPIO_Init+0x310>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d019      	beq.n	80035e6 <HAL_GPIO_Init+0x212>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_GPIO_Init+0x314>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <HAL_GPIO_Init+0x20e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <HAL_GPIO_Init+0x318>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00d      	beq.n	80035de <HAL_GPIO_Init+0x20a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <HAL_GPIO_Init+0x31c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <HAL_GPIO_Init+0x206>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a49      	ldr	r2, [pc, #292]	; (80036f4 <HAL_GPIO_Init+0x320>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_GPIO_Init+0x202>
 80035d2:	2306      	movs	r3, #6
 80035d4:	e00c      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035d6:	2307      	movs	r3, #7
 80035d8:	e00a      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035da:	2305      	movs	r3, #5
 80035dc:	e008      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035de:	2304      	movs	r3, #4
 80035e0:	e006      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035e2:	2303      	movs	r3, #3
 80035e4:	e004      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e002      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_GPIO_Init+0x21c>
 80035ee:	2300      	movs	r3, #0
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	f002 0203 	and.w	r2, r2, #3
 80035f6:	0092      	lsls	r2, r2, #2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003600:	4935      	ldr	r1, [pc, #212]	; (80036d8 <HAL_GPIO_Init+0x304>)
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	3302      	adds	r3, #2
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_GPIO_Init+0x324>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003632:	4a31      	ldr	r2, [pc, #196]	; (80036f8 <HAL_GPIO_Init+0x324>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_GPIO_Init+0x324>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <HAL_GPIO_Init+0x324>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_GPIO_Init+0x324>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_GPIO_Init+0x324>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_GPIO_Init+0x324>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_GPIO_Init+0x324>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3301      	adds	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	f67f ae96 	bls.w	80033f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3724      	adds	r7, #36	; 0x24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40021400 	.word	0x40021400
 80036f4:	40021800 	.word	0x40021800
 80036f8:	40013c00 	.word	0x40013c00

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003718:	e003      	b.n	8003722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	619a      	str	r2, [r3, #24]
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
	...

08003730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e12b      	b.n	800399a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fe24 	bl	80023a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0201 	bic.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003782:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003792:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003794:	f001 f87e 	bl	8004894 <HAL_RCC_GetPCLK1Freq>
 8003798:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a81      	ldr	r2, [pc, #516]	; (80039a4 <HAL_I2C_Init+0x274>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d807      	bhi.n	80037b4 <HAL_I2C_Init+0x84>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a80      	ldr	r2, [pc, #512]	; (80039a8 <HAL_I2C_Init+0x278>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bf94      	ite	ls
 80037ac:	2301      	movls	r3, #1
 80037ae:	2300      	movhi	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e006      	b.n	80037c2 <HAL_I2C_Init+0x92>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a7d      	ldr	r2, [pc, #500]	; (80039ac <HAL_I2C_Init+0x27c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e0e7      	b.n	800399a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4a78      	ldr	r2, [pc, #480]	; (80039b0 <HAL_I2C_Init+0x280>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0c9b      	lsrs	r3, r3, #18
 80037d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a6a      	ldr	r2, [pc, #424]	; (80039a4 <HAL_I2C_Init+0x274>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d802      	bhi.n	8003804 <HAL_I2C_Init+0xd4>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3301      	adds	r3, #1
 8003802:	e009      	b.n	8003818 <HAL_I2C_Init+0xe8>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	4a69      	ldr	r2, [pc, #420]	; (80039b4 <HAL_I2C_Init+0x284>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	099b      	lsrs	r3, r3, #6
 8003816:	3301      	adds	r3, #1
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	430b      	orrs	r3, r1
 800381e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800382a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	495c      	ldr	r1, [pc, #368]	; (80039a4 <HAL_I2C_Init+0x274>)
 8003834:	428b      	cmp	r3, r1
 8003836:	d819      	bhi.n	800386c <HAL_I2C_Init+0x13c>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e59      	subs	r1, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	fbb1 f3f3 	udiv	r3, r1, r3
 8003846:	1c59      	adds	r1, r3, #1
 8003848:	f640 73fc 	movw	r3, #4092	; 0xffc
 800384c:	400b      	ands	r3, r1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00a      	beq.n	8003868 <HAL_I2C_Init+0x138>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1e59      	subs	r1, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003860:	3301      	adds	r3, #1
 8003862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003866:	e051      	b.n	800390c <HAL_I2C_Init+0x1dc>
 8003868:	2304      	movs	r3, #4
 800386a:	e04f      	b.n	800390c <HAL_I2C_Init+0x1dc>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d111      	bne.n	8003898 <HAL_I2C_Init+0x168>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	440b      	add	r3, r1
 8003882:	fbb0 f3f3 	udiv	r3, r0, r3
 8003886:	3301      	adds	r3, #1
 8003888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e012      	b.n	80038be <HAL_I2C_Init+0x18e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	0099      	lsls	r1, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Init+0x196>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e022      	b.n	800390c <HAL_I2C_Init+0x1dc>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <HAL_I2C_Init+0x1bc>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1e58      	subs	r0, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	440b      	add	r3, r1
 80038dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ea:	e00f      	b.n	800390c <HAL_I2C_Init+0x1dc>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1e58      	subs	r0, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6859      	ldr	r1, [r3, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003902:	3301      	adds	r3, #1
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6809      	ldr	r1, [r1, #0]
 8003910:	4313      	orrs	r3, r2
 8003912:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800393a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6911      	ldr	r1, [r2, #16]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	68d2      	ldr	r2, [r2, #12]
 8003946:	4311      	orrs	r1, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695a      	ldr	r2, [r3, #20]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	000186a0 	.word	0x000186a0
 80039a8:	001e847f 	.word	0x001e847f
 80039ac:	003d08ff 	.word	0x003d08ff
 80039b0:	431bde83 	.word	0x431bde83
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	461a      	mov	r2, r3
 80039c6:	4603      	mov	r3, r0
 80039c8:	817b      	strh	r3, [r7, #10]
 80039ca:	460b      	mov	r3, r1
 80039cc:	813b      	strh	r3, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d2:	f7ff f977 	bl	8002cc4 <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	f040 80d9 	bne.w	8003b98 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2319      	movs	r3, #25
 80039ec:	2201      	movs	r2, #1
 80039ee:	496d      	ldr	r1, [pc, #436]	; (8003ba4 <HAL_I2C_Mem_Write+0x1ec>)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fc7f 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0cc      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_I2C_Mem_Write+0x56>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0c5      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d007      	beq.n	8003a34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2221      	movs	r2, #33	; 0x21
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2240      	movs	r2, #64	; 0x40
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a3a      	ldr	r2, [r7, #32]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_I2C_Mem_Write+0x1f0>)
 8003a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a76:	88f8      	ldrh	r0, [r7, #6]
 8003a78:	893a      	ldrh	r2, [r7, #8]
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	4603      	mov	r3, r0
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fab6 	bl	8003ff8 <I2C_RequestMemoryWrite>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d052      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e081      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fd00 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00d      	beq.n	8003ac2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d107      	bne.n	8003abe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003abc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e06b      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d11b      	bne.n	8003b38 <HAL_I2C_Mem_Write+0x180>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1aa      	bne.n	8003a96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fcec 	bl	8004522 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e016      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	00100002 	.word	0x00100002
 8003ba8:	ffff0000 	.word	0xffff0000

08003bac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	; 0x30
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	4608      	mov	r0, r1
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4603      	mov	r3, r0
 8003bbc:	817b      	strh	r3, [r7, #10]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	813b      	strh	r3, [r7, #8]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bc6:	f7ff f87d 	bl	8002cc4 <HAL_GetTick>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f040 8208 	bne.w	8003fea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2319      	movs	r3, #25
 8003be0:	2201      	movs	r2, #1
 8003be2:	497b      	ldr	r1, [pc, #492]	; (8003dd0 <HAL_I2C_Mem_Read+0x224>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 fb85 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e1fb      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2C_Mem_Read+0x56>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e1f4      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d007      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2222      	movs	r2, #34	; 0x22
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	; 0x40
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a5b      	ldr	r2, [pc, #364]	; (8003dd4 <HAL_I2C_Mem_Read+0x228>)
 8003c68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6a:	88f8      	ldrh	r0, [r7, #6]
 8003c6c:	893a      	ldrh	r2, [r7, #8]
 8003c6e:	8979      	ldrh	r1, [r7, #10]
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4603      	mov	r3, r0
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa52 	bl	8004124 <I2C_RequestMemoryRead>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1b0      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	2300      	movs	r3, #0
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	e184      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d11b      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e164      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d11b      	bne.n	8003d3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	e144      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d50:	e138      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	f200 80f1 	bhi.w	8003f3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d123      	bne.n	8003dac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fc1b 	bl	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e139      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003daa:	e10b      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d14e      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <HAL_I2C_Mem_Read+0x22c>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fa98 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e10e      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
 8003dce:	bf00      	nop
 8003dd0:	00100002 	.word	0x00100002
 8003dd4:	ffff0000 	.word	0xffff0000
 8003dd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e50:	e0b8      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4966      	ldr	r1, [pc, #408]	; (8003ff4 <HAL_I2C_Mem_Read+0x448>)
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fa49 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0bf      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	494f      	ldr	r1, [pc, #316]	; (8003ff4 <HAL_I2C_Mem_Read+0x448>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 fa1b 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e091      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f3c:	e042      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fb2e 	bl	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e04c      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d118      	bne.n	8003fc4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f47f aec2 	bne.w	8003d52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e000      	b.n	8003fec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fea:	2302      	movs	r3, #2
  }
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3728      	adds	r7, #40	; 0x28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	00010004 	.word	0x00010004

08003ff8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	461a      	mov	r2, r3
 8004006:	4603      	mov	r3, r0
 8004008:	817b      	strh	r3, [r7, #10]
 800400a:	460b      	mov	r3, r1
 800400c:	813b      	strh	r3, [r7, #8]
 800400e:	4613      	mov	r3, r2
 8004010:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004020:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	2200      	movs	r2, #0
 800402a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f960 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004048:	d103      	bne.n	8004052 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e05f      	b.n	8004116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004056:	897b      	ldrh	r3, [r7, #10]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004064:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	6a3a      	ldr	r2, [r7, #32]
 800406a:	492d      	ldr	r1, [pc, #180]	; (8004120 <I2C_RequestMemoryWrite+0x128>)
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f998 	bl	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e04c      	b.n	8004116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	6a39      	ldr	r1, [r7, #32]
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fa02 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d107      	bne.n	80040ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e02b      	b.n	8004116 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d105      	bne.n	80040d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040c4:	893b      	ldrh	r3, [r7, #8]
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	611a      	str	r2, [r3, #16]
 80040ce:	e021      	b.n	8004114 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040d0:	893b      	ldrh	r3, [r7, #8]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	6a39      	ldr	r1, [r7, #32]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f9dc 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00d      	beq.n	800410a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d107      	bne.n	8004106 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004104:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e005      	b.n	8004116 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800410a:	893b      	ldrh	r3, [r7, #8]
 800410c:	b2da      	uxtb	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	00010002 	.word	0x00010002

08004124 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800414c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	2200      	movs	r2, #0
 8004166:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8c2 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004184:	d103      	bne.n	800418e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0aa      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	4952      	ldr	r1, [pc, #328]	; (80042f0 <I2C_RequestMemoryRead+0x1cc>)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f8fa 	bl	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e097      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d0:	6a39      	ldr	r1, [r7, #32]
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f964 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d107      	bne.n	80041f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e076      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004200:	893b      	ldrh	r3, [r7, #8]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]
 800420a:	e021      	b.n	8004250 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	b29b      	uxth	r3, r3
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	6a39      	ldr	r1, [r7, #32]
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f000 f93e 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	2b04      	cmp	r3, #4
 8004230:	d107      	bne.n	8004242 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004240:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e050      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004246:	893b      	ldrh	r3, [r7, #8]
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004252:	6a39      	ldr	r1, [r7, #32]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f923 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	2b04      	cmp	r3, #4
 8004266:	d107      	bne.n	8004278 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004276:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e035      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800428a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2200      	movs	r2, #0
 8004294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f82b 	bl	80042f4 <I2C_WaitOnFlagUntilTimeout>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00d      	beq.n	80042c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d103      	bne.n	80042bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e013      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042c0:	897b      	ldrh	r3, [r7, #10]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	6a3a      	ldr	r2, [r7, #32]
 80042d4:	4906      	ldr	r1, [pc, #24]	; (80042f0 <I2C_RequestMemoryRead+0x1cc>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f863 	bl	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	00010002 	.word	0x00010002

080042f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	4613      	mov	r3, r2
 8004302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004304:	e025      	b.n	8004352 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d021      	beq.n	8004352 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	f7fe fcd9 	bl	8002cc4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d302      	bcc.n	8004324 <I2C_WaitOnFlagUntilTimeout+0x30>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d116      	bne.n	8004352 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e023      	b.n	800439a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10d      	bne.n	8004378 <I2C_WaitOnFlagUntilTimeout+0x84>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	e00c      	b.n	8004392 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	43da      	mvns	r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	b29b      	uxth	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	429a      	cmp	r2, r3
 8004396:	d0b6      	beq.n	8004306 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043b0:	e051      	b.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d123      	bne.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0204 	orr.w	r2, r3, #4
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e046      	b.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d021      	beq.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fe fc57 	bl	8002cc4 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d116      	bne.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e020      	b.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b01      	cmp	r3, #1
 800445e:	d10c      	bne.n	800447a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	bf14      	ite	ne
 8004472:	2301      	movne	r3, #1
 8004474:	2300      	moveq	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e00b      	b.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	43da      	mvns	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d18d      	bne.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ac:	e02d      	b.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8ce 	bl	8004650 <I2C_IsAcknowledgeFailed>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e02d      	b.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d021      	beq.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fe fbfd 	bl	8002cc4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d116      	bne.n	800450a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e007      	b.n	800451a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004514:	2b80      	cmp	r3, #128	; 0x80
 8004516:	d1ca      	bne.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800452e:	e02d      	b.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f88d 	bl	8004650 <I2C_IsAcknowledgeFailed>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e02d      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d021      	beq.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004548:	f7fe fbbc 	bl	8002cc4 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d116      	bne.n	800458c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e007      	b.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d1ca      	bne.n	8004530 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045b0:	e042      	b.n	8004638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d119      	bne.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0210 	mvn.w	r2, #16
 80045c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e029      	b.n	8004648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fe fb66 	bl	8002cc4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004642:	2b40      	cmp	r3, #64	; 0x40
 8004644:	d1b5      	bne.n	80045b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004666:	d11b      	bne.n	80046a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004670:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	f043 0204 	orr.w	r2, r3, #4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0cc      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b68      	ldr	r3, [pc, #416]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90c      	bls.n	80046ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b65      	ldr	r3, [pc, #404]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0b8      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004704:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a58      	ldr	r2, [pc, #352]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a52      	ldr	r2, [pc, #328]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	494d      	ldr	r1, [pc, #308]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d044      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	4b47      	ldr	r3, [pc, #284]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d119      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e07f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d003      	beq.n	800476e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e067      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4934      	ldr	r1, [pc, #208]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fe fa90 	bl	8002cc4 <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fe fa8c 	bl	8002cc4 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e04f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d20c      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e032      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4916      	ldr	r1, [pc, #88]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004836:	f000 f841 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800483a:	4602      	mov	r2, r0
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	490a      	ldr	r1, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	5ccb      	ldrb	r3, [r1, r3]
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fe f9f0 	bl	8002c3c <HAL_InitTick>

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00
 800486c:	40023800 	.word	0x40023800
 8004870:	080098d8 	.word	0x080098d8
 8004874:	20000004 	.word	0x20000004
 8004878:	20000010 	.word	0x20000010

0800487c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <HAL_RCC_GetHCLKFreq+0x14>)
 8004882:	681b      	ldr	r3, [r3, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004898:	f7ff fff0 	bl	800487c <HAL_RCC_GetHCLKFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b05      	ldr	r3, [pc, #20]	; (80048b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	0a9b      	lsrs	r3, r3, #10
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	4903      	ldr	r1, [pc, #12]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40023800 	.word	0x40023800
 80048b8:	080098e8 	.word	0x080098e8

080048bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b0a6      	sub	sp, #152	; 0x98
 80048c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e2:	4bc8      	ldr	r3, [pc, #800]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	f200 817e 	bhi.w	8004bec <HAL_RCC_GetSysClockFreq+0x330>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	0800492d 	.word	0x0800492d
 80048fc:	08004bed 	.word	0x08004bed
 8004900:	08004bed 	.word	0x08004bed
 8004904:	08004bed 	.word	0x08004bed
 8004908:	08004935 	.word	0x08004935
 800490c:	08004bed 	.word	0x08004bed
 8004910:	08004bed 	.word	0x08004bed
 8004914:	08004bed 	.word	0x08004bed
 8004918:	0800493d 	.word	0x0800493d
 800491c:	08004bed 	.word	0x08004bed
 8004920:	08004bed 	.word	0x08004bed
 8004924:	08004bed 	.word	0x08004bed
 8004928:	08004aa7 	.word	0x08004aa7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800492c:	4bb6      	ldr	r3, [pc, #728]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x34c>)
 800492e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8004932:	e15f      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004934:	4bb5      	ldr	r3, [pc, #724]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x350>)
 8004936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800493a:	e15b      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800493c:	4bb1      	ldr	r3, [pc, #708]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004948:	4bae      	ldr	r3, [pc, #696]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d031      	beq.n	80049b8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004954:	4bab      	ldr	r3, [pc, #684]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	099b      	lsrs	r3, r3, #6
 800495a:	2200      	movs	r2, #0
 800495c:	66bb      	str	r3, [r7, #104]	; 0x68
 800495e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004966:	663b      	str	r3, [r7, #96]	; 0x60
 8004968:	2300      	movs	r3, #0
 800496a:	667b      	str	r3, [r7, #100]	; 0x64
 800496c:	4ba7      	ldr	r3, [pc, #668]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x350>)
 800496e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004972:	462a      	mov	r2, r5
 8004974:	fb03 f202 	mul.w	r2, r3, r2
 8004978:	2300      	movs	r3, #0
 800497a:	4621      	mov	r1, r4
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	4aa2      	ldr	r2, [pc, #648]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x350>)
 8004984:	4621      	mov	r1, r4
 8004986:	fba1 1202 	umull	r1, r2, r1, r2
 800498a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800498c:	460a      	mov	r2, r1
 800498e:	67ba      	str	r2, [r7, #120]	; 0x78
 8004990:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004992:	4413      	add	r3, r2
 8004994:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800499a:	2200      	movs	r2, #0
 800499c:	65bb      	str	r3, [r7, #88]	; 0x58
 800499e:	65fa      	str	r2, [r7, #92]	; 0x5c
 80049a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80049a8:	f7fb fe66 	bl	8000678 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4613      	mov	r3, r2
 80049b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049b6:	e064      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b8:	4b92      	ldr	r3, [pc, #584]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	099b      	lsrs	r3, r3, #6
 80049be:	2200      	movs	r2, #0
 80049c0:	653b      	str	r3, [r7, #80]	; 0x50
 80049c2:	657a      	str	r2, [r7, #84]	; 0x54
 80049c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80049cc:	2300      	movs	r3, #0
 80049ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80049d4:	4622      	mov	r2, r4
 80049d6:	462b      	mov	r3, r5
 80049d8:	f04f 0000 	mov.w	r0, #0
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	0159      	lsls	r1, r3, #5
 80049e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e6:	0150      	lsls	r0, r2, #5
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4621      	mov	r1, r4
 80049ee:	1a51      	subs	r1, r2, r1
 80049f0:	6139      	str	r1, [r7, #16]
 80049f2:	4629      	mov	r1, r5
 80049f4:	eb63 0301 	sbc.w	r3, r3, r1
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a06:	4659      	mov	r1, fp
 8004a08:	018b      	lsls	r3, r1, #6
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a10:	4651      	mov	r1, sl
 8004a12:	018a      	lsls	r2, r1, #6
 8004a14:	4651      	mov	r1, sl
 8004a16:	ebb2 0801 	subs.w	r8, r2, r1
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	eb63 0901 	sbc.w	r9, r3, r1
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a30:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a34:	4690      	mov	r8, r2
 8004a36:	4699      	mov	r9, r3
 8004a38:	4623      	mov	r3, r4
 8004a3a:	eb18 0303 	adds.w	r3, r8, r3
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	462b      	mov	r3, r5
 8004a42:	eb49 0303 	adc.w	r3, r9, r3
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a54:	4629      	mov	r1, r5
 8004a56:	028b      	lsls	r3, r1, #10
 8004a58:	4621      	mov	r1, r4
 8004a5a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a5e:	4621      	mov	r1, r4
 8004a60:	028a      	lsls	r2, r1, #10
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a74:	f7fb fe00 	bl	8000678 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a82:	4b60      	ldr	r3, [pc, #384]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	0c1b      	lsrs	r3, r3, #16
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004a94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004aa4:	e0a6      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa6:	4b57      	ldr	r3, [pc, #348]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab2:	4b54      	ldr	r3, [pc, #336]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d02a      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abe:	4b51      	ldr	r3, [pc, #324]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	099b      	lsrs	r3, r3, #6
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x350>)
 8004ad4:	fb03 f201 	mul.w	r2, r3, r1
 8004ad8:	2300      	movs	r3, #0
 8004ada:	fb00 f303 	mul.w	r3, r0, r3
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a4a      	ldr	r2, [pc, #296]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x350>)
 8004ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ae6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ae8:	460a      	mov	r2, r1
 8004aea:	673a      	str	r2, [r7, #112]	; 0x70
 8004aec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004aee:	4413      	add	r3, r2
 8004af0:	677b      	str	r3, [r7, #116]	; 0x74
 8004af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af6:	2200      	movs	r2, #0
 8004af8:	633b      	str	r3, [r7, #48]	; 0x30
 8004afa:	637a      	str	r2, [r7, #52]	; 0x34
 8004afc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004b04:	f7fb fdb8 	bl	8000678 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b12:	e05b      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b14:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	623b      	str	r3, [r7, #32]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	f04f 0000 	mov.w	r0, #0
 8004b38:	f04f 0100 	mov.w	r1, #0
 8004b3c:	0159      	lsls	r1, r3, #5
 8004b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b42:	0150      	lsls	r0, r2, #5
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4641      	mov	r1, r8
 8004b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b4e:	4649      	mov	r1, r9
 8004b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b68:	ebb2 040a 	subs.w	r4, r2, sl
 8004b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	028b      	lsls	r3, r1, #10
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ba8:	4621      	mov	r1, r4
 8004baa:	028a      	lsls	r2, r1, #10
 8004bac:	4610      	mov	r0, r2
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
 8004bb8:	61fa      	str	r2, [r7, #28]
 8004bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bbe:	f7fb fd5b 	bl	8000678 <__aeabi_uldivmod>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x348>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	0f1b      	lsrs	r3, r3, #28
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8004bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004bea:	e003      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004bee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3798      	adds	r7, #152	; 0x98
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800
 8004c08:	00f42400 	.word	0x00f42400
 8004c0c:	016e3600 	.word	0x016e3600

08004c10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e28d      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8083 	beq.w	8004d36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c30:	4b94      	ldr	r3, [pc, #592]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 030c 	and.w	r3, r3, #12
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d019      	beq.n	8004c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c3c:	4b91      	ldr	r3, [pc, #580]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d106      	bne.n	8004c56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c48:	4b8e      	ldr	r3, [pc, #568]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c54:	d00c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c56:	4b8b      	ldr	r3, [pc, #556]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d112      	bne.n	8004c88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c62:	4b88      	ldr	r3, [pc, #544]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	4b84      	ldr	r3, [pc, #528]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d05b      	beq.n	8004d34 <HAL_RCC_OscConfig+0x124>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d157      	bne.n	8004d34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e25a      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c90:	d106      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x90>
 8004c92:	4b7c      	ldr	r3, [pc, #496]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a7b      	ldr	r2, [pc, #492]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e01d      	b.n	8004cdc <HAL_RCC_OscConfig+0xcc>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0xb4>
 8004caa:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a75      	ldr	r2, [pc, #468]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	4b73      	ldr	r3, [pc, #460]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a72      	ldr	r2, [pc, #456]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0xcc>
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6e      	ldr	r2, [pc, #440]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	4b6c      	ldr	r3, [pc, #432]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a6b      	ldr	r2, [pc, #428]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd ffee 	bl	8002cc4 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cec:	f7fd ffea 	bl	8002cc4 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e21f      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfe:	4b61      	ldr	r3, [pc, #388]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0xdc>
 8004d0a:	e014      	b.n	8004d36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fd ffda 	bl	8002cc4 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fd ffd6 	bl	8002cc4 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e20b      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d26:	4b57      	ldr	r3, [pc, #348]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x104>
 8004d32:	e000      	b.n	8004d36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d06f      	beq.n	8004e22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d42:	4b50      	ldr	r3, [pc, #320]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d017      	beq.n	8004d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d4e:	4b4d      	ldr	r3, [pc, #308]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d105      	bne.n	8004d66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d5a:	4b4a      	ldr	r3, [pc, #296]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d66:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d6e:	2b0c      	cmp	r3, #12
 8004d70:	d11c      	bne.n	8004dac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d72:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d116      	bne.n	8004dac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7e:	4b41      	ldr	r3, [pc, #260]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d005      	beq.n	8004d96 <HAL_RCC_OscConfig+0x186>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e1d3      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d96:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4937      	ldr	r1, [pc, #220]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004daa:	e03a      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004db4:	4b34      	ldr	r3, [pc, #208]	; (8004e88 <HAL_RCC_OscConfig+0x278>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dba:	f7fd ff83 	bl	8002cc4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dc2:	f7fd ff7f 	bl	8002cc4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e1b4      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd4:	4b2b      	ldr	r3, [pc, #172]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de0:	4b28      	ldr	r3, [pc, #160]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4925      	ldr	r1, [pc, #148]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]
 8004df4:	e015      	b.n	8004e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df6:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <HAL_RCC_OscConfig+0x278>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fd ff62 	bl	8002cc4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e04:	f7fd ff5e 	bl	8002cc4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e193      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d036      	beq.n	8004e9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e36:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <HAL_RCC_OscConfig+0x27c>)
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fd ff42 	bl	8002cc4 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e44:	f7fd ff3e 	bl	8002cc4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e173      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_OscConfig+0x274>)
 8004e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0f0      	beq.n	8004e44 <HAL_RCC_OscConfig+0x234>
 8004e62:	e01b      	b.n	8004e9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_RCC_OscConfig+0x27c>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6a:	f7fd ff2b 	bl	8002cc4 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e70:	e00e      	b.n	8004e90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e72:	f7fd ff27 	bl	8002cc4 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d907      	bls.n	8004e90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e15c      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	42470000 	.word	0x42470000
 8004e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e90:	4b8a      	ldr	r3, [pc, #552]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1ea      	bne.n	8004e72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 8097 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eae:	4b83      	ldr	r3, [pc, #524]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10f      	bne.n	8004eda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a7e      	ldr	r2, [pc, #504]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b7c      	ldr	r3, [pc, #496]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eda:	4b79      	ldr	r3, [pc, #484]	; (80050c0 <HAL_RCC_OscConfig+0x4b0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d118      	bne.n	8004f18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <HAL_RCC_OscConfig+0x4b0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a75      	ldr	r2, [pc, #468]	; (80050c0 <HAL_RCC_OscConfig+0x4b0>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef2:	f7fd fee7 	bl	8002cc4 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efa:	f7fd fee3 	bl	8002cc4 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e118      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <HAL_RCC_OscConfig+0x4b0>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCC_OscConfig+0x31e>
 8004f20:	4b66      	ldr	r3, [pc, #408]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a65      	ldr	r2, [pc, #404]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2c:	e01c      	b.n	8004f68 <HAL_RCC_OscConfig+0x358>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b05      	cmp	r3, #5
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x340>
 8004f36:	4b61      	ldr	r3, [pc, #388]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	4a60      	ldr	r2, [pc, #384]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	f043 0304 	orr.w	r3, r3, #4
 8004f40:	6713      	str	r3, [r2, #112]	; 0x70
 8004f42:	4b5e      	ldr	r3, [pc, #376]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a5d      	ldr	r2, [pc, #372]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4e:	e00b      	b.n	8004f68 <HAL_RCC_OscConfig+0x358>
 8004f50:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f54:	4a59      	ldr	r2, [pc, #356]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5c:	4b57      	ldr	r3, [pc, #348]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a56      	ldr	r2, [pc, #344]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f62:	f023 0304 	bic.w	r3, r3, #4
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f70:	f7fd fea8 	bl	8002cc4 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f78:	f7fd fea4 	bl	8002cc4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e0d7      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	4b4b      	ldr	r3, [pc, #300]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0ee      	beq.n	8004f78 <HAL_RCC_OscConfig+0x368>
 8004f9a:	e014      	b.n	8004fc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fd fe92 	bl	8002cc4 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fa4:	f7fd fe8e 	bl	8002cc4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e0c1      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	4b40      	ldr	r3, [pc, #256]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ee      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d105      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fcc:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	4a3a      	ldr	r2, [pc, #232]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80ad 	beq.w	800513c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 030c 	and.w	r3, r3, #12
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d060      	beq.n	80050b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d145      	bne.n	8005082 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff6:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <HAL_RCC_OscConfig+0x4b4>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fd fe62 	bl	8002cc4 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005004:	f7fd fe5e 	bl	8002cc4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e093      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	4b29      	ldr	r3, [pc, #164]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	019b      	lsls	r3, r3, #6
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	071b      	lsls	r3, r3, #28
 800504e:	491b      	ldr	r1, [pc, #108]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8005050:	4313      	orrs	r3, r2
 8005052:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <HAL_RCC_OscConfig+0x4b4>)
 8005056:	2201      	movs	r2, #1
 8005058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fd fe33 	bl	8002cc4 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005062:	f7fd fe2f 	bl	8002cc4 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e064      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005074:	4b11      	ldr	r3, [pc, #68]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0x452>
 8005080:	e05c      	b.n	800513c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005082:	4b10      	ldr	r3, [pc, #64]	; (80050c4 <HAL_RCC_OscConfig+0x4b4>)
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fd fe1c 	bl	8002cc4 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005090:	f7fd fe18 	bl	8002cc4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e04d      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_RCC_OscConfig+0x4ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x480>
 80050ae:	e045      	b.n	800513c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d107      	bne.n	80050c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e040      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
 80050bc:	40023800 	.word	0x40023800
 80050c0:	40007000 	.word	0x40007000
 80050c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050c8:	4b1f      	ldr	r3, [pc, #124]	; (8005148 <HAL_RCC_OscConfig+0x538>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d030      	beq.n	8005138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d129      	bne.n	8005138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d122      	bne.n	8005138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005100:	4293      	cmp	r3, r2
 8005102:	d119      	bne.n	8005138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	3b01      	subs	r3, #1
 8005112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d10f      	bne.n	8005138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005124:	429a      	cmp	r2, r3
 8005126:	d107      	bne.n	8005138 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800

0800514c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e07b      	b.n	8005256 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b00      	cmp	r3, #0
 8005164:	d108      	bne.n	8005178 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516e:	d009      	beq.n	8005184 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	61da      	str	r2, [r3, #28]
 8005176:	e005      	b.n	8005184 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd f9f4 	bl	800258c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	ea42 0103 	orr.w	r1, r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0104 	and.w	r1, r3, #4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0210 	and.w	r2, r3, #16
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005244:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af00      	add	r7, sp, #0
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_SPI_Transmit+0x22>
 800527c:	2302      	movs	r3, #2
 800527e:	e126      	b.n	80054ce <HAL_SPI_Transmit+0x270>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005288:	f7fd fd1c 	bl	8002cc4 <HAL_GetTick>
 800528c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052a2:	e10b      	b.n	80054bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_Transmit+0x52>
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052b4:	e102      	b.n	80054bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2203      	movs	r2, #3
 80052ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052fc:	d10f      	bne.n	800531e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800530c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d007      	beq.n	800533c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005344:	d14b      	bne.n	80053de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_SPI_Transmit+0xf6>
 800534e:	8afb      	ldrh	r3, [r7, #22]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d13e      	bne.n	80053d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005378:	e02b      	b.n	80053d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b02      	cmp	r3, #2
 8005386:	d112      	bne.n	80053ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	881a      	ldrh	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	1c9a      	adds	r2, r3, #2
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	3b01      	subs	r3, #1
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80053ac:	e011      	b.n	80053d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ae:	f7fd fc89 	bl	8002cc4 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d803      	bhi.n	80053c6 <HAL_SPI_Transmit+0x168>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d102      	bne.n	80053cc <HAL_SPI_Transmit+0x16e>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053d0:	e074      	b.n	80054bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ce      	bne.n	800537a <HAL_SPI_Transmit+0x11c>
 80053dc:	e04c      	b.n	8005478 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Transmit+0x18e>
 80053e6:	8afb      	ldrh	r3, [r7, #22]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d140      	bne.n	800546e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	7812      	ldrb	r2, [r2, #0]
 80053f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005412:	e02c      	b.n	800546e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d113      	bne.n	800544a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	7812      	ldrb	r2, [r2, #0]
 800542e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	86da      	strh	r2, [r3, #54]	; 0x36
 8005448:	e011      	b.n	800546e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800544a:	f7fd fc3b 	bl	8002cc4 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d803      	bhi.n	8005462 <HAL_SPI_Transmit+0x204>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d102      	bne.n	8005468 <HAL_SPI_Transmit+0x20a>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800546c:	e026      	b.n	80054bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1cd      	bne.n	8005414 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa55 	bl	800592c <SPI_EndRxTxTransaction>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2220      	movs	r2, #32
 800548c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005496:	2300      	movs	r3, #0
 8005498:	613b      	str	r3, [r7, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e000      	b.n	80054bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80054ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08c      	sub	sp, #48	; 0x30
 80054da:	af00      	add	r7, sp, #0
 80054dc:	60f8      	str	r0, [r7, #12]
 80054de:	60b9      	str	r1, [r7, #8]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x26>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e18a      	b.n	8005812 <HAL_SPI_TransmitReceive+0x33c>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005504:	f7fd fbde 	bl	8002cc4 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800551a:	887b      	ldrh	r3, [r7, #2]
 800551c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800551e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005522:	2b01      	cmp	r3, #1
 8005524:	d00f      	beq.n	8005546 <HAL_SPI_TransmitReceive+0x70>
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552c:	d107      	bne.n	800553e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d103      	bne.n	800553e <HAL_SPI_TransmitReceive+0x68>
 8005536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553a:	2b04      	cmp	r3, #4
 800553c:	d003      	beq.n	8005546 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800553e:	2302      	movs	r3, #2
 8005540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005544:	e15b      	b.n	80057fe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d005      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x82>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_SPI_TransmitReceive+0x82>
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800555e:	e14e      	b.n	80057fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b04      	cmp	r3, #4
 800556a:	d003      	beq.n	8005574 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2205      	movs	r2, #5
 8005570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	887a      	ldrh	r2, [r7, #2]
 8005584:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	887a      	ldrh	r2, [r7, #2]
 800558a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	887a      	ldrh	r2, [r7, #2]
 8005596:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d007      	beq.n	80055c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d0:	d178      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x10a>
 80055da:	8b7b      	ldrh	r3, [r7, #26]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d166      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	1c9a      	adds	r2, r3, #2
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005604:	e053      	b.n	80056ae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d11b      	bne.n	800564c <HAL_SPI_TransmitReceive+0x176>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <HAL_SPI_TransmitReceive+0x176>
 800561e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005620:	2b01      	cmp	r3, #1
 8005622:	d113      	bne.n	800564c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	881a      	ldrh	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	1c9a      	adds	r2, r3, #2
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d119      	bne.n	800568e <HAL_SPI_TransmitReceive+0x1b8>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565e:	b29b      	uxth	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d014      	beq.n	800568e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	b292      	uxth	r2, r2
 8005670:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	1c9a      	adds	r2, r3, #2
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800568a:	2301      	movs	r3, #1
 800568c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800568e:	f7fd fb19 	bl	8002cc4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800569a:	429a      	cmp	r2, r3
 800569c:	d807      	bhi.n	80056ae <HAL_SPI_TransmitReceive+0x1d8>
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d003      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056ac:	e0a7      	b.n	80057fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1a6      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x130>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1a1      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x130>
 80056c2:	e07c      	b.n	80057be <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d002      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x1fc>
 80056cc:	8b7b      	ldrh	r3, [r7, #26]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d16b      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f8:	e057      	b.n	80057aa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d11c      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x26c>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d017      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x26c>
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2b01      	cmp	r3, #1
 8005716:	d114      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d119      	bne.n	8005784 <HAL_SPI_TransmitReceive+0x2ae>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d014      	beq.n	8005784 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005780:	2301      	movs	r3, #1
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005784:	f7fd fa9e 	bl	8002cc4 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005790:	429a      	cmp	r2, r3
 8005792:	d803      	bhi.n	800579c <HAL_SPI_TransmitReceive+0x2c6>
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d102      	bne.n	80057a2 <HAL_SPI_TransmitReceive+0x2cc>
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057a8:	e029      	b.n	80057fe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1a2      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x224>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d19d      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f8b2 	bl	800592c <SPI_EndRxTxTransaction>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057da:	e010      	b.n	80057fe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	e000      	b.n	80057fe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80057fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800580e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005812:	4618      	mov	r0, r3
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
	...

0800581c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800582c:	f7fd fa4a 	bl	8002cc4 <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	1a9b      	subs	r3, r3, r2
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4413      	add	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800583c:	f7fd fa42 	bl	8002cc4 <HAL_GetTick>
 8005840:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	015b      	lsls	r3, r3, #5
 8005848:	0d1b      	lsrs	r3, r3, #20
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	fb02 f303 	mul.w	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005852:	e054      	b.n	80058fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d050      	beq.n	80058fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800585c:	f7fd fa32 	bl	8002cc4 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	429a      	cmp	r2, r3
 800586a:	d902      	bls.n	8005872 <SPI_WaitFlagStateUntilTimeout+0x56>
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d13d      	bne.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005880:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800588a:	d111      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005894:	d004      	beq.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589e:	d107      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058b8:	d10f      	bne.n	80058da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e017      	b.n	800591e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4013      	ands	r3, r2
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	429a      	cmp	r2, r3
 800590c:	bf0c      	ite	eq
 800590e:	2301      	moveq	r3, #1
 8005910:	2300      	movne	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	461a      	mov	r2, r3
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	429a      	cmp	r2, r3
 800591a:	d19b      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3720      	adds	r7, #32
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000004 	.word	0x20000004

0800592c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005938:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <SPI_EndRxTxTransaction+0x7c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <SPI_EndRxTxTransaction+0x80>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0d5b      	lsrs	r3, r3, #21
 8005944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005956:	d112      	bne.n	800597e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	2180      	movs	r1, #128	; 0x80
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff ff5a 	bl	800581c <SPI_WaitFlagStateUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e00f      	b.n	800599e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	3b01      	subs	r3, #1
 8005988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005994:	2b80      	cmp	r3, #128	; 0x80
 8005996:	d0f2      	beq.n	800597e <SPI_EndRxTxTransaction+0x52>
 8005998:	e000      	b.n	800599c <SPI_EndRxTxTransaction+0x70>
        break;
 800599a:	bf00      	nop
  }

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20000004 	.word	0x20000004
 80059ac:	165e9f81 	.word	0x165e9f81

080059b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80059b4:	4904      	ldr	r1, [pc, #16]	; (80059c8 <MX_FATFS_Init+0x18>)
 80059b6:	4805      	ldr	r0, [pc, #20]	; (80059cc <MX_FATFS_Init+0x1c>)
 80059b8:	f003 fa68 	bl	8008e8c <FATFS_LinkDriver>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4b03      	ldr	r3, [pc, #12]	; (80059d0 <MX_FATFS_Init+0x20>)
 80059c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	200024cc 	.word	0x200024cc
 80059cc:	20000018 	.word	0x20000018
 80059d0:	200024c8 	.word	0x200024c8

080059d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80059d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
/*    Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_initialize(pdrv);
 80059ee:	79fb      	ldrb	r3, [r7, #7]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fb f977 	bl	8000ce4 <SD_disk_initialize>
 80059f6:	4603      	mov	r3, r0
 80059f8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
    return SD_disk_status(pdrv);
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fb fa4e 	bl	8000eb0 <SD_disk_status>
 8005a14:	4603      	mov	r3, r0
 8005a16:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    /*return RES_OK;*/
    return SD_disk_read(pdrv, buff, sector, count);
 8005a30:	7bf8      	ldrb	r0, [r7, #15]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	f7fb fa50 	bl	8000edc <SD_disk_read>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4603      	mov	r3, r0
 8005a56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   /* return RES_OK;*/
    return SD_disk_write(pdrv, buff, sector, count);
 8005a58:	7bf8      	ldrb	r0, [r7, #15]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	f7fb faa6 	bl	8000fb0 <SD_disk_write>
 8005a64:	4603      	mov	r3, r0
 8005a66:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	603a      	str	r2, [r7, #0]
 8005a7a:	71fb      	strb	r3, [r7, #7]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    /*DRESULT res = RES_ERROR;
    return res;*/
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005a80:	79fb      	ldrb	r3, [r7, #7]
 8005a82:	79b9      	ldrb	r1, [r7, #6]
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fb fb16 	bl	80010b8 <SD_disk_ioctl>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	2b7f      	cmp	r3, #127	; 0x7f
 8005aa8:	d802      	bhi.n	8005ab0 <ff_convert+0x18>
		c = chr;
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	81fb      	strh	r3, [r7, #14]
 8005aae:	e025      	b.n	8005afc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00b      	beq.n	8005ace <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2bff      	cmp	r3, #255	; 0xff
 8005aba:	d805      	bhi.n	8005ac8 <ff_convert+0x30>
 8005abc:	88fb      	ldrh	r3, [r7, #6]
 8005abe:	3b80      	subs	r3, #128	; 0x80
 8005ac0:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <ff_convert+0x74>)
 8005ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac6:	e000      	b.n	8005aca <ff_convert+0x32>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	81fb      	strh	r3, [r7, #14]
 8005acc:	e016      	b.n	8005afc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8005ace:	2300      	movs	r3, #0
 8005ad0:	81fb      	strh	r3, [r7, #14]
 8005ad2:	e009      	b.n	8005ae8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <ff_convert+0x74>)
 8005ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d006      	beq.n	8005af0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005ae2:	89fb      	ldrh	r3, [r7, #14]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	81fb      	strh	r3, [r7, #14]
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	2b7f      	cmp	r3, #127	; 0x7f
 8005aec:	d9f2      	bls.n	8005ad4 <ff_convert+0x3c>
 8005aee:	e000      	b.n	8005af2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005af0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	3380      	adds	r3, #128	; 0x80
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005afc:	89fb      	ldrh	r3, [r7, #14]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	0800a05c 	.word	0x0800a05c

08005b10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d201      	bcs.n	8005b26 <ff_wtoupper+0x16>
 8005b22:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <ff_wtoupper+0x10c>)
 8005b24:	e000      	b.n	8005b28 <ff_wtoupper+0x18>
 8005b26:	4b3e      	ldr	r3, [pc, #248]	; (8005c20 <ff_wtoupper+0x110>)
 8005b28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	617a      	str	r2, [r7, #20]
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8005b34:	8a7b      	ldrh	r3, [r7, #18]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d068      	beq.n	8005c0c <ff_wtoupper+0xfc>
 8005b3a:	88fa      	ldrh	r2, [r7, #6]
 8005b3c:	8a7b      	ldrh	r3, [r7, #18]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d364      	bcc.n	8005c0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	617a      	str	r2, [r7, #20]
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	823b      	strh	r3, [r7, #16]
 8005b4c:	8a3b      	ldrh	r3, [r7, #16]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	81fb      	strh	r3, [r7, #14]
 8005b52:	8a3b      	ldrh	r3, [r7, #16]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	8a79      	ldrh	r1, [r7, #18]
 8005b5c:	8a3b      	ldrh	r3, [r7, #16]
 8005b5e:	440b      	add	r3, r1
 8005b60:	429a      	cmp	r2, r3
 8005b62:	da49      	bge.n	8005bf8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8005b64:	89fb      	ldrh	r3, [r7, #14]
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d84f      	bhi.n	8005c0a <ff_wtoupper+0xfa>
 8005b6a:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <ff_wtoupper+0x60>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005ba7 	.word	0x08005ba7
 8005b78:	08005bbd 	.word	0x08005bbd
 8005b7c:	08005bc5 	.word	0x08005bc5
 8005b80:	08005bcd 	.word	0x08005bcd
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005bed 	.word	0x08005bed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	8a7b      	ldrh	r3, [r7, #18]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	80fb      	strh	r3, [r7, #6]
 8005ba4:	e027      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	8a7b      	ldrh	r3, [r7, #18]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	80fb      	strh	r3, [r7, #6]
 8005bba:	e01c      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005bbc:	88fb      	ldrh	r3, [r7, #6]
 8005bbe:	3b10      	subs	r3, #16
 8005bc0:	80fb      	strh	r3, [r7, #6]
 8005bc2:	e018      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	3b20      	subs	r3, #32
 8005bc8:	80fb      	strh	r3, [r7, #6]
 8005bca:	e014      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005bcc:	88fb      	ldrh	r3, [r7, #6]
 8005bce:	3b30      	subs	r3, #48	; 0x30
 8005bd0:	80fb      	strh	r3, [r7, #6]
 8005bd2:	e010      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	3b1a      	subs	r3, #26
 8005bd8:	80fb      	strh	r3, [r7, #6]
 8005bda:	e00c      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	3308      	adds	r3, #8
 8005be0:	80fb      	strh	r3, [r7, #6]
 8005be2:	e008      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	3b50      	subs	r3, #80	; 0x50
 8005be8:	80fb      	strh	r3, [r7, #6]
 8005bea:	e004      	b.n	8005bf6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8005bf2:	80fb      	strh	r3, [r7, #6]
 8005bf4:	bf00      	nop
			}
			break;
 8005bf6:	e008      	b.n	8005c0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005bf8:	89fb      	ldrh	r3, [r7, #14]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d195      	bne.n	8005b2a <ff_wtoupper+0x1a>
 8005bfe:	8a3b      	ldrh	r3, [r7, #16]
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	4413      	add	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005c08:	e78f      	b.n	8005b2a <ff_wtoupper+0x1a>
			break;
 8005c0a:	bf00      	nop
	}

	return chr;
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	0800a15c 	.word	0x0800a15c
 8005c20:	0800a350 	.word	0x0800a350

08005c24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	4a08      	ldr	r2, [pc, #32]	; (8005c54 <disk_status+0x30>)
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	79fa      	ldrb	r2, [r7, #7]
 8005c3c:	4905      	ldr	r1, [pc, #20]	; (8005c54 <disk_status+0x30>)
 8005c3e:	440a      	add	r2, r1
 8005c40:	7a12      	ldrb	r2, [r2, #8]
 8005c42:	4610      	mov	r0, r2
 8005c44:	4798      	blx	r3
 8005c46:	4603      	mov	r3, r0
 8005c48:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	200026f8 	.word	0x200026f8

08005c58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <disk_initialize+0x48>)
 8005c6a:	5cd3      	ldrb	r3, [r2, r3]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d111      	bne.n	8005c94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	4a0b      	ldr	r2, [pc, #44]	; (8005ca0 <disk_initialize+0x48>)
 8005c74:	2101      	movs	r1, #1
 8005c76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <disk_initialize+0x48>)
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	79fa      	ldrb	r2, [r7, #7]
 8005c86:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <disk_initialize+0x48>)
 8005c88:	440a      	add	r2, r1
 8005c8a:	7a12      	ldrb	r2, [r2, #8]
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
 8005c90:	4603      	mov	r3, r0
 8005c92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200026f8 	.word	0x200026f8

08005ca4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ca4:	b590      	push	{r4, r7, lr}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
 8005cae:	603b      	str	r3, [r7, #0]
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <disk_read+0x3c>)
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	689c      	ldr	r4, [r3, #8]
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
 8005cc2:	4a07      	ldr	r2, [pc, #28]	; (8005ce0 <disk_read+0x3c>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	7a18      	ldrb	r0, [r3, #8]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	47a0      	blx	r4
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	200026f8 	.word	0x200026f8

08005ce4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005ce4:	b590      	push	{r4, r7, lr}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
 8005cee:	603b      	str	r3, [r7, #0]
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <disk_write+0x3c>)
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	68dc      	ldr	r4, [r3, #12]
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <disk_write+0x3c>)
 8005d04:	4413      	add	r3, r2
 8005d06:	7a18      	ldrb	r0, [r3, #8]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	47a0      	blx	r4
 8005d10:	4603      	mov	r3, r0
 8005d12:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd90      	pop	{r4, r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200026f8 	.word	0x200026f8

08005d24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	603a      	str	r2, [r7, #0]
 8005d2e:	71fb      	strb	r3, [r7, #7]
 8005d30:	460b      	mov	r3, r1
 8005d32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	4a09      	ldr	r2, [pc, #36]	; (8005d5c <disk_ioctl+0x38>)
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	79fa      	ldrb	r2, [r7, #7]
 8005d42:	4906      	ldr	r1, [pc, #24]	; (8005d5c <disk_ioctl+0x38>)
 8005d44:	440a      	add	r2, r1
 8005d46:	7a10      	ldrb	r0, [r2, #8]
 8005d48:	79b9      	ldrb	r1, [r7, #6]
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	4798      	blx	r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	200026f8 	.word	0x200026f8

08005d60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d70:	89fb      	ldrh	r3, [r7, #14]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	b21a      	sxth	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	b21b      	sxth	r3, r3
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d82:	89fb      	ldrh	r3, [r7, #14]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3303      	adds	r3, #3
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	3202      	adds	r2, #2
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	3201      	adds	r2, #1
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7812      	ldrb	r2, [r2, #0]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
	return rv;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	887a      	ldrh	r2, [r7, #2]
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	887b      	ldrh	r3, [r7, #2]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e64:	b480      	push	{r7}
 8005e66:	b087      	sub	sp, #28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	1c53      	adds	r3, r2, #1
 8005e82:	613b      	str	r3, [r7, #16]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	1c59      	adds	r1, r3, #1
 8005e88:	6179      	str	r1, [r7, #20]
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f1      	bne.n	8005e7e <mem_cpy+0x1a>
	}
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005ea6:	b480      	push	{r7}
 8005ea8:	b087      	sub	sp, #28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	617a      	str	r2, [r7, #20]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f3      	bne.n	8005eb6 <mem_set+0x10>
}
 8005ece:	bf00      	nop
 8005ed0:	bf00      	nop
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	; 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	61fa      	str	r2, [r7, #28]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	4619      	mov	r1, r3
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	61ba      	str	r2, [r7, #24]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	1acb      	subs	r3, r1, r3
 8005f08:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <mem_cmp+0x40>
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0eb      	beq.n	8005ef4 <mem_cmp+0x18>

	return r;
 8005f1c:	697b      	ldr	r3, [r7, #20]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3724      	adds	r7, #36	; 0x24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f34:	e002      	b.n	8005f3c <chk_chr+0x12>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	607b      	str	r3, [r7, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <chk_chr+0x26>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d1f2      	bne.n	8005f36 <chk_chr+0xc>
	return *str;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	781b      	ldrb	r3, [r3, #0]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e029      	b.n	8005fc8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005f74:	4a27      	ldr	r2, [pc, #156]	; (8006014 <chk_lock+0xb4>)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	011b      	lsls	r3, r3, #4
 8005f7a:	4413      	add	r3, r2
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01d      	beq.n	8005fbe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f82:	4a24      	ldr	r2, [pc, #144]	; (8006014 <chk_lock+0xb4>)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d116      	bne.n	8005fc2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f94:	4a1f      	ldr	r2, [pc, #124]	; (8006014 <chk_lock+0xb4>)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d10c      	bne.n	8005fc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <chk_lock+0xb4>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	4413      	add	r3, r2
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d102      	bne.n	8005fc2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fbc:	e007      	b.n	8005fce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d9d2      	bls.n	8005f74 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d109      	bne.n	8005fe8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <chk_lock+0x80>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d101      	bne.n	8005fe4 <chk_lock+0x84>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e010      	b.n	8006006 <chk_lock+0xa6>
 8005fe4:	2312      	movs	r3, #18
 8005fe6:	e00e      	b.n	8006006 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <chk_lock+0xa0>
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <chk_lock+0xb4>)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	d101      	bne.n	8006004 <chk_lock+0xa4>
 8006000:	2310      	movs	r3, #16
 8006002:	e000      	b.n	8006006 <chk_lock+0xa6>
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	200024d8 	.word	0x200024d8

08006018 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	e002      	b.n	800602a <enq_lock+0x12>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3301      	adds	r3, #1
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d806      	bhi.n	800603e <enq_lock+0x26>
 8006030:	4a09      	ldr	r2, [pc, #36]	; (8006058 <enq_lock+0x40>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	4413      	add	r3, r2
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f2      	bne.n	8006024 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b02      	cmp	r3, #2
 8006042:	bf14      	ite	ne
 8006044:	2301      	movne	r3, #1
 8006046:	2300      	moveq	r3, #0
 8006048:	b2db      	uxtb	r3, r3
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	200024d8 	.word	0x200024d8

0800605c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e01f      	b.n	80060ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800606c:	4a41      	ldr	r2, [pc, #260]	; (8006174 <inc_lock+0x118>)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	4413      	add	r3, r2
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d113      	bne.n	80060a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800607e:	4a3d      	ldr	r2, [pc, #244]	; (8006174 <inc_lock+0x118>)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	011b      	lsls	r3, r3, #4
 8006084:	4413      	add	r3, r2
 8006086:	3304      	adds	r3, #4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800608e:	429a      	cmp	r2, r3
 8006090:	d109      	bne.n	80060a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006092:	4a38      	ldr	r2, [pc, #224]	; (8006174 <inc_lock+0x118>)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	4413      	add	r3, r2
 800609a:	3308      	adds	r3, #8
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d006      	beq.n	80060b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3301      	adds	r3, #1
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d9dc      	bls.n	800606c <inc_lock+0x10>
 80060b2:	e000      	b.n	80060b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80060b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d132      	bne.n	8006122 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e002      	b.n	80060c8 <inc_lock+0x6c>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d806      	bhi.n	80060dc <inc_lock+0x80>
 80060ce:	4a29      	ldr	r2, [pc, #164]	; (8006174 <inc_lock+0x118>)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	4413      	add	r3, r2
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f2      	bne.n	80060c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d101      	bne.n	80060e6 <inc_lock+0x8a>
 80060e2:	2300      	movs	r3, #0
 80060e4:	e040      	b.n	8006168 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4922      	ldr	r1, [pc, #136]	; (8006174 <inc_lock+0x118>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	440b      	add	r3, r1
 80060f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	491e      	ldr	r1, [pc, #120]	; (8006174 <inc_lock+0x118>)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	440b      	add	r3, r1
 8006100:	3304      	adds	r3, #4
 8006102:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	491a      	ldr	r1, [pc, #104]	; (8006174 <inc_lock+0x118>)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	440b      	add	r3, r1
 8006110:	3308      	adds	r3, #8
 8006112:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <inc_lock+0x118>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	011b      	lsls	r3, r3, #4
 800611a:	4413      	add	r3, r2
 800611c:	330c      	adds	r3, #12
 800611e:	2200      	movs	r2, #0
 8006120:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d009      	beq.n	800613c <inc_lock+0xe0>
 8006128:	4a12      	ldr	r2, [pc, #72]	; (8006174 <inc_lock+0x118>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	011b      	lsls	r3, r3, #4
 800612e:	4413      	add	r3, r2
 8006130:	330c      	adds	r3, #12
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <inc_lock+0xe0>
 8006138:	2300      	movs	r3, #0
 800613a:	e015      	b.n	8006168 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d108      	bne.n	8006154 <inc_lock+0xf8>
 8006142:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <inc_lock+0x118>)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	4413      	add	r3, r2
 800614a:	330c      	adds	r3, #12
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	e001      	b.n	8006158 <inc_lock+0xfc>
 8006154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006158:	4906      	ldr	r1, [pc, #24]	; (8006174 <inc_lock+0x118>)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	011b      	lsls	r3, r3, #4
 800615e:	440b      	add	r3, r1
 8006160:	330c      	adds	r3, #12
 8006162:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	3301      	adds	r3, #1
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	200024d8 	.word	0x200024d8

08006178 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3b01      	subs	r3, #1
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d825      	bhi.n	80061d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800618c:	4a17      	ldr	r2, [pc, #92]	; (80061ec <dec_lock+0x74>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	4413      	add	r3, r2
 8006194:	330c      	adds	r3, #12
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800619a:	89fb      	ldrh	r3, [r7, #14]
 800619c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a0:	d101      	bne.n	80061a6 <dec_lock+0x2e>
 80061a2:	2300      	movs	r3, #0
 80061a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061a6:	89fb      	ldrh	r3, [r7, #14]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <dec_lock+0x3a>
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061b2:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <dec_lock+0x74>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	330c      	adds	r3, #12
 80061bc:	89fa      	ldrh	r2, [r7, #14]
 80061be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061c0:	89fb      	ldrh	r3, [r7, #14]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <dec_lock+0x5a>
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <dec_lock+0x74>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	011b      	lsls	r3, r3, #4
 80061cc:	4413      	add	r3, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	737b      	strb	r3, [r7, #13]
 80061d6:	e001      	b.n	80061dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80061d8:	2302      	movs	r3, #2
 80061da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80061dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	200024d8 	.word	0x200024d8

080061f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	e010      	b.n	8006220 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80061fe:	4a0d      	ldr	r2, [pc, #52]	; (8006234 <clear_lock+0x44>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	4413      	add	r3, r2
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d105      	bne.n	800621a <clear_lock+0x2a>
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <clear_lock+0x44>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	4413      	add	r3, r2
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d9eb      	bls.n	80061fe <clear_lock+0xe>
	}
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	200024d8 	.word	0x200024d8

08006238 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	78db      	ldrb	r3, [r3, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d034      	beq.n	80062b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	7858      	ldrb	r0, [r3, #1]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800625c:	2301      	movs	r3, #1
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	f7ff fd40 	bl	8005ce4 <disk_write>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <sync_window+0x38>
			res = FR_DISK_ERR;
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
 800626e:	e022      	b.n	80062b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	1ad2      	subs	r2, r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	429a      	cmp	r2, r3
 8006284:	d217      	bcs.n	80062b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	789b      	ldrb	r3, [r3, #2]
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	e010      	b.n	80062b0 <sync_window+0x78>
					wsect += fs->fsize;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4413      	add	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	7858      	ldrb	r0, [r3, #1]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062a2:	2301      	movs	r3, #1
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	f7ff fd1d 	bl	8005ce4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3b01      	subs	r3, #1
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d8eb      	bhi.n	800628e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d01b      	beq.n	8006310 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ffad 	bl	8006238 <sync_window>
 80062de:	4603      	mov	r3, r0
 80062e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d113      	bne.n	8006310 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	7858      	ldrb	r0, [r3, #1]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062f2:	2301      	movs	r3, #1
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	f7ff fcd5 	bl	8005ca4 <disk_read>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d004      	beq.n	800630a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006300:	f04f 33ff 	mov.w	r3, #4294967295
 8006304:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006306:	2301      	movs	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ff87 	bl	8006238 <sync_window>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d159      	bne.n	80063e8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b03      	cmp	r3, #3
 800633a:	d149      	bne.n	80063d0 <sync_fs+0xb4>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	791b      	ldrb	r3, [r3, #4]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d145      	bne.n	80063d0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	899b      	ldrh	r3, [r3, #12]
 800634e:	461a      	mov	r2, r3
 8006350:	2100      	movs	r1, #0
 8006352:	f7ff fda8 	bl	8005ea6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3338      	adds	r3, #56	; 0x38
 800635a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800635e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fd37 	bl	8005dd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3338      	adds	r3, #56	; 0x38
 800636c:	4921      	ldr	r1, [pc, #132]	; (80063f4 <sync_fs+0xd8>)
 800636e:	4618      	mov	r0, r3
 8006370:	f7ff fd4c 	bl	8005e0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	3338      	adds	r3, #56	; 0x38
 8006378:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800637c:	491e      	ldr	r1, [pc, #120]	; (80063f8 <sync_fs+0xdc>)
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fd44 	bl	8005e0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3338      	adds	r3, #56	; 0x38
 8006388:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f7ff fd3a 	bl	8005e0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3338      	adds	r3, #56	; 0x38
 800639c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f7ff fd30 	bl	8005e0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7858      	ldrb	r0, [r3, #1]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c4:	2301      	movs	r3, #1
 80063c6:	f7ff fc8d 	bl	8005ce4 <disk_write>
			fs->fsi_flag = 0;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fca3 	bl	8005d24 <disk_ioctl>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <sync_fs+0xcc>
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	41615252 	.word	0x41615252
 80063f8:	61417272 	.word	0x61417272

080063fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	3b02      	subs	r3, #2
 800640a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	3b02      	subs	r3, #2
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	429a      	cmp	r2, r3
 8006416:	d301      	bcc.n	800641c <clust2sect+0x20>
 8006418:	2300      	movs	r3, #0
 800641a:	e008      	b.n	800642e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	895b      	ldrh	r3, [r3, #10]
 8006420:	461a      	mov	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	fb03 f202 	mul.w	r2, r3, r2
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	4413      	add	r3, r2
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b086      	sub	sp, #24
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d904      	bls.n	800645a <get_fat+0x20>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <get_fat+0x26>
		val = 1;	/* Internal error */
 800645a:	2301      	movs	r3, #1
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	e0bb      	b.n	80065d8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b03      	cmp	r3, #3
 800646c:	f000 8083 	beq.w	8006576 <get_fat+0x13c>
 8006470:	2b03      	cmp	r3, #3
 8006472:	f300 80a7 	bgt.w	80065c4 <get_fat+0x18a>
 8006476:	2b01      	cmp	r3, #1
 8006478:	d002      	beq.n	8006480 <get_fat+0x46>
 800647a:	2b02      	cmp	r3, #2
 800647c:	d056      	beq.n	800652c <get_fat+0xf2>
 800647e:	e0a1      	b.n	80065c4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	899b      	ldrh	r3, [r3, #12]
 8006496:	4619      	mov	r1, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	fbb3 f3f1 	udiv	r3, r3, r1
 800649e:	4413      	add	r3, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	6938      	ldr	r0, [r7, #16]
 80064a4:	f7ff ff0c 	bl	80062c0 <move_window>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 808d 	bne.w	80065ca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	60fa      	str	r2, [r7, #12]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	8992      	ldrh	r2, [r2, #12]
 80064ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80064be:	fb01 f202 	mul.w	r2, r1, r2
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4413      	add	r3, r2
 80064c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	899b      	ldrh	r3, [r3, #12]
 80064d6:	4619      	mov	r1, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	fbb3 f3f1 	udiv	r3, r3, r1
 80064de:	4413      	add	r3, r2
 80064e0:	4619      	mov	r1, r3
 80064e2:	6938      	ldr	r0, [r7, #16]
 80064e4:	f7ff feec 	bl	80062c0 <move_window>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d16f      	bne.n	80065ce <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	899b      	ldrh	r3, [r3, #12]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80064fa:	fb01 f202 	mul.w	r2, r1, r2
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	461a      	mov	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4313      	orrs	r3, r2
 8006510:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <get_fat+0xe8>
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	091b      	lsrs	r3, r3, #4
 8006520:	e002      	b.n	8006528 <get_fat+0xee>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006528:	617b      	str	r3, [r7, #20]
			break;
 800652a:	e055      	b.n	80065d8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	899b      	ldrh	r3, [r3, #12]
 8006534:	085b      	lsrs	r3, r3, #1
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006540:	4413      	add	r3, r2
 8006542:	4619      	mov	r1, r3
 8006544:	6938      	ldr	r0, [r7, #16]
 8006546:	f7ff febb 	bl	80062c0 <move_window>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d140      	bne.n	80065d2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	8992      	ldrh	r2, [r2, #12]
 800655e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006562:	fb00 f202 	mul.w	r2, r0, r2
 8006566:	1a9b      	subs	r3, r3, r2
 8006568:	440b      	add	r3, r1
 800656a:	4618      	mov	r0, r3
 800656c:	f7ff fbf8 	bl	8005d60 <ld_word>
 8006570:	4603      	mov	r3, r0
 8006572:	617b      	str	r3, [r7, #20]
			break;
 8006574:	e030      	b.n	80065d8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	899b      	ldrh	r3, [r3, #12]
 800657e:	089b      	lsrs	r3, r3, #2
 8006580:	b29b      	uxth	r3, r3
 8006582:	4619      	mov	r1, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	fbb3 f3f1 	udiv	r3, r3, r1
 800658a:	4413      	add	r3, r2
 800658c:	4619      	mov	r1, r3
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7ff fe96 	bl	80062c0 <move_window>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d11d      	bne.n	80065d6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	8992      	ldrh	r2, [r2, #12]
 80065a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80065ac:	fb00 f202 	mul.w	r2, r0, r2
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	440b      	add	r3, r1
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fbeb 	bl	8005d90 <ld_dword>
 80065ba:	4603      	mov	r3, r0
 80065bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065c0:	617b      	str	r3, [r7, #20]
			break;
 80065c2:	e009      	b.n	80065d8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80065c4:	2301      	movs	r3, #1
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e006      	b.n	80065d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ca:	bf00      	nop
 80065cc:	e004      	b.n	80065d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ce:	bf00      	nop
 80065d0:	e002      	b.n	80065d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065d2:	bf00      	nop
 80065d4:	e000      	b.n	80065d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065d6:	bf00      	nop
		}
	}

	return val;
 80065d8:	697b      	ldr	r3, [r7, #20]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065e2:	b590      	push	{r4, r7, lr}
 80065e4:	b089      	sub	sp, #36	; 0x24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065ee:	2302      	movs	r3, #2
 80065f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f240 8102 	bls.w	80067fe <put_fat+0x21c>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	f080 80fc 	bcs.w	80067fe <put_fat+0x21c>
		switch (fs->fs_type) {
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b03      	cmp	r3, #3
 800660c:	f000 80b6 	beq.w	800677c <put_fat+0x19a>
 8006610:	2b03      	cmp	r3, #3
 8006612:	f300 80fd 	bgt.w	8006810 <put_fat+0x22e>
 8006616:	2b01      	cmp	r3, #1
 8006618:	d003      	beq.n	8006622 <put_fat+0x40>
 800661a:	2b02      	cmp	r3, #2
 800661c:	f000 8083 	beq.w	8006726 <put_fat+0x144>
 8006620:	e0f6      	b.n	8006810 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	4413      	add	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	899b      	ldrh	r3, [r3, #12]
 8006638:	4619      	mov	r1, r3
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006640:	4413      	add	r3, r2
 8006642:	4619      	mov	r1, r3
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff fe3b 	bl	80062c0 <move_window>
 800664a:	4603      	mov	r3, r0
 800664c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800664e:	7ffb      	ldrb	r3, [r7, #31]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 80d6 	bne.w	8006802 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	61ba      	str	r2, [r7, #24]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	8992      	ldrh	r2, [r2, #12]
 8006666:	fbb3 f0f2 	udiv	r0, r3, r2
 800666a:	fb00 f202 	mul.w	r2, r0, r2
 800666e:	1a9b      	subs	r3, r3, r2
 8006670:	440b      	add	r3, r1
 8006672:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <put_fat+0xb8>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	b25b      	sxtb	r3, r3
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	b25a      	sxtb	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	b25b      	sxtb	r3, r3
 8006692:	4313      	orrs	r3, r2
 8006694:	b25b      	sxtb	r3, r3
 8006696:	b2db      	uxtb	r3, r3
 8006698:	e001      	b.n	800669e <put_fat+0xbc>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	899b      	ldrh	r3, [r3, #12]
 80066b0:	4619      	mov	r1, r3
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80066b8:	4413      	add	r3, r2
 80066ba:	4619      	mov	r1, r3
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f7ff fdff 	bl	80062c0 <move_window>
 80066c2:	4603      	mov	r3, r0
 80066c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066c6:	7ffb      	ldrb	r3, [r7, #31]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f040 809c 	bne.w	8006806 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	899b      	ldrh	r3, [r3, #12]
 80066d8:	461a      	mov	r2, r3
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80066e0:	fb00 f202 	mul.w	r2, r0, r2
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	440b      	add	r3, r1
 80066e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <put_fat+0x11a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	e00e      	b.n	800671a <put_fat+0x138>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b25b      	sxtb	r3, r3
 8006702:	f023 030f 	bic.w	r3, r3, #15
 8006706:	b25a      	sxtb	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	b25b      	sxtb	r3, r3
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	b25b      	sxtb	r3, r3
 8006714:	4313      	orrs	r3, r2
 8006716:	b25b      	sxtb	r3, r3
 8006718:	b2db      	uxtb	r3, r3
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	70da      	strb	r2, [r3, #3]
			break;
 8006724:	e074      	b.n	8006810 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	899b      	ldrh	r3, [r3, #12]
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	b29b      	uxth	r3, r3
 8006732:	4619      	mov	r1, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	fbb3 f3f1 	udiv	r3, r3, r1
 800673a:	4413      	add	r3, r2
 800673c:	4619      	mov	r1, r3
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff fdbe 	bl	80062c0 <move_window>
 8006744:	4603      	mov	r3, r0
 8006746:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006748:	7ffb      	ldrb	r3, [r7, #31]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d15d      	bne.n	800680a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	8992      	ldrh	r2, [r2, #12]
 800675c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006760:	fb00 f202 	mul.w	r2, r0, r2
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	440b      	add	r3, r1
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	b292      	uxth	r2, r2
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff fb31 	bl	8005dd6 <st_word>
			fs->wflag = 1;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	70da      	strb	r2, [r3, #3]
			break;
 800677a:	e049      	b.n	8006810 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	899b      	ldrh	r3, [r3, #12]
 8006784:	089b      	lsrs	r3, r3, #2
 8006786:	b29b      	uxth	r3, r3
 8006788:	4619      	mov	r1, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006790:	4413      	add	r3, r2
 8006792:	4619      	mov	r1, r3
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff fd93 	bl	80062c0 <move_window>
 800679a:	4603      	mov	r3, r0
 800679c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800679e:	7ffb      	ldrb	r3, [r7, #31]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d134      	bne.n	800680e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	8992      	ldrh	r2, [r2, #12]
 80067b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80067bc:	fb00 f202 	mul.w	r2, r0, r2
 80067c0:	1a9b      	subs	r3, r3, r2
 80067c2:	440b      	add	r3, r1
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fae3 	bl	8005d90 <ld_dword>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80067d0:	4323      	orrs	r3, r4
 80067d2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	8992      	ldrh	r2, [r2, #12]
 80067e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80067e6:	fb00 f202 	mul.w	r2, r0, r2
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	440b      	add	r3, r1
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fb0b 	bl	8005e0c <st_dword>
			fs->wflag = 1;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	70da      	strb	r2, [r3, #3]
			break;
 80067fc:	e008      	b.n	8006810 <put_fat+0x22e>
		}
	}
 80067fe:	bf00      	nop
 8006800:	e006      	b.n	8006810 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006802:	bf00      	nop
 8006804:	e004      	b.n	8006810 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006806:	bf00      	nop
 8006808:	e002      	b.n	8006810 <put_fat+0x22e>
			if (res != FR_OK) break;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <put_fat+0x22e>
			if (res != FR_OK) break;
 800680e:	bf00      	nop
	return res;
 8006810:	7ffb      	ldrb	r3, [r7, #31]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3724      	adds	r7, #36	; 0x24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd90      	pop	{r4, r7, pc}

0800681a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b088      	sub	sp, #32
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d904      	bls.n	8006840 <remove_chain+0x26>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	429a      	cmp	r2, r3
 800683e:	d301      	bcc.n	8006844 <remove_chain+0x2a>
 8006840:	2302      	movs	r3, #2
 8006842:	e04b      	b.n	80068dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800684a:	f04f 32ff 	mov.w	r2, #4294967295
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	69b8      	ldr	r0, [r7, #24]
 8006852:	f7ff fec6 	bl	80065e2 <put_fat>
 8006856:	4603      	mov	r3, r0
 8006858:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800685a:	7ffb      	ldrb	r3, [r7, #31]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <remove_chain+0x4a>
 8006860:	7ffb      	ldrb	r3, [r7, #31]
 8006862:	e03b      	b.n	80068dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fde7 	bl	800643a <get_fat>
 800686c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d031      	beq.n	80068d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <remove_chain+0x64>
 800687a:	2302      	movs	r3, #2
 800687c:	e02e      	b.n	80068dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d101      	bne.n	800688a <remove_chain+0x70>
 8006886:	2301      	movs	r3, #1
 8006888:	e028      	b.n	80068dc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800688a:	2200      	movs	r2, #0
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	69b8      	ldr	r0, [r7, #24]
 8006890:	f7ff fea7 	bl	80065e2 <put_fat>
 8006894:	4603      	mov	r3, r0
 8006896:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006898:	7ffb      	ldrb	r3, [r7, #31]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <remove_chain+0x88>
 800689e:	7ffb      	ldrb	r3, [r7, #31]
 80068a0:	e01c      	b.n	80068dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	3b02      	subs	r3, #2
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d20b      	bcs.n	80068c8 <remove_chain+0xae>
			fs->free_clst++;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d3c6      	bcc.n	8006864 <remove_chain+0x4a>
 80068d6:	e000      	b.n	80068da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80068d8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3720      	adds	r7, #32
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b088      	sub	sp, #32
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d004      	beq.n	8006910 <create_chain+0x2c>
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	429a      	cmp	r2, r3
 800690e:	d31b      	bcc.n	8006948 <create_chain+0x64>
 8006910:	2301      	movs	r3, #1
 8006912:	61bb      	str	r3, [r7, #24]
 8006914:	e018      	b.n	8006948 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fd8e 	bl	800643a <get_fat>
 800691e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d801      	bhi.n	800692a <create_chain+0x46>
 8006926:	2301      	movs	r3, #1
 8006928:	e070      	b.n	8006a0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d101      	bne.n	8006936 <create_chain+0x52>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	e06a      	b.n	8006a0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	429a      	cmp	r2, r3
 800693e:	d201      	bcs.n	8006944 <create_chain+0x60>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	e063      	b.n	8006a0c <create_chain+0x128>
		scl = clst;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	3301      	adds	r3, #1
 8006950:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	429a      	cmp	r2, r3
 800695a:	d307      	bcc.n	800696c <create_chain+0x88>
				ncl = 2;
 800695c:	2302      	movs	r3, #2
 800695e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	429a      	cmp	r2, r3
 8006966:	d901      	bls.n	800696c <create_chain+0x88>
 8006968:	2300      	movs	r3, #0
 800696a:	e04f      	b.n	8006a0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800696c:	69f9      	ldr	r1, [r7, #28]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fd63 	bl	800643a <get_fat>
 8006974:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d00e      	beq.n	800699a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d003      	beq.n	800698a <create_chain+0xa6>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d101      	bne.n	800698e <create_chain+0xaa>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	e03e      	b.n	8006a0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	429a      	cmp	r2, r3
 8006994:	d1da      	bne.n	800694c <create_chain+0x68>
 8006996:	2300      	movs	r3, #0
 8006998:	e038      	b.n	8006a0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800699a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	69f9      	ldr	r1, [r7, #28]
 80069a2:	6938      	ldr	r0, [r7, #16]
 80069a4:	f7ff fe1d 	bl	80065e2 <put_fat>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d109      	bne.n	80069c6 <create_chain+0xe2>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d006      	beq.n	80069c6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	6839      	ldr	r1, [r7, #0]
 80069bc:	6938      	ldr	r0, [r7, #16]
 80069be:	f7ff fe10 	bl	80065e2 <put_fat>
 80069c2:	4603      	mov	r3, r0
 80069c4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80069c6:	7dfb      	ldrb	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d116      	bne.n	80069fa <create_chain+0x116>
		fs->last_clst = ncl;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	3b02      	subs	r3, #2
 80069dc:	429a      	cmp	r2, r3
 80069de:	d804      	bhi.n	80069ea <create_chain+0x106>
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	1e5a      	subs	r2, r3, #1
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	791b      	ldrb	r3, [r3, #4]
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	711a      	strb	r2, [r3, #4]
 80069f8:	e007      	b.n	8006a0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d102      	bne.n	8006a06 <create_chain+0x122>
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	e000      	b.n	8006a08 <create_chain+0x124>
 8006a06:	2301      	movs	r3, #1
 8006a08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a0a:	69fb      	ldr	r3, [r7, #28]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	3304      	adds	r3, #4
 8006a2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	899b      	ldrh	r3, [r3, #12]
 8006a30:	461a      	mov	r2, r3
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	8952      	ldrh	r2, [r2, #10]
 8006a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1d1a      	adds	r2, r3, #4
 8006a46:	613a      	str	r2, [r7, #16]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <clmt_clust+0x42>
 8006a52:	2300      	movs	r3, #0
 8006a54:	e010      	b.n	8006a78 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d307      	bcc.n	8006a6e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a6c:	e7e9      	b.n	8006a42 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006a6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	4413      	add	r3, r2
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a9a:	d204      	bcs.n	8006aa6 <dir_sdi+0x22>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e071      	b.n	8006b8e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d106      	bne.n	8006aca <dir_sdi+0x46>
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d902      	bls.n	8006aca <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10c      	bne.n	8006aea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	8912      	ldrh	r2, [r2, #8]
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d301      	bcc.n	8006ae0 <dir_sdi+0x5c>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e056      	b.n	8006b8e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	61da      	str	r2, [r3, #28]
 8006ae8:	e02d      	b.n	8006b46 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	895b      	ldrh	r3, [r3, #10]
 8006aee:	461a      	mov	r2, r3
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	899b      	ldrh	r3, [r3, #12]
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006afa:	e019      	b.n	8006b30 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6979      	ldr	r1, [r7, #20]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fc9a 	bl	800643a <get_fat>
 8006b06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	d101      	bne.n	8006b14 <dir_sdi+0x90>
 8006b10:	2301      	movs	r3, #1
 8006b12:	e03c      	b.n	8006b8e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d904      	bls.n	8006b24 <dir_sdi+0xa0>
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d301      	bcc.n	8006b28 <dir_sdi+0xa4>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e032      	b.n	8006b8e <dir_sdi+0x10a>
			ofs -= csz;
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d2e1      	bcs.n	8006afc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006b38:	6979      	ldr	r1, [r7, #20]
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f7ff fc5e 	bl	80063fc <clust2sect>
 8006b40:	4602      	mov	r2, r0
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <dir_sdi+0xd4>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e01a      	b.n	8006b8e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	899b      	ldrh	r3, [r3, #12]
 8006b60:	4619      	mov	r1, r3
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b68:	441a      	add	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	899b      	ldrh	r3, [r3, #12]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b80:	fb00 f202 	mul.w	r2, r0, r2
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	18ca      	adds	r2, r1, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b086      	sub	sp, #24
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	3320      	adds	r3, #32
 8006bac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <dir_next+0x28>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bbc:	d301      	bcc.n	8006bc2 <dir_next+0x2c>
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	e0bb      	b.n	8006d3a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	899b      	ldrh	r3, [r3, #12]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bce:	fb01 f202 	mul.w	r2, r1, r2
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f040 809d 	bne.w	8006d14 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10b      	bne.n	8006c04 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	8912      	ldrh	r2, [r2, #8]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	f0c0 808d 	bcc.w	8006d14 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	61da      	str	r2, [r3, #28]
 8006c00:	2304      	movs	r3, #4
 8006c02:	e09a      	b.n	8006d3a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	899b      	ldrh	r3, [r3, #12]
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	8952      	ldrh	r2, [r2, #10]
 8006c14:	3a01      	subs	r2, #1
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d17b      	bne.n	8006d14 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7ff fc08 	bl	800643a <get_fat>
 8006c2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d801      	bhi.n	8006c36 <dir_next+0xa0>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e081      	b.n	8006d3a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3c:	d101      	bne.n	8006c42 <dir_next+0xac>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07b      	b.n	8006d3a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d359      	bcc.n	8006d00 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	61da      	str	r2, [r3, #28]
 8006c58:	2304      	movs	r3, #4
 8006c5a:	e06e      	b.n	8006d3a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f7ff fe3d 	bl	80068e4 <create_chain>
 8006c6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <dir_next+0xe0>
 8006c72:	2307      	movs	r3, #7
 8006c74:	e061      	b.n	8006d3a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d101      	bne.n	8006c80 <dir_next+0xea>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e05c      	b.n	8006d3a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d101      	bne.n	8006c8c <dir_next+0xf6>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e056      	b.n	8006d3a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff fad3 	bl	8006238 <sync_window>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <dir_next+0x106>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e04e      	b.n	8006d3a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	899b      	ldrh	r3, [r3, #12]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2100      	movs	r1, #0
 8006caa:	f7ff f8fc 	bl	8005ea6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	6979      	ldr	r1, [r7, #20]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fba1 	bl	80063fc <clust2sect>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8006cc0:	e012      	b.n	8006ce8 <dir_next+0x152>
						fs->wflag = 1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7ff fab5 	bl	8006238 <sync_window>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <dir_next+0x142>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e030      	b.n	8006d3a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	895b      	ldrh	r3, [r3, #10]
 8006cec:	461a      	mov	r2, r3
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d3e6      	bcc.n	8006cc2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad2      	subs	r2, r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d06:	6979      	ldr	r1, [r7, #20]
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f7ff fb77 	bl	80063fc <clust2sect>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	899b      	ldrh	r3, [r3, #12]
 8006d24:	461a      	mov	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d2c:	fb00 f202 	mul.w	r2, r0, r2
 8006d30:	1a9b      	subs	r3, r3, r2
 8006d32:	18ca      	adds	r2, r1, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b086      	sub	sp, #24
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d52:	2100      	movs	r1, #0
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f7ff fe95 	bl	8006a84 <dir_sdi>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d12b      	bne.n	8006dbc <dir_alloc+0x7a>
		n = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	69db      	ldr	r3, [r3, #28]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f7ff faa6 	bl	80062c0 <move_window>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d11d      	bne.n	8006dba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2be5      	cmp	r3, #229	; 0xe5
 8006d86:	d004      	beq.n	8006d92 <dir_alloc+0x50>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d107      	bne.n	8006da2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	3301      	adds	r3, #1
 8006d96:	613b      	str	r3, [r7, #16]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d102      	bne.n	8006da6 <dir_alloc+0x64>
 8006da0:	e00c      	b.n	8006dbc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006da6:	2101      	movs	r1, #1
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fef4 	bl	8006b96 <dir_next>
 8006dae:	4603      	mov	r3, r0
 8006db0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0d7      	beq.n	8006d68 <dir_alloc+0x26>
 8006db8:	e000      	b.n	8006dbc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d101      	bne.n	8006dc6 <dir_alloc+0x84>
 8006dc2:	2307      	movs	r3, #7
 8006dc4:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	331a      	adds	r3, #26
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe ffbe 	bl	8005d60 <ld_word>
 8006de4:	4603      	mov	r3, r0
 8006de6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d109      	bne.n	8006e04 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	3314      	adds	r3, #20
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe ffb3 	bl	8005d60 <ld_word>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	041b      	lsls	r3, r3, #16
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e04:	68fb      	ldr	r3, [r7, #12]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	331a      	adds	r3, #26
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	b292      	uxth	r2, r2
 8006e22:	4611      	mov	r1, r2
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe ffd6 	bl	8005dd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d109      	bne.n	8006e46 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f103 0214 	add.w	r2, r3, #20
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	0c1b      	lsrs	r3, r3, #16
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4610      	mov	r0, r2
 8006e42:	f7fe ffc8 	bl	8005dd6 <st_word>
	}
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	331a      	adds	r3, #26
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe ff7e 	bl	8005d60 <ld_word>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <cmp_lfn+0x1e>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e059      	b.n	8006f22 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e84:	2301      	movs	r3, #1
 8006e86:	81fb      	strh	r3, [r7, #14]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e033      	b.n	8006ef6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e8e:	4a27      	ldr	r2, [pc, #156]	; (8006f2c <cmp_lfn+0xdc>)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe ff5f 	bl	8005d60 <ld_word>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006ea6:	89fb      	ldrh	r3, [r7, #14]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01a      	beq.n	8006ee2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2bfe      	cmp	r3, #254	; 0xfe
 8006eb0:	d812      	bhi.n	8006ed8 <cmp_lfn+0x88>
 8006eb2:	89bb      	ldrh	r3, [r7, #12]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fe2b 	bl	8005b10 <ff_wtoupper>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461c      	mov	r4, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	617a      	str	r2, [r7, #20]
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fe1f 	bl	8005b10 <ff_wtoupper>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d001      	beq.n	8006edc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e022      	b.n	8006f22 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006edc:	89bb      	ldrh	r3, [r7, #12]
 8006ede:	81fb      	strh	r3, [r7, #14]
 8006ee0:	e006      	b.n	8006ef0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ee2:	89bb      	ldrh	r3, [r7, #12]
 8006ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d001      	beq.n	8006ef0 <cmp_lfn+0xa0>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e018      	b.n	8006f22 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d9c8      	bls.n	8006e8e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <cmp_lfn+0xd0>
 8006f08:	89fb      	ldrh	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <cmp_lfn+0xd0>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <cmp_lfn+0xd0>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd90      	pop	{r4, r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	0800a48c 	.word	0x0800a48c

08006f30 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	460b      	mov	r3, r1
 8006f40:	71fb      	strb	r3, [r7, #7]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	330d      	adds	r3, #13
 8006f4a:	79ba      	ldrb	r2, [r7, #6]
 8006f4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	330b      	adds	r3, #11
 8006f52:	220f      	movs	r2, #15
 8006f54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	331a      	adds	r3, #26
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe ff36 	bl	8005dd6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	4613      	mov	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	82fb      	strh	r3, [r7, #22]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006f82:	8afb      	ldrh	r3, [r7, #22]
 8006f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <put_lfn+0x6c>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	61fa      	str	r2, [r7, #28]
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006f9c:	4a17      	ldr	r2, [pc, #92]	; (8006ffc <put_lfn+0xcc>)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	8afa      	ldrh	r2, [r7, #22]
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe ff11 	bl	8005dd6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006fb4:	8afb      	ldrh	r3, [r7, #22]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <put_lfn+0x90>
 8006fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fbe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b0c      	cmp	r3, #12
 8006fca:	d9da      	bls.n	8006f82 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006fcc:	8afb      	ldrh	r3, [r7, #22]
 8006fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d006      	beq.n	8006fe4 <put_lfn+0xb4>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <put_lfn+0xbc>
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	79fa      	ldrb	r2, [r7, #7]
 8006ff0:	701a      	strb	r2, [r3, #0]
}
 8006ff2:	bf00      	nop
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	0800a48c 	.word	0x0800a48c

08007000 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	; 0x30
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800700e:	220b      	movs	r2, #11
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7fe ff26 	bl	8005e64 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d92b      	bls.n	8007076 <gen_numname+0x76>
		sr = seq;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007022:	e022      	b.n	800706a <gen_numname+0x6a>
			wc = *lfn++;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1c9a      	adds	r2, r3, #2
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800702e:	2300      	movs	r3, #0
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
 8007032:	e017      	b.n	8007064 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	005a      	lsls	r2, r3, #1
 8007038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	4413      	add	r3, r2
 8007040:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <gen_numname+0x5e>
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007058:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800705c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	3301      	adds	r3, #1
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d9e4      	bls.n	8007034 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d8      	bne.n	8007024 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007076:	2307      	movs	r3, #7
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	b2db      	uxtb	r3, r3
 8007084:	3330      	adds	r3, #48	; 0x30
 8007086:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800708a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800708e:	2b39      	cmp	r3, #57	; 0x39
 8007090:	d904      	bls.n	800709c <gen_numname+0x9c>
 8007092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007096:	3307      	adds	r3, #7
 8007098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80070a2:	3330      	adds	r3, #48	; 0x30
 80070a4:	443b      	add	r3, r7
 80070a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80070aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1df      	bne.n	800707a <gen_numname+0x7a>
	ns[i] = '~';
 80070ba:	f107 0214 	add.w	r2, r7, #20
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	4413      	add	r3, r2
 80070c2:	227e      	movs	r2, #126	; 0x7e
 80070c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ca:	e002      	b.n	80070d2 <gen_numname+0xd2>
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	3301      	adds	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
 80070d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d205      	bcs.n	80070e6 <gen_numname+0xe6>
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	4413      	add	r3, r2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d1f2      	bne.n	80070cc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	2b07      	cmp	r3, #7
 80070ea:	d807      	bhi.n	80070fc <gen_numname+0xfc>
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80070f2:	3330      	adds	r3, #48	; 0x30
 80070f4:	443b      	add	r3, r7
 80070f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80070fa:	e000      	b.n	80070fe <gen_numname+0xfe>
 80070fc:	2120      	movs	r1, #32
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	627a      	str	r2, [r7, #36]	; 0x24
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	460a      	mov	r2, r1
 800710a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	2b07      	cmp	r3, #7
 8007110:	d9e9      	bls.n	80070e6 <gen_numname+0xe6>
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	3730      	adds	r7, #48	; 0x30
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007128:	230b      	movs	r3, #11
 800712a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	0852      	lsrs	r2, r2, #1
 8007132:	01db      	lsls	r3, r3, #7
 8007134:	4313      	orrs	r3, r2
 8007136:	b2da      	uxtb	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	6079      	str	r1, [r7, #4]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4413      	add	r3, r2
 8007142:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ed      	bne.n	800712c <sum_sfn+0x10>
	return sum;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b086      	sub	sp, #24
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800716c:	2100      	movs	r1, #0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fc88 	bl	8006a84 <dir_sdi>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <dir_find+0x24>
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	e0a9      	b.n	80072d6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007182:	23ff      	movs	r3, #255	; 0xff
 8007184:	753b      	strb	r3, [r7, #20]
 8007186:	7d3b      	ldrb	r3, [r7, #20]
 8007188:	757b      	strb	r3, [r7, #21]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	4619      	mov	r1, r3
 8007198:	6938      	ldr	r0, [r7, #16]
 800719a:	f7ff f891 	bl	80062c0 <move_window>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 8090 	bne.w	80072ca <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80071b2:	7dbb      	ldrb	r3, [r7, #22]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <dir_find+0x60>
 80071b8:	2304      	movs	r3, #4
 80071ba:	75fb      	strb	r3, [r7, #23]
 80071bc:	e08a      	b.n	80072d4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	330b      	adds	r3, #11
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ca:	73fb      	strb	r3, [r7, #15]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80071d2:	7dbb      	ldrb	r3, [r7, #22]
 80071d4:	2be5      	cmp	r3, #229	; 0xe5
 80071d6:	d007      	beq.n	80071e8 <dir_find+0x8a>
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <dir_find+0x98>
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d006      	beq.n	80071f6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80071e8:	23ff      	movs	r3, #255	; 0xff
 80071ea:	757b      	strb	r3, [r7, #21]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
 80071f4:	e05e      	b.n	80072b4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2b0f      	cmp	r3, #15
 80071fa:	d136      	bne.n	800726a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d154      	bne.n	80072b4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800720a:	7dbb      	ldrb	r3, [r7, #22]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	7b5b      	ldrb	r3, [r3, #13]
 800721a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800721c:	7dbb      	ldrb	r3, [r7, #22]
 800721e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007222:	75bb      	strb	r3, [r7, #22]
 8007224:	7dbb      	ldrb	r3, [r7, #22]
 8007226:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007230:	7dba      	ldrb	r2, [r7, #22]
 8007232:	7d7b      	ldrb	r3, [r7, #21]
 8007234:	429a      	cmp	r2, r3
 8007236:	d115      	bne.n	8007264 <dir_find+0x106>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	330d      	adds	r3, #13
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	7d3a      	ldrb	r2, [r7, #20]
 8007242:	429a      	cmp	r2, r3
 8007244:	d10e      	bne.n	8007264 <dir_find+0x106>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7ff fdfd 	bl	8006e50 <cmp_lfn>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <dir_find+0x106>
 800725c:	7d7b      	ldrb	r3, [r7, #21]
 800725e:	3b01      	subs	r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	e000      	b.n	8007266 <dir_find+0x108>
 8007264:	23ff      	movs	r3, #255	; 0xff
 8007266:	757b      	strb	r3, [r7, #21]
 8007268:	e024      	b.n	80072b4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800726a:	7d7b      	ldrb	r3, [r7, #21]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <dir_find+0x126>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ff51 	bl	800711c <sum_sfn>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	7d3b      	ldrb	r3, [r7, #20]
 8007280:	4293      	cmp	r3, r2
 8007282:	d024      	beq.n	80072ce <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <dir_find+0x14a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a18      	ldr	r0, [r3, #32]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3324      	adds	r3, #36	; 0x24
 800729a:	220b      	movs	r2, #11
 800729c:	4619      	mov	r1, r3
 800729e:	f7fe fe1d 	bl	8005edc <mem_cmp>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d014      	beq.n	80072d2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072a8:	23ff      	movs	r3, #255	; 0xff
 80072aa:	757b      	strb	r3, [r7, #21]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f04f 32ff 	mov.w	r2, #4294967295
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fc6d 	bl	8006b96 <dir_next>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f43f af65 	beq.w	8007192 <dir_find+0x34>
 80072c8:	e004      	b.n	80072d4 <dir_find+0x176>
		if (res != FR_OK) break;
 80072ca:	bf00      	nop
 80072cc:	e002      	b.n	80072d4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072d2:	bf00      	nop

	return res;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	; 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <dir_register+0x20>
 80072fc:	2306      	movs	r3, #6
 80072fe:	e0e0      	b.n	80074c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007300:	2300      	movs	r3, #0
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
 8007304:	e002      	b.n	800730c <dir_register+0x2c>
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	3301      	adds	r3, #1
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f4      	bne.n	8007306 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	220c      	movs	r2, #12
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fd9b 	bl	8005e64 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d032      	beq.n	800739e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2240      	movs	r2, #64	; 0x40
 800733c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007340:	2301      	movs	r3, #1
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28
 8007344:	e016      	b.n	8007374 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	f107 010c 	add.w	r1, r7, #12
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	f7ff fe53 	bl	8007000 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff feff 	bl	800715e <dir_find>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	3301      	adds	r3, #1
 8007372:	62bb      	str	r3, [r7, #40]	; 0x28
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	2b63      	cmp	r3, #99	; 0x63
 8007378:	d9e5      	bls.n	8007346 <dir_register+0x66>
 800737a:	e000      	b.n	800737e <dir_register+0x9e>
			if (res != FR_OK) break;
 800737c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	2b64      	cmp	r3, #100	; 0x64
 8007382:	d101      	bne.n	8007388 <dir_register+0xa8>
 8007384:	2307      	movs	r3, #7
 8007386:	e09c      	b.n	80074c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800738c:	2b04      	cmp	r3, #4
 800738e:	d002      	beq.n	8007396 <dir_register+0xb6>
 8007390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007394:	e095      	b.n	80074c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007396:	7dfa      	ldrb	r2, [r7, #23]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <dir_register+0xd8>
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	330c      	adds	r3, #12
 80073ac:	4a47      	ldr	r2, [pc, #284]	; (80074cc <dir_register+0x1ec>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	089b      	lsrs	r3, r3, #2
 80073b4:	3301      	adds	r3, #1
 80073b6:	e000      	b.n	80073ba <dir_register+0xda>
 80073b8:	2301      	movs	r3, #1
 80073ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80073bc:	6a39      	ldr	r1, [r7, #32]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fcbf 	bl	8006d42 <dir_alloc>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80073ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d148      	bne.n	8007464 <dir_register+0x184>
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	623b      	str	r3, [r7, #32]
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d042      	beq.n	8007464 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	015b      	lsls	r3, r3, #5
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fb4a 	bl	8006a84 <dir_sdi>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80073f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d132      	bne.n	8007464 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3324      	adds	r3, #36	; 0x24
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fe8a 	bl	800711c <sum_sfn>
 8007408:	4603      	mov	r3, r0
 800740a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	4619      	mov	r1, r3
 8007412:	69f8      	ldr	r0, [r7, #28]
 8007414:	f7fe ff54 	bl	80062c0 <move_window>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800741e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	6918      	ldr	r0, [r3, #16]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a19      	ldr	r1, [r3, #32]
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	7efb      	ldrb	r3, [r7, #27]
 8007434:	f7ff fd7c 	bl	8006f30 <put_lfn>
				fs->wflag = 1;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2201      	movs	r2, #1
 800743c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fba8 	bl	8006b96 <dir_next>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800744c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007450:	2b00      	cmp	r3, #0
 8007452:	d107      	bne.n	8007464 <dir_register+0x184>
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	3b01      	subs	r3, #1
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1d5      	bne.n	800740c <dir_register+0x12c>
 8007460:	e000      	b.n	8007464 <dir_register+0x184>
				if (res != FR_OK) break;
 8007462:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007468:	2b00      	cmp	r3, #0
 800746a:	d128      	bne.n	80074be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	4619      	mov	r1, r3
 8007472:	69f8      	ldr	r0, [r7, #28]
 8007474:	f7fe ff24 	bl	80062c0 <move_window>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800747e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007482:	2b00      	cmp	r3, #0
 8007484:	d11b      	bne.n	80074be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	2220      	movs	r2, #32
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fd09 	bl	8005ea6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a18      	ldr	r0, [r3, #32]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3324      	adds	r3, #36	; 0x24
 800749c:	220b      	movs	r2, #11
 800749e:	4619      	mov	r1, r3
 80074a0:	f7fe fce0 	bl	8005e64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	330c      	adds	r3, #12
 80074b0:	f002 0218 	and.w	r2, r2, #24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2201      	movs	r2, #1
 80074bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80074be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3730      	adds	r7, #48	; 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	4ec4ec4f 	.word	0x4ec4ec4f

080074d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	61ba      	str	r2, [r7, #24]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4413      	add	r3, r2
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80074fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007500:	2b1f      	cmp	r3, #31
 8007502:	d940      	bls.n	8007586 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007506:	2b2f      	cmp	r3, #47	; 0x2f
 8007508:	d006      	beq.n	8007518 <create_name+0x48>
 800750a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800750c:	2b5c      	cmp	r3, #92	; 0x5c
 800750e:	d110      	bne.n	8007532 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007510:	e002      	b.n	8007518 <create_name+0x48>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	3301      	adds	r3, #1
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	4413      	add	r3, r2
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b2f      	cmp	r3, #47	; 0x2f
 8007522:	d0f6      	beq.n	8007512 <create_name+0x42>
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b5c      	cmp	r3, #92	; 0x5c
 800752e:	d0f0      	beq.n	8007512 <create_name+0x42>
			break;
 8007530:	e02a      	b.n	8007588 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2bfe      	cmp	r3, #254	; 0xfe
 8007536:	d901      	bls.n	800753c <create_name+0x6c>
 8007538:	2306      	movs	r3, #6
 800753a:	e17d      	b.n	8007838 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800753c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800753e:	b2db      	uxtb	r3, r3
 8007540:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007544:	2101      	movs	r1, #1
 8007546:	4618      	mov	r0, r3
 8007548:	f7fe faa6 	bl	8005a98 <ff_convert>
 800754c:	4603      	mov	r3, r0
 800754e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007550:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <create_name+0x8a>
 8007556:	2306      	movs	r3, #6
 8007558:	e16e      	b.n	8007838 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800755a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800755c:	2b7f      	cmp	r3, #127	; 0x7f
 800755e:	d809      	bhi.n	8007574 <create_name+0xa4>
 8007560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007562:	4619      	mov	r1, r3
 8007564:	488d      	ldr	r0, [pc, #564]	; (800779c <create_name+0x2cc>)
 8007566:	f7fe fce0 	bl	8005f2a <chk_chr>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <create_name+0xa4>
 8007570:	2306      	movs	r3, #6
 8007572:	e161      	b.n	8007838 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	617a      	str	r2, [r7, #20]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007582:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007584:	e7b4      	b.n	80074f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007586:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	441a      	add	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007594:	2b1f      	cmp	r3, #31
 8007596:	d801      	bhi.n	800759c <create_name+0xcc>
 8007598:	2304      	movs	r3, #4
 800759a:	e000      	b.n	800759e <create_name+0xce>
 800759c:	2300      	movs	r3, #0
 800759e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80075a2:	e011      	b.n	80075c8 <create_name+0xf8>
		w = lfn[di - 1];
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80075aa:	3b01      	subs	r3, #1
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80075b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d002      	beq.n	80075c2 <create_name+0xf2>
 80075bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075be:	2b2e      	cmp	r3, #46	; 0x2e
 80075c0:	d106      	bne.n	80075d0 <create_name+0x100>
		di--;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1ea      	bne.n	80075a4 <create_name+0xd4>
 80075ce:	e000      	b.n	80075d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80075d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <create_name+0x118>
 80075e4:	2306      	movs	r3, #6
 80075e6:	e127      	b.n	8007838 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3324      	adds	r3, #36	; 0x24
 80075ec:	220b      	movs	r2, #11
 80075ee:	2120      	movs	r1, #32
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fc58 	bl	8005ea6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e002      	b.n	8007602 <create_name+0x132>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	3301      	adds	r3, #1
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	2b20      	cmp	r3, #32
 800760e:	d0f5      	beq.n	80075fc <create_name+0x12c>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	2b2e      	cmp	r3, #46	; 0x2e
 800761c:	d0ee      	beq.n	80075fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d009      	beq.n	8007638 <create_name+0x168>
 8007624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007628:	f043 0303 	orr.w	r3, r3, #3
 800762c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007630:	e002      	b.n	8007638 <create_name+0x168>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3b01      	subs	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <create_name+0x182>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007644:	3b01      	subs	r3, #1
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	2b2e      	cmp	r3, #46	; 0x2e
 8007650:	d1ef      	bne.n	8007632 <create_name+0x162>

	i = b = 0; ni = 8;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007658:	2300      	movs	r3, #0
 800765a:	623b      	str	r3, [r7, #32]
 800765c:	2308      	movs	r3, #8
 800765e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	61ba      	str	r2, [r7, #24]
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8090 	beq.w	8007798 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800767a:	2b20      	cmp	r3, #32
 800767c:	d006      	beq.n	800768c <create_name+0x1bc>
 800767e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007680:	2b2e      	cmp	r3, #46	; 0x2e
 8007682:	d10a      	bne.n	800769a <create_name+0x1ca>
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	429a      	cmp	r2, r3
 800768a:	d006      	beq.n	800769a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800768c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007690:	f043 0303 	orr.w	r3, r3, #3
 8007694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007698:	e07d      	b.n	8007796 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d203      	bcs.n	80076aa <create_name+0x1da>
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d123      	bne.n	80076f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	2b0b      	cmp	r3, #11
 80076ae:	d106      	bne.n	80076be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80076b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076b4:	f043 0303 	orr.w	r3, r3, #3
 80076b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80076bc:	e075      	b.n	80077aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d005      	beq.n	80076d2 <create_name+0x202>
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ca:	f043 0303 	orr.w	r3, r3, #3
 80076ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d866      	bhi.n	80077a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	2308      	movs	r3, #8
 80076e0:	623b      	str	r3, [r7, #32]
 80076e2:	230b      	movs	r3, #11
 80076e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80076e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80076f0:	e051      	b.n	8007796 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80076f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076f4:	2b7f      	cmp	r3, #127	; 0x7f
 80076f6:	d914      	bls.n	8007722 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80076f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe f9cb 	bl	8005a98 <ff_convert>
 8007702:	4603      	mov	r3, r0
 8007704:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007706:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <create_name+0x246>
 800770c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800770e:	3b80      	subs	r3, #128	; 0x80
 8007710:	4a23      	ldr	r2, [pc, #140]	; (80077a0 <create_name+0x2d0>)
 8007712:	5cd3      	ldrb	r3, [r2, r3]
 8007714:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800771a:	f043 0302 	orr.w	r3, r3, #2
 800771e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <create_name+0x268>
 8007728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800772a:	4619      	mov	r1, r3
 800772c:	481d      	ldr	r0, [pc, #116]	; (80077a4 <create_name+0x2d4>)
 800772e:	f7fe fbfc 	bl	8005f2a <chk_chr>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007738:	235f      	movs	r3, #95	; 0x5f
 800773a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800773c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007740:	f043 0303 	orr.w	r3, r3, #3
 8007744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007748:	e01b      	b.n	8007782 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800774a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d909      	bls.n	8007764 <create_name+0x294>
 8007750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007752:	2b5a      	cmp	r3, #90	; 0x5a
 8007754:	d806      	bhi.n	8007764 <create_name+0x294>
					b |= 2;
 8007756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800775a:	f043 0302 	orr.w	r3, r3, #2
 800775e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007762:	e00e      	b.n	8007782 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007766:	2b60      	cmp	r3, #96	; 0x60
 8007768:	d90b      	bls.n	8007782 <create_name+0x2b2>
 800776a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776c:	2b7a      	cmp	r3, #122	; 0x7a
 800776e:	d808      	bhi.n	8007782 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800777c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800777e:	3b20      	subs	r3, #32
 8007780:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	623a      	str	r2, [r7, #32]
 8007788:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800778a:	b2d1      	uxtb	r1, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	460a      	mov	r2, r1
 8007792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007796:	e763      	b.n	8007660 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007798:	bf00      	nop
 800779a:	e006      	b.n	80077aa <create_name+0x2da>
 800779c:	08009890 	.word	0x08009890
 80077a0:	0800a40c 	.word	0x0800a40c
 80077a4:	0800989c 	.word	0x0800989c
			if (si > di) break;			/* No extension */
 80077a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077b0:	2be5      	cmp	r3, #229	; 0xe5
 80077b2:	d103      	bne.n	80077bc <create_name+0x2ec>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2205      	movs	r2, #5
 80077b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d104      	bne.n	80077cc <create_name+0x2fc>
 80077c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80077cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077d0:	f003 030c 	and.w	r3, r3, #12
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d005      	beq.n	80077e4 <create_name+0x314>
 80077d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d105      	bne.n	80077f0 <create_name+0x320>
 80077e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077e8:	f043 0302 	orr.w	r3, r3, #2
 80077ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80077f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d117      	bne.n	800782c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80077fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <create_name+0x344>
 8007808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800780c:	f043 0310 	orr.w	r3, r3, #16
 8007810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007814:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007818:	f003 030c 	and.w	r3, r3, #12
 800781c:	2b04      	cmp	r3, #4
 800781e:	d105      	bne.n	800782c <create_name+0x35c>
 8007820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007824:	f043 0308 	orr.w	r3, r3, #8
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007832:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007836:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	; 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007854:	e002      	b.n	800785c <follow_path+0x1c>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b2f      	cmp	r3, #47	; 0x2f
 8007862:	d0f8      	beq.n	8007856 <follow_path+0x16>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b5c      	cmp	r3, #92	; 0x5c
 800786a:	d0f4      	beq.n	8007856 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b1f      	cmp	r3, #31
 8007878:	d80a      	bhi.n	8007890 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2280      	movs	r2, #128	; 0x80
 800787e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff f8fd 	bl	8006a84 <dir_sdi>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
 800788e:	e048      	b.n	8007922 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007890:	463b      	mov	r3, r7
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff fe1b 	bl	80074d0 <create_name>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d139      	bne.n	8007918 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fc5a 	bl	800715e <dir_find>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d12c      	bne.n	800791c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d127      	bne.n	800791c <follow_path+0xdc>
 80078cc:	2305      	movs	r3, #5
 80078ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80078d0:	e024      	b.n	800791c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d121      	bne.n	8007920 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	799b      	ldrb	r3, [r3, #6]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80078e8:	2305      	movs	r3, #5
 80078ea:	75fb      	strb	r3, [r7, #23]
 80078ec:	e019      	b.n	8007922 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	8992      	ldrh	r2, [r2, #12]
 80078fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007900:	fb00 f202 	mul.w	r2, r0, r2
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	440b      	add	r3, r1
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7ff fa60 	bl	8006dd0 <ld_clust>
 8007910:	4602      	mov	r2, r0
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007916:	e7bb      	b.n	8007890 <follow_path+0x50>
			if (res != FR_OK) break;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <follow_path+0xe2>
				break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007920:	bf00      	nop
			}
		}
	}

	return res;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295
 8007938:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d031      	beq.n	80079a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e002      	b.n	8007950 <get_ldnumber+0x24>
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3301      	adds	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b1f      	cmp	r3, #31
 8007956:	d903      	bls.n	8007960 <get_ldnumber+0x34>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b3a      	cmp	r3, #58	; 0x3a
 800795e:	d1f4      	bne.n	800794a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b3a      	cmp	r3, #58	; 0x3a
 8007966:	d11c      	bne.n	80079a2 <get_ldnumber+0x76>
			tp = *path;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	60fa      	str	r2, [r7, #12]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	3b30      	subs	r3, #48	; 0x30
 8007978:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b09      	cmp	r3, #9
 800797e:	d80e      	bhi.n	800799e <get_ldnumber+0x72>
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	429a      	cmp	r2, r3
 8007986:	d10a      	bne.n	800799e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d107      	bne.n	800799e <get_ldnumber+0x72>
					vol = (int)i;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	3301      	adds	r3, #1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	e002      	b.n	80079a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80079a6:	693b      	ldr	r3, [r7, #16]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	70da      	strb	r2, [r3, #3]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ca:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fe fc76 	bl	80062c0 <move_window>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <check_fs+0x2a>
 80079da:	2304      	movs	r3, #4
 80079dc:	e038      	b.n	8007a50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3338      	adds	r3, #56	; 0x38
 80079e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe f9ba 	bl	8005d60 <ld_word>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <check_fs+0x48>
 80079f8:	2303      	movs	r3, #3
 80079fa:	e029      	b.n	8007a50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a02:	2be9      	cmp	r3, #233	; 0xe9
 8007a04:	d009      	beq.n	8007a1a <check_fs+0x66>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a0c:	2beb      	cmp	r3, #235	; 0xeb
 8007a0e:	d11e      	bne.n	8007a4e <check_fs+0x9a>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a16:	2b90      	cmp	r3, #144	; 0x90
 8007a18:	d119      	bne.n	8007a4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3338      	adds	r3, #56	; 0x38
 8007a1e:	3336      	adds	r3, #54	; 0x36
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe f9b5 	bl	8005d90 <ld_dword>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a2c:	4a0a      	ldr	r2, [pc, #40]	; (8007a58 <check_fs+0xa4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d101      	bne.n	8007a36 <check_fs+0x82>
 8007a32:	2300      	movs	r3, #0
 8007a34:	e00c      	b.n	8007a50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3338      	adds	r3, #56	; 0x38
 8007a3a:	3352      	adds	r3, #82	; 0x52
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe f9a7 	bl	8005d90 <ld_dword>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4a05      	ldr	r2, [pc, #20]	; (8007a5c <check_fs+0xa8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d101      	bne.n	8007a4e <check_fs+0x9a>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a4e:	2302      	movs	r3, #2
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	00544146 	.word	0x00544146
 8007a5c:	33544146 	.word	0x33544146

08007a60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b096      	sub	sp, #88	; 0x58
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff ff59 	bl	800792c <get_ldnumber>
 8007a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da01      	bge.n	8007a86 <find_volume+0x26>
 8007a82:	230b      	movs	r3, #11
 8007a84:	e265      	b.n	8007f52 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a86:	4a9f      	ldr	r2, [pc, #636]	; (8007d04 <find_volume+0x2a4>)
 8007a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <find_volume+0x3a>
 8007a96:	230c      	movs	r3, #12
 8007a98:	e25b      	b.n	8007f52 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01a      	beq.n	8007ae6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fe f8b5 	bl	8005c24 <disk_status>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ac0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <find_volume+0x82>
 8007ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007ade:	230a      	movs	r3, #10
 8007ae0:	e237      	b.n	8007f52 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e235      	b.n	8007f52 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe f8ad 	bl	8005c58 <disk_initialize>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b10:	2303      	movs	r3, #3
 8007b12:	e21e      	b.n	8007f52 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <find_volume+0xca>
 8007b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007b26:	230a      	movs	r3, #10
 8007b28:	e213      	b.n	8007f52 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2c:	7858      	ldrb	r0, [r3, #1]
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	330c      	adds	r3, #12
 8007b32:	461a      	mov	r2, r3
 8007b34:	2102      	movs	r1, #2
 8007b36:	f7fe f8f5 	bl	8005d24 <disk_ioctl>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <find_volume+0xe4>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e206      	b.n	8007f52 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b46:	899b      	ldrh	r3, [r3, #12]
 8007b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4c:	d80d      	bhi.n	8007b6a <find_volume+0x10a>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	899b      	ldrh	r3, [r3, #12]
 8007b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b56:	d308      	bcc.n	8007b6a <find_volume+0x10a>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	899b      	ldrh	r3, [r3, #12]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	899b      	ldrh	r3, [r3, #12]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <find_volume+0x10e>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1f1      	b.n	8007f52 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007b74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b76:	f7ff ff1d 	bl	80079b4 <check_fs>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d149      	bne.n	8007c1c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b88:	2300      	movs	r3, #0
 8007b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b8c:	e01e      	b.n	8007bcc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007b9c:	4413      	add	r3, r2
 8007b9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <find_volume+0x158>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	3308      	adds	r3, #8
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe f8ee 	bl	8005d90 <ld_dword>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	e000      	b.n	8007bba <find_volume+0x15a>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	3358      	adds	r3, #88	; 0x58
 8007bc0:	443b      	add	r3, r7
 8007bc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bc8:	3301      	adds	r3, #1
 8007bca:	643b      	str	r3, [r7, #64]	; 0x40
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d9dd      	bls.n	8007b8e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <find_volume+0x182>
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bde:	3b01      	subs	r3, #1
 8007be0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	3358      	adds	r3, #88	; 0x58
 8007be8:	443b      	add	r3, r7
 8007bea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007bee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <find_volume+0x1a2>
 8007bf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007bf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bfa:	f7ff fedb 	bl	80079b4 <check_fs>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	e000      	b.n	8007c04 <find_volume+0x1a4>
 8007c02:	2303      	movs	r3, #3
 8007c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d905      	bls.n	8007c1c <find_volume+0x1bc>
 8007c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c12:	3301      	adds	r3, #1
 8007c14:	643b      	str	r3, [r7, #64]	; 0x40
 8007c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d9e2      	bls.n	8007be2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d101      	bne.n	8007c28 <find_volume+0x1c8>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e194      	b.n	8007f52 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d901      	bls.n	8007c34 <find_volume+0x1d4>
 8007c30:	230d      	movs	r3, #13
 8007c32:	e18e      	b.n	8007f52 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	3338      	adds	r3, #56	; 0x38
 8007c38:	330b      	adds	r3, #11
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe f890 	bl	8005d60 <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	899b      	ldrh	r3, [r3, #12]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d001      	beq.n	8007c50 <find_volume+0x1f0>
 8007c4c:	230d      	movs	r3, #13
 8007c4e:	e180      	b.n	8007f52 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	3338      	adds	r3, #56	; 0x38
 8007c54:	3316      	adds	r3, #22
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe f882 	bl	8005d60 <ld_word>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <find_volume+0x214>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	3338      	adds	r3, #56	; 0x38
 8007c6a:	3324      	adds	r3, #36	; 0x24
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe f88f 	bl	8005d90 <ld_dword>
 8007c72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c78:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	789b      	ldrb	r3, [r3, #2]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d005      	beq.n	8007c98 <find_volume+0x238>
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	789b      	ldrb	r3, [r3, #2]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d001      	beq.n	8007c98 <find_volume+0x238>
 8007c94:	230d      	movs	r3, #13
 8007c96:	e15c      	b.n	8007f52 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	789b      	ldrb	r3, [r3, #2]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	fb02 f303 	mul.w	r3, r2, r3
 8007ca4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	895b      	ldrh	r3, [r3, #10]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <find_volume+0x26c>
 8007cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbc:	895b      	ldrh	r3, [r3, #10]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	895b      	ldrh	r3, [r3, #10]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <find_volume+0x270>
 8007ccc:	230d      	movs	r3, #13
 8007cce:	e140      	b.n	8007f52 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	3338      	adds	r3, #56	; 0x38
 8007cd4:	3311      	adds	r3, #17
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe f842 	bl	8005d60 <ld_word>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	891b      	ldrh	r3, [r3, #8]
 8007ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cea:	8992      	ldrh	r2, [r2, #12]
 8007cec:	0952      	lsrs	r2, r2, #5
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf4:	fb01 f202 	mul.w	r2, r1, r2
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <find_volume+0x2a8>
 8007d00:	230d      	movs	r3, #13
 8007d02:	e126      	b.n	8007f52 <find_volume+0x4f2>
 8007d04:	200024d0 	.word	0x200024d0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0a:	3338      	adds	r3, #56	; 0x38
 8007d0c:	3313      	adds	r3, #19
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f826 	bl	8005d60 <ld_word>
 8007d14:	4603      	mov	r3, r0
 8007d16:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <find_volume+0x2cc>
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d20:	3338      	adds	r3, #56	; 0x38
 8007d22:	3320      	adds	r3, #32
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe f833 	bl	8005d90 <ld_dword>
 8007d2a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	3338      	adds	r3, #56	; 0x38
 8007d30:	330e      	adds	r3, #14
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe f814 	bl	8005d60 <ld_word>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <find_volume+0x2e6>
 8007d42:	230d      	movs	r3, #13
 8007d44:	e105      	b.n	8007f52 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d46:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4a:	4413      	add	r3, r2
 8007d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d4e:	8911      	ldrh	r1, [r2, #8]
 8007d50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d52:	8992      	ldrh	r2, [r2, #12]
 8007d54:	0952      	lsrs	r2, r2, #5
 8007d56:	b292      	uxth	r2, r2
 8007d58:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d5c:	b292      	uxth	r2, r2
 8007d5e:	4413      	add	r3, r2
 8007d60:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d201      	bcs.n	8007d6e <find_volume+0x30e>
 8007d6a:	230d      	movs	r3, #13
 8007d6c:	e0f1      	b.n	8007f52 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d76:	8952      	ldrh	r2, [r2, #10]
 8007d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <find_volume+0x328>
 8007d84:	230d      	movs	r3, #13
 8007d86:	e0e4      	b.n	8007f52 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d802      	bhi.n	8007d9e <find_volume+0x33e>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d802      	bhi.n	8007dae <find_volume+0x34e>
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db0:	1c9a      	adds	r2, r3, #2
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dba:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007dbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc0:	441a      	add	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	441a      	add	r2, r3
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d11e      	bne.n	8007e16 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	3338      	adds	r3, #56	; 0x38
 8007ddc:	332a      	adds	r3, #42	; 0x2a
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fd ffbe 	bl	8005d60 <ld_word>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <find_volume+0x38e>
 8007dea:	230d      	movs	r3, #13
 8007dec:	e0b1      	b.n	8007f52 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	891b      	ldrh	r3, [r3, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <find_volume+0x39a>
 8007df6:	230d      	movs	r3, #13
 8007df8:	e0ab      	b.n	8007f52 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	3338      	adds	r3, #56	; 0x38
 8007dfe:	332c      	adds	r3, #44	; 0x2c
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd ffc5 	bl	8005d90 <ld_dword>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	647b      	str	r3, [r7, #68]	; 0x44
 8007e14:	e01f      	b.n	8007e56 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	891b      	ldrh	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <find_volume+0x3c2>
 8007e1e:	230d      	movs	r3, #13
 8007e20:	e097      	b.n	8007f52 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e28:	441a      	add	r2, r3
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d103      	bne.n	8007e3e <find_volume+0x3de>
 8007e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	e00a      	b.n	8007e54 <find_volume+0x3f4>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	69da      	ldr	r2, [r3, #28]
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	085a      	lsrs	r2, r3, #1
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e54:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	6a1a      	ldr	r2, [r3, #32]
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	899b      	ldrh	r3, [r3, #12]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e62:	440b      	add	r3, r1
 8007e64:	3b01      	subs	r3, #1
 8007e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e68:	8989      	ldrh	r1, [r1, #12]
 8007e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d201      	bcs.n	8007e76 <find_volume+0x416>
 8007e72:	230d      	movs	r3, #13
 8007e74:	e06d      	b.n	8007f52 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	619a      	str	r2, [r3, #24]
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	2280      	movs	r2, #128	; 0x80
 8007e8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d149      	bne.n	8007f28 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	3338      	adds	r3, #56	; 0x38
 8007e98:	3330      	adds	r3, #48	; 0x30
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fd ff60 	bl	8005d60 <ld_word>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d140      	bne.n	8007f28 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eae:	f7fe fa07 	bl	80062c0 <move_window>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d137      	bne.n	8007f28 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	2200      	movs	r2, #0
 8007ebc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	3338      	adds	r3, #56	; 0x38
 8007ec2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd ff4a 	bl	8005d60 <ld_word>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d127      	bne.n	8007f28 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	3338      	adds	r3, #56	; 0x38
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd ff57 	bl	8005d90 <ld_dword>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	; (8007f5c <find_volume+0x4fc>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d11e      	bne.n	8007f28 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eec:	3338      	adds	r3, #56	; 0x38
 8007eee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd ff4c 	bl	8005d90 <ld_dword>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <find_volume+0x500>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d113      	bne.n	8007f28 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	3338      	adds	r3, #56	; 0x38
 8007f04:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fd ff41 	bl	8005d90 <ld_dword>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f12:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	3338      	adds	r3, #56	; 0x38
 8007f18:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd ff37 	bl	8005d90 <ld_dword>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007f2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007f30:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <find_volume+0x504>)
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	4b0a      	ldr	r3, [pc, #40]	; (8007f64 <find_volume+0x504>)
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <find_volume+0x504>)
 8007f3e:	881a      	ldrh	r2, [r3, #0]
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	4a08      	ldr	r2, [pc, #32]	; (8007f68 <find_volume+0x508>)
 8007f48:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f4c:	f7fe f950 	bl	80061f0 <clear_lock>
#endif
	return FR_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3758      	adds	r7, #88	; 0x58
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	41615252 	.word	0x41615252
 8007f60:	61417272 	.word	0x61417272
 8007f64:	200024d4 	.word	0x200024d4
 8007f68:	200024f8 	.word	0x200024f8

08007f6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f76:	2309      	movs	r3, #9
 8007f78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01c      	beq.n	8007fba <validate+0x4e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d018      	beq.n	8007fba <validate+0x4e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d013      	beq.n	8007fba <validate+0x4e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	889a      	ldrh	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	88db      	ldrh	r3, [r3, #6]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d10c      	bne.n	8007fba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fd fe3c 	bl	8005c24 <disk_status>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <validate+0x4e>
			res = FR_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <validate+0x5a>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	e000      	b.n	8007fc8 <validate+0x5c>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	6013      	str	r3, [r2, #0]
	return res;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fea:	f107 0310 	add.w	r3, r7, #16
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fc9c 	bl	800792c <get_ldnumber>
 8007ff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da01      	bge.n	8008000 <f_mount+0x28>
 8007ffc:	230b      	movs	r3, #11
 8007ffe:	e02b      	b.n	8008058 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008000:	4a17      	ldr	r2, [pc, #92]	; (8008060 <f_mount+0x88>)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008010:	69b8      	ldr	r0, [r7, #24]
 8008012:	f7fe f8ed 	bl	80061f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	490d      	ldr	r1, [pc, #52]	; (8008060 <f_mount+0x88>)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <f_mount+0x66>
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d001      	beq.n	8008042 <f_mount+0x6a>
 800803e:	2300      	movs	r3, #0
 8008040:	e00a      	b.n	8008058 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008042:	f107 010c 	add.w	r1, r7, #12
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	2200      	movs	r2, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fd07 	bl	8007a60 <find_volume>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008056:	7dfb      	ldrb	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200024d0 	.word	0x200024d0

08008064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b09a      	sub	sp, #104	; 0x68
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <f_open+0x18>
 8008078:	2309      	movs	r3, #9
 800807a:	e1bb      	b.n	80083f4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	f107 0114 	add.w	r1, r7, #20
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fce6 	bl	8007a60 <find_volume>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800809a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 819f 	bne.w	80083e2 <f_open+0x37e>
		dj.obj.fs = fs;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	f107 0318 	add.w	r3, r7, #24
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fbc5 	bl	8007840 <follow_path>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d11a      	bne.n	80080fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080c8:	b25b      	sxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da03      	bge.n	80080d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80080ce:	2306      	movs	r3, #6
 80080d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80080d4:	e011      	b.n	80080fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	f023 0301 	bic.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bf14      	ite	ne
 80080e0:	2301      	movne	r3, #1
 80080e2:	2300      	moveq	r3, #0
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	f107 0318 	add.w	r3, r7, #24
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd ff36 	bl	8005f60 <chk_lock>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	f003 031c 	and.w	r3, r3, #28
 8008100:	2b00      	cmp	r3, #0
 8008102:	d07f      	beq.n	8008204 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008104:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008108:	2b00      	cmp	r3, #0
 800810a:	d017      	beq.n	800813c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800810c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008110:	2b04      	cmp	r3, #4
 8008112:	d10e      	bne.n	8008132 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008114:	f7fd ff80 	bl	8006018 <enq_lock>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d006      	beq.n	800812c <f_open+0xc8>
 800811e:	f107 0318 	add.w	r3, r7, #24
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff f8dc 	bl	80072e0 <dir_register>
 8008128:	4603      	mov	r3, r0
 800812a:	e000      	b.n	800812e <f_open+0xca>
 800812c:	2312      	movs	r3, #18
 800812e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	f043 0308 	orr.w	r3, r3, #8
 8008138:	71fb      	strb	r3, [r7, #7]
 800813a:	e010      	b.n	800815e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800813c:	7fbb      	ldrb	r3, [r7, #30]
 800813e:	f003 0311 	and.w	r3, r3, #17
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <f_open+0xea>
					res = FR_DENIED;
 8008146:	2307      	movs	r3, #7
 8008148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800814c:	e007      	b.n	800815e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	f003 0304 	and.w	r3, r3, #4
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <f_open+0xfa>
 8008158:	2308      	movs	r3, #8
 800815a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800815e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008162:	2b00      	cmp	r3, #0
 8008164:	d168      	bne.n	8008238 <f_open+0x1d4>
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	f003 0308 	and.w	r3, r3, #8
 800816c:	2b00      	cmp	r3, #0
 800816e:	d063      	beq.n	8008238 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008170:	f7fd fc30 	bl	80059d4 <get_fattime>
 8008174:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	330e      	adds	r3, #14
 800817a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800817c:	4618      	mov	r0, r3
 800817e:	f7fd fe45 	bl	8005e0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	3316      	adds	r3, #22
 8008186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008188:	4618      	mov	r0, r3
 800818a:	f7fd fe3f 	bl	8005e0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	330b      	adds	r3, #11
 8008192:	2220      	movs	r2, #32
 8008194:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800819a:	4611      	mov	r1, r2
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fe17 	bl	8006dd0 <ld_clust>
 80081a2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081a8:	2200      	movs	r2, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fe2f 	bl	8006e0e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	331c      	adds	r3, #28
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fd fe28 	bl	8005e0c <st_dword>
					fs->wflag = 1;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2201      	movs	r2, #1
 80081c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d037      	beq.n	8008238 <f_open+0x1d4>
						dw = fs->winsect;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081cc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80081ce:	f107 0318 	add.w	r3, r7, #24
 80081d2:	2200      	movs	r2, #0
 80081d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fb1f 	bl	800681a <remove_chain>
 80081dc:	4603      	mov	r3, r0
 80081de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80081e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d126      	bne.n	8008238 <f_open+0x1d4>
							res = move_window(fs, dw);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe f866 	bl	80062c0 <move_window>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081fe:	3a01      	subs	r2, #1
 8008200:	615a      	str	r2, [r3, #20]
 8008202:	e019      	b.n	8008238 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008208:	2b00      	cmp	r3, #0
 800820a:	d115      	bne.n	8008238 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800820c:	7fbb      	ldrb	r3, [r7, #30]
 800820e:	f003 0310 	and.w	r3, r3, #16
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008216:	2304      	movs	r3, #4
 8008218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800821c:	e00c      	b.n	8008238 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d007      	beq.n	8008238 <f_open+0x1d4>
 8008228:	7fbb      	ldrb	r3, [r7, #30]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <f_open+0x1d4>
						res = FR_DENIED;
 8008232:	2307      	movs	r3, #7
 8008234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008238:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800823c:	2b00      	cmp	r3, #0
 800823e:	d128      	bne.n	8008292 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	f003 0308 	and.w	r3, r3, #8
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008250:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800825a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	bf14      	ite	ne
 800826a:	2301      	movne	r3, #1
 800826c:	2300      	moveq	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	f107 0318 	add.w	r3, r7, #24
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd feef 	bl	800605c <inc_lock>
 800827e:	4602      	mov	r2, r0
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d102      	bne.n	8008292 <f_open+0x22e>
 800828c:	2302      	movs	r3, #2
 800828e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008292:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 80a3 	bne.w	80083e2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082a0:	4611      	mov	r1, r2
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fe fd94 	bl	8006dd0 <ld_clust>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	331c      	adds	r3, #28
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fd fd6c 	bl	8005d90 <ld_dword>
 80082b8:	4602      	mov	r2, r0
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	88da      	ldrh	r2, [r3, #6]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	79fa      	ldrb	r2, [r7, #7]
 80082d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3330      	adds	r3, #48	; 0x30
 80082ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fd fdd6 	bl	8005ea6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	d06e      	beq.n	80083e2 <f_open+0x37e>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d06a      	beq.n	80083e2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	895b      	ldrh	r3, [r3, #10]
 8008318:	461a      	mov	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	899b      	ldrh	r3, [r3, #12]
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008330:	e016      	b.n	8008360 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008336:	4618      	mov	r0, r3
 8008338:	f7fe f87f 	bl	800643a <get_fat>
 800833c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800833e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008340:	2b01      	cmp	r3, #1
 8008342:	d802      	bhi.n	800834a <f_open+0x2e6>
 8008344:	2302      	movs	r3, #2
 8008346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800834a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008350:	d102      	bne.n	8008358 <f_open+0x2f4>
 8008352:	2301      	movs	r3, #1
 8008354:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008358:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800835a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008360:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <f_open+0x30c>
 8008368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800836a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836c:	429a      	cmp	r2, r3
 800836e:	d8e0      	bhi.n	8008332 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008374:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800837a:	2b00      	cmp	r3, #0
 800837c:	d131      	bne.n	80083e2 <f_open+0x37e>
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	899b      	ldrh	r3, [r3, #12]
 8008382:	461a      	mov	r2, r3
 8008384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008386:	fbb3 f1f2 	udiv	r1, r3, r2
 800838a:	fb01 f202 	mul.w	r2, r1, r2
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d026      	beq.n	80083e2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe f82f 	bl	80063fc <clust2sect>
 800839e:	64f8      	str	r0, [r7, #76]	; 0x4c
 80083a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d103      	bne.n	80083ae <f_open+0x34a>
						res = FR_INT_ERR;
 80083a6:	2302      	movs	r3, #2
 80083a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80083ac:	e019      	b.n	80083e2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	899b      	ldrh	r3, [r3, #12]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083bc:	441a      	add	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	7858      	ldrb	r0, [r3, #1]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	2301      	movs	r3, #1
 80083d2:	f7fd fc67 	bl	8005ca4 <disk_read>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <f_open+0x37e>
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80083e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <f_open+0x38c>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3768      	adds	r7, #104	; 0x68
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08c      	sub	sp, #48	; 0x30
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f107 0210 	add.w	r2, r7, #16
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff fda5 	bl	8007f6c <validate>
 8008422:	4603      	mov	r3, r0
 8008424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800842c:	2b00      	cmp	r3, #0
 800842e:	d107      	bne.n	8008440 <f_write+0x44>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	7d5b      	ldrb	r3, [r3, #21]
 8008434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d002      	beq.n	8008446 <f_write+0x4a>
 8008440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008444:	e16a      	b.n	800871c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	7d1b      	ldrb	r3, [r3, #20]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d101      	bne.n	8008456 <f_write+0x5a>
 8008452:	2307      	movs	r3, #7
 8008454:	e162      	b.n	800871c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	429a      	cmp	r2, r3
 8008464:	f080 814c 	bcs.w	8008700 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	43db      	mvns	r3, r3
 800846e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008470:	e146      	b.n	8008700 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	8992      	ldrh	r2, [r2, #12]
 800847a:	fbb3 f1f2 	udiv	r1, r3, r2
 800847e:	fb01 f202 	mul.w	r2, r1, r2
 8008482:	1a9b      	subs	r3, r3, r2
 8008484:	2b00      	cmp	r3, #0
 8008486:	f040 80f1 	bne.w	800866c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	8992      	ldrh	r2, [r2, #12]
 8008492:	fbb3 f3f2 	udiv	r3, r3, r2
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	8952      	ldrh	r2, [r2, #10]
 800849a:	3a01      	subs	r2, #1
 800849c:	4013      	ands	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d143      	bne.n	800852e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10c      	bne.n	80084c8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d11a      	bne.n	80084f0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2100      	movs	r1, #0
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe fa10 	bl	80068e4 <create_chain>
 80084c4:	62b8      	str	r0, [r7, #40]	; 0x28
 80084c6:	e013      	b.n	80084f0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	4619      	mov	r1, r3
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7fe fa9c 	bl	8006a14 <clmt_clust>
 80084dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80084de:	e007      	b.n	80084f0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	69db      	ldr	r3, [r3, #28]
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe f9fb 	bl	80068e4 <create_chain>
 80084ee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8109 	beq.w	800870a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d104      	bne.n	8008508 <f_write+0x10c>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2202      	movs	r2, #2
 8008502:	755a      	strb	r2, [r3, #21]
 8008504:	2302      	movs	r3, #2
 8008506:	e109      	b.n	800871c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d104      	bne.n	800851a <f_write+0x11e>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	755a      	strb	r2, [r3, #21]
 8008516:	2301      	movs	r3, #1
 8008518:	e100      	b.n	800871c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <f_write+0x132>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800852c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	7d1b      	ldrb	r3, [r3, #20]
 8008532:	b25b      	sxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	da18      	bge.n	800856a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	7858      	ldrb	r0, [r3, #1]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1a      	ldr	r2, [r3, #32]
 8008546:	2301      	movs	r3, #1
 8008548:	f7fd fbcc 	bl	8005ce4 <disk_write>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d004      	beq.n	800855c <f_write+0x160>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	755a      	strb	r2, [r3, #21]
 8008558:	2301      	movs	r3, #1
 800855a:	e0df      	b.n	800871c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	7d1b      	ldrb	r3, [r3, #20]
 8008560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008564:	b2da      	uxtb	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	4619      	mov	r1, r3
 8008572:	4610      	mov	r0, r2
 8008574:	f7fd ff42 	bl	80063fc <clust2sect>
 8008578:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <f_write+0x18e>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2202      	movs	r2, #2
 8008584:	755a      	strb	r2, [r3, #21]
 8008586:	2302      	movs	r3, #2
 8008588:	e0c8      	b.n	800871c <f_write+0x320>
			sect += csect;
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	4413      	add	r3, r2
 8008590:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	899b      	ldrh	r3, [r3, #12]
 8008596:	461a      	mov	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	fbb3 f3f2 	udiv	r3, r3, r2
 800859e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d043      	beq.n	800862e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	4413      	add	r3, r2
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	8952      	ldrh	r2, [r2, #10]
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d905      	bls.n	80085c0 <f_write+0x1c4>
					cc = fs->csize - csect;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	895b      	ldrh	r3, [r3, #10]
 80085b8:	461a      	mov	r2, r3
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	7858      	ldrb	r0, [r3, #1]
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	69f9      	ldr	r1, [r7, #28]
 80085ca:	f7fd fb8b 	bl	8005ce4 <disk_write>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d004      	beq.n	80085de <f_write+0x1e2>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	755a      	strb	r2, [r3, #21]
 80085da:	2301      	movs	r3, #1
 80085dc:	e09e      	b.n	800871c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6a1a      	ldr	r2, [r3, #32]
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	6a3a      	ldr	r2, [r7, #32]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d918      	bls.n	800861e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a1a      	ldr	r2, [r3, #32]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	8992      	ldrh	r2, [r2, #12]
 80085fe:	fb02 f303 	mul.w	r3, r2, r3
 8008602:	69fa      	ldr	r2, [r7, #28]
 8008604:	18d1      	adds	r1, r2, r3
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	899b      	ldrh	r3, [r3, #12]
 800860a:	461a      	mov	r2, r3
 800860c:	f7fd fc2a 	bl	8005e64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	7d1b      	ldrb	r3, [r3, #20]
 8008614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008618:	b2da      	uxtb	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	899b      	ldrh	r3, [r3, #12]
 8008622:	461a      	mov	r2, r3
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800862c:	e04b      	b.n	80086c6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	429a      	cmp	r2, r3
 8008636:	d016      	beq.n	8008666 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	699a      	ldr	r2, [r3, #24]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008640:	429a      	cmp	r2, r3
 8008642:	d210      	bcs.n	8008666 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	7858      	ldrb	r0, [r3, #1]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800864e:	2301      	movs	r3, #1
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	f7fd fb27 	bl	8005ca4 <disk_read>
 8008656:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	755a      	strb	r2, [r3, #21]
 8008662:	2301      	movs	r3, #1
 8008664:	e05a      	b.n	800871c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	899b      	ldrh	r3, [r3, #12]
 8008670:	4618      	mov	r0, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	8992      	ldrh	r2, [r2, #12]
 800867a:	fbb3 f1f2 	udiv	r1, r3, r2
 800867e:	fb01 f202 	mul.w	r2, r1, r2
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	1ac3      	subs	r3, r0, r3
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d901      	bls.n	8008694 <f_write+0x298>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	8992      	ldrh	r2, [r2, #12]
 80086a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80086a6:	fb00 f202 	mul.w	r2, r0, r2
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	440b      	add	r3, r1
 80086ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b0:	69f9      	ldr	r1, [r7, #28]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fd fbd6 	bl	8005e64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	7d1b      	ldrb	r3, [r3, #20]
 80086bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	4413      	add	r3, r2
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	619a      	str	r2, [r3, #24]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	bf38      	it	cc
 80086e6:	461a      	movcc	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	60da      	str	r2, [r3, #12]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	441a      	add	r2, r3
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	f47f aeb5 	bne.w	8008472 <f_write+0x76>
 8008708:	e000      	b.n	800870c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800870a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	7d1b      	ldrb	r3, [r3, #20]
 8008710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008714:	b2da      	uxtb	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3730      	adds	r7, #48	; 0x30
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f107 0208 	add.w	r2, r7, #8
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff fc19 	bl	8007f6c <validate>
 800873a:	4603      	mov	r3, r0
 800873c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d168      	bne.n	8008816 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7d1b      	ldrb	r3, [r3, #20]
 8008748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d062      	beq.n	8008816 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
 8008754:	b25b      	sxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	da15      	bge.n	8008786 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	7858      	ldrb	r0, [r3, #1]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1a      	ldr	r2, [r3, #32]
 8008768:	2301      	movs	r3, #1
 800876a:	f7fd fabb 	bl	8005ce4 <disk_write>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <f_sync+0x54>
 8008774:	2301      	movs	r3, #1
 8008776:	e04f      	b.n	8008818 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7d1b      	ldrb	r3, [r3, #20]
 800877c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008780:	b2da      	uxtb	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008786:	f7fd f925 	bl	80059d4 <get_fattime>
 800878a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	4619      	mov	r1, r3
 8008794:	4610      	mov	r0, r2
 8008796:	f7fd fd93 	bl	80062c0 <move_window>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d138      	bne.n	8008816 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	330b      	adds	r3, #11
 80087ae:	781a      	ldrb	r2, [r3, #0]
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	330b      	adds	r3, #11
 80087b4:	f042 0220 	orr.w	r2, r2, #32
 80087b8:	b2d2      	uxtb	r2, r2
 80087ba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	461a      	mov	r2, r3
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	f7fe fb21 	bl	8006e0e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f103 021c 	add.w	r2, r3, #28
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fd fb17 	bl	8005e0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3316      	adds	r3, #22
 80087e2:	6939      	ldr	r1, [r7, #16]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fd fb11 	bl	8005e0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3312      	adds	r3, #18
 80087ee:	2100      	movs	r1, #0
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7fd faf0 	bl	8005dd6 <st_word>
					fs->wflag = 1;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2201      	movs	r2, #1
 80087fa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fd fd8c 	bl	800631c <sync_fs>
 8008804:	4603      	mov	r3, r0
 8008806:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7d1b      	ldrb	r3, [r3, #20]
 800880c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008810:	b2da      	uxtb	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008816:	7dfb      	ldrb	r3, [r7, #23]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff7b 	bl	8008724 <f_sync>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d118      	bne.n	800886a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f107 0208 	add.w	r2, r7, #8
 800883e:	4611      	mov	r1, r2
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fb93 	bl	8007f6c <validate>
 8008846:	4603      	mov	r3, r0
 8008848:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10c      	bne.n	800886a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	4618      	mov	r0, r3
 8008856:	f7fd fc8f 	bl	8006178 <dec_lock>
 800885a:	4603      	mov	r3, r0
 800885c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b090      	sub	sp, #64	; 0x40
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f107 0208 	add.w	r2, r7, #8
 8008884:	4611      	mov	r1, r2
 8008886:	4618      	mov	r0, r3
 8008888:	f7ff fb70 	bl	8007f6c <validate>
 800888c:	4603      	mov	r3, r0
 800888e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008892:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <f_lseek+0x2e>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7d5b      	ldrb	r3, [r3, #21]
 800889e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80088a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d002      	beq.n	80088b0 <f_lseek+0x3c>
 80088aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80088ae:	e201      	b.n	8008cb4 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f000 80d9 	beq.w	8008a6c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d15a      	bne.n	8008978 <f_lseek+0x104>
			tbl = fp->cltbl;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	1d1a      	adds	r2, r3, #4
 80088cc:	627a      	str	r2, [r7, #36]	; 0x24
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	617b      	str	r3, [r7, #20]
 80088d2:	2302      	movs	r3, #2
 80088d4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d03a      	beq.n	8008958 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	2300      	movs	r3, #0
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	3302      	adds	r3, #2
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	3301      	adds	r3, #1
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fd fd9b 	bl	800643a <get_fat>
 8008904:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	2b01      	cmp	r3, #1
 800890a:	d804      	bhi.n	8008916 <f_lseek+0xa2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	755a      	strb	r2, [r3, #21]
 8008912:	2302      	movs	r3, #2
 8008914:	e1ce      	b.n	8008cb4 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891c:	d104      	bne.n	8008928 <f_lseek+0xb4>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	755a      	strb	r2, [r3, #21]
 8008924:	2301      	movs	r3, #1
 8008926:	e1c5      	b.n	8008cb4 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800892e:	429a      	cmp	r2, r3
 8008930:	d0de      	beq.n	80088f0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	429a      	cmp	r2, r3
 8008938:	d809      	bhi.n	800894e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	1d1a      	adds	r2, r3, #4
 800893e:	627a      	str	r2, [r7, #36]	; 0x24
 8008940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	1d1a      	adds	r2, r3, #4
 8008948:	627a      	str	r2, [r7, #36]	; 0x24
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	69db      	ldr	r3, [r3, #28]
 8008952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008954:	429a      	cmp	r2, r3
 8008956:	d3c4      	bcc.n	80088e2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800895e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	429a      	cmp	r2, r3
 8008966:	d803      	bhi.n	8008970 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	e19f      	b.n	8008cb0 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008970:	2311      	movs	r3, #17
 8008972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008976:	e19b      	b.n	8008cb0 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d902      	bls.n	8008988 <f_lseek+0x114>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 818d 	beq.w	8008cb0 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	3b01      	subs	r3, #1
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7fe f839 	bl	8006a14 <clmt_clust>
 80089a2:	4602      	mov	r2, r0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80089a8:	68ba      	ldr	r2, [r7, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	4619      	mov	r1, r3
 80089b0:	4610      	mov	r0, r2
 80089b2:	f7fd fd23 	bl	80063fc <clust2sect>
 80089b6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d104      	bne.n	80089c8 <f_lseek+0x154>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2202      	movs	r2, #2
 80089c2:	755a      	strb	r2, [r3, #21]
 80089c4:	2302      	movs	r3, #2
 80089c6:	e175      	b.n	8008cb4 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	8992      	ldrh	r2, [r2, #12]
 80089d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	8952      	ldrh	r2, [r2, #10]
 80089d8:	3a01      	subs	r2, #1
 80089da:	4013      	ands	r3, r2
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	4413      	add	r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	8992      	ldrh	r2, [r2, #12]
 80089ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80089ee:	fb01 f202 	mul.w	r2, r1, r2
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 815b 	beq.w	8008cb0 <f_lseek+0x43c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	f000 8155 	beq.w	8008cb0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	7d1b      	ldrb	r3, [r3, #20]
 8008a0a:	b25b      	sxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da18      	bge.n	8008a42 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	7858      	ldrb	r0, [r3, #1]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1a      	ldr	r2, [r3, #32]
 8008a1e:	2301      	movs	r3, #1
 8008a20:	f7fd f960 	bl	8005ce4 <disk_write>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d004      	beq.n	8008a34 <f_lseek+0x1c0>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	755a      	strb	r2, [r3, #21]
 8008a30:	2301      	movs	r3, #1
 8008a32:	e13f      	b.n	8008cb4 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7d1b      	ldrb	r3, [r3, #20]
 8008a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	7858      	ldrb	r0, [r3, #1]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	f7fd f928 	bl	8005ca4 <disk_read>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <f_lseek+0x1f0>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	755a      	strb	r2, [r3, #21]
 8008a60:	2301      	movs	r3, #1
 8008a62:	e127      	b.n	8008cb4 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	621a      	str	r2, [r3, #32]
 8008a6a:	e121      	b.n	8008cb0 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d908      	bls.n	8008a88 <f_lseek+0x214>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7d1b      	ldrb	r3, [r3, #20]
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d102      	bne.n	8008a88 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a96:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 80b5 	beq.w	8008c0a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	895b      	ldrh	r3, [r3, #10]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	899b      	ldrh	r3, [r3, #12]
 8008aaa:	fb02 f303 	mul.w	r3, r2, r3
 8008aae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d01b      	beq.n	8008aee <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	1e5a      	subs	r2, r3, #1
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	1e59      	subs	r1, r3, #1
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d30f      	bcc.n	8008aee <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	425b      	negs	r3, r3
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	699b      	ldr	r3, [r3, #24]
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8008aec:	e022      	b.n	8008b34 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d119      	bne.n	8008b2e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fd fef0 	bl	80068e4 <create_chain>
 8008b04:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d104      	bne.n	8008b16 <f_lseek+0x2a2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	755a      	strb	r2, [r3, #21]
 8008b12:	2302      	movs	r3, #2
 8008b14:	e0ce      	b.n	8008cb4 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d104      	bne.n	8008b28 <f_lseek+0x2b4>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	755a      	strb	r2, [r3, #21]
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0c5      	b.n	8008cb4 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b2c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b32:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d067      	beq.n	8008c0a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008b3a:	e03a      	b.n	8008bb2 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	441a      	add	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	7d1b      	ldrb	r3, [r3, #20]
 8008b54:	f003 0302 	and.w	r3, r3, #2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00b      	beq.n	8008b74 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fd febf 	bl	80068e4 <create_chain>
 8008b66:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d108      	bne.n	8008b80 <f_lseek+0x30c>
							ofs = 0; break;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	e022      	b.n	8008bba <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fd fc5e 	bl	800643a <get_fat>
 8008b7e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d104      	bne.n	8008b92 <f_lseek+0x31e>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	755a      	strb	r2, [r3, #21]
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e090      	b.n	8008cb4 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d904      	bls.n	8008ba2 <f_lseek+0x32e>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d304      	bcc.n	8008bac <f_lseek+0x338>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	755a      	strb	r2, [r3, #21]
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e083      	b.n	8008cb4 <f_lseek+0x440>
					fp->clust = clst;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bb0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d8c0      	bhi.n	8008b3c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	441a      	add	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	899b      	ldrh	r3, [r3, #12]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bd2:	fb01 f202 	mul.w	r2, r1, r2
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d016      	beq.n	8008c0a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fd fc0b 	bl	80063fc <clust2sect>
 8008be6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d104      	bne.n	8008bf8 <f_lseek+0x384>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	755a      	strb	r2, [r3, #21]
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e05d      	b.n	8008cb4 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	899b      	ldrh	r3, [r3, #12]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c06:	4413      	add	r3, r2
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d90a      	bls.n	8008c2c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699a      	ldr	r2, [r3, #24]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7d1b      	ldrb	r3, [r3, #20]
 8008c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	8992      	ldrh	r2, [r2, #12]
 8008c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c38:	fb01 f202 	mul.w	r2, r1, r2
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d036      	beq.n	8008cb0 <f_lseek+0x43c>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d031      	beq.n	8008cb0 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	7d1b      	ldrb	r3, [r3, #20]
 8008c50:	b25b      	sxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	da18      	bge.n	8008c88 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	7858      	ldrb	r0, [r3, #1]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1a      	ldr	r2, [r3, #32]
 8008c64:	2301      	movs	r3, #1
 8008c66:	f7fd f83d 	bl	8005ce4 <disk_write>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <f_lseek+0x406>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	755a      	strb	r2, [r3, #21]
 8008c76:	2301      	movs	r3, #1
 8008c78:	e01c      	b.n	8008cb4 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	7d1b      	ldrb	r3, [r3, #20]
 8008c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	7858      	ldrb	r0, [r3, #1]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c92:	2301      	movs	r3, #1
 8008c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c96:	f7fd f805 	bl	8005ca4 <disk_read>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d004      	beq.n	8008caa <f_lseek+0x436>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	755a      	strb	r2, [r3, #21]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e004      	b.n	8008cb4 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cae:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3740      	adds	r7, #64	; 0x40
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	2b0a      	cmp	r3, #10
 8008ccc:	d103      	bne.n	8008cd6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008cce:	210d      	movs	r1, #13
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7ff fff3 	bl	8008cbc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	db25      	blt.n	8008d2e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	60fa      	str	r2, [r7, #12]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b3c      	cmp	r3, #60	; 0x3c
 8008cf4:	dd12      	ble.n	8008d1c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f103 010c 	add.w	r1, r3, #12
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f107 0308 	add.w	r3, r7, #8
 8008d06:	f7ff fb79 	bl	80083fc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d101      	bne.n	8008d16 <putc_bfd+0x5a>
 8008d12:	2300      	movs	r3, #0
 8008d14:	e001      	b.n	8008d1a <putc_bfd+0x5e>
 8008d16:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	609a      	str	r2, [r3, #8]
 8008d2c:	e000      	b.n	8008d30 <putc_bfd+0x74>
	if (i < 0) return;
 8008d2e:	bf00      	nop
}
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	db16      	blt.n	8008d74 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6818      	ldr	r0, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f103 010c 	add.w	r1, r3, #12
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	461a      	mov	r2, r3
 8008d56:	f107 030c 	add.w	r3, r7, #12
 8008d5a:	f7ff fb4f 	bl	80083fc <f_write>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d107      	bne.n	8008d74 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d102      	bne.n	8008d74 <putc_flush+0x3e>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	e001      	b.n	8008d78 <putc_flush+0x42>
	return EOF;
 8008d74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	605a      	str	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685a      	ldr	r2, [r3, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	609a      	str	r2, [r3, #8]
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b096      	sub	sp, #88	; 0x58
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008db4:	f107 030c 	add.w	r3, r7, #12
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff ffe0 	bl	8008d80 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008dc0:	e009      	b.n	8008dd6 <f_puts+0x2c>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	1c5a      	adds	r2, r3, #1
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	781a      	ldrb	r2, [r3, #0]
 8008dca:	f107 030c 	add.w	r3, r7, #12
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff ff73 	bl	8008cbc <putc_bfd>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f1      	bne.n	8008dc2 <f_puts+0x18>
	return putc_flush(&pb);
 8008dde:	f107 030c 	add.w	r3, r7, #12
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff ffa7 	bl	8008d36 <putc_flush>
 8008de8:	4603      	mov	r3, r0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3758      	adds	r7, #88	; 0x58
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
	...

08008df4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e0a:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e0c:	7a5b      	ldrb	r3, [r3, #9]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d131      	bne.n	8008e78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e14:	4b1c      	ldr	r3, [pc, #112]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e16:	7a5b      	ldrb	r3, [r3, #9]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4b1a      	ldr	r3, [pc, #104]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e1e:	2100      	movs	r1, #0
 8008e20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e22:	4b19      	ldr	r3, [pc, #100]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e24:	7a5b      	ldrb	r3, [r3, #9]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e34:	7a5b      	ldrb	r3, [r3, #9]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e3c:	4413      	add	r3, r2
 8008e3e:	79fa      	ldrb	r2, [r7, #7]
 8008e40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e42:	4b11      	ldr	r3, [pc, #68]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e44:	7a5b      	ldrb	r3, [r3, #9]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	b2d1      	uxtb	r1, r2
 8008e4c:	4a0e      	ldr	r2, [pc, #56]	; (8008e88 <FATFS_LinkDriverEx+0x94>)
 8008e4e:	7251      	strb	r1, [r2, #9]
 8008e50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e52:	7dbb      	ldrb	r3, [r7, #22]
 8008e54:	3330      	adds	r3, #48	; 0x30
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	223a      	movs	r2, #58	; 0x3a
 8008e62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	3302      	adds	r3, #2
 8008e68:	222f      	movs	r2, #47	; 0x2f
 8008e6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	3303      	adds	r3, #3
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	371c      	adds	r7, #28
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	200026f8 	.word	0x200026f8

08008e8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e96:	2200      	movs	r2, #0
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff ffaa 	bl	8008df4 <FATFS_LinkDriverEx>
 8008ea0:	4603      	mov	r3, r0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <trunc>:
 8008eac:	ec51 0b10 	vmov	r0, r1, d0
 8008eb0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008eb4:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008eb8:	2b13      	cmp	r3, #19
 8008eba:	b5d0      	push	{r4, r6, r7, lr}
 8008ebc:	460c      	mov	r4, r1
 8008ebe:	dc10      	bgt.n	8008ee2 <trunc+0x36>
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bfa5      	ittet	ge
 8008ec4:	4a11      	ldrge	r2, [pc, #68]	; (8008f0c <trunc+0x60>)
 8008ec6:	fa42 f303 	asrge.w	r3, r2, r3
 8008eca:	2100      	movlt	r1, #0
 8008ecc:	2100      	movge	r1, #0
 8008ece:	bfb9      	ittee	lt
 8008ed0:	2000      	movlt	r0, #0
 8008ed2:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8008ed6:	2000      	movge	r0, #0
 8008ed8:	ea24 0103 	bicge.w	r1, r4, r3
 8008edc:	ec41 0b10 	vmov	d0, r0, r1
 8008ee0:	bdd0      	pop	{r4, r6, r7, pc}
 8008ee2:	2b33      	cmp	r3, #51	; 0x33
 8008ee4:	dd08      	ble.n	8008ef8 <trunc+0x4c>
 8008ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eea:	d1f7      	bne.n	8008edc <trunc+0x30>
 8008eec:	ee10 2a10 	vmov	r2, s0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	f7f7 f9e3 	bl	80002bc <__adddf3>
 8008ef6:	e7f1      	b.n	8008edc <trunc+0x30>
 8008ef8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295
 8008f00:	fa23 f202 	lsr.w	r2, r3, r2
 8008f04:	ea20 0602 	bic.w	r6, r0, r2
 8008f08:	4630      	mov	r0, r6
 8008f0a:	e7e7      	b.n	8008edc <trunc+0x30>
 8008f0c:	000fffff 	.word	0x000fffff

08008f10 <__errno>:
 8008f10:	4b01      	ldr	r3, [pc, #4]	; (8008f18 <__errno+0x8>)
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	2000002c 	.word	0x2000002c

08008f1c <__libc_init_array>:
 8008f1c:	b570      	push	{r4, r5, r6, lr}
 8008f1e:	4d0d      	ldr	r5, [pc, #52]	; (8008f54 <__libc_init_array+0x38>)
 8008f20:	4c0d      	ldr	r4, [pc, #52]	; (8008f58 <__libc_init_array+0x3c>)
 8008f22:	1b64      	subs	r4, r4, r5
 8008f24:	10a4      	asrs	r4, r4, #2
 8008f26:	2600      	movs	r6, #0
 8008f28:	42a6      	cmp	r6, r4
 8008f2a:	d109      	bne.n	8008f40 <__libc_init_array+0x24>
 8008f2c:	4d0b      	ldr	r5, [pc, #44]	; (8008f5c <__libc_init_array+0x40>)
 8008f2e:	4c0c      	ldr	r4, [pc, #48]	; (8008f60 <__libc_init_array+0x44>)
 8008f30:	f000 fc8e 	bl	8009850 <_init>
 8008f34:	1b64      	subs	r4, r4, r5
 8008f36:	10a4      	asrs	r4, r4, #2
 8008f38:	2600      	movs	r6, #0
 8008f3a:	42a6      	cmp	r6, r4
 8008f3c:	d105      	bne.n	8008f4a <__libc_init_array+0x2e>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f44:	4798      	blx	r3
 8008f46:	3601      	adds	r6, #1
 8008f48:	e7ee      	b.n	8008f28 <__libc_init_array+0xc>
 8008f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4e:	4798      	blx	r3
 8008f50:	3601      	adds	r6, #1
 8008f52:	e7f2      	b.n	8008f3a <__libc_init_array+0x1e>
 8008f54:	0800a4d4 	.word	0x0800a4d4
 8008f58:	0800a4d4 	.word	0x0800a4d4
 8008f5c:	0800a4d4 	.word	0x0800a4d4
 8008f60:	0800a4d8 	.word	0x0800a4d8

08008f64 <memcpy>:
 8008f64:	440a      	add	r2, r1
 8008f66:	4291      	cmp	r1, r2
 8008f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f6c:	d100      	bne.n	8008f70 <memcpy+0xc>
 8008f6e:	4770      	bx	lr
 8008f70:	b510      	push	{r4, lr}
 8008f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7a:	4291      	cmp	r1, r2
 8008f7c:	d1f9      	bne.n	8008f72 <memcpy+0xe>
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <memmove>:
 8008f80:	4288      	cmp	r0, r1
 8008f82:	b510      	push	{r4, lr}
 8008f84:	eb01 0402 	add.w	r4, r1, r2
 8008f88:	d902      	bls.n	8008f90 <memmove+0x10>
 8008f8a:	4284      	cmp	r4, r0
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	d807      	bhi.n	8008fa0 <memmove+0x20>
 8008f90:	1e43      	subs	r3, r0, #1
 8008f92:	42a1      	cmp	r1, r4
 8008f94:	d008      	beq.n	8008fa8 <memmove+0x28>
 8008f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f9e:	e7f8      	b.n	8008f92 <memmove+0x12>
 8008fa0:	4402      	add	r2, r0
 8008fa2:	4601      	mov	r1, r0
 8008fa4:	428a      	cmp	r2, r1
 8008fa6:	d100      	bne.n	8008faa <memmove+0x2a>
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fb2:	e7f7      	b.n	8008fa4 <memmove+0x24>

08008fb4 <memset>:
 8008fb4:	4402      	add	r2, r0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d100      	bne.n	8008fbe <memset+0xa>
 8008fbc:	4770      	bx	lr
 8008fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8008fc2:	e7f9      	b.n	8008fb8 <memset+0x4>

08008fc4 <_free_r>:
 8008fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	d044      	beq.n	8009054 <_free_r+0x90>
 8008fca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fce:	9001      	str	r0, [sp, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fd6:	bfb8      	it	lt
 8008fd8:	18e4      	addlt	r4, r4, r3
 8008fda:	f000 f903 	bl	80091e4 <__malloc_lock>
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <_free_r+0x94>)
 8008fe0:	9801      	ldr	r0, [sp, #4]
 8008fe2:	6813      	ldr	r3, [r2, #0]
 8008fe4:	b933      	cbnz	r3, 8008ff4 <_free_r+0x30>
 8008fe6:	6063      	str	r3, [r4, #4]
 8008fe8:	6014      	str	r4, [r2, #0]
 8008fea:	b003      	add	sp, #12
 8008fec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ff0:	f000 b8fe 	b.w	80091f0 <__malloc_unlock>
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d908      	bls.n	800900a <_free_r+0x46>
 8008ff8:	6825      	ldr	r5, [r4, #0]
 8008ffa:	1961      	adds	r1, r4, r5
 8008ffc:	428b      	cmp	r3, r1
 8008ffe:	bf01      	itttt	eq
 8009000:	6819      	ldreq	r1, [r3, #0]
 8009002:	685b      	ldreq	r3, [r3, #4]
 8009004:	1949      	addeq	r1, r1, r5
 8009006:	6021      	streq	r1, [r4, #0]
 8009008:	e7ed      	b.n	8008fe6 <_free_r+0x22>
 800900a:	461a      	mov	r2, r3
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	b10b      	cbz	r3, 8009014 <_free_r+0x50>
 8009010:	42a3      	cmp	r3, r4
 8009012:	d9fa      	bls.n	800900a <_free_r+0x46>
 8009014:	6811      	ldr	r1, [r2, #0]
 8009016:	1855      	adds	r5, r2, r1
 8009018:	42a5      	cmp	r5, r4
 800901a:	d10b      	bne.n	8009034 <_free_r+0x70>
 800901c:	6824      	ldr	r4, [r4, #0]
 800901e:	4421      	add	r1, r4
 8009020:	1854      	adds	r4, r2, r1
 8009022:	42a3      	cmp	r3, r4
 8009024:	6011      	str	r1, [r2, #0]
 8009026:	d1e0      	bne.n	8008fea <_free_r+0x26>
 8009028:	681c      	ldr	r4, [r3, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	6053      	str	r3, [r2, #4]
 800902e:	4421      	add	r1, r4
 8009030:	6011      	str	r1, [r2, #0]
 8009032:	e7da      	b.n	8008fea <_free_r+0x26>
 8009034:	d902      	bls.n	800903c <_free_r+0x78>
 8009036:	230c      	movs	r3, #12
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	e7d6      	b.n	8008fea <_free_r+0x26>
 800903c:	6825      	ldr	r5, [r4, #0]
 800903e:	1961      	adds	r1, r4, r5
 8009040:	428b      	cmp	r3, r1
 8009042:	bf04      	itt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	6063      	str	r3, [r4, #4]
 800904a:	bf04      	itt	eq
 800904c:	1949      	addeq	r1, r1, r5
 800904e:	6021      	streq	r1, [r4, #0]
 8009050:	6054      	str	r4, [r2, #4]
 8009052:	e7ca      	b.n	8008fea <_free_r+0x26>
 8009054:	b003      	add	sp, #12
 8009056:	bd30      	pop	{r4, r5, pc}
 8009058:	20002704 	.word	0x20002704

0800905c <sbrk_aligned>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4e0e      	ldr	r6, [pc, #56]	; (8009098 <sbrk_aligned+0x3c>)
 8009060:	460c      	mov	r4, r1
 8009062:	6831      	ldr	r1, [r6, #0]
 8009064:	4605      	mov	r5, r0
 8009066:	b911      	cbnz	r1, 800906e <sbrk_aligned+0x12>
 8009068:	f000 f88c 	bl	8009184 <_sbrk_r>
 800906c:	6030      	str	r0, [r6, #0]
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f000 f887 	bl	8009184 <_sbrk_r>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d00a      	beq.n	8009090 <sbrk_aligned+0x34>
 800907a:	1cc4      	adds	r4, r0, #3
 800907c:	f024 0403 	bic.w	r4, r4, #3
 8009080:	42a0      	cmp	r0, r4
 8009082:	d007      	beq.n	8009094 <sbrk_aligned+0x38>
 8009084:	1a21      	subs	r1, r4, r0
 8009086:	4628      	mov	r0, r5
 8009088:	f000 f87c 	bl	8009184 <_sbrk_r>
 800908c:	3001      	adds	r0, #1
 800908e:	d101      	bne.n	8009094 <sbrk_aligned+0x38>
 8009090:	f04f 34ff 	mov.w	r4, #4294967295
 8009094:	4620      	mov	r0, r4
 8009096:	bd70      	pop	{r4, r5, r6, pc}
 8009098:	20002708 	.word	0x20002708

0800909c <_malloc_r>:
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	1ccd      	adds	r5, r1, #3
 80090a2:	f025 0503 	bic.w	r5, r5, #3
 80090a6:	3508      	adds	r5, #8
 80090a8:	2d0c      	cmp	r5, #12
 80090aa:	bf38      	it	cc
 80090ac:	250c      	movcc	r5, #12
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	4607      	mov	r7, r0
 80090b2:	db01      	blt.n	80090b8 <_malloc_r+0x1c>
 80090b4:	42a9      	cmp	r1, r5
 80090b6:	d905      	bls.n	80090c4 <_malloc_r+0x28>
 80090b8:	230c      	movs	r3, #12
 80090ba:	603b      	str	r3, [r7, #0]
 80090bc:	2600      	movs	r6, #0
 80090be:	4630      	mov	r0, r6
 80090c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c4:	4e2e      	ldr	r6, [pc, #184]	; (8009180 <_malloc_r+0xe4>)
 80090c6:	f000 f88d 	bl	80091e4 <__malloc_lock>
 80090ca:	6833      	ldr	r3, [r6, #0]
 80090cc:	461c      	mov	r4, r3
 80090ce:	bb34      	cbnz	r4, 800911e <_malloc_r+0x82>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7ff ffc2 	bl	800905c <sbrk_aligned>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	4604      	mov	r4, r0
 80090dc:	d14d      	bne.n	800917a <_malloc_r+0xde>
 80090de:	6834      	ldr	r4, [r6, #0]
 80090e0:	4626      	mov	r6, r4
 80090e2:	2e00      	cmp	r6, #0
 80090e4:	d140      	bne.n	8009168 <_malloc_r+0xcc>
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	4631      	mov	r1, r6
 80090ea:	4638      	mov	r0, r7
 80090ec:	eb04 0803 	add.w	r8, r4, r3
 80090f0:	f000 f848 	bl	8009184 <_sbrk_r>
 80090f4:	4580      	cmp	r8, r0
 80090f6:	d13a      	bne.n	800916e <_malloc_r+0xd2>
 80090f8:	6821      	ldr	r1, [r4, #0]
 80090fa:	3503      	adds	r5, #3
 80090fc:	1a6d      	subs	r5, r5, r1
 80090fe:	f025 0503 	bic.w	r5, r5, #3
 8009102:	3508      	adds	r5, #8
 8009104:	2d0c      	cmp	r5, #12
 8009106:	bf38      	it	cc
 8009108:	250c      	movcc	r5, #12
 800910a:	4629      	mov	r1, r5
 800910c:	4638      	mov	r0, r7
 800910e:	f7ff ffa5 	bl	800905c <sbrk_aligned>
 8009112:	3001      	adds	r0, #1
 8009114:	d02b      	beq.n	800916e <_malloc_r+0xd2>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	442b      	add	r3, r5
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	e00e      	b.n	800913c <_malloc_r+0xa0>
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	1b52      	subs	r2, r2, r5
 8009122:	d41e      	bmi.n	8009162 <_malloc_r+0xc6>
 8009124:	2a0b      	cmp	r2, #11
 8009126:	d916      	bls.n	8009156 <_malloc_r+0xba>
 8009128:	1961      	adds	r1, r4, r5
 800912a:	42a3      	cmp	r3, r4
 800912c:	6025      	str	r5, [r4, #0]
 800912e:	bf18      	it	ne
 8009130:	6059      	strne	r1, [r3, #4]
 8009132:	6863      	ldr	r3, [r4, #4]
 8009134:	bf08      	it	eq
 8009136:	6031      	streq	r1, [r6, #0]
 8009138:	5162      	str	r2, [r4, r5]
 800913a:	604b      	str	r3, [r1, #4]
 800913c:	4638      	mov	r0, r7
 800913e:	f104 060b 	add.w	r6, r4, #11
 8009142:	f000 f855 	bl	80091f0 <__malloc_unlock>
 8009146:	f026 0607 	bic.w	r6, r6, #7
 800914a:	1d23      	adds	r3, r4, #4
 800914c:	1af2      	subs	r2, r6, r3
 800914e:	d0b6      	beq.n	80090be <_malloc_r+0x22>
 8009150:	1b9b      	subs	r3, r3, r6
 8009152:	50a3      	str	r3, [r4, r2]
 8009154:	e7b3      	b.n	80090be <_malloc_r+0x22>
 8009156:	6862      	ldr	r2, [r4, #4]
 8009158:	42a3      	cmp	r3, r4
 800915a:	bf0c      	ite	eq
 800915c:	6032      	streq	r2, [r6, #0]
 800915e:	605a      	strne	r2, [r3, #4]
 8009160:	e7ec      	b.n	800913c <_malloc_r+0xa0>
 8009162:	4623      	mov	r3, r4
 8009164:	6864      	ldr	r4, [r4, #4]
 8009166:	e7b2      	b.n	80090ce <_malloc_r+0x32>
 8009168:	4634      	mov	r4, r6
 800916a:	6876      	ldr	r6, [r6, #4]
 800916c:	e7b9      	b.n	80090e2 <_malloc_r+0x46>
 800916e:	230c      	movs	r3, #12
 8009170:	603b      	str	r3, [r7, #0]
 8009172:	4638      	mov	r0, r7
 8009174:	f000 f83c 	bl	80091f0 <__malloc_unlock>
 8009178:	e7a1      	b.n	80090be <_malloc_r+0x22>
 800917a:	6025      	str	r5, [r4, #0]
 800917c:	e7de      	b.n	800913c <_malloc_r+0xa0>
 800917e:	bf00      	nop
 8009180:	20002704 	.word	0x20002704

08009184 <_sbrk_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	4d06      	ldr	r5, [pc, #24]	; (80091a0 <_sbrk_r+0x1c>)
 8009188:	2300      	movs	r3, #0
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7f9 fa86 	bl	80026a0 <_sbrk>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_sbrk_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_sbrk_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	2000270c 	.word	0x2000270c

080091a4 <siprintf>:
 80091a4:	b40e      	push	{r1, r2, r3}
 80091a6:	b500      	push	{lr}
 80091a8:	b09c      	sub	sp, #112	; 0x70
 80091aa:	ab1d      	add	r3, sp, #116	; 0x74
 80091ac:	9002      	str	r0, [sp, #8]
 80091ae:	9006      	str	r0, [sp, #24]
 80091b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091b4:	4809      	ldr	r0, [pc, #36]	; (80091dc <siprintf+0x38>)
 80091b6:	9107      	str	r1, [sp, #28]
 80091b8:	9104      	str	r1, [sp, #16]
 80091ba:	4909      	ldr	r1, [pc, #36]	; (80091e0 <siprintf+0x3c>)
 80091bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c0:	9105      	str	r1, [sp, #20]
 80091c2:	6800      	ldr	r0, [r0, #0]
 80091c4:	9301      	str	r3, [sp, #4]
 80091c6:	a902      	add	r1, sp, #8
 80091c8:	f000 f874 	bl	80092b4 <_svfiprintf_r>
 80091cc:	9b02      	ldr	r3, [sp, #8]
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
 80091d2:	b01c      	add	sp, #112	; 0x70
 80091d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d8:	b003      	add	sp, #12
 80091da:	4770      	bx	lr
 80091dc:	2000002c 	.word	0x2000002c
 80091e0:	ffff0208 	.word	0xffff0208

080091e4 <__malloc_lock>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__malloc_lock+0x8>)
 80091e6:	f000 baf9 	b.w	80097dc <__retarget_lock_acquire_recursive>
 80091ea:	bf00      	nop
 80091ec:	20002710 	.word	0x20002710

080091f0 <__malloc_unlock>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__malloc_unlock+0x8>)
 80091f2:	f000 baf4 	b.w	80097de <__retarget_lock_release_recursive>
 80091f6:	bf00      	nop
 80091f8:	20002710 	.word	0x20002710

080091fc <__ssputs_r>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	688e      	ldr	r6, [r1, #8]
 8009202:	429e      	cmp	r6, r3
 8009204:	4682      	mov	sl, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4690      	mov	r8, r2
 800920a:	461f      	mov	r7, r3
 800920c:	d838      	bhi.n	8009280 <__ssputs_r+0x84>
 800920e:	898a      	ldrh	r2, [r1, #12]
 8009210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009214:	d032      	beq.n	800927c <__ssputs_r+0x80>
 8009216:	6825      	ldr	r5, [r4, #0]
 8009218:	6909      	ldr	r1, [r1, #16]
 800921a:	eba5 0901 	sub.w	r9, r5, r1
 800921e:	6965      	ldr	r5, [r4, #20]
 8009220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009228:	3301      	adds	r3, #1
 800922a:	444b      	add	r3, r9
 800922c:	106d      	asrs	r5, r5, #1
 800922e:	429d      	cmp	r5, r3
 8009230:	bf38      	it	cc
 8009232:	461d      	movcc	r5, r3
 8009234:	0553      	lsls	r3, r2, #21
 8009236:	d531      	bpl.n	800929c <__ssputs_r+0xa0>
 8009238:	4629      	mov	r1, r5
 800923a:	f7ff ff2f 	bl	800909c <_malloc_r>
 800923e:	4606      	mov	r6, r0
 8009240:	b950      	cbnz	r0, 8009258 <__ssputs_r+0x5c>
 8009242:	230c      	movs	r3, #12
 8009244:	f8ca 3000 	str.w	r3, [sl]
 8009248:	89a3      	ldrh	r3, [r4, #12]
 800924a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800924e:	81a3      	strh	r3, [r4, #12]
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	6921      	ldr	r1, [r4, #16]
 800925a:	464a      	mov	r2, r9
 800925c:	f7ff fe82 	bl	8008f64 <memcpy>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	6126      	str	r6, [r4, #16]
 800926e:	6165      	str	r5, [r4, #20]
 8009270:	444e      	add	r6, r9
 8009272:	eba5 0509 	sub.w	r5, r5, r9
 8009276:	6026      	str	r6, [r4, #0]
 8009278:	60a5      	str	r5, [r4, #8]
 800927a:	463e      	mov	r6, r7
 800927c:	42be      	cmp	r6, r7
 800927e:	d900      	bls.n	8009282 <__ssputs_r+0x86>
 8009280:	463e      	mov	r6, r7
 8009282:	6820      	ldr	r0, [r4, #0]
 8009284:	4632      	mov	r2, r6
 8009286:	4641      	mov	r1, r8
 8009288:	f7ff fe7a 	bl	8008f80 <memmove>
 800928c:	68a3      	ldr	r3, [r4, #8]
 800928e:	1b9b      	subs	r3, r3, r6
 8009290:	60a3      	str	r3, [r4, #8]
 8009292:	6823      	ldr	r3, [r4, #0]
 8009294:	4433      	add	r3, r6
 8009296:	6023      	str	r3, [r4, #0]
 8009298:	2000      	movs	r0, #0
 800929a:	e7db      	b.n	8009254 <__ssputs_r+0x58>
 800929c:	462a      	mov	r2, r5
 800929e:	f000 fa9f 	bl	80097e0 <_realloc_r>
 80092a2:	4606      	mov	r6, r0
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d1e1      	bne.n	800926c <__ssputs_r+0x70>
 80092a8:	6921      	ldr	r1, [r4, #16]
 80092aa:	4650      	mov	r0, sl
 80092ac:	f7ff fe8a 	bl	8008fc4 <_free_r>
 80092b0:	e7c7      	b.n	8009242 <__ssputs_r+0x46>
	...

080092b4 <_svfiprintf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	4698      	mov	r8, r3
 80092ba:	898b      	ldrh	r3, [r1, #12]
 80092bc:	061b      	lsls	r3, r3, #24
 80092be:	b09d      	sub	sp, #116	; 0x74
 80092c0:	4607      	mov	r7, r0
 80092c2:	460d      	mov	r5, r1
 80092c4:	4614      	mov	r4, r2
 80092c6:	d50e      	bpl.n	80092e6 <_svfiprintf_r+0x32>
 80092c8:	690b      	ldr	r3, [r1, #16]
 80092ca:	b963      	cbnz	r3, 80092e6 <_svfiprintf_r+0x32>
 80092cc:	2140      	movs	r1, #64	; 0x40
 80092ce:	f7ff fee5 	bl	800909c <_malloc_r>
 80092d2:	6028      	str	r0, [r5, #0]
 80092d4:	6128      	str	r0, [r5, #16]
 80092d6:	b920      	cbnz	r0, 80092e2 <_svfiprintf_r+0x2e>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	e0d1      	b.n	8009486 <_svfiprintf_r+0x1d2>
 80092e2:	2340      	movs	r3, #64	; 0x40
 80092e4:	616b      	str	r3, [r5, #20]
 80092e6:	2300      	movs	r3, #0
 80092e8:	9309      	str	r3, [sp, #36]	; 0x24
 80092ea:	2320      	movs	r3, #32
 80092ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092f4:	2330      	movs	r3, #48	; 0x30
 80092f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80094a0 <_svfiprintf_r+0x1ec>
 80092fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092fe:	f04f 0901 	mov.w	r9, #1
 8009302:	4623      	mov	r3, r4
 8009304:	469a      	mov	sl, r3
 8009306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930a:	b10a      	cbz	r2, 8009310 <_svfiprintf_r+0x5c>
 800930c:	2a25      	cmp	r2, #37	; 0x25
 800930e:	d1f9      	bne.n	8009304 <_svfiprintf_r+0x50>
 8009310:	ebba 0b04 	subs.w	fp, sl, r4
 8009314:	d00b      	beq.n	800932e <_svfiprintf_r+0x7a>
 8009316:	465b      	mov	r3, fp
 8009318:	4622      	mov	r2, r4
 800931a:	4629      	mov	r1, r5
 800931c:	4638      	mov	r0, r7
 800931e:	f7ff ff6d 	bl	80091fc <__ssputs_r>
 8009322:	3001      	adds	r0, #1
 8009324:	f000 80aa 	beq.w	800947c <_svfiprintf_r+0x1c8>
 8009328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800932a:	445a      	add	r2, fp
 800932c:	9209      	str	r2, [sp, #36]	; 0x24
 800932e:	f89a 3000 	ldrb.w	r3, [sl]
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 80a2 	beq.w	800947c <_svfiprintf_r+0x1c8>
 8009338:	2300      	movs	r3, #0
 800933a:	f04f 32ff 	mov.w	r2, #4294967295
 800933e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009342:	f10a 0a01 	add.w	sl, sl, #1
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	9307      	str	r3, [sp, #28]
 800934a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800934e:	931a      	str	r3, [sp, #104]	; 0x68
 8009350:	4654      	mov	r4, sl
 8009352:	2205      	movs	r2, #5
 8009354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009358:	4851      	ldr	r0, [pc, #324]	; (80094a0 <_svfiprintf_r+0x1ec>)
 800935a:	f7f6 ff59 	bl	8000210 <memchr>
 800935e:	9a04      	ldr	r2, [sp, #16]
 8009360:	b9d8      	cbnz	r0, 800939a <_svfiprintf_r+0xe6>
 8009362:	06d0      	lsls	r0, r2, #27
 8009364:	bf44      	itt	mi
 8009366:	2320      	movmi	r3, #32
 8009368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800936c:	0711      	lsls	r1, r2, #28
 800936e:	bf44      	itt	mi
 8009370:	232b      	movmi	r3, #43	; 0x2b
 8009372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009376:	f89a 3000 	ldrb.w	r3, [sl]
 800937a:	2b2a      	cmp	r3, #42	; 0x2a
 800937c:	d015      	beq.n	80093aa <_svfiprintf_r+0xf6>
 800937e:	9a07      	ldr	r2, [sp, #28]
 8009380:	4654      	mov	r4, sl
 8009382:	2000      	movs	r0, #0
 8009384:	f04f 0c0a 	mov.w	ip, #10
 8009388:	4621      	mov	r1, r4
 800938a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800938e:	3b30      	subs	r3, #48	; 0x30
 8009390:	2b09      	cmp	r3, #9
 8009392:	d94e      	bls.n	8009432 <_svfiprintf_r+0x17e>
 8009394:	b1b0      	cbz	r0, 80093c4 <_svfiprintf_r+0x110>
 8009396:	9207      	str	r2, [sp, #28]
 8009398:	e014      	b.n	80093c4 <_svfiprintf_r+0x110>
 800939a:	eba0 0308 	sub.w	r3, r0, r8
 800939e:	fa09 f303 	lsl.w	r3, r9, r3
 80093a2:	4313      	orrs	r3, r2
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	46a2      	mov	sl, r4
 80093a8:	e7d2      	b.n	8009350 <_svfiprintf_r+0x9c>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	1d19      	adds	r1, r3, #4
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	9103      	str	r1, [sp, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bfbb      	ittet	lt
 80093b6:	425b      	neglt	r3, r3
 80093b8:	f042 0202 	orrlt.w	r2, r2, #2
 80093bc:	9307      	strge	r3, [sp, #28]
 80093be:	9307      	strlt	r3, [sp, #28]
 80093c0:	bfb8      	it	lt
 80093c2:	9204      	strlt	r2, [sp, #16]
 80093c4:	7823      	ldrb	r3, [r4, #0]
 80093c6:	2b2e      	cmp	r3, #46	; 0x2e
 80093c8:	d10c      	bne.n	80093e4 <_svfiprintf_r+0x130>
 80093ca:	7863      	ldrb	r3, [r4, #1]
 80093cc:	2b2a      	cmp	r3, #42	; 0x2a
 80093ce:	d135      	bne.n	800943c <_svfiprintf_r+0x188>
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	1d1a      	adds	r2, r3, #4
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	9203      	str	r2, [sp, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bfb8      	it	lt
 80093dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80093e0:	3402      	adds	r4, #2
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80094b0 <_svfiprintf_r+0x1fc>
 80093e8:	7821      	ldrb	r1, [r4, #0]
 80093ea:	2203      	movs	r2, #3
 80093ec:	4650      	mov	r0, sl
 80093ee:	f7f6 ff0f 	bl	8000210 <memchr>
 80093f2:	b140      	cbz	r0, 8009406 <_svfiprintf_r+0x152>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	eba0 000a 	sub.w	r0, r0, sl
 80093fa:	fa03 f000 	lsl.w	r0, r3, r0
 80093fe:	9b04      	ldr	r3, [sp, #16]
 8009400:	4303      	orrs	r3, r0
 8009402:	3401      	adds	r4, #1
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800940a:	4826      	ldr	r0, [pc, #152]	; (80094a4 <_svfiprintf_r+0x1f0>)
 800940c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009410:	2206      	movs	r2, #6
 8009412:	f7f6 fefd 	bl	8000210 <memchr>
 8009416:	2800      	cmp	r0, #0
 8009418:	d038      	beq.n	800948c <_svfiprintf_r+0x1d8>
 800941a:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <_svfiprintf_r+0x1f4>)
 800941c:	bb1b      	cbnz	r3, 8009466 <_svfiprintf_r+0x1b2>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	3307      	adds	r3, #7
 8009422:	f023 0307 	bic.w	r3, r3, #7
 8009426:	3308      	adds	r3, #8
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942c:	4433      	add	r3, r6
 800942e:	9309      	str	r3, [sp, #36]	; 0x24
 8009430:	e767      	b.n	8009302 <_svfiprintf_r+0x4e>
 8009432:	fb0c 3202 	mla	r2, ip, r2, r3
 8009436:	460c      	mov	r4, r1
 8009438:	2001      	movs	r0, #1
 800943a:	e7a5      	b.n	8009388 <_svfiprintf_r+0xd4>
 800943c:	2300      	movs	r3, #0
 800943e:	3401      	adds	r4, #1
 8009440:	9305      	str	r3, [sp, #20]
 8009442:	4619      	mov	r1, r3
 8009444:	f04f 0c0a 	mov.w	ip, #10
 8009448:	4620      	mov	r0, r4
 800944a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944e:	3a30      	subs	r2, #48	; 0x30
 8009450:	2a09      	cmp	r2, #9
 8009452:	d903      	bls.n	800945c <_svfiprintf_r+0x1a8>
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0c5      	beq.n	80093e4 <_svfiprintf_r+0x130>
 8009458:	9105      	str	r1, [sp, #20]
 800945a:	e7c3      	b.n	80093e4 <_svfiprintf_r+0x130>
 800945c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009460:	4604      	mov	r4, r0
 8009462:	2301      	movs	r3, #1
 8009464:	e7f0      	b.n	8009448 <_svfiprintf_r+0x194>
 8009466:	ab03      	add	r3, sp, #12
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	462a      	mov	r2, r5
 800946c:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <_svfiprintf_r+0x1f8>)
 800946e:	a904      	add	r1, sp, #16
 8009470:	4638      	mov	r0, r7
 8009472:	f3af 8000 	nop.w
 8009476:	1c42      	adds	r2, r0, #1
 8009478:	4606      	mov	r6, r0
 800947a:	d1d6      	bne.n	800942a <_svfiprintf_r+0x176>
 800947c:	89ab      	ldrh	r3, [r5, #12]
 800947e:	065b      	lsls	r3, r3, #25
 8009480:	f53f af2c 	bmi.w	80092dc <_svfiprintf_r+0x28>
 8009484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009486:	b01d      	add	sp, #116	; 0x74
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	ab03      	add	r3, sp, #12
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	462a      	mov	r2, r5
 8009492:	4b06      	ldr	r3, [pc, #24]	; (80094ac <_svfiprintf_r+0x1f8>)
 8009494:	a904      	add	r1, sp, #16
 8009496:	4638      	mov	r0, r7
 8009498:	f000 f87a 	bl	8009590 <_printf_i>
 800949c:	e7eb      	b.n	8009476 <_svfiprintf_r+0x1c2>
 800949e:	bf00      	nop
 80094a0:	0800a499 	.word	0x0800a499
 80094a4:	0800a4a3 	.word	0x0800a4a3
 80094a8:	00000000 	.word	0x00000000
 80094ac:	080091fd 	.word	0x080091fd
 80094b0:	0800a49f 	.word	0x0800a49f

080094b4 <_printf_common>:
 80094b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094b8:	4616      	mov	r6, r2
 80094ba:	4699      	mov	r9, r3
 80094bc:	688a      	ldr	r2, [r1, #8]
 80094be:	690b      	ldr	r3, [r1, #16]
 80094c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094c4:	4293      	cmp	r3, r2
 80094c6:	bfb8      	it	lt
 80094c8:	4613      	movlt	r3, r2
 80094ca:	6033      	str	r3, [r6, #0]
 80094cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094d0:	4607      	mov	r7, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	b10a      	cbz	r2, 80094da <_printf_common+0x26>
 80094d6:	3301      	adds	r3, #1
 80094d8:	6033      	str	r3, [r6, #0]
 80094da:	6823      	ldr	r3, [r4, #0]
 80094dc:	0699      	lsls	r1, r3, #26
 80094de:	bf42      	ittt	mi
 80094e0:	6833      	ldrmi	r3, [r6, #0]
 80094e2:	3302      	addmi	r3, #2
 80094e4:	6033      	strmi	r3, [r6, #0]
 80094e6:	6825      	ldr	r5, [r4, #0]
 80094e8:	f015 0506 	ands.w	r5, r5, #6
 80094ec:	d106      	bne.n	80094fc <_printf_common+0x48>
 80094ee:	f104 0a19 	add.w	sl, r4, #25
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	6832      	ldr	r2, [r6, #0]
 80094f6:	1a9b      	subs	r3, r3, r2
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dc26      	bgt.n	800954a <_printf_common+0x96>
 80094fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009500:	1e13      	subs	r3, r2, #0
 8009502:	6822      	ldr	r2, [r4, #0]
 8009504:	bf18      	it	ne
 8009506:	2301      	movne	r3, #1
 8009508:	0692      	lsls	r2, r2, #26
 800950a:	d42b      	bmi.n	8009564 <_printf_common+0xb0>
 800950c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009510:	4649      	mov	r1, r9
 8009512:	4638      	mov	r0, r7
 8009514:	47c0      	blx	r8
 8009516:	3001      	adds	r0, #1
 8009518:	d01e      	beq.n	8009558 <_printf_common+0xa4>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	68e5      	ldr	r5, [r4, #12]
 800951e:	6832      	ldr	r2, [r6, #0]
 8009520:	f003 0306 	and.w	r3, r3, #6
 8009524:	2b04      	cmp	r3, #4
 8009526:	bf08      	it	eq
 8009528:	1aad      	subeq	r5, r5, r2
 800952a:	68a3      	ldr	r3, [r4, #8]
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	bf0c      	ite	eq
 8009530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009534:	2500      	movne	r5, #0
 8009536:	4293      	cmp	r3, r2
 8009538:	bfc4      	itt	gt
 800953a:	1a9b      	subgt	r3, r3, r2
 800953c:	18ed      	addgt	r5, r5, r3
 800953e:	2600      	movs	r6, #0
 8009540:	341a      	adds	r4, #26
 8009542:	42b5      	cmp	r5, r6
 8009544:	d11a      	bne.n	800957c <_printf_common+0xc8>
 8009546:	2000      	movs	r0, #0
 8009548:	e008      	b.n	800955c <_printf_common+0xa8>
 800954a:	2301      	movs	r3, #1
 800954c:	4652      	mov	r2, sl
 800954e:	4649      	mov	r1, r9
 8009550:	4638      	mov	r0, r7
 8009552:	47c0      	blx	r8
 8009554:	3001      	adds	r0, #1
 8009556:	d103      	bne.n	8009560 <_printf_common+0xac>
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009560:	3501      	adds	r5, #1
 8009562:	e7c6      	b.n	80094f2 <_printf_common+0x3e>
 8009564:	18e1      	adds	r1, r4, r3
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	2030      	movs	r0, #48	; 0x30
 800956a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800956e:	4422      	add	r2, r4
 8009570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009578:	3302      	adds	r3, #2
 800957a:	e7c7      	b.n	800950c <_printf_common+0x58>
 800957c:	2301      	movs	r3, #1
 800957e:	4622      	mov	r2, r4
 8009580:	4649      	mov	r1, r9
 8009582:	4638      	mov	r0, r7
 8009584:	47c0      	blx	r8
 8009586:	3001      	adds	r0, #1
 8009588:	d0e6      	beq.n	8009558 <_printf_common+0xa4>
 800958a:	3601      	adds	r6, #1
 800958c:	e7d9      	b.n	8009542 <_printf_common+0x8e>
	...

08009590 <_printf_i>:
 8009590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009594:	7e0f      	ldrb	r7, [r1, #24]
 8009596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009598:	2f78      	cmp	r7, #120	; 0x78
 800959a:	4691      	mov	r9, r2
 800959c:	4680      	mov	r8, r0
 800959e:	460c      	mov	r4, r1
 80095a0:	469a      	mov	sl, r3
 80095a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095a6:	d807      	bhi.n	80095b8 <_printf_i+0x28>
 80095a8:	2f62      	cmp	r7, #98	; 0x62
 80095aa:	d80a      	bhi.n	80095c2 <_printf_i+0x32>
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	f000 80d8 	beq.w	8009762 <_printf_i+0x1d2>
 80095b2:	2f58      	cmp	r7, #88	; 0x58
 80095b4:	f000 80a3 	beq.w	80096fe <_printf_i+0x16e>
 80095b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095c0:	e03a      	b.n	8009638 <_printf_i+0xa8>
 80095c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095c6:	2b15      	cmp	r3, #21
 80095c8:	d8f6      	bhi.n	80095b8 <_printf_i+0x28>
 80095ca:	a101      	add	r1, pc, #4	; (adr r1, 80095d0 <_printf_i+0x40>)
 80095cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095d0:	08009629 	.word	0x08009629
 80095d4:	0800963d 	.word	0x0800963d
 80095d8:	080095b9 	.word	0x080095b9
 80095dc:	080095b9 	.word	0x080095b9
 80095e0:	080095b9 	.word	0x080095b9
 80095e4:	080095b9 	.word	0x080095b9
 80095e8:	0800963d 	.word	0x0800963d
 80095ec:	080095b9 	.word	0x080095b9
 80095f0:	080095b9 	.word	0x080095b9
 80095f4:	080095b9 	.word	0x080095b9
 80095f8:	080095b9 	.word	0x080095b9
 80095fc:	08009749 	.word	0x08009749
 8009600:	0800966d 	.word	0x0800966d
 8009604:	0800972b 	.word	0x0800972b
 8009608:	080095b9 	.word	0x080095b9
 800960c:	080095b9 	.word	0x080095b9
 8009610:	0800976b 	.word	0x0800976b
 8009614:	080095b9 	.word	0x080095b9
 8009618:	0800966d 	.word	0x0800966d
 800961c:	080095b9 	.word	0x080095b9
 8009620:	080095b9 	.word	0x080095b9
 8009624:	08009733 	.word	0x08009733
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	1d1a      	adds	r2, r3, #4
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	602a      	str	r2, [r5, #0]
 8009630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009638:	2301      	movs	r3, #1
 800963a:	e0a3      	b.n	8009784 <_printf_i+0x1f4>
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	6829      	ldr	r1, [r5, #0]
 8009640:	0606      	lsls	r6, r0, #24
 8009642:	f101 0304 	add.w	r3, r1, #4
 8009646:	d50a      	bpl.n	800965e <_printf_i+0xce>
 8009648:	680e      	ldr	r6, [r1, #0]
 800964a:	602b      	str	r3, [r5, #0]
 800964c:	2e00      	cmp	r6, #0
 800964e:	da03      	bge.n	8009658 <_printf_i+0xc8>
 8009650:	232d      	movs	r3, #45	; 0x2d
 8009652:	4276      	negs	r6, r6
 8009654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009658:	485e      	ldr	r0, [pc, #376]	; (80097d4 <_printf_i+0x244>)
 800965a:	230a      	movs	r3, #10
 800965c:	e019      	b.n	8009692 <_printf_i+0x102>
 800965e:	680e      	ldr	r6, [r1, #0]
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009666:	bf18      	it	ne
 8009668:	b236      	sxthne	r6, r6
 800966a:	e7ef      	b.n	800964c <_printf_i+0xbc>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	6820      	ldr	r0, [r4, #0]
 8009670:	1d19      	adds	r1, r3, #4
 8009672:	6029      	str	r1, [r5, #0]
 8009674:	0601      	lsls	r1, r0, #24
 8009676:	d501      	bpl.n	800967c <_printf_i+0xec>
 8009678:	681e      	ldr	r6, [r3, #0]
 800967a:	e002      	b.n	8009682 <_printf_i+0xf2>
 800967c:	0646      	lsls	r6, r0, #25
 800967e:	d5fb      	bpl.n	8009678 <_printf_i+0xe8>
 8009680:	881e      	ldrh	r6, [r3, #0]
 8009682:	4854      	ldr	r0, [pc, #336]	; (80097d4 <_printf_i+0x244>)
 8009684:	2f6f      	cmp	r7, #111	; 0x6f
 8009686:	bf0c      	ite	eq
 8009688:	2308      	moveq	r3, #8
 800968a:	230a      	movne	r3, #10
 800968c:	2100      	movs	r1, #0
 800968e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009692:	6865      	ldr	r5, [r4, #4]
 8009694:	60a5      	str	r5, [r4, #8]
 8009696:	2d00      	cmp	r5, #0
 8009698:	bfa2      	ittt	ge
 800969a:	6821      	ldrge	r1, [r4, #0]
 800969c:	f021 0104 	bicge.w	r1, r1, #4
 80096a0:	6021      	strge	r1, [r4, #0]
 80096a2:	b90e      	cbnz	r6, 80096a8 <_printf_i+0x118>
 80096a4:	2d00      	cmp	r5, #0
 80096a6:	d04d      	beq.n	8009744 <_printf_i+0x1b4>
 80096a8:	4615      	mov	r5, r2
 80096aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ae:	fb03 6711 	mls	r7, r3, r1, r6
 80096b2:	5dc7      	ldrb	r7, [r0, r7]
 80096b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096b8:	4637      	mov	r7, r6
 80096ba:	42bb      	cmp	r3, r7
 80096bc:	460e      	mov	r6, r1
 80096be:	d9f4      	bls.n	80096aa <_printf_i+0x11a>
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d10b      	bne.n	80096dc <_printf_i+0x14c>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	07de      	lsls	r6, r3, #31
 80096c8:	d508      	bpl.n	80096dc <_printf_i+0x14c>
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	6861      	ldr	r1, [r4, #4]
 80096ce:	4299      	cmp	r1, r3
 80096d0:	bfde      	ittt	le
 80096d2:	2330      	movle	r3, #48	; 0x30
 80096d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096dc:	1b52      	subs	r2, r2, r5
 80096de:	6122      	str	r2, [r4, #16]
 80096e0:	f8cd a000 	str.w	sl, [sp]
 80096e4:	464b      	mov	r3, r9
 80096e6:	aa03      	add	r2, sp, #12
 80096e8:	4621      	mov	r1, r4
 80096ea:	4640      	mov	r0, r8
 80096ec:	f7ff fee2 	bl	80094b4 <_printf_common>
 80096f0:	3001      	adds	r0, #1
 80096f2:	d14c      	bne.n	800978e <_printf_i+0x1fe>
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	b004      	add	sp, #16
 80096fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fe:	4835      	ldr	r0, [pc, #212]	; (80097d4 <_printf_i+0x244>)
 8009700:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009704:	6829      	ldr	r1, [r5, #0]
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	f851 6b04 	ldr.w	r6, [r1], #4
 800970c:	6029      	str	r1, [r5, #0]
 800970e:	061d      	lsls	r5, r3, #24
 8009710:	d514      	bpl.n	800973c <_printf_i+0x1ac>
 8009712:	07df      	lsls	r7, r3, #31
 8009714:	bf44      	itt	mi
 8009716:	f043 0320 	orrmi.w	r3, r3, #32
 800971a:	6023      	strmi	r3, [r4, #0]
 800971c:	b91e      	cbnz	r6, 8009726 <_printf_i+0x196>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	f023 0320 	bic.w	r3, r3, #32
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	2310      	movs	r3, #16
 8009728:	e7b0      	b.n	800968c <_printf_i+0xfc>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	f043 0320 	orr.w	r3, r3, #32
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	2378      	movs	r3, #120	; 0x78
 8009734:	4828      	ldr	r0, [pc, #160]	; (80097d8 <_printf_i+0x248>)
 8009736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800973a:	e7e3      	b.n	8009704 <_printf_i+0x174>
 800973c:	0659      	lsls	r1, r3, #25
 800973e:	bf48      	it	mi
 8009740:	b2b6      	uxthmi	r6, r6
 8009742:	e7e6      	b.n	8009712 <_printf_i+0x182>
 8009744:	4615      	mov	r5, r2
 8009746:	e7bb      	b.n	80096c0 <_printf_i+0x130>
 8009748:	682b      	ldr	r3, [r5, #0]
 800974a:	6826      	ldr	r6, [r4, #0]
 800974c:	6961      	ldr	r1, [r4, #20]
 800974e:	1d18      	adds	r0, r3, #4
 8009750:	6028      	str	r0, [r5, #0]
 8009752:	0635      	lsls	r5, r6, #24
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	d501      	bpl.n	800975c <_printf_i+0x1cc>
 8009758:	6019      	str	r1, [r3, #0]
 800975a:	e002      	b.n	8009762 <_printf_i+0x1d2>
 800975c:	0670      	lsls	r0, r6, #25
 800975e:	d5fb      	bpl.n	8009758 <_printf_i+0x1c8>
 8009760:	8019      	strh	r1, [r3, #0]
 8009762:	2300      	movs	r3, #0
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	4615      	mov	r5, r2
 8009768:	e7ba      	b.n	80096e0 <_printf_i+0x150>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	1d1a      	adds	r2, r3, #4
 800976e:	602a      	str	r2, [r5, #0]
 8009770:	681d      	ldr	r5, [r3, #0]
 8009772:	6862      	ldr	r2, [r4, #4]
 8009774:	2100      	movs	r1, #0
 8009776:	4628      	mov	r0, r5
 8009778:	f7f6 fd4a 	bl	8000210 <memchr>
 800977c:	b108      	cbz	r0, 8009782 <_printf_i+0x1f2>
 800977e:	1b40      	subs	r0, r0, r5
 8009780:	6060      	str	r0, [r4, #4]
 8009782:	6863      	ldr	r3, [r4, #4]
 8009784:	6123      	str	r3, [r4, #16]
 8009786:	2300      	movs	r3, #0
 8009788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800978c:	e7a8      	b.n	80096e0 <_printf_i+0x150>
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	462a      	mov	r2, r5
 8009792:	4649      	mov	r1, r9
 8009794:	4640      	mov	r0, r8
 8009796:	47d0      	blx	sl
 8009798:	3001      	adds	r0, #1
 800979a:	d0ab      	beq.n	80096f4 <_printf_i+0x164>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	079b      	lsls	r3, r3, #30
 80097a0:	d413      	bmi.n	80097ca <_printf_i+0x23a>
 80097a2:	68e0      	ldr	r0, [r4, #12]
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	4298      	cmp	r0, r3
 80097a8:	bfb8      	it	lt
 80097aa:	4618      	movlt	r0, r3
 80097ac:	e7a4      	b.n	80096f8 <_printf_i+0x168>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4632      	mov	r2, r6
 80097b2:	4649      	mov	r1, r9
 80097b4:	4640      	mov	r0, r8
 80097b6:	47d0      	blx	sl
 80097b8:	3001      	adds	r0, #1
 80097ba:	d09b      	beq.n	80096f4 <_printf_i+0x164>
 80097bc:	3501      	adds	r5, #1
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	9903      	ldr	r1, [sp, #12]
 80097c2:	1a5b      	subs	r3, r3, r1
 80097c4:	42ab      	cmp	r3, r5
 80097c6:	dcf2      	bgt.n	80097ae <_printf_i+0x21e>
 80097c8:	e7eb      	b.n	80097a2 <_printf_i+0x212>
 80097ca:	2500      	movs	r5, #0
 80097cc:	f104 0619 	add.w	r6, r4, #25
 80097d0:	e7f5      	b.n	80097be <_printf_i+0x22e>
 80097d2:	bf00      	nop
 80097d4:	0800a4aa 	.word	0x0800a4aa
 80097d8:	0800a4bb 	.word	0x0800a4bb

080097dc <__retarget_lock_acquire_recursive>:
 80097dc:	4770      	bx	lr

080097de <__retarget_lock_release_recursive>:
 80097de:	4770      	bx	lr

080097e0 <_realloc_r>:
 80097e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e4:	4680      	mov	r8, r0
 80097e6:	4614      	mov	r4, r2
 80097e8:	460e      	mov	r6, r1
 80097ea:	b921      	cbnz	r1, 80097f6 <_realloc_r+0x16>
 80097ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097f0:	4611      	mov	r1, r2
 80097f2:	f7ff bc53 	b.w	800909c <_malloc_r>
 80097f6:	b92a      	cbnz	r2, 8009804 <_realloc_r+0x24>
 80097f8:	f7ff fbe4 	bl	8008fc4 <_free_r>
 80097fc:	4625      	mov	r5, r4
 80097fe:	4628      	mov	r0, r5
 8009800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009804:	f000 f81b 	bl	800983e <_malloc_usable_size_r>
 8009808:	4284      	cmp	r4, r0
 800980a:	4607      	mov	r7, r0
 800980c:	d802      	bhi.n	8009814 <_realloc_r+0x34>
 800980e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009812:	d812      	bhi.n	800983a <_realloc_r+0x5a>
 8009814:	4621      	mov	r1, r4
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff fc40 	bl	800909c <_malloc_r>
 800981c:	4605      	mov	r5, r0
 800981e:	2800      	cmp	r0, #0
 8009820:	d0ed      	beq.n	80097fe <_realloc_r+0x1e>
 8009822:	42bc      	cmp	r4, r7
 8009824:	4622      	mov	r2, r4
 8009826:	4631      	mov	r1, r6
 8009828:	bf28      	it	cs
 800982a:	463a      	movcs	r2, r7
 800982c:	f7ff fb9a 	bl	8008f64 <memcpy>
 8009830:	4631      	mov	r1, r6
 8009832:	4640      	mov	r0, r8
 8009834:	f7ff fbc6 	bl	8008fc4 <_free_r>
 8009838:	e7e1      	b.n	80097fe <_realloc_r+0x1e>
 800983a:	4635      	mov	r5, r6
 800983c:	e7df      	b.n	80097fe <_realloc_r+0x1e>

0800983e <_malloc_usable_size_r>:
 800983e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009842:	1f18      	subs	r0, r3, #4
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfbc      	itt	lt
 8009848:	580b      	ldrlt	r3, [r1, r0]
 800984a:	18c0      	addlt	r0, r0, r3
 800984c:	4770      	bx	lr
	...

08009850 <_init>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr

0800985c <_fini>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr
