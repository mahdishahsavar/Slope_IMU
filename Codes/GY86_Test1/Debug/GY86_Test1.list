
GY86_Test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004798  08004798  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004798  08004798  00014798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080047a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000078  08004818  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08004818  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009568  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abe  00000000  00000000  00029610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d9b  00000000  00000000  0002c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb72  00000000  00000000  0004cea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8b84  00000000  00000000  00058a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00121599  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b4  00000000  00000000  001215ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003fbc 	.word	0x08003fbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08003fbc 	.word	0x08003fbc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a0      	sub	sp, #128	; 0x80
 80005b8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 ff51 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 fa53 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fb1f 	bl	8000c04 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c6:	f000 fac1 	bl	8000b4c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005ca:	f000 faed 	bl	8000ba8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005ce:	f000 fd45 	bl	800105c <ssd1306_Init>
#define HMC5883L_REG_STATUS           (0x09)
#define HMC5883L_REG_IDENT_A          (0x0A)
#define HMC5883L_REG_IDENT_B          (0x0B)
#define HMC5883L_REG_IDENT_C          (0x0C)

  uint8_t MPU6050_rx=0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint8_t MPU6050_rx_buf[20];
  uint8_t MPU6050_tx;
  float MPU6050_Gyro_LSB = 32.8;
 80005d8:	4bc8      	ldr	r3, [pc, #800]	; (80008fc <main+0x348>)
 80005da:	66bb      	str	r3, [r7, #104]	; 0x68
  float MPU6050_Acc_LSB = 4096.0;
 80005dc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80005e0:	667b      	str	r3, [r7, #100]	; 0x64

// configure the MPU6050 (gyro/accelerometer)
	MPU6050_tx = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x6B, 1, 0x00, 1, 100); // exit sleep
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2301      	movs	r3, #1
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2300      	movs	r3, #0
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	226b      	movs	r2, #107	; 0x6b
 80005f8:	21d0      	movs	r1, #208	; 0xd0
 80005fa:	48c1      	ldr	r0, [pc, #772]	; (8000900 <main+0x34c>)
 80005fc:	f001 fb9e 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 ff9f 	bl	8001544 <HAL_Delay>

	MPU6050_tx = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x19, 1, 109, 1, 100); // sample rate = 8kHz / 110 = 72.7Hz
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	9302      	str	r3, [sp, #8]
 8000610:	2301      	movs	r3, #1
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	236d      	movs	r3, #109	; 0x6d
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2301      	movs	r3, #1
 800061a:	2219      	movs	r2, #25
 800061c:	21d0      	movs	r1, #208	; 0xd0
 800061e:	48b8      	ldr	r0, [pc, #736]	; (8000900 <main+0x34c>)
 8000620:	f001 fb8c 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 ff8d 	bl	8001544 <HAL_Delay>

	MPU6050_tx = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1B, 1, 0x18, 1, 100); // gyro full scale = +/- 2000dps
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	2301      	movs	r3, #1
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2318      	movs	r3, #24
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	221b      	movs	r2, #27
 8000640:	21d0      	movs	r1, #208	; 0xd0
 8000642:	48af      	ldr	r0, [pc, #700]	; (8000900 <main+0x34c>)
 8000644:	f001 fb7a 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 ff7b 	bl	8001544 <HAL_Delay>

	MPU6050_tx = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x1C, 1, 0x08, 1, 100); // accelerometer full scale = +/- 4g
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	2301      	movs	r3, #1
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2308      	movs	r3, #8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	221c      	movs	r2, #28
 8000664:	21d0      	movs	r1, #208	; 0xd0
 8000666:	48a6      	ldr	r0, [pc, #664]	; (8000900 <main+0x34c>)
 8000668:	f001 fb68 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 ff69 	bl	8001544 <HAL_Delay>

	MPU6050_tx = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x38, 1, 0x01, 1, 100); // enable INTA interrupt
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2301      	movs	r3, #1
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	2238      	movs	r2, #56	; 0x38
 8000688:	21d0      	movs	r1, #208	; 0xd0
 800068a:	489d      	ldr	r0, [pc, #628]	; (8000900 <main+0x34c>)
 800068c:	f001 fb56 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 ff57 	bl	8001544 <HAL_Delay>

// configure the HMC5883L (magnetometer)

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x6A, 1, 0x00, 1, 100); // disable i2c master mode
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	9302      	str	r3, [sp, #8]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	2300      	movs	r3, #0
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	226a      	movs	r2, #106	; 0x6a
 80006a6:	21d0      	movs	r1, #208	; 0xd0
 80006a8:	4895      	ldr	r0, [pc, #596]	; (8000900 <main+0x34c>)
 80006aa:	f001 fb47 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80006ae:	200a      	movs	r0, #10
 80006b0:	f000 ff48 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x37, 1, 0x02, 1, 100); // enable i2c master bypass mode
 80006b4:	2364      	movs	r3, #100	; 0x64
 80006b6:	9302      	str	r3, [sp, #8]
 80006b8:	2301      	movs	r3, #1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2301      	movs	r3, #1
 80006c2:	2237      	movs	r2, #55	; 0x37
 80006c4:	21d0      	movs	r1, #208	; 0xd0
 80006c6:	488e      	ldr	r0, [pc, #568]	; (8000900 <main+0x34c>)
 80006c8:	f001 fb38 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80006cc:	200a      	movs	r0, #10
 80006ce:	f000 ff39 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDRESS, 0x00, 1, 0x18, 1, 100); // sample rate = 75Hz
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2318      	movs	r3, #24
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	2200      	movs	r2, #0
 80006e2:	211e      	movs	r1, #30
 80006e4:	4886      	ldr	r0, [pc, #536]	; (8000900 <main+0x34c>)
 80006e6:	f001 fb29 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80006ea:	200a      	movs	r0, #10
 80006ec:	f000 ff2a 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDRESS, 0x01, 1, 0x60, 1, 100); // full scale = +/- 2.5 Gauss
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2301      	movs	r3, #1
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2301      	movs	r3, #1
 80006fe:	2201      	movs	r2, #1
 8000700:	211e      	movs	r1, #30
 8000702:	487f      	ldr	r0, [pc, #508]	; (8000900 <main+0x34c>)
 8000704:	f001 fb1a 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f000 ff1b 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, HMC5883L_ADDRESS, 0x02, 1, 0x00, 1, 100); // continuous measurement mode
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	9302      	str	r3, [sp, #8]
 8000712:	2301      	movs	r3, #1
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2300      	movs	r3, #0
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	2202      	movs	r2, #2
 800071e:	211e      	movs	r1, #30
 8000720:	4877      	ldr	r0, [pc, #476]	; (8000900 <main+0x34c>)
 8000722:	f001 fb0b 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000726:	200a      	movs	r0, #10
 8000728:	f000 ff0c 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x37, 1, 0x00, 1, 100); // disable i2c master bypass mode
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2301      	movs	r3, #1
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2300      	movs	r3, #0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	2301      	movs	r3, #1
 800073a:	2237      	movs	r2, #55	; 0x37
 800073c:	21d0      	movs	r1, #208	; 0xd0
 800073e:	4870      	ldr	r0, [pc, #448]	; (8000900 <main+0x34c>)
 8000740:	f001 fafc 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fefd 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x6A, 1, 0x20, 1, 100); // enable i2c master mode
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2301      	movs	r3, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2320      	movs	r3, #32
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	226a      	movs	r2, #106	; 0x6a
 800075a:	21d0      	movs	r1, #208	; 0xd0
 800075c:	4868      	ldr	r0, [pc, #416]	; (8000900 <main+0x34c>)
 800075e:	f001 faed 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f000 feee 	bl	8001544 <HAL_Delay>

// configure the MPU6050 to automatically read the magnetometer

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x25, 1, HMC5883L_ADDRESS | 0x80 , 1, 100); // slave 0 i2c address, read mode
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	2301      	movs	r3, #1
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	239e      	movs	r3, #158	; 0x9e
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2301      	movs	r3, #1
 8000776:	2225      	movs	r2, #37	; 0x25
 8000778:	21d0      	movs	r1, #208	; 0xd0
 800077a:	4861      	ldr	r0, [pc, #388]	; (8000900 <main+0x34c>)
 800077c:	f001 fade 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fedf 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x26, 1, 0x03, 1, 100); // slave 0 register = 0x03 (x axis)
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	2301      	movs	r3, #1
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2303      	movs	r3, #3
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	2226      	movs	r2, #38	; 0x26
 8000796:	21d0      	movs	r1, #208	; 0xd0
 8000798:	4859      	ldr	r0, [pc, #356]	; (8000900 <main+0x34c>)
 800079a:	f001 facf 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f000 fed0 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x27, 1, 6 | 0x80, 1, 100); // slave 0 transfer size = 6, enabled
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	9302      	str	r3, [sp, #8]
 80007a8:	2301      	movs	r3, #1
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	2386      	movs	r3, #134	; 0x86
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2301      	movs	r3, #1
 80007b2:	2227      	movs	r2, #39	; 0x27
 80007b4:	21d0      	movs	r1, #208	; 0xd0
 80007b6:	4852      	ldr	r0, [pc, #328]	; (8000900 <main+0x34c>)
 80007b8:	f001 fac0 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 fec1 	bl	8001544 <HAL_Delay>

	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, 0x67, 1, 1 , 1, 100); // enable slave 0 delay
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	9302      	str	r3, [sp, #8]
 80007c6:	2301      	movs	r3, #1
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	2301      	movs	r3, #1
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	2301      	movs	r3, #1
 80007d0:	2267      	movs	r2, #103	; 0x67
 80007d2:	21d0      	movs	r1, #208	; 0xd0
 80007d4:	484a      	ldr	r0, [pc, #296]	; (8000900 <main+0x34c>)
 80007d6:	f001 fab1 	bl	8001d3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80007da:	200a      	movs	r0, #10
 80007dc:	f000 feb2 	bl	8001544 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	  // read the sensor values
	  	uint8_t rx_buffer[20];
	  	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR,0x3B, 1, &rx_buffer,20,100);
 80007e0:	2364      	movs	r3, #100	; 0x64
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	2314      	movs	r3, #20
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	223b      	movs	r2, #59	; 0x3b
 80007f2:	21d0      	movs	r1, #208	; 0xd0
 80007f4:	4842      	ldr	r0, [pc, #264]	; (8000900 <main+0x34c>)
 80007f6:	f001 fb9b 	bl	8001f30 <HAL_I2C_Mem_Read>

	  	// extract the raw values
	  	int16_t  accel_x  = rx_buffer[0]  << 8 | rx_buffer[1];
 80007fa:	7c3b      	ldrb	r3, [r7, #16]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	7c7b      	ldrb	r3, [r7, #17]
 8000802:	b21b      	sxth	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	  	int16_t  accel_y  = rx_buffer[2]  << 8 | rx_buffer[3];
 800080a:	7cbb      	ldrb	r3, [r7, #18]
 800080c:	021b      	lsls	r3, r3, #8
 800080e:	b21a      	sxth	r2, r3
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	b21b      	sxth	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  	int16_t  accel_z  = rx_buffer[4]  << 8 | rx_buffer[5];
 800081a:	7d3b      	ldrb	r3, [r7, #20]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21a      	sxth	r2, r3
 8000820:	7d7b      	ldrb	r3, [r7, #21]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  	int16_t  mpu_temp = rx_buffer[6]  << 8 | rx_buffer[7];
 800082a:	7dbb      	ldrb	r3, [r7, #22]
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	b21a      	sxth	r2, r3
 8000830:	7dfb      	ldrb	r3, [r7, #23]
 8000832:	b21b      	sxth	r3, r3
 8000834:	4313      	orrs	r3, r2
 8000836:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  	int16_t  gyro_x   = rx_buffer[8]  << 8 | rx_buffer[9];
 800083a:	7e3b      	ldrb	r3, [r7, #24]
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	b21a      	sxth	r2, r3
 8000840:	7e7b      	ldrb	r3, [r7, #25]
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	  	int16_t  gyro_y   = rx_buffer[10] << 8 | rx_buffer[11];
 800084a:	7ebb      	ldrb	r3, [r7, #26]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	7efb      	ldrb	r3, [r7, #27]
 8000852:	b21b      	sxth	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  	int16_t  gyro_z   = rx_buffer[12] << 8 | rx_buffer[13];
 800085a:	7f3b      	ldrb	r3, [r7, #28]
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	b21a      	sxth	r2, r3
 8000860:	7f7b      	ldrb	r3, [r7, #29]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	  	int16_t  magn_x   = rx_buffer[14] << 8 | rx_buffer[15];
 800086a:	7fbb      	ldrb	r3, [r7, #30]
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	b21a      	sxth	r2, r3
 8000870:	7ffb      	ldrb	r3, [r7, #31]
 8000872:	b21b      	sxth	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	  	int16_t  magn_y   = rx_buffer[16] << 8 | rx_buffer[17];
 800087a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	b21a      	sxth	r2, r3
 8000882:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000886:	b21b      	sxth	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	  	int16_t  magn_z   = rx_buffer[18] << 8 | rx_buffer[19];
 800088e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21a      	sxth	r2, r3
 8000896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	  	// convert accelerometer readings into G's
	  	int16_t	accel_x_g = accel_x / 8192.0f;
 80008a2:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ae:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000904 <main+0x350>
 80008b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ba:	ee17 3a90 	vmov	r3, s15
 80008be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  	int16_t	accel_y_g = accel_y / 8192.0f;
 80008c2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ce:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000904 <main+0x350>
 80008d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008da:	ee17 3a90 	vmov	r3, s15
 80008de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  	int16_t	accel_z_g = accel_z / 8192.0f;
 80008e2:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80008e6:	ee07 3a90 	vmov	s15, r3
 80008ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ee:	eddf 6a05 	vldr	s13, [pc, #20]	; 8000904 <main+0x350>
 80008f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fa:	e00d      	b.n	8000918 <main+0x364>
 80008fc:	42033333 	.word	0x42033333
 8000900:	200000e8 	.word	0x200000e8
 8000904:	46000000 	.word	0x46000000
 8000908:	43aa0000 	.word	0x43aa0000
 800090c:	42121eb8 	.word	0x42121eb8
 8000910:	446ae9a6 	.word	0x446ae9a6
 8000914:	44250000 	.word	0x44250000
 8000918:	ee17 3a90 	vmov	r3, s15
 800091c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	  	// convert temperature reading into degrees Celsius
	  	int16_t	mpu_temp_c = mpu_temp / 340.0f + 36.53f;
 8000920:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800092c:	ed5f 6a0a 	vldr	s13, [pc, #-40]	; 8000908 <main+0x354>
 8000930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000934:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 800090c <main+0x358>
 8000938:	ee77 7a87 	vadd.f32	s15, s15, s14
 800093c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000940:	ee17 3a90 	vmov	r3, s15
 8000944:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	  	// convert gyro readings into Radians per second
	  	int16_t	gyro_x_rad = gyro_x / 939.650784f;
 8000948:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 800094c:	ee07 3a90 	vmov	s15, r3
 8000950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000954:	ed5f 6a12 	vldr	s13, [pc, #-72]	; 8000910 <main+0x35c>
 8000958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800095c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000960:	ee17 3a90 	vmov	r3, s15
 8000964:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	  	int16_t	gyro_y_rad = gyro_y / 939.650784f;
 8000968:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800096c:	ee07 3a90 	vmov	s15, r3
 8000970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000974:	ed5f 6a1a 	vldr	s13, [pc, #-104]	; 8000910 <main+0x35c>
 8000978:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800097c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000980:	ee17 3a90 	vmov	r3, s15
 8000984:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  	int16_t	gyro_z_rad = gyro_z / 939.650784f;
 8000988:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000994:	ed5f 6a22 	vldr	s13, [pc, #-136]	; 8000910 <main+0x35c>
 8000998:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800099c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009a0:	ee17 3a90 	vmov	r3, s15
 80009a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	  	// convert magnetometer readings into Gauss's
	  	int16_t	magn_x_gs = magn_x / 660.0f;
 80009a8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009b4:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8000914 <main+0x360>
 80009b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009c0:	ee17 3a90 	vmov	r3, s15
 80009c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  	int16_t	magn_y_gs = magn_y / 660.0f;
 80009c6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009d2:	ed5f 6a30 	vldr	s13, [pc, #-192]	; 8000914 <main+0x360>
 80009d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009de:	ee17 3a90 	vmov	r3, s15
 80009e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  	int16_t	magn_z_gs = magn_z / 660.0f;
 80009e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f0:	ed5f 6a38 	vldr	s13, [pc, #-224]	; 8000914 <main+0x360>
 80009f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009fc:	ee17 3a90 	vmov	r3, s15
 8000a00:	877b      	strh	r3, [r7, #58]	; 0x3a


	  char str[5];
	  sprintf(str, "%d", mpu_temp_c);
 8000a02:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	; 0x46
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4915      	ldr	r1, [pc, #84]	; (8000a60 <main+0x4ac>)
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 ff7f 	bl	8003910 <siprintf>

	  ssd1306_SetCursor(0,0);
 8000a12:	2100      	movs	r1, #0
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 fcd9 	bl	80013cc <ssd1306_SetCursor>
	  char retVal= ssd1306_WriteString(str, Font_7x10, White);
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <main+0x4b0>)
 8000a1c:	f107 0008 	add.w	r0, r7, #8
 8000a20:	2301      	movs	r3, #1
 8000a22:	ca06      	ldmia	r2, {r1, r2}
 8000a24:	f000 fcac 	bl	8001380 <ssd1306_WriteString>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  ssd1306_UpdateScreen();
 8000a2e:	f000 fba3 	bl	8001178 <ssd1306_UpdateScreen>

	  char str2[5];
	  sprintf(str2, "%d", accel_y);
 8000a32:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 8000a36:	463b      	mov	r3, r7
 8000a38:	4909      	ldr	r1, [pc, #36]	; (8000a60 <main+0x4ac>)
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 ff68 	bl	8003910 <siprintf>

	  ssd1306_SetCursor(0,15);
 8000a40:	210f      	movs	r1, #15
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 fcc2 	bl	80013cc <ssd1306_SetCursor>
	  retVal= ssd1306_WriteString(str2, Font_7x10, White);
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <main+0x4b0>)
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	ca06      	ldmia	r2, {r1, r2}
 8000a50:	f000 fc96 	bl	8001380 <ssd1306_WriteString>
 8000a54:	4603      	mov	r3, r0
 8000a56:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	  ssd1306_UpdateScreen();
 8000a5a:	f000 fb8d 	bl	8001178 <ssd1306_UpdateScreen>
  {
 8000a5e:	e6bf      	b.n	80007e0 <main+0x22c>
 8000a60:	08003fd4 	.word	0x08003fd4
 8000a64:	20000004 	.word	0x20000004

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2234      	movs	r2, #52	; 0x34
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fe52 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b2c      	ldr	r3, [pc, #176]	; (8000b44 <SystemClock_Config+0xdc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a2b      	ldr	r2, [pc, #172]	; (8000b44 <SystemClock_Config+0xdc>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <SystemClock_Config+0xdc>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <SystemClock_Config+0xe0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <SystemClock_Config+0xe0>)
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <SystemClock_Config+0xe0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ad8:	2304      	movs	r3, #4
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000adc:	23b4      	movs	r3, #180	; 0xb4
 8000ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4618      	mov	r0, r3
 8000af2:	f002 fb25 	bl	8003140 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000afc:	f000 f90e 	bl	8000d1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b00:	f001 ff98 	bl	8002a34 <HAL_PWREx_EnableOverDrive>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b0a:	f000 f907 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2105      	movs	r1, #5
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 ffd1 	bl	8002ad4 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b38:	f000 f8f0 	bl	8000d1c <Error_Handler>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3750      	adds	r7, #80	; 0x50
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_I2C1_Init+0x54>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_I2C1_Init+0x58>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b8a:	f000 ff93 	bl	8001ab4 <HAL_I2C_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b94:	f000 f8c2 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000094 	.word	0x20000094
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	000186a0 	.word	0x000186a0

08000ba8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_I2C2_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_I2C2_Init+0x58>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_I2C2_Init+0x50>)
 8000be6:	f000 ff65 	bl	8001ab4 <HAL_I2C_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bf0:	f000 f894 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000e8 	.word	0x200000e8
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	00061a80 	.word	0x00061a80

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b3b      	ldr	r3, [pc, #236]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b38      	ldr	r3, [pc, #224]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b34      	ldr	r3, [pc, #208]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b31      	ldr	r3, [pc, #196]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a2c      	ldr	r2, [pc, #176]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <MX_GPIO_Init+0x108>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2120      	movs	r1, #32
 8000c8e:	4820      	ldr	r0, [pc, #128]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000c90:	f000 fef6 	bl	8001a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <MX_GPIO_Init+0x110>)
 8000cac:	f000 fd54 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb0:	230c      	movs	r3, #12
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000ccc:	f000 fd44 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cd0:	2320      	movs	r3, #32
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480a      	ldr	r0, [pc, #40]	; (8000d10 <MX_GPIO_Init+0x10c>)
 8000ce8:	f000 fd36 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cec:	2330      	movs	r3, #48	; 0x30
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_GPIO_Init+0x114>)
 8000d00:	f000 fd2a 	bl	8001758 <HAL_GPIO_Init>

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40020400 	.word	0x40020400

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>
	...

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d66:	2007      	movs	r0, #7
 8000d68:	f000 fcc2 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a42      	ldr	r2, [pc, #264]	; (8000ea0 <HAL_I2C_MspInit+0x128>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12d      	bne.n	8000df6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3e      	ldr	r3, [pc, #248]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4835      	ldr	r0, [pc, #212]	; (8000ea8 <HAL_I2C_MspInit+0x130>)
 8000dd4:	f000 fcc0 	bl	8001758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de6:	6413      	str	r3, [r2, #64]	; 0x40
 8000de8:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000df4:	e050      	b.n	8000e98 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a2c      	ldr	r2, [pc, #176]	; (8000eac <HAL_I2C_MspInit+0x134>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d14b      	bne.n	8000e98 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3e:	2312      	movs	r3, #18
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <HAL_I2C_MspInit+0x130>)
 8000e56:	f000 fc7f 	bl	8001758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	480e      	ldr	r0, [pc, #56]	; (8000eb0 <HAL_I2C_MspInit+0x138>)
 8000e78:	f000 fc6e 	bl	8001758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_I2C_MspInit+0x12c>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40005800 	.word	0x40005800
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f00:	f000 fb00 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f002 fba0 	bl	800367c <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	2000013c 	.word	0x2000013c
 8000f70:	20000360 	.word	0x20000360

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd7 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f002 fb5f 	bl	8003688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff faf3 	bl	80005b4 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000fdc:	080047a0 	.word	0x080047a0
  ldr r2, =_sbss
 8000fe0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fe4:	2000035c 	.word	0x2000035c

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>

08000fea <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af04      	add	r7, sp, #16
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001002:	f04f 33ff 	mov.w	r3, #4294967295
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2200      	movs	r2, #0
 8001014:	2178      	movs	r1, #120	; 0x78
 8001016:	4803      	ldr	r0, [pc, #12]	; (8001024 <ssd1306_WriteCommand+0x2c>)
 8001018:	f000 fe90 	bl	8001d3c <HAL_I2C_Mem_Write>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000094 	.word	0x20000094

08001028 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af04      	add	r7, sp, #16
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b29b      	uxth	r3, r3
 8001036:	f04f 32ff 	mov.w	r2, #4294967295
 800103a:	9202      	str	r2, [sp, #8]
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	2178      	movs	r1, #120	; 0x78
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <ssd1306_WriteData+0x30>)
 800104a:	f000 fe77 	bl	8001d3c <HAL_I2C_Mem_Write>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000094 	.word	0x20000094

0800105c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001060:	f7ff ffc3 	bl	8000fea <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001064:	2064      	movs	r0, #100	; 0x64
 8001066:	f000 fa6d 	bl	8001544 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800106a:	2000      	movs	r0, #0
 800106c:	f000 f9da 	bl	8001424 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001070:	2020      	movs	r0, #32
 8001072:	f7ff ffc1 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ffbe 	bl	8000ff8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800107c:	20b0      	movs	r0, #176	; 0xb0
 800107e:	f7ff ffbb 	bl	8000ff8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001082:	20c8      	movs	r0, #200	; 0xc8
 8001084:	f7ff ffb8 	bl	8000ff8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001088:	2000      	movs	r0, #0
 800108a:	f7ff ffb5 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800108e:	2010      	movs	r0, #16
 8001090:	f7ff ffb2 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001094:	2040      	movs	r0, #64	; 0x40
 8001096:	f7ff ffaf 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800109a:	20ff      	movs	r0, #255	; 0xff
 800109c:	f000 f9ae 	bl	80013fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80010a0:	20a1      	movs	r0, #161	; 0xa1
 80010a2:	f7ff ffa9 	bl	8000ff8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80010a6:	20a6      	movs	r0, #166	; 0xa6
 80010a8:	f7ff ffa6 	bl	8000ff8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80010ac:	20a8      	movs	r0, #168	; 0xa8
 80010ae:	f7ff ffa3 	bl	8000ff8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80010b2:	201f      	movs	r0, #31
 80010b4:	f7ff ffa0 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010b8:	20a4      	movs	r0, #164	; 0xa4
 80010ba:	f7ff ff9d 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80010be:	20d3      	movs	r0, #211	; 0xd3
 80010c0:	f7ff ff9a 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff97 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80010ca:	20d5      	movs	r0, #213	; 0xd5
 80010cc:	f7ff ff94 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80010d0:	20f0      	movs	r0, #240	; 0xf0
 80010d2:	f7ff ff91 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80010d6:	20d9      	movs	r0, #217	; 0xd9
 80010d8:	f7ff ff8e 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80010dc:	2022      	movs	r0, #34	; 0x22
 80010de:	f7ff ff8b 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80010e2:	20da      	movs	r0, #218	; 0xda
 80010e4:	f7ff ff88 	bl	8000ff8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff ff85 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80010ee:	20db      	movs	r0, #219	; 0xdb
 80010f0:	f7ff ff82 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80010f4:	2020      	movs	r0, #32
 80010f6:	f7ff ff7f 	bl	8000ff8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80010fa:	208d      	movs	r0, #141	; 0x8d
 80010fc:	f7ff ff7c 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001100:	2014      	movs	r0, #20
 8001102:	f7ff ff79 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f98c 	bl	8001424 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800110c:	2000      	movs	r0, #0
 800110e:	f000 f80f 	bl	8001130 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001112:	f000 f831 	bl	8001178 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <ssd1306_Init+0xd0>)
 8001118:	2200      	movs	r2, #0
 800111a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <ssd1306_Init+0xd0>)
 800111e:	2200      	movs	r2, #0
 8001120:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001122:	4b02      	ldr	r3, [pc, #8]	; (800112c <ssd1306_Init+0xd0>)
 8001124:	2201      	movs	r2, #1
 8001126:	711a      	strb	r2, [r3, #4]
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000340 	.word	0x20000340

08001130 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e00d      	b.n	800115c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <ssd1306_Fill+0x1a>
 8001146:	2100      	movs	r1, #0
 8001148:	e000      	b.n	800114c <ssd1306_Fill+0x1c>
 800114a:	21ff      	movs	r1, #255	; 0xff
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <ssd1306_Fill+0x44>)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3301      	adds	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001162:	d3ed      	bcc.n	8001140 <ssd1306_Fill+0x10>
    }
}
 8001164:	bf00      	nop
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000140 	.word	0x20000140

08001178 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800117e:	2300      	movs	r3, #0
 8001180:	71fb      	strb	r3, [r7, #7]
 8001182:	e016      	b.n	80011b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3b50      	subs	r3, #80	; 0x50
 8001188:	b2db      	uxtb	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff34 	bl	8000ff8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff ff31 	bl	8000ff8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001196:	2010      	movs	r0, #16
 8001198:	f7ff ff2e 	bl	8000ff8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	01db      	lsls	r3, r3, #7
 80011a0:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <ssd1306_UpdateScreen+0x4c>)
 80011a2:	4413      	add	r3, r2
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff3e 	bl	8001028 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	3301      	adds	r3, #1
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d9e5      	bls.n	8001184 <ssd1306_UpdateScreen+0xc>
    }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000140 	.word	0x20000140

080011c8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
 80011d2:	460b      	mov	r3, r1
 80011d4:	71bb      	strb	r3, [r7, #6]
 80011d6:	4613      	mov	r3, r2
 80011d8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db3d      	blt.n	800125e <ssd1306_DrawPixel+0x96>
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	2b1f      	cmp	r3, #31
 80011e6:	d83a      	bhi.n	800125e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80011e8:	797b      	ldrb	r3, [r7, #5]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d11a      	bne.n	8001224 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	b2d8      	uxtb	r0, r3
 80011f6:	4603      	mov	r3, r0
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	4413      	add	r3, r2
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <ssd1306_DrawPixel+0xa4>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	b25a      	sxtb	r2, r3
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	2101      	movs	r1, #1
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	b25b      	sxtb	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b259      	sxtb	r1, r3
 8001214:	79fa      	ldrb	r2, [r7, #7]
 8001216:	4603      	mov	r3, r0
 8001218:	01db      	lsls	r3, r3, #7
 800121a:	4413      	add	r3, r2
 800121c:	b2c9      	uxtb	r1, r1
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <ssd1306_DrawPixel+0xa4>)
 8001220:	54d1      	strb	r1, [r2, r3]
 8001222:	e01d      	b.n	8001260 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	b2d8      	uxtb	r0, r3
 800122c:	4603      	mov	r3, r0
 800122e:	01db      	lsls	r3, r3, #7
 8001230:	4413      	add	r3, r2
 8001232:	4a0e      	ldr	r2, [pc, #56]	; (800126c <ssd1306_DrawPixel+0xa4>)
 8001234:	5cd3      	ldrb	r3, [r2, r3]
 8001236:	b25a      	sxtb	r2, r3
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	2101      	movs	r1, #1
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	b25b      	sxtb	r3, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	b25b      	sxtb	r3, r3
 800124a:	4013      	ands	r3, r2
 800124c:	b259      	sxtb	r1, r3
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	4603      	mov	r3, r0
 8001252:	01db      	lsls	r3, r3, #7
 8001254:	4413      	add	r3, r2
 8001256:	b2c9      	uxtb	r1, r1
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <ssd1306_DrawPixel+0xa4>)
 800125a:	54d1      	strb	r1, [r2, r3]
 800125c:	e000      	b.n	8001260 <ssd1306_DrawPixel+0x98>
        return;
 800125e:	bf00      	nop
    }
}
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000140 	.word	0x20000140

08001270 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	4604      	mov	r4, r0
 8001278:	1d38      	adds	r0, r7, #4
 800127a:	e880 0006 	stmia.w	r0, {r1, r2}
 800127e:	461a      	mov	r2, r3
 8001280:	4623      	mov	r3, r4
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	4613      	mov	r3, r2
 8001286:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b1f      	cmp	r3, #31
 800128c:	d902      	bls.n	8001294 <ssd1306_WriteChar+0x24>
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b7e      	cmp	r3, #126	; 0x7e
 8001292:	d901      	bls.n	8001298 <ssd1306_WriteChar+0x28>
        return 0;
 8001294:	2300      	movs	r3, #0
 8001296:	e06d      	b.n	8001374 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001298:	4b38      	ldr	r3, [pc, #224]	; (800137c <ssd1306_WriteChar+0x10c>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	793b      	ldrb	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	2b80      	cmp	r3, #128	; 0x80
 80012a4:	dc06      	bgt.n	80012b4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <ssd1306_WriteChar+0x10c>)
 80012a8:	885b      	ldrh	r3, [r3, #2]
 80012aa:	461a      	mov	r2, r3
 80012ac:	797b      	ldrb	r3, [r7, #5]
 80012ae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	dd01      	ble.n	80012b8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e05d      	b.n	8001374 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
 80012bc:	e04c      	b.n	8001358 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	3b20      	subs	r3, #32
 80012c4:	7979      	ldrb	r1, [r7, #5]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	440b      	add	r3, r1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
 80012dc:	e034      	b.n	8001348 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d012      	beq.n	8001314 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <ssd1306_WriteChar+0x10c>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b2d8      	uxtb	r0, r3
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <ssd1306_WriteChar+0x10c>)
 80012fe:	885b      	ldrh	r3, [r3, #2]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4413      	add	r3, r2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	7bba      	ldrb	r2, [r7, #14]
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff ff5b 	bl	80011c8 <ssd1306_DrawPixel>
 8001312:	e016      	b.n	8001342 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <ssd1306_WriteChar+0x10c>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b2d8      	uxtb	r0, r3
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <ssd1306_WriteChar+0x10c>)
 8001324:	885b      	ldrh	r3, [r3, #2]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b2d9      	uxtb	r1, r3
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	f7ff ff43 	bl	80011c8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	3301      	adds	r3, #1
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	793b      	ldrb	r3, [r7, #4]
 800134a:	461a      	mov	r2, r3
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	4293      	cmp	r3, r2
 8001350:	d3c5      	bcc.n	80012de <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	461a      	mov	r2, r3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4293      	cmp	r3, r2
 8001360:	d3ad      	bcc.n	80012be <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <ssd1306_WriteChar+0x10c>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	793b      	ldrb	r3, [r7, #4]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4413      	add	r3, r2
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b03      	ldr	r3, [pc, #12]	; (800137c <ssd1306_WriteChar+0x10c>)
 8001370:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3724      	adds	r7, #36	; 0x24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	20000340 	.word	0x20000340

08001380 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	1d38      	adds	r0, r7, #4
 800138a:	e880 0006 	stmia.w	r0, {r1, r2}
 800138e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001390:	e012      	b.n	80013b8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	7818      	ldrb	r0, [r3, #0]
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	1d3a      	adds	r2, r7, #4
 800139a:	ca06      	ldmia	r2, {r1, r2}
 800139c:	f7ff ff68 	bl	8001270 <ssd1306_WriteChar>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d002      	beq.n	80013b2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	e008      	b.n	80013c4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e8      	bne.n	8001392 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	781b      	ldrb	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	460a      	mov	r2, r1
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <ssd1306_SetCursor+0x2c>)
 80013e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <ssd1306_SetCursor+0x2c>)
 80013ea:	805a      	strh	r2, [r3, #2]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20000340 	.word	0x20000340

080013fc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001406:	2381      	movs	r3, #129	; 0x81
 8001408:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fdf3 	bl	8000ff8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fdef 	bl	8000ff8 <ssd1306_WriteCommand>
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001434:	23af      	movs	r3, #175	; 0xaf
 8001436:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <ssd1306_SetDisplayOn+0x38>)
 800143a:	2201      	movs	r2, #1
 800143c:	715a      	strb	r2, [r3, #5]
 800143e:	e004      	b.n	800144a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001440:	23ae      	movs	r3, #174	; 0xae
 8001442:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <ssd1306_SetDisplayOn+0x38>)
 8001446:	2200      	movs	r2, #0
 8001448:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fdd3 	bl	8000ff8 <ssd1306_WriteCommand>
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000340 	.word	0x20000340

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <HAL_Init+0x40>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_Init+0x40>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x40>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f931 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fc48 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f93b 	bl	800173e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f911 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000010 	.word	0x20000010
 8001500:	2000000c 	.word	0x2000000c

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000010 	.word	0x20000010
 8001528:	20000348 	.word	0x20000348

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000348 	.word	0x20000348

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d005      	beq.n	800156a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_Delay+0x44>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156a:	bf00      	nop
 800156c:	f7ff ffde 	bl	800152c <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	429a      	cmp	r2, r3
 800157a:	d8f7      	bhi.n	800156c <HAL_Delay+0x28>
  {
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000010 	.word	0x20000010

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	; (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff47 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff5c 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffb0 	bl	80016ac <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e165      	b.n	8001a40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 8154 	bne.w	8001a3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d005      	beq.n	80017aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d130      	bne.n	800180c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0201 	and.w	r2, r3, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b03      	cmp	r3, #3
 8001816:	d017      	beq.n	8001848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80ae 	beq.w	8001a3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_GPIO_Init+0x300>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a5c      	ldr	r2, [pc, #368]	; (8001a58 <HAL_GPIO_Init+0x300>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_GPIO_Init+0x300>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fa:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_GPIO_Init+0x304>)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x308>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x30c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x216>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x310>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x212>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x314>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x20e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x318>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x20a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4a      	ldr	r2, [pc, #296]	; (8001a74 <HAL_GPIO_Init+0x31c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x206>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a49      	ldr	r2, [pc, #292]	; (8001a78 <HAL_GPIO_Init+0x320>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x202>
 8001956:	2306      	movs	r3, #6
 8001958:	e00c      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800195a:	2307      	movs	r3, #7
 800195c:	e00a      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800195e:	2305      	movs	r3, #5
 8001960:	e008      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 8001962:	2304      	movs	r3, #4
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 8001966:	2303      	movs	r3, #3
 8001968:	e004      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800196a:	2302      	movs	r3, #2
 800196c:	e002      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 800196e:	2301      	movs	r3, #1
 8001970:	e000      	b.n	8001974 <HAL_GPIO_Init+0x21c>
 8001972:	2300      	movs	r3, #0
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	f002 0203 	and.w	r2, r2, #3
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	4093      	lsls	r3, r2
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001984:	4935      	ldr	r1, [pc, #212]	; (8001a5c <HAL_GPIO_Init+0x304>)
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	3302      	adds	r3, #2
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b6:	4a31      	ldr	r2, [pc, #196]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_GPIO_Init+0x324>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_GPIO_Init+0x324>)
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	f67f ae96 	bls.w	8001774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40013800 	.word	0x40013800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020400 	.word	0x40020400
 8001a68:	40020800 	.word	0x40020800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40021400 	.word	0x40021400
 8001a78:	40021800 	.word	0x40021800
 8001a7c:	40013c00 	.word	0x40013c00

08001a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a9c:	e003      	b.n	8001aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9e:	887b      	ldrh	r3, [r7, #2]
 8001aa0:	041a      	lsls	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	619a      	str	r2, [r3, #24]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e12b      	b.n	8001d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff f94c 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b18:	f001 f8ce 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a81      	ldr	r2, [pc, #516]	; (8001d28 <HAL_I2C_Init+0x274>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d807      	bhi.n	8001b38 <HAL_I2C_Init+0x84>
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <HAL_I2C_Init+0x278>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	bf94      	ite	ls
 8001b30:	2301      	movls	r3, #1
 8001b32:	2300      	movhi	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	e006      	b.n	8001b46 <HAL_I2C_Init+0x92>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a7d      	ldr	r2, [pc, #500]	; (8001d30 <HAL_I2C_Init+0x27c>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf94      	ite	ls
 8001b40:	2301      	movls	r3, #1
 8001b42:	2300      	movhi	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0e7      	b.n	8001d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a78      	ldr	r2, [pc, #480]	; (8001d34 <HAL_I2C_Init+0x280>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9b      	lsrs	r3, r3, #18
 8001b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a6a      	ldr	r2, [pc, #424]	; (8001d28 <HAL_I2C_Init+0x274>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d802      	bhi.n	8001b88 <HAL_I2C_Init+0xd4>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3301      	adds	r3, #1
 8001b86:	e009      	b.n	8001b9c <HAL_I2C_Init+0xe8>
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a69      	ldr	r2, [pc, #420]	; (8001d38 <HAL_I2C_Init+0x284>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	495c      	ldr	r1, [pc, #368]	; (8001d28 <HAL_I2C_Init+0x274>)
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	d819      	bhi.n	8001bf0 <HAL_I2C_Init+0x13c>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e59      	subs	r1, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bca:	1c59      	adds	r1, r3, #1
 8001bcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00a      	beq.n	8001bec <HAL_I2C_Init+0x138>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1e59      	subs	r1, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001be4:	3301      	adds	r3, #1
 8001be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bea:	e051      	b.n	8001c90 <HAL_I2C_Init+0x1dc>
 8001bec:	2304      	movs	r3, #4
 8001bee:	e04f      	b.n	8001c90 <HAL_I2C_Init+0x1dc>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d111      	bne.n	8001c1c <HAL_I2C_Init+0x168>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	1e58      	subs	r0, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	440b      	add	r3, r1
 8001c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e012      	b.n	8001c42 <HAL_I2C_Init+0x18e>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	0099      	lsls	r1, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf0c      	ite	eq
 8001c3c:	2301      	moveq	r3, #1
 8001c3e:	2300      	movne	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Init+0x196>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e022      	b.n	8001c90 <HAL_I2C_Init+0x1dc>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10e      	bne.n	8001c70 <HAL_I2C_Init+0x1bc>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1e58      	subs	r0, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	440b      	add	r3, r1
 8001c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6e:	e00f      	b.n	8001c90 <HAL_I2C_Init+0x1dc>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e58      	subs	r0, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	0099      	lsls	r1, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	6809      	ldr	r1, [r1, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6911      	ldr	r1, [r2, #16]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68d2      	ldr	r2, [r2, #12]
 8001cca:	4311      	orrs	r1, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	000186a0 	.word	0x000186a0
 8001d2c:	001e847f 	.word	0x001e847f
 8001d30:	003d08ff 	.word	0x003d08ff
 8001d34:	431bde83 	.word	0x431bde83
 8001d38:	10624dd3 	.word	0x10624dd3

08001d3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d56:	f7ff fbe9 	bl	800152c <HAL_GetTick>
 8001d5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	f040 80d9 	bne.w	8001f1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2319      	movs	r3, #25
 8001d70:	2201      	movs	r2, #1
 8001d72:	496d      	ldr	r1, [pc, #436]	; (8001f28 <HAL_I2C_Mem_Write+0x1ec>)
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fc7f 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	e0cc      	b.n	8001f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2C_Mem_Write+0x56>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e0c5      	b.n	8001f1e <HAL_I2C_Mem_Write+0x1e2>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d007      	beq.n	8001db8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2221      	movs	r2, #33	; 0x21
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2240      	movs	r2, #64	; 0x40
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a3a      	ldr	r2, [r7, #32]
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4a4d      	ldr	r2, [pc, #308]	; (8001f2c <HAL_I2C_Mem_Write+0x1f0>)
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dfa:	88f8      	ldrh	r0, [r7, #6]
 8001dfc:	893a      	ldrh	r2, [r7, #8]
 8001dfe:	8979      	ldrh	r1, [r7, #10]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4603      	mov	r3, r0
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fab6 	bl	800237c <I2C_RequestMemoryWrite>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d052      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e081      	b.n	8001f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 fd00 	bl	8002824 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00d      	beq.n	8001e46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d107      	bne.n	8001e42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06b      	b.n	8001f1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d11b      	bne.n	8001ebc <HAL_I2C_Mem_Write+0x180>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d017      	beq.n	8001ebc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1aa      	bne.n	8001e1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fcec 	bl	80028a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d107      	bne.n	8001eec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e016      	b.n	8001f1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	e000      	b.n	8001f1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	00100002 	.word	0x00100002
 8001f2c:	ffff0000 	.word	0xffff0000

08001f30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	; 0x30
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f4a:	f7ff faef 	bl	800152c <HAL_GetTick>
 8001f4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	f040 8208 	bne.w	800236e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2319      	movs	r3, #25
 8001f64:	2201      	movs	r2, #1
 8001f66:	497b      	ldr	r1, [pc, #492]	; (8002154 <HAL_I2C_Mem_Read+0x224>)
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fb85 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
 8001f76:	e1fb      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_I2C_Mem_Read+0x56>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e1f4      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d007      	beq.n	8001fac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2222      	movs	r2, #34	; 0x22
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a5b      	ldr	r2, [pc, #364]	; (8002158 <HAL_I2C_Mem_Read+0x228>)
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fee:	88f8      	ldrh	r0, [r7, #6]
 8001ff0:	893a      	ldrh	r2, [r7, #8]
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 fa52 	bl	80024a8 <I2C_RequestMemoryRead>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e1b0      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	2b00      	cmp	r3, #0
 8002014:	d113      	bne.n	800203e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	623b      	str	r3, [r7, #32]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	623b      	str	r3, [r7, #32]
 800202a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e184      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	2b01      	cmp	r3, #1
 8002044:	d11b      	bne.n	800207e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002054:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	e164      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b02      	cmp	r3, #2
 8002084:	d11b      	bne.n	80020be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	e144      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80020d4:	e138      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b03      	cmp	r3, #3
 80020dc:	f200 80f1 	bhi.w	80022c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d123      	bne.n	8002130 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fc1b 	bl	8002928 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e139      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800212e:	e10b      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b02      	cmp	r3, #2
 8002136:	d14e      	bne.n	80021d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	2200      	movs	r2, #0
 8002140:	4906      	ldr	r1, [pc, #24]	; (800215c <HAL_I2C_Mem_Read+0x22c>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fa98 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e10e      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
 8002152:	bf00      	nop
 8002154:	00100002 	.word	0x00100002
 8002158:	ffff0000 	.word	0xffff0000
 800215c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021d4:	e0b8      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021dc:	2200      	movs	r2, #0
 80021de:	4966      	ldr	r1, [pc, #408]	; (8002378 <HAL_I2C_Mem_Read+0x448>)
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fa49 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0bf      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	2200      	movs	r2, #0
 800223a:	494f      	ldr	r1, [pc, #316]	; (8002378 <HAL_I2C_Mem_Read+0x448>)
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa1b 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e091      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022c0:	e042      	b.n	8002348 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fb2e 	bl	8002928 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04c      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b04      	cmp	r3, #4
 8002314:	d118      	bne.n	8002348 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	f47f aec2 	bne.w	80020d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	00010004 	.word	0x00010004

0800237c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f960 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00d      	beq.n	80023da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023cc:	d103      	bne.n	80023d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e05f      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	492d      	ldr	r1, [pc, #180]	; (80024a4 <I2C_RequestMemoryWrite+0x128>)
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f998 	bl	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e04c      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	6a39      	ldr	r1, [r7, #32]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa02 	bl	8002824 <I2C_WaitOnTXEFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00d      	beq.n	8002442 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b04      	cmp	r3, #4
 800242c:	d107      	bne.n	800243e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e02b      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002448:	893b      	ldrh	r3, [r7, #8]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	611a      	str	r2, [r3, #16]
 8002452:	e021      	b.n	8002498 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002454:	893b      	ldrh	r3, [r7, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	b29b      	uxth	r3, r3
 800245a:	b2da      	uxtb	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f9dc 	bl	8002824 <I2C_WaitOnTXEFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	2b04      	cmp	r3, #4
 8002478:	d107      	bne.n	800248a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e005      	b.n	800249a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	00010002 	.word	0x00010002

080024a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	817b      	strh	r3, [r7, #10]
 80024ba:	460b      	mov	r3, r1
 80024bc:	813b      	strh	r3, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f8c2 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002508:	d103      	bne.n	8002512 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0aa      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002524:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	6a3a      	ldr	r2, [r7, #32]
 800252a:	4952      	ldr	r1, [pc, #328]	; (8002674 <I2C_RequestMemoryRead+0x1cc>)
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 f8fa 	bl	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e097      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6a39      	ldr	r1, [r7, #32]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f964 	bl	8002824 <I2C_WaitOnTXEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b04      	cmp	r3, #4
 8002568:	d107      	bne.n	800257a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002578:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e076      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002584:	893b      	ldrh	r3, [r7, #8]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	e021      	b.n	80025d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	b29b      	uxth	r3, r3
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f93e 	bl	8002824 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e050      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ca:	893b      	ldrh	r3, [r7, #8]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d6:	6a39      	ldr	r1, [r7, #32]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f923 	bl	8002824 <I2C_WaitOnTXEFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00d      	beq.n	8002600 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d107      	bne.n	80025fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e035      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2200      	movs	r2, #0
 8002618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f82b 	bl	8002678 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002636:	d103      	bne.n	8002640 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e013      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002644:	897b      	ldrh	r3, [r7, #10]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	6a3a      	ldr	r2, [r7, #32]
 8002658:	4906      	ldr	r1, [pc, #24]	; (8002674 <I2C_RequestMemoryRead+0x1cc>)
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f863 	bl	8002726 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	00010002 	.word	0x00010002

08002678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002688:	e025      	b.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d021      	beq.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002692:	f7fe ff4b 	bl	800152c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d302      	bcc.n	80026a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d116      	bne.n	80026d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e023      	b.n	800271e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	0c1b      	lsrs	r3, r3, #16
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d10d      	bne.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	43da      	mvns	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4013      	ands	r3, r2
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	e00c      	b.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	429a      	cmp	r2, r3
 800271a:	d0b6      	beq.n	800268a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002734:	e051      	b.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002744:	d123      	bne.n	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002754:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800275e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f043 0204 	orr.w	r2, r3, #4
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e046      	b.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d021      	beq.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7fe fec9 	bl	800152c <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d116      	bne.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f043 0220 	orr.w	r2, r3, #32
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e020      	b.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	e00b      	b.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d18d      	bne.n	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002830:	e02d      	b.n	800288e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f8ce 	bl	80029d4 <I2C_IsAcknowledgeFailed>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e02d      	b.n	800289e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002848:	d021      	beq.n	800288e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284a:	f7fe fe6f 	bl	800152c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	d302      	bcc.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d116      	bne.n	800288e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f043 0220 	orr.w	r2, r3, #32
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e007      	b.n	800289e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d1ca      	bne.n	8002832 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028b2:	e02d      	b.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f88d 	bl	80029d4 <I2C_IsAcknowledgeFailed>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02d      	b.n	8002920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d021      	beq.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028cc:	f7fe fe2e 	bl	800152c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d302      	bcc.n	80028e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e007      	b.n	8002920 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d1ca      	bne.n	80028b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002934:	e042      	b.n	80029bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b10      	cmp	r3, #16
 8002942:	d119      	bne.n	8002978 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0210 	mvn.w	r2, #16
 800294c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e029      	b.n	80029cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002978:	f7fe fdd8 	bl	800152c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d302      	bcc.n	800298e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d116      	bne.n	80029bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e007      	b.n	80029cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b40      	cmp	r3, #64	; 0x40
 80029c8:	d1b5      	bne.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ea:	d11b      	bne.n	8002a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f043 0204 	orr.w	r2, r3, #4
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a60:	f7fe fd64 	bl	800152c <HAL_GetTick>
 8002a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a66:	e009      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a68:	f7fe fd60 	bl	800152c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a76:	d901      	bls.n	8002a7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e01f      	b.n	8002abc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_PWREx_EnableOverDrive+0x98>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d1ee      	bne.n	8002a68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a8a:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7fe fd4c 	bl	800152c <HAL_GetTick>
 8002a94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a96:	e009      	b.n	8002aac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a98:	f7fe fd48 	bl	800152c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aa6:	d901      	bls.n	8002aac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e007      	b.n	8002abc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_PWREx_EnableOverDrive+0x98>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ab8:	d1ee      	bne.n	8002a98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	420e0040 	.word	0x420e0040
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	420e0044 	.word	0x420e0044

08002ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0cc      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_ClockConfig+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d90c      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b63      	ldr	r3, [pc, #396]	; (8002c8c <HAL_RCC_ClockConfig+0x1b8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0b8      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b28:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0308 	and.w	r3, r3, #8
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b40:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	494d      	ldr	r1, [pc, #308]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d044      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d119      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e07f      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d003      	beq.n	8002b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b92:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06f      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e067      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bb2:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f023 0203 	bic.w	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4934      	ldr	r1, [pc, #208]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fcb2 	bl	800152c <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bcc:	f7fe fcae 	bl	800152c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e04f      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 020c 	and.w	r2, r3, #12
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1eb      	bne.n	8002bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d20c      	bcs.n	8002c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	b2d2      	uxtb	r2, r2
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e032      	b.n	8002c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4916      	ldr	r1, [pc, #88]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c46:	4b12      	ldr	r3, [pc, #72]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	490e      	ldr	r1, [pc, #56]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c5a:	f000 f841 	bl	8002ce0 <HAL_RCC_GetSysClockFreq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	490a      	ldr	r1, [pc, #40]	; (8002c94 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	5ccb      	ldrb	r3, [r1, r3]
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1c8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fc12 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00
 8002c90:	40023800 	.word	0x40023800
 8002c94:	08003fd8 	.word	0x08003fd8
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	2000000c 	.word	0x2000000c

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cbc:	f7ff fff0 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	0a9b      	lsrs	r3, r3, #10
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	4903      	ldr	r1, [pc, #12]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cce:	5ccb      	ldrb	r3, [r1, r3]
 8002cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08003fe8 	.word	0x08003fe8

08002ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce4:	b0ae      	sub	sp, #184	; 0xb8
 8002ce6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d06:	4bcb      	ldr	r3, [pc, #812]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	f200 8206 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x440>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08003121 	.word	0x08003121
 8002d24:	08003121 	.word	0x08003121
 8002d28:	08003121 	.word	0x08003121
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08003121 	.word	0x08003121
 8002d34:	08003121 	.word	0x08003121
 8002d38:	08003121 	.word	0x08003121
 8002d3c:	08002d61 	.word	0x08002d61
 8002d40:	08003121 	.word	0x08003121
 8002d44:	08003121 	.word	0x08003121
 8002d48:	08003121 	.word	0x08003121
 8002d4c:	08002f51 	.word	0x08002f51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d50:	4bb9      	ldr	r3, [pc, #740]	; (8003038 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d56:	e1e7      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d58:	4bb8      	ldr	r3, [pc, #736]	; (800303c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d5e:	e1e3      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d60:	4bb4      	ldr	r3, [pc, #720]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d6c:	4bb1      	ldr	r3, [pc, #708]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d071      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d78:	4bae      	ldr	r3, [pc, #696]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d9e:	4622      	mov	r2, r4
 8002da0:	462b      	mov	r3, r5
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f04f 0100 	mov.w	r1, #0
 8002daa:	0159      	lsls	r1, r3, #5
 8002dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db0:	0150      	lsls	r0, r2, #5
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4621      	mov	r1, r4
 8002db8:	1a51      	subs	r1, r2, r1
 8002dba:	6439      	str	r1, [r7, #64]	; 0x40
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	018b      	lsls	r3, r1, #6
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dda:	4641      	mov	r1, r8
 8002ddc:	018a      	lsls	r2, r1, #6
 8002dde:	4641      	mov	r1, r8
 8002de0:	1a51      	subs	r1, r2, r1
 8002de2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002de4:	4649      	mov	r1, r9
 8002de6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002df8:	4649      	mov	r1, r9
 8002dfa:	00cb      	lsls	r3, r1, #3
 8002dfc:	4641      	mov	r1, r8
 8002dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e02:	4641      	mov	r1, r8
 8002e04:	00ca      	lsls	r2, r1, #3
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	4622      	mov	r2, r4
 8002e0e:	189b      	adds	r3, r3, r2
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
 8002e12:	462b      	mov	r3, r5
 8002e14:	460a      	mov	r2, r1
 8002e16:	eb42 0303 	adc.w	r3, r2, r3
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e28:	4629      	mov	r1, r5
 8002e2a:	024b      	lsls	r3, r1, #9
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e32:	4621      	mov	r1, r4
 8002e34:	024a      	lsls	r2, r1, #9
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e4c:	f7fd fa30 	bl	80002b0 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4613      	mov	r3, r2
 8002e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e5a:	e067      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5c:	4b75      	ldr	r3, [pc, #468]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	099b      	lsrs	r3, r3, #6
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e76:	2300      	movs	r3, #0
 8002e78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e90:	0150      	lsls	r0, r2, #5
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4621      	mov	r1, r4
 8002e98:	1a51      	subs	r1, r2, r1
 8002e9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	018b      	lsls	r3, r1, #6
 8002eb4:	4641      	mov	r1, r8
 8002eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eba:	4641      	mov	r1, r8
 8002ebc:	018a      	lsls	r2, r1, #6
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ede:	4692      	mov	sl, r2
 8002ee0:	469b      	mov	fp, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	462b      	mov	r3, r5
 8002eec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002efe:	4629      	mov	r1, r5
 8002f00:	028b      	lsls	r3, r1, #10
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f08:	4621      	mov	r1, r4
 8002f0a:	028a      	lsls	r2, r1, #10
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f14:	2200      	movs	r2, #0
 8002f16:	673b      	str	r3, [r7, #112]	; 0x70
 8002f18:	677a      	str	r2, [r7, #116]	; 0x74
 8002f1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f1e:	f7fd f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4613      	mov	r3, r2
 8002f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f2c:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f4e:	e0eb      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f50:	4b38      	ldr	r3, [pc, #224]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d06b      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f68:	4b32      	ldr	r3, [pc, #200]	; (8003034 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	2200      	movs	r2, #0
 8002f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f84:	4622      	mov	r2, r4
 8002f86:	462b      	mov	r3, r5
 8002f88:	f04f 0000 	mov.w	r0, #0
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	0159      	lsls	r1, r3, #5
 8002f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f96:	0150      	lsls	r0, r2, #5
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	1a51      	subs	r1, r2, r1
 8002fa0:	61b9      	str	r1, [r7, #24]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	eb63 0301 	sbc.w	r3, r3, r1
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fb6:	4659      	mov	r1, fp
 8002fb8:	018b      	lsls	r3, r1, #6
 8002fba:	4651      	mov	r1, sl
 8002fbc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fc0:	4651      	mov	r1, sl
 8002fc2:	018a      	lsls	r2, r1, #6
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ebb2 0801 	subs.w	r8, r2, r1
 8002fca:	4659      	mov	r1, fp
 8002fcc:	eb63 0901 	sbc.w	r9, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fe0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fe4:	4690      	mov	r8, r2
 8002fe6:	4699      	mov	r9, r3
 8002fe8:	4623      	mov	r3, r4
 8002fea:	eb18 0303 	adds.w	r3, r8, r3
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	462b      	mov	r3, r5
 8002ff2:	eb49 0303 	adc.w	r3, r9, r3
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003004:	4629      	mov	r1, r5
 8003006:	024b      	lsls	r3, r1, #9
 8003008:	4621      	mov	r1, r4
 800300a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800300e:	4621      	mov	r1, r4
 8003010:	024a      	lsls	r2, r1, #9
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800301a:	2200      	movs	r2, #0
 800301c:	65bb      	str	r3, [r7, #88]	; 0x58
 800301e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003020:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003024:	f7fd f944 	bl	80002b0 <__aeabi_uldivmod>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4613      	mov	r3, r2
 800302e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003032:	e065      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x420>
 8003034:	40023800 	.word	0x40023800
 8003038:	00f42400 	.word	0x00f42400
 800303c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003040:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_GetSysClockFreq+0x458>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	099b      	lsrs	r3, r3, #6
 8003046:	2200      	movs	r2, #0
 8003048:	4618      	mov	r0, r3
 800304a:	4611      	mov	r1, r2
 800304c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003050:	653b      	str	r3, [r7, #80]	; 0x50
 8003052:	2300      	movs	r3, #0
 8003054:	657b      	str	r3, [r7, #84]	; 0x54
 8003056:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800305a:	4642      	mov	r2, r8
 800305c:	464b      	mov	r3, r9
 800305e:	f04f 0000 	mov.w	r0, #0
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	0159      	lsls	r1, r3, #5
 8003068:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306c:	0150      	lsls	r0, r2, #5
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4641      	mov	r1, r8
 8003074:	1a51      	subs	r1, r2, r1
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	4649      	mov	r1, r9
 800307a:	eb63 0301 	sbc.w	r3, r3, r1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800308c:	4659      	mov	r1, fp
 800308e:	018b      	lsls	r3, r1, #6
 8003090:	4651      	mov	r1, sl
 8003092:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003096:	4651      	mov	r1, sl
 8003098:	018a      	lsls	r2, r1, #6
 800309a:	4651      	mov	r1, sl
 800309c:	1a54      	subs	r4, r2, r1
 800309e:	4659      	mov	r1, fp
 80030a0:	eb63 0501 	sbc.w	r5, r3, r1
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	00eb      	lsls	r3, r5, #3
 80030ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030b2:	00e2      	lsls	r2, r4, #3
 80030b4:	4614      	mov	r4, r2
 80030b6:	461d      	mov	r5, r3
 80030b8:	4643      	mov	r3, r8
 80030ba:	18e3      	adds	r3, r4, r3
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	464b      	mov	r3, r9
 80030c0:	eb45 0303 	adc.w	r3, r5, r3
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030d2:	4629      	mov	r1, r5
 80030d4:	028b      	lsls	r3, r1, #10
 80030d6:	4621      	mov	r1, r4
 80030d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030dc:	4621      	mov	r1, r4
 80030de:	028a      	lsls	r2, r1, #10
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030e8:	2200      	movs	r2, #0
 80030ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80030ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f2:	f7fd f8dd 	bl	80002b0 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4613      	mov	r3, r2
 80030fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCC_GetSysClockFreq+0x458>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	0f1b      	lsrs	r3, r3, #28
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800310e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003112:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800311e:	e003      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003126:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800312c:	4618      	mov	r0, r3
 800312e:	37b8      	adds	r7, #184	; 0xb8
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	00f42400 	.word	0x00f42400

08003140 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e28d      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8083 	beq.w	8003266 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003160:	4b94      	ldr	r3, [pc, #592]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b04      	cmp	r3, #4
 800316a:	d019      	beq.n	80031a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800316c:	4b91      	ldr	r3, [pc, #580]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003174:	2b08      	cmp	r3, #8
 8003176:	d106      	bne.n	8003186 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003178:	4b8e      	ldr	r3, [pc, #568]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003184:	d00c      	beq.n	80031a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003186:	4b8b      	ldr	r3, [pc, #556]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d112      	bne.n	80031b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319e:	d10b      	bne.n	80031b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	4b84      	ldr	r3, [pc, #528]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d05b      	beq.n	8003264 <HAL_RCC_OscConfig+0x124>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d157      	bne.n	8003264 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e25a      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x90>
 80031c2:	4b7c      	ldr	r3, [pc, #496]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7b      	ldr	r2, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e01d      	b.n	800320c <HAL_RCC_OscConfig+0xcc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0xb4>
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a75      	ldr	r2, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	4b73      	ldr	r3, [pc, #460]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a72      	ldr	r2, [pc, #456]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0xcc>
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a6e      	ldr	r2, [pc, #440]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80031fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a6b      	ldr	r2, [pc, #428]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe f98a 	bl	800152c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321c:	f7fe f986 	bl	800152c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	; 0x64
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e21f      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0xdc>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe f976 	bl	800152c <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe f972 	bl	800152c <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e20b      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	4b57      	ldr	r3, [pc, #348]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x104>
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06f      	beq.n	8003352 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003272:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 030c 	and.w	r3, r3, #12
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800327e:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003286:	2b08      	cmp	r3, #8
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800328a:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	d11c      	bne.n	80032dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b44      	ldr	r3, [pc, #272]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x186>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1d3      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	e03a      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_OscConfig+0x278>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe f91f 	bl	800152c <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe f91b 	bl	800152c <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1b4      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4925      	ldr	r1, [pc, #148]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x278>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe f8fe 	bl	800152c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe f8fa 	bl	800152c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e193      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d036      	beq.n	80033cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe f8de 	bl	800152c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe f8da 	bl	800152c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e173      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x274>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x234>
 8003392:	e01b      	b.n	80033cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x27c>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fe f8c7 	bl	800152c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	e00e      	b.n	80033c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe f8c3 	bl	800152c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d907      	bls.n	80033c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e15c      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470000 	.word	0x42470000
 80033bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b8a      	ldr	r3, [pc, #552]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ea      	bne.n	80033a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8097 	beq.w	8003508 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b7f      	ldr	r3, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a7e      	ldr	r2, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b7c      	ldr	r3, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b79      	ldr	r3, [pc, #484]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a75      	ldr	r2, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe f883 	bl	800152c <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe f87f 	bl	800152c <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e118      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x4b0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x31e>
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x358>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x340>
 8003466:	4b61      	ldr	r3, [pc, #388]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a60      	ldr	r2, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	4b5e      	ldr	r3, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a5d      	ldr	r2, [pc, #372]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0x358>
 8003480:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a59      	ldr	r2, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b57      	ldr	r3, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a56      	ldr	r2, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe f844 	bl	800152c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe f840 	bl	800152c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0d7      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ee      	beq.n	80034a8 <HAL_RCC_OscConfig+0x368>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7fe f82e 	bl	800152c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe f82a 	bl	800152c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0c1      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ee      	bne.n	80034d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	4a3a      	ldr	r2, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80ad 	beq.w	800366c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003512:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d060      	beq.n	80035e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d145      	bne.n	80035b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b33      	ldr	r3, [pc, #204]	; (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fd fffe 	bl	800152c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fd fffa 	bl	800152c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e093      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	071b      	lsls	r3, r3, #28
 800357e:	491b      	ldr	r1, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 8003586:	2201      	movs	r2, #1
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fd ffcf 	bl	800152c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fd ffcb 	bl	800152c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e064      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x452>
 80035b0:	e05c      	b.n	800366c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCC_OscConfig+0x4b4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fd ffb8 	bl	800152c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fd ffb4 	bl	800152c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04d      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x4ac>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x480>
 80035de:	e045      	b.n	800366c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e040      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f8:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <HAL_RCC_OscConfig+0x538>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d030      	beq.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d129      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d122      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003628:	4013      	ands	r3, r2
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800362e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003630:	4293      	cmp	r3, r2
 8003632:	d119      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	3b01      	subs	r3, #1
 8003642:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d10f      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <__errno>:
 800367c:	4b01      	ldr	r3, [pc, #4]	; (8003684 <__errno+0x8>)
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000014 	.word	0x20000014

08003688 <__libc_init_array>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	4d0d      	ldr	r5, [pc, #52]	; (80036c0 <__libc_init_array+0x38>)
 800368c:	4c0d      	ldr	r4, [pc, #52]	; (80036c4 <__libc_init_array+0x3c>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	2600      	movs	r6, #0
 8003694:	42a6      	cmp	r6, r4
 8003696:	d109      	bne.n	80036ac <__libc_init_array+0x24>
 8003698:	4d0b      	ldr	r5, [pc, #44]	; (80036c8 <__libc_init_array+0x40>)
 800369a:	4c0c      	ldr	r4, [pc, #48]	; (80036cc <__libc_init_array+0x44>)
 800369c:	f000 fc8e 	bl	8003fbc <_init>
 80036a0:	1b64      	subs	r4, r4, r5
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	2600      	movs	r6, #0
 80036a6:	42a6      	cmp	r6, r4
 80036a8:	d105      	bne.n	80036b6 <__libc_init_array+0x2e>
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
 80036ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b0:	4798      	blx	r3
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7ee      	b.n	8003694 <__libc_init_array+0xc>
 80036b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ba:	4798      	blx	r3
 80036bc:	3601      	adds	r6, #1
 80036be:	e7f2      	b.n	80036a6 <__libc_init_array+0x1e>
 80036c0:	08004798 	.word	0x08004798
 80036c4:	08004798 	.word	0x08004798
 80036c8:	08004798 	.word	0x08004798
 80036cc:	0800479c 	.word	0x0800479c

080036d0 <memcpy>:
 80036d0:	440a      	add	r2, r1
 80036d2:	4291      	cmp	r1, r2
 80036d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036d8:	d100      	bne.n	80036dc <memcpy+0xc>
 80036da:	4770      	bx	lr
 80036dc:	b510      	push	{r4, lr}
 80036de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036e6:	4291      	cmp	r1, r2
 80036e8:	d1f9      	bne.n	80036de <memcpy+0xe>
 80036ea:	bd10      	pop	{r4, pc}

080036ec <memmove>:
 80036ec:	4288      	cmp	r0, r1
 80036ee:	b510      	push	{r4, lr}
 80036f0:	eb01 0402 	add.w	r4, r1, r2
 80036f4:	d902      	bls.n	80036fc <memmove+0x10>
 80036f6:	4284      	cmp	r4, r0
 80036f8:	4623      	mov	r3, r4
 80036fa:	d807      	bhi.n	800370c <memmove+0x20>
 80036fc:	1e43      	subs	r3, r0, #1
 80036fe:	42a1      	cmp	r1, r4
 8003700:	d008      	beq.n	8003714 <memmove+0x28>
 8003702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800370a:	e7f8      	b.n	80036fe <memmove+0x12>
 800370c:	4402      	add	r2, r0
 800370e:	4601      	mov	r1, r0
 8003710:	428a      	cmp	r2, r1
 8003712:	d100      	bne.n	8003716 <memmove+0x2a>
 8003714:	bd10      	pop	{r4, pc}
 8003716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800371a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800371e:	e7f7      	b.n	8003710 <memmove+0x24>

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <_free_r>:
 8003730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003732:	2900      	cmp	r1, #0
 8003734:	d044      	beq.n	80037c0 <_free_r+0x90>
 8003736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373a:	9001      	str	r0, [sp, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f1a1 0404 	sub.w	r4, r1, #4
 8003742:	bfb8      	it	lt
 8003744:	18e4      	addlt	r4, r4, r3
 8003746:	f000 f903 	bl	8003950 <__malloc_lock>
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <_free_r+0x94>)
 800374c:	9801      	ldr	r0, [sp, #4]
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	b933      	cbnz	r3, 8003760 <_free_r+0x30>
 8003752:	6063      	str	r3, [r4, #4]
 8003754:	6014      	str	r4, [r2, #0]
 8003756:	b003      	add	sp, #12
 8003758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800375c:	f000 b8fe 	b.w	800395c <__malloc_unlock>
 8003760:	42a3      	cmp	r3, r4
 8003762:	d908      	bls.n	8003776 <_free_r+0x46>
 8003764:	6825      	ldr	r5, [r4, #0]
 8003766:	1961      	adds	r1, r4, r5
 8003768:	428b      	cmp	r3, r1
 800376a:	bf01      	itttt	eq
 800376c:	6819      	ldreq	r1, [r3, #0]
 800376e:	685b      	ldreq	r3, [r3, #4]
 8003770:	1949      	addeq	r1, r1, r5
 8003772:	6021      	streq	r1, [r4, #0]
 8003774:	e7ed      	b.n	8003752 <_free_r+0x22>
 8003776:	461a      	mov	r2, r3
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	b10b      	cbz	r3, 8003780 <_free_r+0x50>
 800377c:	42a3      	cmp	r3, r4
 800377e:	d9fa      	bls.n	8003776 <_free_r+0x46>
 8003780:	6811      	ldr	r1, [r2, #0]
 8003782:	1855      	adds	r5, r2, r1
 8003784:	42a5      	cmp	r5, r4
 8003786:	d10b      	bne.n	80037a0 <_free_r+0x70>
 8003788:	6824      	ldr	r4, [r4, #0]
 800378a:	4421      	add	r1, r4
 800378c:	1854      	adds	r4, r2, r1
 800378e:	42a3      	cmp	r3, r4
 8003790:	6011      	str	r1, [r2, #0]
 8003792:	d1e0      	bne.n	8003756 <_free_r+0x26>
 8003794:	681c      	ldr	r4, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	6053      	str	r3, [r2, #4]
 800379a:	4421      	add	r1, r4
 800379c:	6011      	str	r1, [r2, #0]
 800379e:	e7da      	b.n	8003756 <_free_r+0x26>
 80037a0:	d902      	bls.n	80037a8 <_free_r+0x78>
 80037a2:	230c      	movs	r3, #12
 80037a4:	6003      	str	r3, [r0, #0]
 80037a6:	e7d6      	b.n	8003756 <_free_r+0x26>
 80037a8:	6825      	ldr	r5, [r4, #0]
 80037aa:	1961      	adds	r1, r4, r5
 80037ac:	428b      	cmp	r3, r1
 80037ae:	bf04      	itt	eq
 80037b0:	6819      	ldreq	r1, [r3, #0]
 80037b2:	685b      	ldreq	r3, [r3, #4]
 80037b4:	6063      	str	r3, [r4, #4]
 80037b6:	bf04      	itt	eq
 80037b8:	1949      	addeq	r1, r1, r5
 80037ba:	6021      	streq	r1, [r4, #0]
 80037bc:	6054      	str	r4, [r2, #4]
 80037be:	e7ca      	b.n	8003756 <_free_r+0x26>
 80037c0:	b003      	add	sp, #12
 80037c2:	bd30      	pop	{r4, r5, pc}
 80037c4:	2000034c 	.word	0x2000034c

080037c8 <sbrk_aligned>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	4e0e      	ldr	r6, [pc, #56]	; (8003804 <sbrk_aligned+0x3c>)
 80037cc:	460c      	mov	r4, r1
 80037ce:	6831      	ldr	r1, [r6, #0]
 80037d0:	4605      	mov	r5, r0
 80037d2:	b911      	cbnz	r1, 80037da <sbrk_aligned+0x12>
 80037d4:	f000 f88c 	bl	80038f0 <_sbrk_r>
 80037d8:	6030      	str	r0, [r6, #0]
 80037da:	4621      	mov	r1, r4
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 f887 	bl	80038f0 <_sbrk_r>
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	d00a      	beq.n	80037fc <sbrk_aligned+0x34>
 80037e6:	1cc4      	adds	r4, r0, #3
 80037e8:	f024 0403 	bic.w	r4, r4, #3
 80037ec:	42a0      	cmp	r0, r4
 80037ee:	d007      	beq.n	8003800 <sbrk_aligned+0x38>
 80037f0:	1a21      	subs	r1, r4, r0
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 f87c 	bl	80038f0 <_sbrk_r>
 80037f8:	3001      	adds	r0, #1
 80037fa:	d101      	bne.n	8003800 <sbrk_aligned+0x38>
 80037fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003800:	4620      	mov	r0, r4
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	20000350 	.word	0x20000350

08003808 <_malloc_r>:
 8003808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800380c:	1ccd      	adds	r5, r1, #3
 800380e:	f025 0503 	bic.w	r5, r5, #3
 8003812:	3508      	adds	r5, #8
 8003814:	2d0c      	cmp	r5, #12
 8003816:	bf38      	it	cc
 8003818:	250c      	movcc	r5, #12
 800381a:	2d00      	cmp	r5, #0
 800381c:	4607      	mov	r7, r0
 800381e:	db01      	blt.n	8003824 <_malloc_r+0x1c>
 8003820:	42a9      	cmp	r1, r5
 8003822:	d905      	bls.n	8003830 <_malloc_r+0x28>
 8003824:	230c      	movs	r3, #12
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	2600      	movs	r6, #0
 800382a:	4630      	mov	r0, r6
 800382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003830:	4e2e      	ldr	r6, [pc, #184]	; (80038ec <_malloc_r+0xe4>)
 8003832:	f000 f88d 	bl	8003950 <__malloc_lock>
 8003836:	6833      	ldr	r3, [r6, #0]
 8003838:	461c      	mov	r4, r3
 800383a:	bb34      	cbnz	r4, 800388a <_malloc_r+0x82>
 800383c:	4629      	mov	r1, r5
 800383e:	4638      	mov	r0, r7
 8003840:	f7ff ffc2 	bl	80037c8 <sbrk_aligned>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	4604      	mov	r4, r0
 8003848:	d14d      	bne.n	80038e6 <_malloc_r+0xde>
 800384a:	6834      	ldr	r4, [r6, #0]
 800384c:	4626      	mov	r6, r4
 800384e:	2e00      	cmp	r6, #0
 8003850:	d140      	bne.n	80038d4 <_malloc_r+0xcc>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	4631      	mov	r1, r6
 8003856:	4638      	mov	r0, r7
 8003858:	eb04 0803 	add.w	r8, r4, r3
 800385c:	f000 f848 	bl	80038f0 <_sbrk_r>
 8003860:	4580      	cmp	r8, r0
 8003862:	d13a      	bne.n	80038da <_malloc_r+0xd2>
 8003864:	6821      	ldr	r1, [r4, #0]
 8003866:	3503      	adds	r5, #3
 8003868:	1a6d      	subs	r5, r5, r1
 800386a:	f025 0503 	bic.w	r5, r5, #3
 800386e:	3508      	adds	r5, #8
 8003870:	2d0c      	cmp	r5, #12
 8003872:	bf38      	it	cc
 8003874:	250c      	movcc	r5, #12
 8003876:	4629      	mov	r1, r5
 8003878:	4638      	mov	r0, r7
 800387a:	f7ff ffa5 	bl	80037c8 <sbrk_aligned>
 800387e:	3001      	adds	r0, #1
 8003880:	d02b      	beq.n	80038da <_malloc_r+0xd2>
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	442b      	add	r3, r5
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	e00e      	b.n	80038a8 <_malloc_r+0xa0>
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	1b52      	subs	r2, r2, r5
 800388e:	d41e      	bmi.n	80038ce <_malloc_r+0xc6>
 8003890:	2a0b      	cmp	r2, #11
 8003892:	d916      	bls.n	80038c2 <_malloc_r+0xba>
 8003894:	1961      	adds	r1, r4, r5
 8003896:	42a3      	cmp	r3, r4
 8003898:	6025      	str	r5, [r4, #0]
 800389a:	bf18      	it	ne
 800389c:	6059      	strne	r1, [r3, #4]
 800389e:	6863      	ldr	r3, [r4, #4]
 80038a0:	bf08      	it	eq
 80038a2:	6031      	streq	r1, [r6, #0]
 80038a4:	5162      	str	r2, [r4, r5]
 80038a6:	604b      	str	r3, [r1, #4]
 80038a8:	4638      	mov	r0, r7
 80038aa:	f104 060b 	add.w	r6, r4, #11
 80038ae:	f000 f855 	bl	800395c <__malloc_unlock>
 80038b2:	f026 0607 	bic.w	r6, r6, #7
 80038b6:	1d23      	adds	r3, r4, #4
 80038b8:	1af2      	subs	r2, r6, r3
 80038ba:	d0b6      	beq.n	800382a <_malloc_r+0x22>
 80038bc:	1b9b      	subs	r3, r3, r6
 80038be:	50a3      	str	r3, [r4, r2]
 80038c0:	e7b3      	b.n	800382a <_malloc_r+0x22>
 80038c2:	6862      	ldr	r2, [r4, #4]
 80038c4:	42a3      	cmp	r3, r4
 80038c6:	bf0c      	ite	eq
 80038c8:	6032      	streq	r2, [r6, #0]
 80038ca:	605a      	strne	r2, [r3, #4]
 80038cc:	e7ec      	b.n	80038a8 <_malloc_r+0xa0>
 80038ce:	4623      	mov	r3, r4
 80038d0:	6864      	ldr	r4, [r4, #4]
 80038d2:	e7b2      	b.n	800383a <_malloc_r+0x32>
 80038d4:	4634      	mov	r4, r6
 80038d6:	6876      	ldr	r6, [r6, #4]
 80038d8:	e7b9      	b.n	800384e <_malloc_r+0x46>
 80038da:	230c      	movs	r3, #12
 80038dc:	603b      	str	r3, [r7, #0]
 80038de:	4638      	mov	r0, r7
 80038e0:	f000 f83c 	bl	800395c <__malloc_unlock>
 80038e4:	e7a1      	b.n	800382a <_malloc_r+0x22>
 80038e6:	6025      	str	r5, [r4, #0]
 80038e8:	e7de      	b.n	80038a8 <_malloc_r+0xa0>
 80038ea:	bf00      	nop
 80038ec:	2000034c 	.word	0x2000034c

080038f0 <_sbrk_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4d06      	ldr	r5, [pc, #24]	; (800390c <_sbrk_r+0x1c>)
 80038f4:	2300      	movs	r3, #0
 80038f6:	4604      	mov	r4, r0
 80038f8:	4608      	mov	r0, r1
 80038fa:	602b      	str	r3, [r5, #0]
 80038fc:	f7fd fb04 	bl	8000f08 <_sbrk>
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	d102      	bne.n	800390a <_sbrk_r+0x1a>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b103      	cbz	r3, 800390a <_sbrk_r+0x1a>
 8003908:	6023      	str	r3, [r4, #0]
 800390a:	bd38      	pop	{r3, r4, r5, pc}
 800390c:	20000354 	.word	0x20000354

08003910 <siprintf>:
 8003910:	b40e      	push	{r1, r2, r3}
 8003912:	b500      	push	{lr}
 8003914:	b09c      	sub	sp, #112	; 0x70
 8003916:	ab1d      	add	r3, sp, #116	; 0x74
 8003918:	9002      	str	r0, [sp, #8]
 800391a:	9006      	str	r0, [sp, #24]
 800391c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003920:	4809      	ldr	r0, [pc, #36]	; (8003948 <siprintf+0x38>)
 8003922:	9107      	str	r1, [sp, #28]
 8003924:	9104      	str	r1, [sp, #16]
 8003926:	4909      	ldr	r1, [pc, #36]	; (800394c <siprintf+0x3c>)
 8003928:	f853 2b04 	ldr.w	r2, [r3], #4
 800392c:	9105      	str	r1, [sp, #20]
 800392e:	6800      	ldr	r0, [r0, #0]
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	a902      	add	r1, sp, #8
 8003934:	f000 f874 	bl	8003a20 <_svfiprintf_r>
 8003938:	9b02      	ldr	r3, [sp, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	b01c      	add	sp, #112	; 0x70
 8003940:	f85d eb04 	ldr.w	lr, [sp], #4
 8003944:	b003      	add	sp, #12
 8003946:	4770      	bx	lr
 8003948:	20000014 	.word	0x20000014
 800394c:	ffff0208 	.word	0xffff0208

08003950 <__malloc_lock>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__malloc_lock+0x8>)
 8003952:	f000 baf9 	b.w	8003f48 <__retarget_lock_acquire_recursive>
 8003956:	bf00      	nop
 8003958:	20000358 	.word	0x20000358

0800395c <__malloc_unlock>:
 800395c:	4801      	ldr	r0, [pc, #4]	; (8003964 <__malloc_unlock+0x8>)
 800395e:	f000 baf4 	b.w	8003f4a <__retarget_lock_release_recursive>
 8003962:	bf00      	nop
 8003964:	20000358 	.word	0x20000358

08003968 <__ssputs_r>:
 8003968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800396c:	688e      	ldr	r6, [r1, #8]
 800396e:	429e      	cmp	r6, r3
 8003970:	4682      	mov	sl, r0
 8003972:	460c      	mov	r4, r1
 8003974:	4690      	mov	r8, r2
 8003976:	461f      	mov	r7, r3
 8003978:	d838      	bhi.n	80039ec <__ssputs_r+0x84>
 800397a:	898a      	ldrh	r2, [r1, #12]
 800397c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003980:	d032      	beq.n	80039e8 <__ssputs_r+0x80>
 8003982:	6825      	ldr	r5, [r4, #0]
 8003984:	6909      	ldr	r1, [r1, #16]
 8003986:	eba5 0901 	sub.w	r9, r5, r1
 800398a:	6965      	ldr	r5, [r4, #20]
 800398c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003990:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003994:	3301      	adds	r3, #1
 8003996:	444b      	add	r3, r9
 8003998:	106d      	asrs	r5, r5, #1
 800399a:	429d      	cmp	r5, r3
 800399c:	bf38      	it	cc
 800399e:	461d      	movcc	r5, r3
 80039a0:	0553      	lsls	r3, r2, #21
 80039a2:	d531      	bpl.n	8003a08 <__ssputs_r+0xa0>
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7ff ff2f 	bl	8003808 <_malloc_r>
 80039aa:	4606      	mov	r6, r0
 80039ac:	b950      	cbnz	r0, 80039c4 <__ssputs_r+0x5c>
 80039ae:	230c      	movs	r3, #12
 80039b0:	f8ca 3000 	str.w	r3, [sl]
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ba:	81a3      	strh	r3, [r4, #12]
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c4:	6921      	ldr	r1, [r4, #16]
 80039c6:	464a      	mov	r2, r9
 80039c8:	f7ff fe82 	bl	80036d0 <memcpy>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d6:	81a3      	strh	r3, [r4, #12]
 80039d8:	6126      	str	r6, [r4, #16]
 80039da:	6165      	str	r5, [r4, #20]
 80039dc:	444e      	add	r6, r9
 80039de:	eba5 0509 	sub.w	r5, r5, r9
 80039e2:	6026      	str	r6, [r4, #0]
 80039e4:	60a5      	str	r5, [r4, #8]
 80039e6:	463e      	mov	r6, r7
 80039e8:	42be      	cmp	r6, r7
 80039ea:	d900      	bls.n	80039ee <__ssputs_r+0x86>
 80039ec:	463e      	mov	r6, r7
 80039ee:	6820      	ldr	r0, [r4, #0]
 80039f0:	4632      	mov	r2, r6
 80039f2:	4641      	mov	r1, r8
 80039f4:	f7ff fe7a 	bl	80036ec <memmove>
 80039f8:	68a3      	ldr	r3, [r4, #8]
 80039fa:	1b9b      	subs	r3, r3, r6
 80039fc:	60a3      	str	r3, [r4, #8]
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	4433      	add	r3, r6
 8003a02:	6023      	str	r3, [r4, #0]
 8003a04:	2000      	movs	r0, #0
 8003a06:	e7db      	b.n	80039c0 <__ssputs_r+0x58>
 8003a08:	462a      	mov	r2, r5
 8003a0a:	f000 fa9f 	bl	8003f4c <_realloc_r>
 8003a0e:	4606      	mov	r6, r0
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1e1      	bne.n	80039d8 <__ssputs_r+0x70>
 8003a14:	6921      	ldr	r1, [r4, #16]
 8003a16:	4650      	mov	r0, sl
 8003a18:	f7ff fe8a 	bl	8003730 <_free_r>
 8003a1c:	e7c7      	b.n	80039ae <__ssputs_r+0x46>
	...

08003a20 <_svfiprintf_r>:
 8003a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	4698      	mov	r8, r3
 8003a26:	898b      	ldrh	r3, [r1, #12]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	b09d      	sub	sp, #116	; 0x74
 8003a2c:	4607      	mov	r7, r0
 8003a2e:	460d      	mov	r5, r1
 8003a30:	4614      	mov	r4, r2
 8003a32:	d50e      	bpl.n	8003a52 <_svfiprintf_r+0x32>
 8003a34:	690b      	ldr	r3, [r1, #16]
 8003a36:	b963      	cbnz	r3, 8003a52 <_svfiprintf_r+0x32>
 8003a38:	2140      	movs	r1, #64	; 0x40
 8003a3a:	f7ff fee5 	bl	8003808 <_malloc_r>
 8003a3e:	6028      	str	r0, [r5, #0]
 8003a40:	6128      	str	r0, [r5, #16]
 8003a42:	b920      	cbnz	r0, 8003a4e <_svfiprintf_r+0x2e>
 8003a44:	230c      	movs	r3, #12
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	e0d1      	b.n	8003bf2 <_svfiprintf_r+0x1d2>
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	616b      	str	r3, [r5, #20]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9309      	str	r3, [sp, #36]	; 0x24
 8003a56:	2320      	movs	r3, #32
 8003a58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a60:	2330      	movs	r3, #48	; 0x30
 8003a62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c0c <_svfiprintf_r+0x1ec>
 8003a66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a6a:	f04f 0901 	mov.w	r9, #1
 8003a6e:	4623      	mov	r3, r4
 8003a70:	469a      	mov	sl, r3
 8003a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a76:	b10a      	cbz	r2, 8003a7c <_svfiprintf_r+0x5c>
 8003a78:	2a25      	cmp	r2, #37	; 0x25
 8003a7a:	d1f9      	bne.n	8003a70 <_svfiprintf_r+0x50>
 8003a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a80:	d00b      	beq.n	8003a9a <_svfiprintf_r+0x7a>
 8003a82:	465b      	mov	r3, fp
 8003a84:	4622      	mov	r2, r4
 8003a86:	4629      	mov	r1, r5
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f7ff ff6d 	bl	8003968 <__ssputs_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	f000 80aa 	beq.w	8003be8 <_svfiprintf_r+0x1c8>
 8003a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a96:	445a      	add	r2, fp
 8003a98:	9209      	str	r2, [sp, #36]	; 0x24
 8003a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a2 	beq.w	8003be8 <_svfiprintf_r+0x1c8>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aae:	f10a 0a01 	add.w	sl, sl, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	9307      	str	r3, [sp, #28]
 8003ab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aba:	931a      	str	r3, [sp, #104]	; 0x68
 8003abc:	4654      	mov	r4, sl
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	4851      	ldr	r0, [pc, #324]	; (8003c0c <_svfiprintf_r+0x1ec>)
 8003ac6:	f7fc fba3 	bl	8000210 <memchr>
 8003aca:	9a04      	ldr	r2, [sp, #16]
 8003acc:	b9d8      	cbnz	r0, 8003b06 <_svfiprintf_r+0xe6>
 8003ace:	06d0      	lsls	r0, r2, #27
 8003ad0:	bf44      	itt	mi
 8003ad2:	2320      	movmi	r3, #32
 8003ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ad8:	0711      	lsls	r1, r2, #28
 8003ada:	bf44      	itt	mi
 8003adc:	232b      	movmi	r3, #43	; 0x2b
 8003ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8003ae8:	d015      	beq.n	8003b16 <_svfiprintf_r+0xf6>
 8003aea:	9a07      	ldr	r2, [sp, #28]
 8003aec:	4654      	mov	r4, sl
 8003aee:	2000      	movs	r0, #0
 8003af0:	f04f 0c0a 	mov.w	ip, #10
 8003af4:	4621      	mov	r1, r4
 8003af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003afa:	3b30      	subs	r3, #48	; 0x30
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d94e      	bls.n	8003b9e <_svfiprintf_r+0x17e>
 8003b00:	b1b0      	cbz	r0, 8003b30 <_svfiprintf_r+0x110>
 8003b02:	9207      	str	r2, [sp, #28]
 8003b04:	e014      	b.n	8003b30 <_svfiprintf_r+0x110>
 8003b06:	eba0 0308 	sub.w	r3, r0, r8
 8003b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	46a2      	mov	sl, r4
 8003b14:	e7d2      	b.n	8003abc <_svfiprintf_r+0x9c>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	9103      	str	r1, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfbb      	ittet	lt
 8003b22:	425b      	neglt	r3, r3
 8003b24:	f042 0202 	orrlt.w	r2, r2, #2
 8003b28:	9307      	strge	r3, [sp, #28]
 8003b2a:	9307      	strlt	r3, [sp, #28]
 8003b2c:	bfb8      	it	lt
 8003b2e:	9204      	strlt	r2, [sp, #16]
 8003b30:	7823      	ldrb	r3, [r4, #0]
 8003b32:	2b2e      	cmp	r3, #46	; 0x2e
 8003b34:	d10c      	bne.n	8003b50 <_svfiprintf_r+0x130>
 8003b36:	7863      	ldrb	r3, [r4, #1]
 8003b38:	2b2a      	cmp	r3, #42	; 0x2a
 8003b3a:	d135      	bne.n	8003ba8 <_svfiprintf_r+0x188>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	9203      	str	r2, [sp, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bfb8      	it	lt
 8003b48:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b4c:	3402      	adds	r4, #2
 8003b4e:	9305      	str	r3, [sp, #20]
 8003b50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c1c <_svfiprintf_r+0x1fc>
 8003b54:	7821      	ldrb	r1, [r4, #0]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4650      	mov	r0, sl
 8003b5a:	f7fc fb59 	bl	8000210 <memchr>
 8003b5e:	b140      	cbz	r0, 8003b72 <_svfiprintf_r+0x152>
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	eba0 000a 	sub.w	r0, r0, sl
 8003b66:	fa03 f000 	lsl.w	r0, r3, r0
 8003b6a:	9b04      	ldr	r3, [sp, #16]
 8003b6c:	4303      	orrs	r3, r0
 8003b6e:	3401      	adds	r4, #1
 8003b70:	9304      	str	r3, [sp, #16]
 8003b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b76:	4826      	ldr	r0, [pc, #152]	; (8003c10 <_svfiprintf_r+0x1f0>)
 8003b78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b7c:	2206      	movs	r2, #6
 8003b7e:	f7fc fb47 	bl	8000210 <memchr>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d038      	beq.n	8003bf8 <_svfiprintf_r+0x1d8>
 8003b86:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <_svfiprintf_r+0x1f4>)
 8003b88:	bb1b      	cbnz	r3, 8003bd2 <_svfiprintf_r+0x1b2>
 8003b8a:	9b03      	ldr	r3, [sp, #12]
 8003b8c:	3307      	adds	r3, #7
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	3308      	adds	r3, #8
 8003b94:	9303      	str	r3, [sp, #12]
 8003b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b98:	4433      	add	r3, r6
 8003b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b9c:	e767      	b.n	8003a6e <_svfiprintf_r+0x4e>
 8003b9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	e7a5      	b.n	8003af4 <_svfiprintf_r+0xd4>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	3401      	adds	r4, #1
 8003bac:	9305      	str	r3, [sp, #20]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f04f 0c0a 	mov.w	ip, #10
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bba:	3a30      	subs	r2, #48	; 0x30
 8003bbc:	2a09      	cmp	r2, #9
 8003bbe:	d903      	bls.n	8003bc8 <_svfiprintf_r+0x1a8>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0c5      	beq.n	8003b50 <_svfiprintf_r+0x130>
 8003bc4:	9105      	str	r1, [sp, #20]
 8003bc6:	e7c3      	b.n	8003b50 <_svfiprintf_r+0x130>
 8003bc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bcc:	4604      	mov	r4, r0
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e7f0      	b.n	8003bb4 <_svfiprintf_r+0x194>
 8003bd2:	ab03      	add	r3, sp, #12
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	462a      	mov	r2, r5
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <_svfiprintf_r+0x1f8>)
 8003bda:	a904      	add	r1, sp, #16
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f3af 8000 	nop.w
 8003be2:	1c42      	adds	r2, r0, #1
 8003be4:	4606      	mov	r6, r0
 8003be6:	d1d6      	bne.n	8003b96 <_svfiprintf_r+0x176>
 8003be8:	89ab      	ldrh	r3, [r5, #12]
 8003bea:	065b      	lsls	r3, r3, #25
 8003bec:	f53f af2c 	bmi.w	8003a48 <_svfiprintf_r+0x28>
 8003bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bf2:	b01d      	add	sp, #116	; 0x74
 8003bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf8:	ab03      	add	r3, sp, #12
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	462a      	mov	r2, r5
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <_svfiprintf_r+0x1f8>)
 8003c00:	a904      	add	r1, sp, #16
 8003c02:	4638      	mov	r0, r7
 8003c04:	f000 f87a 	bl	8003cfc <_printf_i>
 8003c08:	e7eb      	b.n	8003be2 <_svfiprintf_r+0x1c2>
 8003c0a:	bf00      	nop
 8003c0c:	0800475c 	.word	0x0800475c
 8003c10:	08004766 	.word	0x08004766
 8003c14:	00000000 	.word	0x00000000
 8003c18:	08003969 	.word	0x08003969
 8003c1c:	08004762 	.word	0x08004762

08003c20 <_printf_common>:
 8003c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c24:	4616      	mov	r6, r2
 8003c26:	4699      	mov	r9, r3
 8003c28:	688a      	ldr	r2, [r1, #8]
 8003c2a:	690b      	ldr	r3, [r1, #16]
 8003c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bfb8      	it	lt
 8003c34:	4613      	movlt	r3, r2
 8003c36:	6033      	str	r3, [r6, #0]
 8003c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	b10a      	cbz	r2, 8003c46 <_printf_common+0x26>
 8003c42:	3301      	adds	r3, #1
 8003c44:	6033      	str	r3, [r6, #0]
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	0699      	lsls	r1, r3, #26
 8003c4a:	bf42      	ittt	mi
 8003c4c:	6833      	ldrmi	r3, [r6, #0]
 8003c4e:	3302      	addmi	r3, #2
 8003c50:	6033      	strmi	r3, [r6, #0]
 8003c52:	6825      	ldr	r5, [r4, #0]
 8003c54:	f015 0506 	ands.w	r5, r5, #6
 8003c58:	d106      	bne.n	8003c68 <_printf_common+0x48>
 8003c5a:	f104 0a19 	add.w	sl, r4, #25
 8003c5e:	68e3      	ldr	r3, [r4, #12]
 8003c60:	6832      	ldr	r2, [r6, #0]
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	42ab      	cmp	r3, r5
 8003c66:	dc26      	bgt.n	8003cb6 <_printf_common+0x96>
 8003c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c6c:	1e13      	subs	r3, r2, #0
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	bf18      	it	ne
 8003c72:	2301      	movne	r3, #1
 8003c74:	0692      	lsls	r2, r2, #26
 8003c76:	d42b      	bmi.n	8003cd0 <_printf_common+0xb0>
 8003c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	4638      	mov	r0, r7
 8003c80:	47c0      	blx	r8
 8003c82:	3001      	adds	r0, #1
 8003c84:	d01e      	beq.n	8003cc4 <_printf_common+0xa4>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	68e5      	ldr	r5, [r4, #12]
 8003c8a:	6832      	ldr	r2, [r6, #0]
 8003c8c:	f003 0306 	and.w	r3, r3, #6
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	bf08      	it	eq
 8003c94:	1aad      	subeq	r5, r5, r2
 8003c96:	68a3      	ldr	r3, [r4, #8]
 8003c98:	6922      	ldr	r2, [r4, #16]
 8003c9a:	bf0c      	ite	eq
 8003c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ca0:	2500      	movne	r5, #0
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	bfc4      	itt	gt
 8003ca6:	1a9b      	subgt	r3, r3, r2
 8003ca8:	18ed      	addgt	r5, r5, r3
 8003caa:	2600      	movs	r6, #0
 8003cac:	341a      	adds	r4, #26
 8003cae:	42b5      	cmp	r5, r6
 8003cb0:	d11a      	bne.n	8003ce8 <_printf_common+0xc8>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e008      	b.n	8003cc8 <_printf_common+0xa8>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4652      	mov	r2, sl
 8003cba:	4649      	mov	r1, r9
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	47c0      	blx	r8
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d103      	bne.n	8003ccc <_printf_common+0xac>
 8003cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ccc:	3501      	adds	r5, #1
 8003cce:	e7c6      	b.n	8003c5e <_printf_common+0x3e>
 8003cd0:	18e1      	adds	r1, r4, r3
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	2030      	movs	r0, #48	; 0x30
 8003cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cda:	4422      	add	r2, r4
 8003cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	e7c7      	b.n	8003c78 <_printf_common+0x58>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4622      	mov	r2, r4
 8003cec:	4649      	mov	r1, r9
 8003cee:	4638      	mov	r0, r7
 8003cf0:	47c0      	blx	r8
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d0e6      	beq.n	8003cc4 <_printf_common+0xa4>
 8003cf6:	3601      	adds	r6, #1
 8003cf8:	e7d9      	b.n	8003cae <_printf_common+0x8e>
	...

08003cfc <_printf_i>:
 8003cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d00:	7e0f      	ldrb	r7, [r1, #24]
 8003d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d04:	2f78      	cmp	r7, #120	; 0x78
 8003d06:	4691      	mov	r9, r2
 8003d08:	4680      	mov	r8, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	469a      	mov	sl, r3
 8003d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d12:	d807      	bhi.n	8003d24 <_printf_i+0x28>
 8003d14:	2f62      	cmp	r7, #98	; 0x62
 8003d16:	d80a      	bhi.n	8003d2e <_printf_i+0x32>
 8003d18:	2f00      	cmp	r7, #0
 8003d1a:	f000 80d8 	beq.w	8003ece <_printf_i+0x1d2>
 8003d1e:	2f58      	cmp	r7, #88	; 0x58
 8003d20:	f000 80a3 	beq.w	8003e6a <_printf_i+0x16e>
 8003d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d2c:	e03a      	b.n	8003da4 <_printf_i+0xa8>
 8003d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d32:	2b15      	cmp	r3, #21
 8003d34:	d8f6      	bhi.n	8003d24 <_printf_i+0x28>
 8003d36:	a101      	add	r1, pc, #4	; (adr r1, 8003d3c <_printf_i+0x40>)
 8003d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003da9 	.word	0x08003da9
 8003d44:	08003d25 	.word	0x08003d25
 8003d48:	08003d25 	.word	0x08003d25
 8003d4c:	08003d25 	.word	0x08003d25
 8003d50:	08003d25 	.word	0x08003d25
 8003d54:	08003da9 	.word	0x08003da9
 8003d58:	08003d25 	.word	0x08003d25
 8003d5c:	08003d25 	.word	0x08003d25
 8003d60:	08003d25 	.word	0x08003d25
 8003d64:	08003d25 	.word	0x08003d25
 8003d68:	08003eb5 	.word	0x08003eb5
 8003d6c:	08003dd9 	.word	0x08003dd9
 8003d70:	08003e97 	.word	0x08003e97
 8003d74:	08003d25 	.word	0x08003d25
 8003d78:	08003d25 	.word	0x08003d25
 8003d7c:	08003ed7 	.word	0x08003ed7
 8003d80:	08003d25 	.word	0x08003d25
 8003d84:	08003dd9 	.word	0x08003dd9
 8003d88:	08003d25 	.word	0x08003d25
 8003d8c:	08003d25 	.word	0x08003d25
 8003d90:	08003e9f 	.word	0x08003e9f
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	1d1a      	adds	r2, r3, #4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	602a      	str	r2, [r5, #0]
 8003d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0a3      	b.n	8003ef0 <_printf_i+0x1f4>
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	6829      	ldr	r1, [r5, #0]
 8003dac:	0606      	lsls	r6, r0, #24
 8003dae:	f101 0304 	add.w	r3, r1, #4
 8003db2:	d50a      	bpl.n	8003dca <_printf_i+0xce>
 8003db4:	680e      	ldr	r6, [r1, #0]
 8003db6:	602b      	str	r3, [r5, #0]
 8003db8:	2e00      	cmp	r6, #0
 8003dba:	da03      	bge.n	8003dc4 <_printf_i+0xc8>
 8003dbc:	232d      	movs	r3, #45	; 0x2d
 8003dbe:	4276      	negs	r6, r6
 8003dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc4:	485e      	ldr	r0, [pc, #376]	; (8003f40 <_printf_i+0x244>)
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	e019      	b.n	8003dfe <_printf_i+0x102>
 8003dca:	680e      	ldr	r6, [r1, #0]
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dd2:	bf18      	it	ne
 8003dd4:	b236      	sxthne	r6, r6
 8003dd6:	e7ef      	b.n	8003db8 <_printf_i+0xbc>
 8003dd8:	682b      	ldr	r3, [r5, #0]
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	6029      	str	r1, [r5, #0]
 8003de0:	0601      	lsls	r1, r0, #24
 8003de2:	d501      	bpl.n	8003de8 <_printf_i+0xec>
 8003de4:	681e      	ldr	r6, [r3, #0]
 8003de6:	e002      	b.n	8003dee <_printf_i+0xf2>
 8003de8:	0646      	lsls	r6, r0, #25
 8003dea:	d5fb      	bpl.n	8003de4 <_printf_i+0xe8>
 8003dec:	881e      	ldrh	r6, [r3, #0]
 8003dee:	4854      	ldr	r0, [pc, #336]	; (8003f40 <_printf_i+0x244>)
 8003df0:	2f6f      	cmp	r7, #111	; 0x6f
 8003df2:	bf0c      	ite	eq
 8003df4:	2308      	moveq	r3, #8
 8003df6:	230a      	movne	r3, #10
 8003df8:	2100      	movs	r1, #0
 8003dfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dfe:	6865      	ldr	r5, [r4, #4]
 8003e00:	60a5      	str	r5, [r4, #8]
 8003e02:	2d00      	cmp	r5, #0
 8003e04:	bfa2      	ittt	ge
 8003e06:	6821      	ldrge	r1, [r4, #0]
 8003e08:	f021 0104 	bicge.w	r1, r1, #4
 8003e0c:	6021      	strge	r1, [r4, #0]
 8003e0e:	b90e      	cbnz	r6, 8003e14 <_printf_i+0x118>
 8003e10:	2d00      	cmp	r5, #0
 8003e12:	d04d      	beq.n	8003eb0 <_printf_i+0x1b4>
 8003e14:	4615      	mov	r5, r2
 8003e16:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e1a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e1e:	5dc7      	ldrb	r7, [r0, r7]
 8003e20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e24:	4637      	mov	r7, r6
 8003e26:	42bb      	cmp	r3, r7
 8003e28:	460e      	mov	r6, r1
 8003e2a:	d9f4      	bls.n	8003e16 <_printf_i+0x11a>
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d10b      	bne.n	8003e48 <_printf_i+0x14c>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	07de      	lsls	r6, r3, #31
 8003e34:	d508      	bpl.n	8003e48 <_printf_i+0x14c>
 8003e36:	6923      	ldr	r3, [r4, #16]
 8003e38:	6861      	ldr	r1, [r4, #4]
 8003e3a:	4299      	cmp	r1, r3
 8003e3c:	bfde      	ittt	le
 8003e3e:	2330      	movle	r3, #48	; 0x30
 8003e40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e48:	1b52      	subs	r2, r2, r5
 8003e4a:	6122      	str	r2, [r4, #16]
 8003e4c:	f8cd a000 	str.w	sl, [sp]
 8003e50:	464b      	mov	r3, r9
 8003e52:	aa03      	add	r2, sp, #12
 8003e54:	4621      	mov	r1, r4
 8003e56:	4640      	mov	r0, r8
 8003e58:	f7ff fee2 	bl	8003c20 <_printf_common>
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d14c      	bne.n	8003efa <_printf_i+0x1fe>
 8003e60:	f04f 30ff 	mov.w	r0, #4294967295
 8003e64:	b004      	add	sp, #16
 8003e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e6a:	4835      	ldr	r0, [pc, #212]	; (8003f40 <_printf_i+0x244>)
 8003e6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e70:	6829      	ldr	r1, [r5, #0]
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e78:	6029      	str	r1, [r5, #0]
 8003e7a:	061d      	lsls	r5, r3, #24
 8003e7c:	d514      	bpl.n	8003ea8 <_printf_i+0x1ac>
 8003e7e:	07df      	lsls	r7, r3, #31
 8003e80:	bf44      	itt	mi
 8003e82:	f043 0320 	orrmi.w	r3, r3, #32
 8003e86:	6023      	strmi	r3, [r4, #0]
 8003e88:	b91e      	cbnz	r6, 8003e92 <_printf_i+0x196>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f023 0320 	bic.w	r3, r3, #32
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	2310      	movs	r3, #16
 8003e94:	e7b0      	b.n	8003df8 <_printf_i+0xfc>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	f043 0320 	orr.w	r3, r3, #32
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	2378      	movs	r3, #120	; 0x78
 8003ea0:	4828      	ldr	r0, [pc, #160]	; (8003f44 <_printf_i+0x248>)
 8003ea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ea6:	e7e3      	b.n	8003e70 <_printf_i+0x174>
 8003ea8:	0659      	lsls	r1, r3, #25
 8003eaa:	bf48      	it	mi
 8003eac:	b2b6      	uxthmi	r6, r6
 8003eae:	e7e6      	b.n	8003e7e <_printf_i+0x182>
 8003eb0:	4615      	mov	r5, r2
 8003eb2:	e7bb      	b.n	8003e2c <_printf_i+0x130>
 8003eb4:	682b      	ldr	r3, [r5, #0]
 8003eb6:	6826      	ldr	r6, [r4, #0]
 8003eb8:	6961      	ldr	r1, [r4, #20]
 8003eba:	1d18      	adds	r0, r3, #4
 8003ebc:	6028      	str	r0, [r5, #0]
 8003ebe:	0635      	lsls	r5, r6, #24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_i+0x1cc>
 8003ec4:	6019      	str	r1, [r3, #0]
 8003ec6:	e002      	b.n	8003ece <_printf_i+0x1d2>
 8003ec8:	0670      	lsls	r0, r6, #25
 8003eca:	d5fb      	bpl.n	8003ec4 <_printf_i+0x1c8>
 8003ecc:	8019      	strh	r1, [r3, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6123      	str	r3, [r4, #16]
 8003ed2:	4615      	mov	r5, r2
 8003ed4:	e7ba      	b.n	8003e4c <_printf_i+0x150>
 8003ed6:	682b      	ldr	r3, [r5, #0]
 8003ed8:	1d1a      	adds	r2, r3, #4
 8003eda:	602a      	str	r2, [r5, #0]
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	6862      	ldr	r2, [r4, #4]
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	f7fc f994 	bl	8000210 <memchr>
 8003ee8:	b108      	cbz	r0, 8003eee <_printf_i+0x1f2>
 8003eea:	1b40      	subs	r0, r0, r5
 8003eec:	6060      	str	r0, [r4, #4]
 8003eee:	6863      	ldr	r3, [r4, #4]
 8003ef0:	6123      	str	r3, [r4, #16]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef8:	e7a8      	b.n	8003e4c <_printf_i+0x150>
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	462a      	mov	r2, r5
 8003efe:	4649      	mov	r1, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	47d0      	blx	sl
 8003f04:	3001      	adds	r0, #1
 8003f06:	d0ab      	beq.n	8003e60 <_printf_i+0x164>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	079b      	lsls	r3, r3, #30
 8003f0c:	d413      	bmi.n	8003f36 <_printf_i+0x23a>
 8003f0e:	68e0      	ldr	r0, [r4, #12]
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	4298      	cmp	r0, r3
 8003f14:	bfb8      	it	lt
 8003f16:	4618      	movlt	r0, r3
 8003f18:	e7a4      	b.n	8003e64 <_printf_i+0x168>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4632      	mov	r2, r6
 8003f1e:	4649      	mov	r1, r9
 8003f20:	4640      	mov	r0, r8
 8003f22:	47d0      	blx	sl
 8003f24:	3001      	adds	r0, #1
 8003f26:	d09b      	beq.n	8003e60 <_printf_i+0x164>
 8003f28:	3501      	adds	r5, #1
 8003f2a:	68e3      	ldr	r3, [r4, #12]
 8003f2c:	9903      	ldr	r1, [sp, #12]
 8003f2e:	1a5b      	subs	r3, r3, r1
 8003f30:	42ab      	cmp	r3, r5
 8003f32:	dcf2      	bgt.n	8003f1a <_printf_i+0x21e>
 8003f34:	e7eb      	b.n	8003f0e <_printf_i+0x212>
 8003f36:	2500      	movs	r5, #0
 8003f38:	f104 0619 	add.w	r6, r4, #25
 8003f3c:	e7f5      	b.n	8003f2a <_printf_i+0x22e>
 8003f3e:	bf00      	nop
 8003f40:	0800476d 	.word	0x0800476d
 8003f44:	0800477e 	.word	0x0800477e

08003f48 <__retarget_lock_acquire_recursive>:
 8003f48:	4770      	bx	lr

08003f4a <__retarget_lock_release_recursive>:
 8003f4a:	4770      	bx	lr

08003f4c <_realloc_r>:
 8003f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f50:	4680      	mov	r8, r0
 8003f52:	4614      	mov	r4, r2
 8003f54:	460e      	mov	r6, r1
 8003f56:	b921      	cbnz	r1, 8003f62 <_realloc_r+0x16>
 8003f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	f7ff bc53 	b.w	8003808 <_malloc_r>
 8003f62:	b92a      	cbnz	r2, 8003f70 <_realloc_r+0x24>
 8003f64:	f7ff fbe4 	bl	8003730 <_free_r>
 8003f68:	4625      	mov	r5, r4
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f70:	f000 f81b 	bl	8003faa <_malloc_usable_size_r>
 8003f74:	4284      	cmp	r4, r0
 8003f76:	4607      	mov	r7, r0
 8003f78:	d802      	bhi.n	8003f80 <_realloc_r+0x34>
 8003f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f7e:	d812      	bhi.n	8003fa6 <_realloc_r+0x5a>
 8003f80:	4621      	mov	r1, r4
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7ff fc40 	bl	8003808 <_malloc_r>
 8003f88:	4605      	mov	r5, r0
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d0ed      	beq.n	8003f6a <_realloc_r+0x1e>
 8003f8e:	42bc      	cmp	r4, r7
 8003f90:	4622      	mov	r2, r4
 8003f92:	4631      	mov	r1, r6
 8003f94:	bf28      	it	cs
 8003f96:	463a      	movcs	r2, r7
 8003f98:	f7ff fb9a 	bl	80036d0 <memcpy>
 8003f9c:	4631      	mov	r1, r6
 8003f9e:	4640      	mov	r0, r8
 8003fa0:	f7ff fbc6 	bl	8003730 <_free_r>
 8003fa4:	e7e1      	b.n	8003f6a <_realloc_r+0x1e>
 8003fa6:	4635      	mov	r5, r6
 8003fa8:	e7df      	b.n	8003f6a <_realloc_r+0x1e>

08003faa <_malloc_usable_size_r>:
 8003faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fae:	1f18      	subs	r0, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bfbc      	itt	lt
 8003fb4:	580b      	ldrlt	r3, [r1, r0]
 8003fb6:	18c0      	addlt	r0, r0, r3
 8003fb8:	4770      	bx	lr
	...

08003fbc <_init>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr

08003fc8 <_fini>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr
