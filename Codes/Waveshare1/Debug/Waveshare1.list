
Waveshare1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fea8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  08010078  08010078  00020078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e40  08010e40  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010e40  08010e40  00020e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e48  08010e48  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e48  08010e48  00020e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e4c  08010e4c  00020e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08010e50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028b4  200000b0  08010f00  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002964  08010f00  00032964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0fa  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae3  00000000  00000000  0004a1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  0004dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001550  00000000  00000000  0004f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d6c  00000000  00000000  00050928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020486  00000000  00000000  00078694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5aa6  00000000  00000000  00098b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e5c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  0017e610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010060 	.word	0x08010060

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08010060 	.word	0x08010060

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_frsub>:
 8000cb8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cbc:	e002      	b.n	8000cc4 <__addsf3>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_fsub>:
 8000cc0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cc4 <__addsf3>:
 8000cc4:	0042      	lsls	r2, r0, #1
 8000cc6:	bf1f      	itttt	ne
 8000cc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ccc:	ea92 0f03 	teqne	r2, r3
 8000cd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd8:	d06a      	beq.n	8000db0 <__addsf3+0xec>
 8000cda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ce2:	bfc1      	itttt	gt
 8000ce4:	18d2      	addgt	r2, r2, r3
 8000ce6:	4041      	eorgt	r1, r0
 8000ce8:	4048      	eorgt	r0, r1
 8000cea:	4041      	eorgt	r1, r0
 8000cec:	bfb8      	it	lt
 8000cee:	425b      	neglt	r3, r3
 8000cf0:	2b19      	cmp	r3, #25
 8000cf2:	bf88      	it	hi
 8000cf4:	4770      	bxhi	lr
 8000cf6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4240      	negne	r0, r0
 8000d06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d0e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4249      	negne	r1, r1
 8000d16:	ea92 0f03 	teq	r2, r3
 8000d1a:	d03f      	beq.n	8000d9c <__addsf3+0xd8>
 8000d1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d20:	fa41 fc03 	asr.w	ip, r1, r3
 8000d24:	eb10 000c 	adds.w	r0, r0, ip
 8000d28:	f1c3 0320 	rsb	r3, r3, #32
 8000d2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d30:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__addsf3+0x78>
 8000d36:	4249      	negs	r1, r1
 8000d38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d40:	d313      	bcc.n	8000d6a <__addsf3+0xa6>
 8000d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d46:	d306      	bcc.n	8000d56 <__addsf3+0x92>
 8000d48:	0840      	lsrs	r0, r0, #1
 8000d4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d4e:	f102 0201 	add.w	r2, r2, #1
 8000d52:	2afe      	cmp	r2, #254	; 0xfe
 8000d54:	d251      	bcs.n	8000dfa <__addsf3+0x136>
 8000d56:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d5e:	bf08      	it	eq
 8000d60:	f020 0001 	biceq.w	r0, r0, #1
 8000d64:	ea40 0003 	orr.w	r0, r0, r3
 8000d68:	4770      	bx	lr
 8000d6a:	0049      	lsls	r1, r1, #1
 8000d6c:	eb40 0000 	adc.w	r0, r0, r0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	bf28      	it	cs
 8000d74:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d78:	d2ed      	bcs.n	8000d56 <__addsf3+0x92>
 8000d7a:	fab0 fc80 	clz	ip, r0
 8000d7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d82:	ebb2 020c 	subs.w	r2, r2, ip
 8000d86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d8a:	bfaa      	itet	ge
 8000d8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d90:	4252      	neglt	r2, r2
 8000d92:	4318      	orrge	r0, r3
 8000d94:	bfbc      	itt	lt
 8000d96:	40d0      	lsrlt	r0, r2
 8000d98:	4318      	orrlt	r0, r3
 8000d9a:	4770      	bx	lr
 8000d9c:	f092 0f00 	teq	r2, #0
 8000da0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000da4:	bf06      	itte	eq
 8000da6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000daa:	3201      	addeq	r2, #1
 8000dac:	3b01      	subne	r3, #1
 8000dae:	e7b5      	b.n	8000d1c <__addsf3+0x58>
 8000db0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000db8:	bf18      	it	ne
 8000dba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dbe:	d021      	beq.n	8000e04 <__addsf3+0x140>
 8000dc0:	ea92 0f03 	teq	r2, r3
 8000dc4:	d004      	beq.n	8000dd0 <__addsf3+0x10c>
 8000dc6:	f092 0f00 	teq	r2, #0
 8000dca:	bf08      	it	eq
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	4770      	bx	lr
 8000dd0:	ea90 0f01 	teq	r0, r1
 8000dd4:	bf1c      	itt	ne
 8000dd6:	2000      	movne	r0, #0
 8000dd8:	4770      	bxne	lr
 8000dda:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dde:	d104      	bne.n	8000dea <__addsf3+0x126>
 8000de0:	0040      	lsls	r0, r0, #1
 8000de2:	bf28      	it	cs
 8000de4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000de8:	4770      	bx	lr
 8000dea:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dee:	bf3c      	itt	cc
 8000df0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000df4:	4770      	bxcc	lr
 8000df6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dfa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	4770      	bx	lr
 8000e04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e08:	bf16      	itet	ne
 8000e0a:	4608      	movne	r0, r1
 8000e0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e10:	4601      	movne	r1, r0
 8000e12:	0242      	lsls	r2, r0, #9
 8000e14:	bf06      	itte	eq
 8000e16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e1a:	ea90 0f01 	teqeq	r0, r1
 8000e1e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_ui2f>:
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e004      	b.n	8000e34 <__aeabi_i2f+0x8>
 8000e2a:	bf00      	nop

08000e2c <__aeabi_i2f>:
 8000e2c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e30:	bf48      	it	mi
 8000e32:	4240      	negmi	r0, r0
 8000e34:	ea5f 0c00 	movs.w	ip, r0
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e40:	4601      	mov	r1, r0
 8000e42:	f04f 0000 	mov.w	r0, #0
 8000e46:	e01c      	b.n	8000e82 <__aeabi_l2f+0x2a>

08000e48 <__aeabi_ul2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e00a      	b.n	8000e6c <__aeabi_l2f+0x14>
 8000e56:	bf00      	nop

08000e58 <__aeabi_l2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_l2f+0x14>
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	ea5f 0c01 	movs.w	ip, r1
 8000e70:	bf02      	ittt	eq
 8000e72:	4684      	moveq	ip, r0
 8000e74:	4601      	moveq	r1, r0
 8000e76:	2000      	moveq	r0, #0
 8000e78:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e7c:	bf08      	it	eq
 8000e7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e82:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e86:	fabc f28c 	clz	r2, ip
 8000e8a:	3a08      	subs	r2, #8
 8000e8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e90:	db10      	blt.n	8000eb4 <__aeabi_l2f+0x5c>
 8000e92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e96:	4463      	add	r3, ip
 8000e98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ea4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	f020 0001 	biceq.w	r0, r0, #1
 8000eb2:	4770      	bx	lr
 8000eb4:	f102 0220 	add.w	r2, r2, #32
 8000eb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ec4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_uldivmod>:
 8000ed4:	b953      	cbnz	r3, 8000eec <__aeabi_uldivmod+0x18>
 8000ed6:	b94a      	cbnz	r2, 8000eec <__aeabi_uldivmod+0x18>
 8000ed8:	2900      	cmp	r1, #0
 8000eda:	bf08      	it	eq
 8000edc:	2800      	cmpeq	r0, #0
 8000ede:	bf1c      	itt	ne
 8000ee0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ee4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ee8:	f000 b992 	b.w	8001210 <__aeabi_idiv0>
 8000eec:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ef0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ef4:	f000 f824 	bl	8000f40 <__udivmoddi4>
 8000ef8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f00:	b004      	add	sp, #16
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_d2ulz>:
 8000f04:	b5d0      	push	{r4, r6, r7, lr}
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__aeabi_d2ulz+0x34>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	460f      	mov	r7, r1
 8000f0e:	f7ff fb8b 	bl	8000628 <__aeabi_dmul>
 8000f12:	f7ff fe61 	bl	8000bd8 <__aeabi_d2uiz>
 8000f16:	4604      	mov	r4, r0
 8000f18:	f7ff fb0c 	bl	8000534 <__aeabi_ui2d>
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <__aeabi_d2ulz+0x38>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f7ff fb82 	bl	8000628 <__aeabi_dmul>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4630      	mov	r0, r6
 8000f2a:	4639      	mov	r1, r7
 8000f2c:	f7ff f9c4 	bl	80002b8 <__aeabi_dsub>
 8000f30:	f7ff fe52 	bl	8000bd8 <__aeabi_d2uiz>
 8000f34:	4621      	mov	r1, r4
 8000f36:	bdd0      	pop	{r4, r6, r7, pc}
 8000f38:	3df00000 	.word	0x3df00000
 8000f3c:	41f00000 	.word	0x41f00000

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	4604      	mov	r4, r0
 8000f48:	468e      	mov	lr, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d14d      	bne.n	8000fea <__udivmoddi4+0xaa>
 8000f4e:	428a      	cmp	r2, r1
 8000f50:	4694      	mov	ip, r2
 8000f52:	d969      	bls.n	8001028 <__udivmoddi4+0xe8>
 8000f54:	fab2 f282 	clz	r2, r2
 8000f58:	b152      	cbz	r2, 8000f70 <__udivmoddi4+0x30>
 8000f5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f5e:	f1c2 0120 	rsb	r1, r2, #32
 8000f62:	fa20 f101 	lsr.w	r1, r0, r1
 8000f66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000f6e:	4094      	lsls	r4, r2
 8000f70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f74:	0c21      	lsrs	r1, r4, #16
 8000f76:	fbbe f6f8 	udiv	r6, lr, r8
 8000f7a:	fa1f f78c 	uxth.w	r7, ip
 8000f7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000f82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f86:	fb06 f107 	mul.w	r1, r6, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d90a      	bls.n	8000fa4 <__udivmoddi4+0x64>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f96:	f080 811f 	bcs.w	80011d8 <__udivmoddi4+0x298>
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	f240 811c 	bls.w	80011d8 <__udivmoddi4+0x298>
 8000fa0:	3e02      	subs	r6, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1a5b      	subs	r3, r3, r1
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fac:	fb08 3310 	mls	r3, r8, r0, r3
 8000fb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb4:	fb00 f707 	mul.w	r7, r0, r7
 8000fb8:	42a7      	cmp	r7, r4
 8000fba:	d90a      	bls.n	8000fd2 <__udivmoddi4+0x92>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc4:	f080 810a 	bcs.w	80011dc <__udivmoddi4+0x29c>
 8000fc8:	42a7      	cmp	r7, r4
 8000fca:	f240 8107 	bls.w	80011dc <__udivmoddi4+0x29c>
 8000fce:	4464      	add	r4, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fd6:	1be4      	subs	r4, r4, r7
 8000fd8:	2600      	movs	r6, #0
 8000fda:	b11d      	cbz	r5, 8000fe4 <__udivmoddi4+0xa4>
 8000fdc:	40d4      	lsrs	r4, r2
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e9c5 4300 	strd	r4, r3, [r5]
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d909      	bls.n	8001002 <__udivmoddi4+0xc2>
 8000fee:	2d00      	cmp	r5, #0
 8000ff0:	f000 80ef 	beq.w	80011d2 <__udivmoddi4+0x292>
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	4631      	mov	r1, r6
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	fab3 f683 	clz	r6, r3
 8001006:	2e00      	cmp	r6, #0
 8001008:	d14a      	bne.n	80010a0 <__udivmoddi4+0x160>
 800100a:	428b      	cmp	r3, r1
 800100c:	d302      	bcc.n	8001014 <__udivmoddi4+0xd4>
 800100e:	4282      	cmp	r2, r0
 8001010:	f200 80f9 	bhi.w	8001206 <__udivmoddi4+0x2c6>
 8001014:	1a84      	subs	r4, r0, r2
 8001016:	eb61 0303 	sbc.w	r3, r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	469e      	mov	lr, r3
 800101e:	2d00      	cmp	r5, #0
 8001020:	d0e0      	beq.n	8000fe4 <__udivmoddi4+0xa4>
 8001022:	e9c5 4e00 	strd	r4, lr, [r5]
 8001026:	e7dd      	b.n	8000fe4 <__udivmoddi4+0xa4>
 8001028:	b902      	cbnz	r2, 800102c <__udivmoddi4+0xec>
 800102a:	deff      	udf	#255	; 0xff
 800102c:	fab2 f282 	clz	r2, r2
 8001030:	2a00      	cmp	r2, #0
 8001032:	f040 8092 	bne.w	800115a <__udivmoddi4+0x21a>
 8001036:	eba1 010c 	sub.w	r1, r1, ip
 800103a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103e:	fa1f fe8c 	uxth.w	lr, ip
 8001042:	2601      	movs	r6, #1
 8001044:	0c20      	lsrs	r0, r4, #16
 8001046:	fbb1 f3f7 	udiv	r3, r1, r7
 800104a:	fb07 1113 	mls	r1, r7, r3, r1
 800104e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001052:	fb0e f003 	mul.w	r0, lr, r3
 8001056:	4288      	cmp	r0, r1
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x12c>
 800105a:	eb1c 0101 	adds.w	r1, ip, r1
 800105e:	f103 38ff 	add.w	r8, r3, #4294967295
 8001062:	d202      	bcs.n	800106a <__udivmoddi4+0x12a>
 8001064:	4288      	cmp	r0, r1
 8001066:	f200 80cb 	bhi.w	8001200 <__udivmoddi4+0x2c0>
 800106a:	4643      	mov	r3, r8
 800106c:	1a09      	subs	r1, r1, r0
 800106e:	b2a4      	uxth	r4, r4
 8001070:	fbb1 f0f7 	udiv	r0, r1, r7
 8001074:	fb07 1110 	mls	r1, r7, r0, r1
 8001078:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800107c:	fb0e fe00 	mul.w	lr, lr, r0
 8001080:	45a6      	cmp	lr, r4
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x156>
 8001084:	eb1c 0404 	adds.w	r4, ip, r4
 8001088:	f100 31ff 	add.w	r1, r0, #4294967295
 800108c:	d202      	bcs.n	8001094 <__udivmoddi4+0x154>
 800108e:	45a6      	cmp	lr, r4
 8001090:	f200 80bb 	bhi.w	800120a <__udivmoddi4+0x2ca>
 8001094:	4608      	mov	r0, r1
 8001096:	eba4 040e 	sub.w	r4, r4, lr
 800109a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800109e:	e79c      	b.n	8000fda <__udivmoddi4+0x9a>
 80010a0:	f1c6 0720 	rsb	r7, r6, #32
 80010a4:	40b3      	lsls	r3, r6
 80010a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80010aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80010ae:	fa20 f407 	lsr.w	r4, r0, r7
 80010b2:	fa01 f306 	lsl.w	r3, r1, r6
 80010b6:	431c      	orrs	r4, r3
 80010b8:	40f9      	lsrs	r1, r7
 80010ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80010be:	fa00 f306 	lsl.w	r3, r0, r6
 80010c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80010c6:	0c20      	lsrs	r0, r4, #16
 80010c8:	fa1f fe8c 	uxth.w	lr, ip
 80010cc:	fb09 1118 	mls	r1, r9, r8, r1
 80010d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010d4:	fb08 f00e 	mul.w	r0, r8, lr
 80010d8:	4288      	cmp	r0, r1
 80010da:	fa02 f206 	lsl.w	r2, r2, r6
 80010de:	d90b      	bls.n	80010f8 <__udivmoddi4+0x1b8>
 80010e0:	eb1c 0101 	adds.w	r1, ip, r1
 80010e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80010e8:	f080 8088 	bcs.w	80011fc <__udivmoddi4+0x2bc>
 80010ec:	4288      	cmp	r0, r1
 80010ee:	f240 8085 	bls.w	80011fc <__udivmoddi4+0x2bc>
 80010f2:	f1a8 0802 	sub.w	r8, r8, #2
 80010f6:	4461      	add	r1, ip
 80010f8:	1a09      	subs	r1, r1, r0
 80010fa:	b2a4      	uxth	r4, r4
 80010fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8001100:	fb09 1110 	mls	r1, r9, r0, r1
 8001104:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001108:	fb00 fe0e 	mul.w	lr, r0, lr
 800110c:	458e      	cmp	lr, r1
 800110e:	d908      	bls.n	8001122 <__udivmoddi4+0x1e2>
 8001110:	eb1c 0101 	adds.w	r1, ip, r1
 8001114:	f100 34ff 	add.w	r4, r0, #4294967295
 8001118:	d26c      	bcs.n	80011f4 <__udivmoddi4+0x2b4>
 800111a:	458e      	cmp	lr, r1
 800111c:	d96a      	bls.n	80011f4 <__udivmoddi4+0x2b4>
 800111e:	3802      	subs	r0, #2
 8001120:	4461      	add	r1, ip
 8001122:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001126:	fba0 9402 	umull	r9, r4, r0, r2
 800112a:	eba1 010e 	sub.w	r1, r1, lr
 800112e:	42a1      	cmp	r1, r4
 8001130:	46c8      	mov	r8, r9
 8001132:	46a6      	mov	lr, r4
 8001134:	d356      	bcc.n	80011e4 <__udivmoddi4+0x2a4>
 8001136:	d053      	beq.n	80011e0 <__udivmoddi4+0x2a0>
 8001138:	b15d      	cbz	r5, 8001152 <__udivmoddi4+0x212>
 800113a:	ebb3 0208 	subs.w	r2, r3, r8
 800113e:	eb61 010e 	sbc.w	r1, r1, lr
 8001142:	fa01 f707 	lsl.w	r7, r1, r7
 8001146:	fa22 f306 	lsr.w	r3, r2, r6
 800114a:	40f1      	lsrs	r1, r6
 800114c:	431f      	orrs	r7, r3
 800114e:	e9c5 7100 	strd	r7, r1, [r5]
 8001152:	2600      	movs	r6, #0
 8001154:	4631      	mov	r1, r6
 8001156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800115a:	f1c2 0320 	rsb	r3, r2, #32
 800115e:	40d8      	lsrs	r0, r3
 8001160:	fa0c fc02 	lsl.w	ip, ip, r2
 8001164:	fa21 f303 	lsr.w	r3, r1, r3
 8001168:	4091      	lsls	r1, r2
 800116a:	4301      	orrs	r1, r0
 800116c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001170:	fa1f fe8c 	uxth.w	lr, ip
 8001174:	fbb3 f0f7 	udiv	r0, r3, r7
 8001178:	fb07 3610 	mls	r6, r7, r0, r3
 800117c:	0c0b      	lsrs	r3, r1, #16
 800117e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001182:	fb00 f60e 	mul.w	r6, r0, lr
 8001186:	429e      	cmp	r6, r3
 8001188:	fa04 f402 	lsl.w	r4, r4, r2
 800118c:	d908      	bls.n	80011a0 <__udivmoddi4+0x260>
 800118e:	eb1c 0303 	adds.w	r3, ip, r3
 8001192:	f100 38ff 	add.w	r8, r0, #4294967295
 8001196:	d22f      	bcs.n	80011f8 <__udivmoddi4+0x2b8>
 8001198:	429e      	cmp	r6, r3
 800119a:	d92d      	bls.n	80011f8 <__udivmoddi4+0x2b8>
 800119c:	3802      	subs	r0, #2
 800119e:	4463      	add	r3, ip
 80011a0:	1b9b      	subs	r3, r3, r6
 80011a2:	b289      	uxth	r1, r1
 80011a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80011a8:	fb07 3316 	mls	r3, r7, r6, r3
 80011ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011b0:	fb06 f30e 	mul.w	r3, r6, lr
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d908      	bls.n	80011ca <__udivmoddi4+0x28a>
 80011b8:	eb1c 0101 	adds.w	r1, ip, r1
 80011bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80011c0:	d216      	bcs.n	80011f0 <__udivmoddi4+0x2b0>
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d914      	bls.n	80011f0 <__udivmoddi4+0x2b0>
 80011c6:	3e02      	subs	r6, #2
 80011c8:	4461      	add	r1, ip
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80011d0:	e738      	b.n	8001044 <__udivmoddi4+0x104>
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e705      	b.n	8000fe4 <__udivmoddi4+0xa4>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e3      	b.n	8000fa4 <__udivmoddi4+0x64>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6f8      	b.n	8000fd2 <__udivmoddi4+0x92>
 80011e0:	454b      	cmp	r3, r9
 80011e2:	d2a9      	bcs.n	8001138 <__udivmoddi4+0x1f8>
 80011e4:	ebb9 0802 	subs.w	r8, r9, r2
 80011e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7a3      	b.n	8001138 <__udivmoddi4+0x1f8>
 80011f0:	4646      	mov	r6, r8
 80011f2:	e7ea      	b.n	80011ca <__udivmoddi4+0x28a>
 80011f4:	4620      	mov	r0, r4
 80011f6:	e794      	b.n	8001122 <__udivmoddi4+0x1e2>
 80011f8:	4640      	mov	r0, r8
 80011fa:	e7d1      	b.n	80011a0 <__udivmoddi4+0x260>
 80011fc:	46d0      	mov	r8, sl
 80011fe:	e77b      	b.n	80010f8 <__udivmoddi4+0x1b8>
 8001200:	3b02      	subs	r3, #2
 8001202:	4461      	add	r1, ip
 8001204:	e732      	b.n	800106c <__udivmoddi4+0x12c>
 8001206:	4630      	mov	r0, r6
 8001208:	e709      	b.n	800101e <__udivmoddi4+0xde>
 800120a:	4464      	add	r4, ip
 800120c:	3802      	subs	r0, #2
 800120e:	e742      	b.n	8001096 <__udivmoddi4+0x156>

08001210 <__aeabi_idiv0>:
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <imuInit>:

float angles[3];
float q0, q1, q2, q3; 

void imuInit(IMU_EN_SENSOR_TYPE *penMotionSensorType, IMU_EN_SENSOR_TYPE *penPressureType)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  bool bRet = false;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
  else
  {
    *penMotionSensorType = IMU_EN_SENSOR_TYPE_NULL;
  }
   */
  bRet = bmp280Check();
 8001222:	f000 f82b 	bl	800127c <bmp280Check>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
  if( true == bRet)
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <imuInit+0x28>
  {
    *penPressureType = IMU_EN_SENSOR_TYPE_BMP280;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2202      	movs	r2, #2
 8001234:	701a      	strb	r2, [r3, #0]
    bmp280Init();
 8001236:	f000 f93d 	bl	80014b4 <bmp280Init>
 800123a:	e002      	b.n	8001242 <imuInit+0x2e>
  }
  else
  {
    *penPressureType = IMU_EN_SENSOR_TYPE_NULL;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
  }

  q0 = 1.0f;  
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <imuInit+0x58>)
 8001244:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001248:	601a      	str	r2, [r3, #0]
  q1 = 0.0f;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <imuInit+0x5c>)
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
  q2 = 0.0f;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <imuInit+0x60>)
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
  q3 = 0.0f;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <imuInit+0x64>)
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	601a      	str	r2, [r3, #0]

  return;
 8001262:	bf00      	nop
}
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000cc 	.word	0x200000cc
 8001270:	200000d0 	.word	0x200000d0
 8001274:	200000d4 	.word	0x200000d4
 8001278:	200000d8 	.word	0x200000d8

0800127c <bmp280Check>:

BMP280_HandleTypeDef bmp280;
int32_t gs32Pressure0 = MSLP; 

bool bmp280Check(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    bool bRet = false;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
    if(0x58 == I2C_ReadOneByte(BMP280_ADDR, BMP280_REGISTER_CHIPID))
 8001286:	21d0      	movs	r1, #208	; 0xd0
 8001288:	20ee      	movs	r0, #238	; 0xee
 800128a:	f001 faeb 	bl	8002864 <I2C_ReadOneByte>
 800128e:	4603      	mov	r3, r0
 8001290:	2b58      	cmp	r3, #88	; 0x58
 8001292:	d101      	bne.n	8001298 <bmp280Check+0x1c>
    {
        bRet = true;
 8001294:	2301      	movs	r3, #1
 8001296:	71fb      	strb	r3, [r7, #7]
    }
    return bRet;
 8001298:	79fb      	ldrb	r3, [r7, #7]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <bmp280ReadCalibration>:

void bmp280ReadCalibration(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
  uint8_t lsb, msb; 
  
  /* read the temperature calibration parameters */  
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T1_LSB_REG);
 80012aa:	2188      	movs	r1, #136	; 0x88
 80012ac:	20ee      	movs	r0, #238	; 0xee
 80012ae:	f001 fad9 	bl	8002864 <I2C_ReadOneByte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T1_MSB_REG);
 80012b6:	2189      	movs	r1, #137	; 0x89
 80012b8:	20ee      	movs	r0, #238	; 0xee
 80012ba:	f001 fad3 	bl	8002864 <I2C_ReadOneByte>
 80012be:	4603      	mov	r3, r0
 80012c0:	71bb      	strb	r3, [r7, #6]
  dig_T1 = msb << 8 | lsb;
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	4313      	orrs	r3, r2
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b77      	ldr	r3, [pc, #476]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 80012d4:	801a      	strh	r2, [r3, #0]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T2_LSB_REG);
 80012d6:	218a      	movs	r1, #138	; 0x8a
 80012d8:	20ee      	movs	r0, #238	; 0xee
 80012da:	f001 fac3 	bl	8002864 <I2C_ReadOneByte>
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T2_MSB_REG);
 80012e2:	218b      	movs	r1, #139	; 0x8b
 80012e4:	20ee      	movs	r0, #238	; 0xee
 80012e6:	f001 fabd 	bl	8002864 <I2C_ReadOneByte>
 80012ea:	4603      	mov	r3, r0
 80012ec:	71bb      	strb	r3, [r7, #6]
  dig_T2 = msb << 8 | lsb;  
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b6c      	ldr	r3, [pc, #432]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 80012fe:	805a      	strh	r2, [r3, #2]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T3_LSB_REG);
 8001300:	218c      	movs	r1, #140	; 0x8c
 8001302:	20ee      	movs	r0, #238	; 0xee
 8001304:	f001 faae 	bl	8002864 <I2C_ReadOneByte>
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T3_MSB_REG);
 800130c:	218d      	movs	r1, #141	; 0x8d
 800130e:	20ee      	movs	r0, #238	; 0xee
 8001310:	f001 faa8 	bl	8002864 <I2C_ReadOneByte>
 8001314:	4603      	mov	r3, r0
 8001316:	71bb      	strb	r3, [r7, #6]
  dig_T3 = msb << 8 | lsb;  
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21a      	sxth	r2, r3
 8001326:	4b62      	ldr	r3, [pc, #392]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 8001328:	809a      	strh	r2, [r3, #4]
  
  /* read the pressure calibration parameters */  
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P1_LSB_REG);
 800132a:	218e      	movs	r1, #142	; 0x8e
 800132c:	20ee      	movs	r0, #238	; 0xee
 800132e:	f001 fa99 	bl	8002864 <I2C_ReadOneByte>
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P1_MSB_REG);    
 8001336:	218f      	movs	r1, #143	; 0x8f
 8001338:	20ee      	movs	r0, #238	; 0xee
 800133a:	f001 fa93 	bl	8002864 <I2C_ReadOneByte>
 800133e:	4603      	mov	r3, r0
 8001340:	71bb      	strb	r3, [r7, #6]
  dig_P1 = msb << 8 | lsb;  
 8001342:	79bb      	ldrb	r3, [r7, #6]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 8001354:	80da      	strh	r2, [r3, #6]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P2_LSB_REG);
 8001356:	2190      	movs	r1, #144	; 0x90
 8001358:	20ee      	movs	r0, #238	; 0xee
 800135a:	f001 fa83 	bl	8002864 <I2C_ReadOneByte>
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P2_MSB_REG);      
 8001362:	2191      	movs	r1, #145	; 0x91
 8001364:	20ee      	movs	r0, #238	; 0xee
 8001366:	f001 fa7d 	bl	8002864 <I2C_ReadOneByte>
 800136a:	4603      	mov	r3, r0
 800136c:	71bb      	strb	r3, [r7, #6]
  dig_P2 = msb << 8 | lsb;  
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 800137e:	811a      	strh	r2, [r3, #8]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P3_LSB_REG);
 8001380:	2192      	movs	r1, #146	; 0x92
 8001382:	20ee      	movs	r0, #238	; 0xee
 8001384:	f001 fa6e 	bl	8002864 <I2C_ReadOneByte>
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P3_MSB_REG);  
 800138c:	2193      	movs	r1, #147	; 0x93
 800138e:	20ee      	movs	r0, #238	; 0xee
 8001390:	f001 fa68 	bl	8002864 <I2C_ReadOneByte>
 8001394:	4603      	mov	r3, r0
 8001396:	71bb      	strb	r3, [r7, #6]
  dig_P3 = msb << 8 | lsb;  
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	4b42      	ldr	r3, [pc, #264]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 80013a8:	815a      	strh	r2, [r3, #10]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P4_LSB_REG);
 80013aa:	2194      	movs	r1, #148	; 0x94
 80013ac:	20ee      	movs	r0, #238	; 0xee
 80013ae:	f001 fa59 	bl	8002864 <I2C_ReadOneByte>
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P4_MSB_REG);         
 80013b6:	2195      	movs	r1, #149	; 0x95
 80013b8:	20ee      	movs	r0, #238	; 0xee
 80013ba:	f001 fa53 	bl	8002864 <I2C_ReadOneByte>
 80013be:	4603      	mov	r3, r0
 80013c0:	71bb      	strb	r3, [r7, #6]
  dig_P4 = msb << 8 | lsb;    
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 80013d2:	819a      	strh	r2, [r3, #12]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P5_LSB_REG);
 80013d4:	2196      	movs	r1, #150	; 0x96
 80013d6:	20ee      	movs	r0, #238	; 0xee
 80013d8:	f001 fa44 	bl	8002864 <I2C_ReadOneByte>
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P5_MSB_REG);           
 80013e0:	2197      	movs	r1, #151	; 0x97
 80013e2:	20ee      	movs	r0, #238	; 0xee
 80013e4:	f001 fa3e 	bl	8002864 <I2C_ReadOneByte>
 80013e8:	4603      	mov	r3, r0
 80013ea:	71bb      	strb	r3, [r7, #6]
  dig_P5 = msb << 8 | lsb;  
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21a      	sxth	r2, r3
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	b21b      	sxth	r3, r3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b21a      	sxth	r2, r3
 80013fa:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 80013fc:	81da      	strh	r2, [r3, #14]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P6_LSB_REG);
 80013fe:	2198      	movs	r1, #152	; 0x98
 8001400:	20ee      	movs	r0, #238	; 0xee
 8001402:	f001 fa2f 	bl	8002864 <I2C_ReadOneByte>
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P6_MSB_REG);          
 800140a:	2199      	movs	r1, #153	; 0x99
 800140c:	20ee      	movs	r0, #238	; 0xee
 800140e:	f001 fa29 	bl	8002864 <I2C_ReadOneByte>
 8001412:	4603      	mov	r3, r0
 8001414:	71bb      	strb	r3, [r7, #6]
  dig_P6 = msb << 8 | lsb;  
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21a      	sxth	r2, r3
 8001424:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 8001426:	821a      	strh	r2, [r3, #16]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P7_LSB_REG);
 8001428:	219a      	movs	r1, #154	; 0x9a
 800142a:	20ee      	movs	r0, #238	; 0xee
 800142c:	f001 fa1a 	bl	8002864 <I2C_ReadOneByte>
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P7_MSB_REG);           
 8001434:	219b      	movs	r1, #155	; 0x9b
 8001436:	20ee      	movs	r0, #238	; 0xee
 8001438:	f001 fa14 	bl	8002864 <I2C_ReadOneByte>
 800143c:	4603      	mov	r3, r0
 800143e:	71bb      	strb	r3, [r7, #6]
  dig_P7 = msb << 8 | lsb;  
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21a      	sxth	r2, r3
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 8001450:	825a      	strh	r2, [r3, #18]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P8_LSB_REG);
 8001452:	219c      	movs	r1, #156	; 0x9c
 8001454:	20ee      	movs	r0, #238	; 0xee
 8001456:	f001 fa05 	bl	8002864 <I2C_ReadOneByte>
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P8_MSB_REG);         
 800145e:	219d      	movs	r1, #157	; 0x9d
 8001460:	20ee      	movs	r0, #238	; 0xee
 8001462:	f001 f9ff 	bl	8002864 <I2C_ReadOneByte>
 8001466:	4603      	mov	r3, r0
 8001468:	71bb      	strb	r3, [r7, #6]
  dig_P8 = msb << 8 | lsb;  
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 800147a:	829a      	strh	r2, [r3, #20]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P9_LSB_REG);
 800147c:	219e      	movs	r1, #158	; 0x9e
 800147e:	20ee      	movs	r0, #238	; 0xee
 8001480:	f001 f9f0 	bl	8002864 <I2C_ReadOneByte>
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P9_MSB_REG);            
 8001488:	219f      	movs	r1, #159	; 0x9f
 800148a:	20ee      	movs	r0, #238	; 0xee
 800148c:	f001 f9ea 	bl	8002864 <I2C_ReadOneByte>
 8001490:	4603      	mov	r3, r0
 8001492:	71bb      	strb	r3, [r7, #6]
  dig_P9 = msb << 8 | lsb; 
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <bmp280ReadCalibration+0x20c>)
 80014a4:	82da      	strh	r2, [r3, #22]

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000dc 	.word	0x200000dc

080014b4 <bmp280Init>:

void bmp280Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  I2C_WriteOneByte(BMP280_ADDR, BMP280_REGISTER_CONTROL, 0xFF);
 80014b8:	22ff      	movs	r2, #255	; 0xff
 80014ba:	21f4      	movs	r1, #244	; 0xf4
 80014bc:	20ee      	movs	r0, #238	; 0xee
 80014be:	f001 f9f3 	bl	80028a8 <I2C_WriteOneByte>
  I2C_WriteOneByte(BMP280_ADDR, BMP280_REGISTER_CONFIG, 0x14);
 80014c2:	2214      	movs	r2, #20
 80014c4:	21f5      	movs	r1, #245	; 0xf5
 80014c6:	20ee      	movs	r0, #238	; 0xee
 80014c8:	f001 f9ee 	bl	80028a8 <I2C_WriteOneByte>
  bmp280ReadCalibration();
 80014cc:	f7ff feea 	bl	80012a4 <bmp280ReadCalibration>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <bmp280CompensateTemperature>:

float bmp280CompensateTemperature(int32_t adc_T)  
{  
 80014d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d8:	b0a2      	sub	sp, #136	; 0x88
 80014da:	af00      	add	r7, sp, #0
 80014dc:	66f8      	str	r0, [r7, #108]	; 0x6c
  int64_t var1, var2, temperature; 

  var1  = ((((adc_T>>3) - ((int64_t)dig_T1 <<1))) *((int64_t)dig_T2)) >> 11;
 80014de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e0:	10db      	asrs	r3, r3, #3
 80014e2:	17da      	asrs	r2, r3, #31
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
 80014e6:	657a      	str	r2, [r7, #84]	; 0x54
 80014e8:	4b69      	ldr	r3, [pc, #420]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	461c      	mov	r4, r3
 80014f2:	4615      	mov	r5, r2
 80014f4:	1923      	adds	r3, r4, r4
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	eb45 0305 	adc.w	r3, r5, r5
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001502:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001506:	4621      	mov	r1, r4
 8001508:	ebb1 0a02 	subs.w	sl, r1, r2
 800150c:	4629      	mov	r1, r5
 800150e:	eb61 0b03 	sbc.w	fp, r1, r3
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 8001514:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001518:	b21b      	sxth	r3, r3
 800151a:	17da      	asrs	r2, r3, #31
 800151c:	64bb      	str	r3, [r7, #72]	; 0x48
 800151e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001520:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001524:	4603      	mov	r3, r0
 8001526:	fb03 f20b 	mul.w	r2, r3, fp
 800152a:	460b      	mov	r3, r1
 800152c:	fb0a f303 	mul.w	r3, sl, r3
 8001530:	4413      	add	r3, r2
 8001532:	4602      	mov	r2, r0
 8001534:	fbaa 8902 	umull	r8, r9, sl, r2
 8001538:	444b      	add	r3, r9
 800153a:	4699      	mov	r9, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 8001548:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 800154c:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8001550:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
  var2  = (((((adc_T>>4) - ((int64_t)dig_T1)) *((adc_T>>4) - ((int64_t)dig_T1))) >> 12) *
 8001554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001556:	111b      	asrs	r3, r3, #4
 8001558:	17da      	asrs	r2, r3, #31
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
 800155c:	647a      	str	r2, [r7, #68]	; 0x44
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
 8001568:	63fa      	str	r2, [r7, #60]	; 0x3c
 800156a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800156e:	4623      	mov	r3, r4
 8001570:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001574:	4602      	mov	r2, r0
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	633b      	str	r3, [r7, #48]	; 0x30
 800157a:	462b      	mov	r3, r5
 800157c:	460a      	mov	r2, r1
 800157e:	eb63 0302 	sbc.w	r3, r3, r2
 8001582:	637b      	str	r3, [r7, #52]	; 0x34
 8001584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001586:	111b      	asrs	r3, r3, #4
 8001588:	17da      	asrs	r2, r3, #31
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
 800158c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800158e:	4b40      	ldr	r3, [pc, #256]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	b29b      	uxth	r3, r3
 8001594:	2200      	movs	r2, #0
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	627a      	str	r2, [r7, #36]	; 0x24
 800159a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800159e:	4623      	mov	r3, r4
 80015a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80015a4:	4602      	mov	r2, r0
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
 80015aa:	462b      	mov	r3, r5
 80015ac:	460a      	mov	r2, r1
 80015ae:	eb63 0302 	sbc.w	r3, r3, r2
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015b8:	462b      	mov	r3, r5
 80015ba:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015be:	4642      	mov	r2, r8
 80015c0:	fb02 f203 	mul.w	r2, r2, r3
 80015c4:	464b      	mov	r3, r9
 80015c6:	4621      	mov	r1, r4
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	4413      	add	r3, r2
 80015ce:	4622      	mov	r2, r4
 80015d0:	4641      	mov	r1, r8
 80015d2:	fba2 1201 	umull	r1, r2, r2, r1
 80015d6:	667a      	str	r2, [r7, #100]	; 0x64
 80015d8:	460a      	mov	r2, r1
 80015da:	663a      	str	r2, [r7, #96]	; 0x60
 80015dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80015de:	4413      	add	r3, r2
 80015e0:	667b      	str	r3, [r7, #100]	; 0x64
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80015ee:	4621      	mov	r1, r4
 80015f0:	0b0a      	lsrs	r2, r1, #12
 80015f2:	4629      	mov	r1, r5
 80015f4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80015f8:	4629      	mov	r1, r5
 80015fa:	130b      	asrs	r3, r1, #12
          ((int64_t)dig_T3)) >> 14;
 80015fc:	4924      	ldr	r1, [pc, #144]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 80015fe:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8001602:	b209      	sxth	r1, r1
 8001604:	17c8      	asrs	r0, r1, #31
 8001606:	6139      	str	r1, [r7, #16]
 8001608:	6178      	str	r0, [r7, #20]
  var2  = (((((adc_T>>4) - ((int64_t)dig_T1)) *((adc_T>>4) - ((int64_t)dig_T1))) >> 12) *
 800160a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800160e:	4621      	mov	r1, r4
 8001610:	fb01 f003 	mul.w	r0, r1, r3
 8001614:	4629      	mov	r1, r5
 8001616:	fb02 f101 	mul.w	r1, r2, r1
 800161a:	4401      	add	r1, r0
 800161c:	4620      	mov	r0, r4
 800161e:	fba2 2300 	umull	r2, r3, r2, r0
 8001622:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001624:	4613      	mov	r3, r2
 8001626:	65bb      	str	r3, [r7, #88]	; 0x58
 8001628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162a:	18cb      	adds	r3, r1, r3
 800162c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800163a:	4621      	mov	r1, r4
 800163c:	0b8a      	lsrs	r2, r1, #14
 800163e:	4629      	mov	r1, r5
 8001640:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001644:	4629      	mov	r1, r5
 8001646:	138b      	asrs	r3, r1, #14
 8001648:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
  t_fine = var1 + var2;
 800164c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001652:	4413      	add	r3, r2
 8001654:	461a      	mov	r2, r3
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 8001658:	619a      	str	r2, [r3, #24]

  temperature = (t_fine * 5 + 128) >> 8; 
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <bmp280CompensateTemperature+0x1bc>)
 800165c:	699a      	ldr	r2, [r3, #24]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	3380      	adds	r3, #128	; 0x80
 8001666:	121b      	asrs	r3, r3, #8
 8001668:	17da      	asrs	r2, r3, #31
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001672:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 
  return (float)temperature;  
 8001676:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800167a:	f7ff fbed 	bl	8000e58 <__aeabi_l2f>
 800167e:	4603      	mov	r3, r0
 8001680:	ee07 3a90 	vmov	s15, r3
} 
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	3788      	adds	r7, #136	; 0x88
 800168a:	46bd      	mov	sp, r7
 800168c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001690:	200000dc 	.word	0x200000dc

08001694 <bmp280CompensatePressure>:

float bmp280CompensatePressure(int32_t adc_P)
{  
 8001694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001698:	b0c6      	sub	sp, #280	; 0x118
 800169a:	af00      	add	r7, sp, #0
 800169c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  int64_t var1, var2;
  uint64_t pressure;  
#if 1
  var1 = ((int64_t)t_fine) - 128000;
 80016a0:	4bae      	ldr	r3, [pc, #696]	; (800195c <bmp280CompensatePressure+0x2c8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	461c      	mov	r4, r3
 80016a8:	4615      	mov	r5, r2
 80016aa:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80016ae:	f145 3bff 	adc.w	fp, r5, #4294967295
 80016b2:	e9c7 ab44 	strd	sl, fp, [r7, #272]	; 0x110
  var2 = var1 * var1 * (int64_t)dig_P6; 
 80016b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016be:	fb03 f102 	mul.w	r1, r3, r2
 80016c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016ca:	fb02 f303 	mul.w	r3, r2, r3
 80016ce:	18ca      	adds	r2, r1, r3
 80016d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016d4:	fba3 8903 	umull	r8, r9, r3, r3
 80016d8:	eb02 0309 	add.w	r3, r2, r9
 80016dc:	4699      	mov	r9, r3
 80016de:	4b9f      	ldr	r3, [pc, #636]	; (800195c <bmp280CompensatePressure+0x2c8>)
 80016e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	17da      	asrs	r2, r3, #31
 80016e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016f0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80016f4:	4603      	mov	r3, r0
 80016f6:	fb03 f209 	mul.w	r2, r3, r9
 80016fa:	460b      	mov	r3, r1
 80016fc:	fb08 f303 	mul.w	r3, r8, r3
 8001700:	4413      	add	r3, r2
 8001702:	4602      	mov	r2, r0
 8001704:	fba8 1202 	umull	r1, r2, r8, r2
 8001708:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800170c:	460a      	mov	r2, r1
 800170e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8001712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001716:	4413      	add	r3, r2
 8001718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800171c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8001720:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
 8001724:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
  var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001728:	4b8c      	ldr	r3, [pc, #560]	; (800195c <bmp280CompensatePressure+0x2c8>)
 800172a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800172e:	b21b      	sxth	r3, r3
 8001730:	17da      	asrs	r2, r3, #31
 8001732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800173a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800173e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001742:	462a      	mov	r2, r5
 8001744:	fb02 f203 	mul.w	r2, r2, r3
 8001748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800174c:	4621      	mov	r1, r4
 800174e:	fb01 f303 	mul.w	r3, r1, r3
 8001752:	441a      	add	r2, r3
 8001754:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001758:	4621      	mov	r1, r4
 800175a:	fba3 1301 	umull	r1, r3, r3, r1
 800175e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001762:	460b      	mov	r3, r1
 8001764:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800176c:	18d3      	adds	r3, r2, r3
 800176e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001772:	f04f 0000 	mov.w	r0, #0
 8001776:	f04f 0100 	mov.w	r1, #0
 800177a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800177e:	462b      	mov	r3, r5
 8001780:	0459      	lsls	r1, r3, #17
 8001782:	4623      	mov	r3, r4
 8001784:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001788:	4623      	mov	r3, r4
 800178a:	0458      	lsls	r0, r3, #17
 800178c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001790:	1814      	adds	r4, r2, r0
 8001792:	63bc      	str	r4, [r7, #56]	; 0x38
 8001794:	414b      	adcs	r3, r1
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001798:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800179c:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
  var2 = var2 + (((int64_t)dig_P4)<<35);
 80017a0:	4b6e      	ldr	r3, [pc, #440]	; (800195c <bmp280CompensatePressure+0x2c8>)
 80017a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	17da      	asrs	r2, r3, #31
 80017aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80017ae:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80017b2:	f04f 0000 	mov.w	r0, #0
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017be:	00d9      	lsls	r1, r3, #3
 80017c0:	2000      	movs	r0, #0
 80017c2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80017c6:	1814      	adds	r4, r2, r0
 80017c8:	633c      	str	r4, [r7, #48]	; 0x30
 80017ca:	414b      	adcs	r3, r1
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
 80017ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017d2:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
  var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80017d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017de:	fb03 f102 	mul.w	r1, r3, r2
 80017e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	18ca      	adds	r2, r1, r3
 80017f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017f4:	fba3 1303 	umull	r1, r3, r3, r3
 80017f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017fc:	460b      	mov	r3, r1
 80017fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001806:	18d3      	adds	r3, r2, r3
 8001808:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <bmp280CompensatePressure+0x2c8>)
 800180e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001812:	b21b      	sxth	r3, r3
 8001814:	17da      	asrs	r2, r3, #31
 8001816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800181a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800181e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001822:	462b      	mov	r3, r5
 8001824:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001828:	4642      	mov	r2, r8
 800182a:	fb02 f203 	mul.w	r2, r2, r3
 800182e:	464b      	mov	r3, r9
 8001830:	4621      	mov	r1, r4
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	4622      	mov	r2, r4
 800183a:	4641      	mov	r1, r8
 800183c:	fba2 1201 	umull	r1, r2, r2, r1
 8001840:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001844:	460a      	mov	r2, r1
 8001846:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800184a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800184e:	4413      	add	r3, r2
 8001850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001854:	f04f 0000 	mov.w	r0, #0
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001860:	4623      	mov	r3, r4
 8001862:	0a18      	lsrs	r0, r3, #8
 8001864:	462b      	mov	r3, r5
 8001866:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800186a:	462b      	mov	r3, r5
 800186c:	1219      	asrs	r1, r3, #8
 800186e:	4b3b      	ldr	r3, [pc, #236]	; (800195c <bmp280CompensatePressure+0x2c8>)
 8001870:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001874:	b21b      	sxth	r3, r3
 8001876:	17da      	asrs	r2, r3, #31
 8001878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800187c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001880:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001888:	464a      	mov	r2, r9
 800188a:	fb02 f203 	mul.w	r2, r2, r3
 800188e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001892:	4644      	mov	r4, r8
 8001894:	fb04 f303 	mul.w	r3, r4, r3
 8001898:	441a      	add	r2, r3
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	4644      	mov	r4, r8
 80018a0:	fba3 4304 	umull	r4, r3, r3, r4
 80018a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018a8:	4623      	mov	r3, r4
 80018aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80018ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80018b2:	18d3      	adds	r3, r2, r3
 80018b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80018c4:	464c      	mov	r4, r9
 80018c6:	0323      	lsls	r3, r4, #12
 80018c8:	4644      	mov	r4, r8
 80018ca:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018ce:	4644      	mov	r4, r8
 80018d0:	0322      	lsls	r2, r4, #12
 80018d2:	1884      	adds	r4, r0, r2
 80018d4:	62bc      	str	r4, [r7, #40]	; 0x28
 80018d6:	eb41 0303 	adc.w	r3, r1, r3
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018dc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80018e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33; 
 80018e4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018e8:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80018ec:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 80018f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80018f4:	4b19      	ldr	r3, [pc, #100]	; (800195c <bmp280CompensatePressure+0x2c8>)
 80018f6:	88db      	ldrh	r3, [r3, #6]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80018fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001900:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001904:	462b      	mov	r3, r5
 8001906:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800190a:	4642      	mov	r2, r8
 800190c:	fb02 f203 	mul.w	r2, r2, r3
 8001910:	464b      	mov	r3, r9
 8001912:	4621      	mov	r1, r4
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	4622      	mov	r2, r4
 800191c:	4641      	mov	r1, r8
 800191e:	fba2 1201 	umull	r1, r2, r2, r1
 8001922:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001926:	460a      	mov	r2, r1
 8001928:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800192c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001930:	4413      	add	r3, r2
 8001932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	f04f 0300 	mov.w	r3, #0
 800193e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001942:	4629      	mov	r1, r5
 8001944:	104a      	asrs	r2, r1, #1
 8001946:	4629      	mov	r1, r5
 8001948:	17cb      	asrs	r3, r1, #31
 800194a:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

  if (var1 == 0) {  
 800194e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001952:	4313      	orrs	r3, r2
 8001954:	d106      	bne.n	8001964 <bmp280CompensatePressure+0x2d0>
    return 0; // avoid exception caused by division by zero  
 8001956:	eddf 7a02 	vldr	s15, [pc, #8]	; 8001960 <bmp280CompensatePressure+0x2cc>
 800195a:	e156      	b.n	8001c0a <bmp280CompensatePressure+0x576>
 800195c:	200000dc 	.word	0x200000dc
 8001960:	00000000 	.word	0x00000000
  }  

  pressure = 1048576.0 - adc_P;  
 8001964:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001968:	f7fe fdf4 	bl	8000554 <__aeabi_i2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	f04f 0000 	mov.w	r0, #0
 8001974:	49a8      	ldr	r1, [pc, #672]	; (8001c18 <bmp280CompensatePressure+0x584>)
 8001976:	f7fe fc9f 	bl	80002b8 <__aeabi_dsub>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff fabf 	bl	8000f04 <__aeabi_d2ulz>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
  pressure = (((pressure<<31) - var2)*3125) / var1; 
 800198e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	07d9      	lsls	r1, r3, #31
 800199c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 80019a0:	07d0      	lsls	r0, r2, #31
 80019a2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80019a6:	1a84      	subs	r4, r0, r2
 80019a8:	673c      	str	r4, [r7, #112]	; 0x70
 80019aa:	eb61 0303 	sbc.w	r3, r1, r3
 80019ae:	677b      	str	r3, [r7, #116]	; 0x74
 80019b0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80019b4:	4622      	mov	r2, r4
 80019b6:	462b      	mov	r3, r5
 80019b8:	1891      	adds	r1, r2, r2
 80019ba:	6239      	str	r1, [r7, #32]
 80019bc:	415b      	adcs	r3, r3
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
 80019c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019c4:	4621      	mov	r1, r4
 80019c6:	1851      	adds	r1, r2, r1
 80019c8:	61b9      	str	r1, [r7, #24]
 80019ca:	4629      	mov	r1, r5
 80019cc:	414b      	adcs	r3, r1
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 0300 	mov.w	r3, #0
 80019d8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019dc:	4649      	mov	r1, r9
 80019de:	018b      	lsls	r3, r1, #6
 80019e0:	4641      	mov	r1, r8
 80019e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019e6:	4641      	mov	r1, r8
 80019e8:	018a      	lsls	r2, r1, #6
 80019ea:	4641      	mov	r1, r8
 80019ec:	1889      	adds	r1, r1, r2
 80019ee:	6139      	str	r1, [r7, #16]
 80019f0:	4649      	mov	r1, r9
 80019f2:	eb43 0101 	adc.w	r1, r3, r1
 80019f6:	6179      	str	r1, [r7, #20]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	f04f 0300 	mov.w	r3, #0
 8001a00:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a04:	4649      	mov	r1, r9
 8001a06:	008b      	lsls	r3, r1, #2
 8001a08:	4641      	mov	r1, r8
 8001a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a0e:	4641      	mov	r1, r8
 8001a10:	008a      	lsls	r2, r1, #2
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	4622      	mov	r2, r4
 8001a1a:	189b      	adds	r3, r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	462a      	mov	r2, r5
 8001a22:	eb42 0303 	adc.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	f04f 0300 	mov.w	r3, #0
 8001a30:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a34:	4649      	mov	r1, r9
 8001a36:	008b      	lsls	r3, r1, #2
 8001a38:	4641      	mov	r1, r8
 8001a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a3e:	4641      	mov	r1, r8
 8001a40:	008a      	lsls	r2, r1, #2
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	4622      	mov	r2, r4
 8001a4a:	189b      	adds	r3, r3, r2
 8001a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a4e:	462b      	mov	r3, r5
 8001a50:	460a      	mov	r2, r1
 8001a52:	eb42 0303 	adc.w	r3, r2, r3
 8001a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a58:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001a5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001a60:	f7ff fa38 	bl	8000ed4 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
  var1 = (((int64_t)dig_P9) * (pressure>>13) * (pressure>>13)) >> 25;
 8001a6c:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <bmp280CompensatePressure+0x588>)
 8001a6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	17da      	asrs	r2, r3, #31
 8001a76:	663b      	str	r3, [r7, #96]	; 0x60
 8001a78:	667a      	str	r2, [r7, #100]	; 0x64
 8001a7a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001a7e:	f04f 0000 	mov.w	r0, #0
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	0b50      	lsrs	r0, r2, #13
 8001a88:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a8c:	0b59      	lsrs	r1, r3, #13
 8001a8e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a92:	462b      	mov	r3, r5
 8001a94:	fb00 f203 	mul.w	r2, r0, r3
 8001a98:	4623      	mov	r3, r4
 8001a9a:	fb03 f301 	mul.w	r3, r3, r1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	fba2 1200 	umull	r1, r2, r2, r0
 8001aa6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001aaa:	460a      	mov	r2, r1
 8001aac:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001ab0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001aba:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	f04f 0100 	mov.w	r1, #0
 8001ac6:	0b50      	lsrs	r0, r2, #13
 8001ac8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001acc:	0b59      	lsrs	r1, r3, #13
 8001ace:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	fb00 f203 	mul.w	r2, r0, r3
 8001ad8:	4623      	mov	r3, r4
 8001ada:	fb03 f301 	mul.w	r3, r3, r1
 8001ade:	4413      	add	r3, r2
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ae6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001aea:	460a      	mov	r2, r1
 8001aec:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001af0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001af4:	4413      	add	r3, r2
 8001af6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8001b06:	4621      	mov	r1, r4
 8001b08:	0e4a      	lsrs	r2, r1, #25
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b10:	4629      	mov	r1, r5
 8001b12:	0e4b      	lsrs	r3, r1, #25
 8001b14:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
  var2 = (((int64_t)dig_P8) * pressure) >> 19;
 8001b18:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <bmp280CompensatePressure+0x588>)
 8001b1a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	17da      	asrs	r2, r3, #31
 8001b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b2a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001b2e:	462a      	mov	r2, r5
 8001b30:	fb02 f203 	mul.w	r2, r2, r3
 8001b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b38:	4621      	mov	r1, r4
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001b44:	4621      	mov	r1, r4
 8001b46:	fba2 1201 	umull	r1, r2, r2, r1
 8001b4a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b4e:	460a      	mov	r2, r1
 8001b50:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8001b54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b58:	4413      	add	r3, r2
 8001b5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	0cca      	lsrs	r2, r1, #19
 8001b6e:	4629      	mov	r1, r5
 8001b70:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b74:	4629      	mov	r1, r5
 8001b76:	0ccb      	lsrs	r3, r1, #19
 8001b78:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
  pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001b7c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001b80:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001b84:	1884      	adds	r4, r0, r2
 8001b86:	653c      	str	r4, [r7, #80]	; 0x50
 8001b88:	eb41 0303 	adc.w	r3, r1, r3
 8001b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8001b8e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8001b92:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001b96:	4621      	mov	r1, r4
 8001b98:	1889      	adds	r1, r1, r2
 8001b9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b9c:	4629      	mov	r1, r5
 8001b9e:	eb43 0101 	adc.w	r1, r3, r1
 8001ba2:	64f9      	str	r1, [r7, #76]	; 0x4c
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	0a0a      	lsrs	r2, r1, #8
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001bba:	4629      	mov	r1, r5
 8001bbc:	0a0b      	lsrs	r3, r1, #8
 8001bbe:	4917      	ldr	r1, [pc, #92]	; (8001c1c <bmp280CompensatePressure+0x588>)
 8001bc0:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001bc4:	b209      	sxth	r1, r1
 8001bc6:	17c8      	asrs	r0, r1, #31
 8001bc8:	6439      	str	r1, [r7, #64]	; 0x40
 8001bca:	6478      	str	r0, [r7, #68]	; 0x44
 8001bcc:	f04f 0000 	mov.w	r0, #0
 8001bd0:	f04f 0100 	mov.w	r1, #0
 8001bd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001bd8:	464c      	mov	r4, r9
 8001bda:	0121      	lsls	r1, r4, #4
 8001bdc:	4644      	mov	r4, r8
 8001bde:	ea41 7114 	orr.w	r1, r1, r4, lsr #28
 8001be2:	4644      	mov	r4, r8
 8001be4:	0120      	lsls	r0, r4, #4
 8001be6:	1814      	adds	r4, r2, r0
 8001be8:	603c      	str	r4, [r7, #0]
 8001bea:	414b      	adcs	r3, r1
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bf2:	e9c7 3440 	strd	r3, r4, [r7, #256]	; 0x100
   return (float)pressure/256;  
 8001bf6:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8001bfa:	f7ff f925 	bl	8000e48 <__aeabi_ul2f>
 8001bfe:	ee06 0a90 	vmov	s13, r0
 8001c02:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c20 <bmp280CompensatePressure+0x58c>
 8001c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
  var2 = (((int64_t)(pressure>>2))*((int64_t)dig_P8))>>13;
  pressure = (uint64_t)((int64_t)pressure) +((var1 + var2 + dig_P7)>>4);
  return (float)pressure; 
#endif
  
}  
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001c12:	46bd      	mov	sp, r7
 8001c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c18:	41300000 	.word	0x41300000
 8001c1c:	200000dc 	.word	0x200000dc
 8001c20:	43800000 	.word	0x43800000

08001c24 <bmp280TandPGet>:

void bmp280TandPGet(float *temperature, float *pressure)  
{  
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint8_t lsb, msb, xlsb;  
  int32_t adc_P,adc_T;
    
  xlsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_XLSB_REG);
 8001c2e:	21fc      	movs	r1, #252	; 0xfc
 8001c30:	20ee      	movs	r0, #238	; 0xee
 8001c32:	f000 fe17 	bl	8002864 <I2C_ReadOneByte>
 8001c36:	4603      	mov	r3, r0
 8001c38:	75fb      	strb	r3, [r7, #23]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_LSB_REG);
 8001c3a:	21fb      	movs	r1, #251	; 0xfb
 8001c3c:	20ee      	movs	r0, #238	; 0xee
 8001c3e:	f000 fe11 	bl	8002864 <I2C_ReadOneByte>
 8001c42:	4603      	mov	r3, r0
 8001c44:	75bb      	strb	r3, [r7, #22]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_MSB_REG);
 8001c46:	21fa      	movs	r1, #250	; 0xfa
 8001c48:	20ee      	movs	r0, #238	; 0xee
 8001c4a:	f000 fe0b 	bl	8002864 <I2C_ReadOneByte>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	757b      	strb	r3, [r7, #21]
  //adc_T = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
  adc_T = msb;
 8001c52:	7d7b      	ldrb	r3, [r7, #21]
 8001c54:	613b      	str	r3, [r7, #16]
  adc_T <<= 8;
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	613b      	str	r3, [r7, #16]
  adc_T |= lsb;
 8001c5c:	7dbb      	ldrb	r3, [r7, #22]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
  adc_T <<= 8;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	613b      	str	r3, [r7, #16]
  adc_T |= xlsb;
 8001c6a:	7dfb      	ldrb	r3, [r7, #23]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
  adc_T >>= 4;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	111b      	asrs	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
  //adc_T = 415148;
  *temperature = bmp280CompensateTemperature(adc_T);
 8001c78:	6938      	ldr	r0, [r7, #16]
 8001c7a:	f7ff fc2b 	bl	80014d4 <bmp280CompensateTemperature>
 8001c7e:	eef0 7a40 	vmov.f32	s15, s0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	edc3 7a00 	vstr	s15, [r3]

  xlsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_XLSB_REG);
 8001c88:	21f9      	movs	r1, #249	; 0xf9
 8001c8a:	20ee      	movs	r0, #238	; 0xee
 8001c8c:	f000 fdea 	bl	8002864 <I2C_ReadOneByte>
 8001c90:	4603      	mov	r3, r0
 8001c92:	75fb      	strb	r3, [r7, #23]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_LSB_REG);
 8001c94:	21f8      	movs	r1, #248	; 0xf8
 8001c96:	20ee      	movs	r0, #238	; 0xee
 8001c98:	f000 fde4 	bl	8002864 <I2C_ReadOneByte>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	75bb      	strb	r3, [r7, #22]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_MSB_REG);
 8001ca0:	21f7      	movs	r1, #247	; 0xf7
 8001ca2:	20ee      	movs	r0, #238	; 0xee
 8001ca4:	f000 fdde 	bl	8002864 <I2C_ReadOneByte>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	757b      	strb	r3, [r7, #21]
  //adc_P = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
  adc_P = msb;
 8001cac:	7d7b      	ldrb	r3, [r7, #21]
 8001cae:	60fb      	str	r3, [r7, #12]
  adc_P <<= 8;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	60fb      	str	r3, [r7, #12]
  adc_P |= lsb;
 8001cb6:	7dbb      	ldrb	r3, [r7, #22]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
  adc_P <<= 8;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	60fb      	str	r3, [r7, #12]
  adc_P |= xlsb;
 8001cc4:	7dfb      	ldrb	r3, [r7, #23]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]
  adc_P >>= 4;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	111b      	asrs	r3, r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
  //adc_P = 51988;
  *pressure = bmp280CompensatePressure(adc_P);     
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fcde 	bl	8001694 <bmp280CompensatePressure>
 8001cd8:	eef0 7a40 	vmov.f32	s15, s0
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	edc3 7a00 	vstr	s15, [r3]
} 
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <bmp280CalAvgValue>:

void bmp280CalAvgValue(uint8_t *pIndex, int32_t *pAvgBuffer, int32_t InVal, int32_t *pOutVal)
{ 
 8001cea:	b480      	push	{r7}
 8001cec:	b087      	sub	sp, #28
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
  uint8_t i;

  *(pAvgBuffer + ((*pIndex) ++)) = InVal;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	b2d1      	uxtb	r1, r2
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	7011      	strb	r1, [r2, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	4413      	add	r3, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
  *pIndex &= 0x07;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	701a      	strb	r2, [r3, #0]

  *pOutVal = 0;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
 8001d26:	e00c      	b.n	8001d42 <bmp280CalAvgValue+0x58>
  {
    *pOutVal += *(pAvgBuffer + i);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	440b      	add	r3, r1
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	441a      	add	r2, r3
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b07      	cmp	r3, #7
 8001d46:	d9ef      	bls.n	8001d28 <bmp280CalAvgValue+0x3e>
  }
  *pOutVal >>= 3;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	10da      	asrs	r2, r3, #3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	601a      	str	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <bmp280CalculateAbsoluteAltitude>:

void bmp280CalculateAbsoluteAltitude(int32_t *pAltitude, int32_t PressureVal)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  *pAltitude = 4433000 * (1 - pow((PressureVal / (float)gs32Pressure0), 0.1903)); 
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <bmp280CalculateAbsoluteAltitude+0x88>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d84:	ee16 0a90 	vmov	r0, s13
 8001d88:	f7fe fbf6 	bl	8000578 <__aeabi_f2d>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8001dd8 <bmp280CalculateAbsoluteAltitude+0x78>
 8001d94:	ec43 2b10 	vmov	d0, r2, r3
 8001d98:	f00b feee 	bl	800db78 <pow>
 8001d9c:	ec53 2b10 	vmov	r2, r3, d0
 8001da0:	f04f 0000 	mov.w	r0, #0
 8001da4:	4911      	ldr	r1, [pc, #68]	; (8001dec <bmp280CalculateAbsoluteAltitude+0x8c>)
 8001da6:	f7fe fa87 	bl	80002b8 <__aeabi_dsub>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	a30b      	add	r3, pc, #44	; (adr r3, 8001de0 <bmp280CalculateAbsoluteAltitude+0x80>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fc36 	bl	8000628 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fee0 	bl	8000b88 <__aeabi_d2iz>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	1a36e2eb 	.word	0x1a36e2eb
 8001ddc:	3fc85bc0 	.word	0x3fc85bc0
 8001de0:	00000000 	.word	0x00000000
 8001de4:	4150e91a 	.word	0x4150e91a
 8001de8:	20000000 	.word	0x20000000
 8001dec:	3ff00000 	.word	0x3ff00000

08001df0 <pressSensorDataGet>:

void pressSensorDataGet(int32_t *ps32Temperature, int32_t *ps32Pressure, int32_t *ps32Altitude)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  float CurPressure, CurTemperature;
  int32_t CurAltitude;
  static BMP280_AvgTypeDef BMP280_Filter[3];

  bmp280TandPGet(&CurTemperature, &CurPressure);
 8001dfc:	f107 021c 	add.w	r2, r7, #28
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff0c 	bl	8001c24 <bmp280TandPGet>
  bmp280CalAvgValue(&BMP280_Filter[0].Index, BMP280_Filter[0].AvgBuffer, (int32_t)(CurPressure), ps32Pressure);
 8001e0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	ee17 2a90 	vmov	r2, s15
 8001e1a:	4910      	ldr	r1, [pc, #64]	; (8001e5c <pressSensorDataGet+0x6c>)
 8001e1c:	4810      	ldr	r0, [pc, #64]	; (8001e60 <pressSensorDataGet+0x70>)
 8001e1e:	f7ff ff64 	bl	8001cea <bmp280CalAvgValue>

  bmp280CalculateAbsoluteAltitude(&CurAltitude, (*ps32Pressure));
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff97 	bl	8001d60 <bmp280CalculateAbsoluteAltitude>
  bmp280CalAvgValue(&BMP280_Filter[1].Index, BMP280_Filter[1].AvgBuffer, CurAltitude, ps32Altitude);
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	490b      	ldr	r1, [pc, #44]	; (8001e64 <pressSensorDataGet+0x74>)
 8001e38:	480b      	ldr	r0, [pc, #44]	; (8001e68 <pressSensorDataGet+0x78>)
 8001e3a:	f7ff ff56 	bl	8001cea <bmp280CalAvgValue>
  bmp280CalAvgValue(&BMP280_Filter[2].Index, BMP280_Filter[2].AvgBuffer, (int32_t)CurTemperature, ps32Temperature);
 8001e3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	ee17 2a90 	vmov	r2, s15
 8001e4c:	4907      	ldr	r1, [pc, #28]	; (8001e6c <pressSensorDataGet+0x7c>)
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <pressSensorDataGet+0x80>)
 8001e50:	f7ff ff4b 	bl	8001cea <bmp280CalAvgValue>
  return;
 8001e54:	bf00      	nop
}
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200000fc 	.word	0x200000fc
 8001e60:	200000f8 	.word	0x200000f8
 8001e64:	20000120 	.word	0x20000120
 8001e68:	2000011c 	.word	0x2000011c
 8001e6c:	20000144 	.word	0x20000144
 8001e70:	20000140 	.word	0x20000140

08001e74 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <SELECT+0x18>)
 8001e7e:	f005 fe43 	bl	8007b08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f005 f904 	bl	8007090 <HAL_Delay>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40020000 	.word	0x40020000

08001e90 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001e94:	2201      	movs	r2, #1
 8001e96:	2110      	movs	r1, #16
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <DESELECT+0x18>)
 8001e9a:	f005 fe35 	bl	8007b08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f005 f8f6 	bl	8007090 <HAL_Delay>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020000 	.word	0x40020000

08001eac <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eb6:	bf00      	nop
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <SPI_TxByte+0x30>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d1f8      	bne.n	8001eb8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001ec6:	1df9      	adds	r1, r7, #7
 8001ec8:	2364      	movs	r3, #100	; 0x64
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4803      	ldr	r0, [pc, #12]	; (8001edc <SPI_TxByte+0x30>)
 8001ece:	f007 fd9c 	bl	8009a0a <HAL_SPI_Transmit>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20002318 	.word	0x20002318

08001ee0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001eec:	bf00      	nop
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <SPI_TxBuffer+0x30>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d1f8      	bne.n	8001eee <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001efc:	887a      	ldrh	r2, [r7, #2]
 8001efe:	2364      	movs	r3, #100	; 0x64
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4803      	ldr	r0, [pc, #12]	; (8001f10 <SPI_TxBuffer+0x30>)
 8001f04:	f007 fd81 	bl	8009a0a <HAL_SPI_Transmit>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20002318 	.word	0x20002318

08001f14 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001f1a:	23ff      	movs	r3, #255	; 0xff
 8001f1c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001f1e:	bf00      	nop
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <SPI_RxByte+0x34>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d1f8      	bne.n	8001f20 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001f2e:	1dba      	adds	r2, r7, #6
 8001f30:	1df9      	adds	r1, r7, #7
 8001f32:	2364      	movs	r3, #100	; 0x64
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <SPI_RxByte+0x34>)
 8001f3a:	f007 fea2 	bl	8009c82 <HAL_SPI_TransmitReceive>

	return data;
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20002318 	.word	0x20002318

08001f4c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001f54:	f7ff ffde 	bl	8001f14 <SPI_RxByte>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	701a      	strb	r2, [r3, #0]
}
 8001f60:	bf00      	nop
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <SD_ReadyWait+0x30>)
 8001f70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f74:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001f76:	f7ff ffcd 	bl	8001f14 <SPI_RxByte>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2bff      	cmp	r3, #255	; 0xff
 8001f82:	d003      	beq.n	8001f8c <SD_ReadyWait+0x24>
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SD_ReadyWait+0x30>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f4      	bne.n	8001f76 <SD_ReadyWait+0xe>

	return res;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000166 	.word	0x20000166

08001f9c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001fa2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001fa6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001fa8:	f7ff ff72 	bl	8001e90 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	e005      	b.n	8001fbe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001fb2:	20ff      	movs	r0, #255	; 0xff
 8001fb4:	f7ff ff7a 	bl	8001eac <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b09      	cmp	r3, #9
 8001fc2:	ddf6      	ble.n	8001fb2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001fc4:	f7ff ff56 	bl	8001e74 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001fc8:	2340      	movs	r3, #64	; 0x40
 8001fca:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001fdc:	2395      	movs	r3, #149	; 0x95
 8001fde:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2106      	movs	r1, #6
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff7b 	bl	8001ee0 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001fea:	e002      	b.n	8001ff2 <SD_PowerOn+0x56>
	{
		cnt--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001ff2:	f7ff ff8f 	bl	8001f14 <SPI_RxByte>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d002      	beq.n	8002002 <SD_PowerOn+0x66>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f4      	bne.n	8001fec <SD_PowerOn+0x50>
	}

	DESELECT();
 8002002:	f7ff ff45 	bl	8001e90 <DESELECT>
	SPI_TxByte(0XFF);
 8002006:	20ff      	movs	r0, #255	; 0xff
 8002008:	f7ff ff50 	bl	8001eac <SPI_TxByte>

	PowerFlag = 1;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <SD_PowerOn+0x80>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000169 	.word	0x20000169

08002020 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <SD_PowerOff+0x14>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	20000169 	.word	0x20000169

08002038 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <SD_CheckPower+0x14>)
 800203e:	781b      	ldrb	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000169 	.word	0x20000169

08002050 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800205a:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <SD_RxDataBlock+0x58>)
 800205c:	22c8      	movs	r2, #200	; 0xc8
 800205e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8002060:	f7ff ff58 	bl	8001f14 <SPI_RxByte>
 8002064:	4603      	mov	r3, r0
 8002066:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	2bff      	cmp	r3, #255	; 0xff
 800206c:	d103      	bne.n	8002076 <SD_RxDataBlock+0x26>
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <SD_RxDataBlock+0x58>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f4      	bne.n	8002060 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2bfe      	cmp	r3, #254	; 0xfe
 800207a:	d001      	beq.n	8002080 <SD_RxDataBlock+0x30>
 800207c:	2300      	movs	r3, #0
 800207e:	e00f      	b.n	80020a0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff60 	bl	8001f4c <SPI_RxBytePtr>
	} while(len--);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	1e5a      	subs	r2, r3, #1
 8002090:	603a      	str	r2, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f4      	bne.n	8002080 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8002096:	f7ff ff3d 	bl	8001f14 <SPI_RxByte>
	SPI_RxByte();
 800209a:	f7ff ff3b 	bl	8001f14 <SPI_RxByte>

	return TRUE;
 800209e:	2301      	movs	r3, #1
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000164 	.word	0x20000164

080020ac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80020bc:	f7ff ff54 	bl	8001f68 <SD_ReadyWait>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2bff      	cmp	r3, #255	; 0xff
 80020c4:	d001      	beq.n	80020ca <SD_TxDataBlock+0x1e>
 80020c6:	2300      	movs	r3, #0
 80020c8:	e02f      	b.n	800212a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff feed 	bl	8001eac <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	2bfd      	cmp	r3, #253	; 0xfd
 80020d6:	d020      	beq.n	800211a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80020d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff feff 	bl	8001ee0 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80020e2:	f7ff ff17 	bl	8001f14 <SPI_RxByte>
		SPI_RxByte();
 80020e6:	f7ff ff15 	bl	8001f14 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80020ea:	e00b      	b.n	8002104 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80020ec:	f7ff ff12 	bl	8001f14 <SPI_RxByte>
 80020f0:	4603      	mov	r3, r0
 80020f2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d006      	beq.n	800210c <SD_TxDataBlock+0x60>
			i++;
 80020fe:	7bbb      	ldrb	r3, [r7, #14]
 8002100:	3301      	adds	r3, #1
 8002102:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8002104:	7bbb      	ldrb	r3, [r7, #14]
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d9f0      	bls.n	80020ec <SD_TxDataBlock+0x40>
 800210a:	e000      	b.n	800210e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800210c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800210e:	bf00      	nop
 8002110:	f7ff ff00 	bl	8001f14 <SPI_RxByte>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0fa      	beq.n	8002110 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	2b05      	cmp	r3, #5
 8002122:	d101      	bne.n	8002128 <SD_TxDataBlock+0x7c>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <SD_TxDataBlock+0x7e>

	return FALSE;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	6039      	str	r1, [r7, #0]
 800213c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800213e:	f7ff ff13 	bl	8001f68 <SD_ReadyWait>
 8002142:	4603      	mov	r3, r0
 8002144:	2bff      	cmp	r3, #255	; 0xff
 8002146:	d001      	beq.n	800214c <SD_SendCmd+0x1a>
 8002148:	23ff      	movs	r3, #255	; 0xff
 800214a:	e042      	b.n	80021d2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff feac 	bl	8001eac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	0e1b      	lsrs	r3, r3, #24
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fea6 	bl	8001eac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fea0 	bl	8001eac <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe9a 	bl	8001eac <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fe95 	bl	8001eac <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b40      	cmp	r3, #64	; 0x40
 8002186:	d102      	bne.n	800218e <SD_SendCmd+0x5c>
 8002188:	2395      	movs	r3, #149	; 0x95
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e007      	b.n	800219e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b48      	cmp	r3, #72	; 0x48
 8002192:	d102      	bne.n	800219a <SD_SendCmd+0x68>
 8002194:	2387      	movs	r3, #135	; 0x87
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e001      	b.n	800219e <SD_SendCmd+0x6c>
	else crc = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fe83 	bl	8001eac <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b4c      	cmp	r3, #76	; 0x4c
 80021aa:	d101      	bne.n	80021b0 <SD_SendCmd+0x7e>
 80021ac:	f7ff feb2 	bl	8001f14 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80021b0:	230a      	movs	r3, #10
 80021b2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80021b4:	f7ff feae 	bl	8001f14 <SPI_RxByte>
 80021b8:	4603      	mov	r3, r0
 80021ba:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80021bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da05      	bge.n	80021d0 <SD_SendCmd+0x9e>
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	73bb      	strb	r3, [r7, #14]
 80021ca:	7bbb      	ldrb	r3, [r7, #14]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f1      	bne.n	80021b4 <SD_SendCmd+0x82>

	return res;
 80021d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SD_disk_initialize+0x14>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0d1      	b.n	8002394 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80021f0:	4b6a      	ldr	r3, [pc, #424]	; (800239c <SD_disk_initialize+0x1c0>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <SD_disk_initialize+0x2a>
 80021fe:	4b67      	ldr	r3, [pc, #412]	; (800239c <SD_disk_initialize+0x1c0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	e0c6      	b.n	8002394 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8002206:	f7ff fec9 	bl	8001f9c <SD_PowerOn>

	/* slave select */
	SELECT();
 800220a:	f7ff fe33 	bl	8001e74 <SELECT>

	/* check disk type */
	type = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8002212:	2100      	movs	r1, #0
 8002214:	2040      	movs	r0, #64	; 0x40
 8002216:	f7ff ff8c 	bl	8002132 <SD_SendCmd>
 800221a:	4603      	mov	r3, r0
 800221c:	2b01      	cmp	r3, #1
 800221e:	f040 80a1 	bne.w	8002364 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8002222:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <SD_disk_initialize+0x1c4>)
 8002224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002228:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800222a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800222e:	2048      	movs	r0, #72	; 0x48
 8002230:	f7ff ff7f 	bl	8002132 <SD_SendCmd>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	d155      	bne.n	80022e6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
 800223e:	e00c      	b.n	800225a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8002240:	7bfc      	ldrb	r4, [r7, #15]
 8002242:	f7ff fe67 	bl	8001f14 <SPI_RxByte>
 8002246:	4603      	mov	r3, r0
 8002248:	461a      	mov	r2, r3
 800224a:	f104 0310 	add.w	r3, r4, #16
 800224e:	443b      	add	r3, r7
 8002250:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	3301      	adds	r3, #1
 8002258:	73fb      	strb	r3, [r7, #15]
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d9ef      	bls.n	8002240 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002260:	7abb      	ldrb	r3, [r7, #10]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d17e      	bne.n	8002364 <SD_disk_initialize+0x188>
 8002266:	7afb      	ldrb	r3, [r7, #11]
 8002268:	2baa      	cmp	r3, #170	; 0xaa
 800226a:	d17b      	bne.n	8002364 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800226c:	2100      	movs	r1, #0
 800226e:	2077      	movs	r0, #119	; 0x77
 8002270:	f7ff ff5f 	bl	8002132 <SD_SendCmd>
 8002274:	4603      	mov	r3, r0
 8002276:	2b01      	cmp	r3, #1
 8002278:	d807      	bhi.n	800228a <SD_disk_initialize+0xae>
 800227a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800227e:	2069      	movs	r0, #105	; 0x69
 8002280:	f7ff ff57 	bl	8002132 <SD_SendCmd>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800228a:	4b45      	ldr	r3, [pc, #276]	; (80023a0 <SD_disk_initialize+0x1c4>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ec      	bne.n	800226c <SD_disk_initialize+0x90>
 8002292:	e000      	b.n	8002296 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002294:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002296:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <SD_disk_initialize+0x1c4>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d062      	beq.n	8002364 <SD_disk_initialize+0x188>
 800229e:	2100      	movs	r1, #0
 80022a0:	207a      	movs	r0, #122	; 0x7a
 80022a2:	f7ff ff46 	bl	8002132 <SD_SendCmd>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d15b      	bne.n	8002364 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e00c      	b.n	80022cc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80022b2:	7bfc      	ldrb	r4, [r7, #15]
 80022b4:	f7ff fe2e 	bl	8001f14 <SPI_RxByte>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461a      	mov	r2, r3
 80022bc:	f104 0310 	add.w	r3, r4, #16
 80022c0:	443b      	add	r3, r7
 80022c2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	3301      	adds	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d9ef      	bls.n	80022b2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80022d2:	7a3b      	ldrb	r3, [r7, #8]
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <SD_disk_initialize+0x104>
 80022dc:	230c      	movs	r3, #12
 80022de:	e000      	b.n	80022e2 <SD_disk_initialize+0x106>
 80022e0:	2304      	movs	r3, #4
 80022e2:	73bb      	strb	r3, [r7, #14]
 80022e4:	e03e      	b.n	8002364 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80022e6:	2100      	movs	r1, #0
 80022e8:	2077      	movs	r0, #119	; 0x77
 80022ea:	f7ff ff22 	bl	8002132 <SD_SendCmd>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d808      	bhi.n	8002306 <SD_disk_initialize+0x12a>
 80022f4:	2100      	movs	r1, #0
 80022f6:	2069      	movs	r0, #105	; 0x69
 80022f8:	f7ff ff1b 	bl	8002132 <SD_SendCmd>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d801      	bhi.n	8002306 <SD_disk_initialize+0x12a>
 8002302:	2302      	movs	r3, #2
 8002304:	e000      	b.n	8002308 <SD_disk_initialize+0x12c>
 8002306:	2301      	movs	r3, #1
 8002308:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d10e      	bne.n	800232e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8002310:	2100      	movs	r1, #0
 8002312:	2077      	movs	r0, #119	; 0x77
 8002314:	f7ff ff0d 	bl	8002132 <SD_SendCmd>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d80e      	bhi.n	800233c <SD_disk_initialize+0x160>
 800231e:	2100      	movs	r1, #0
 8002320:	2069      	movs	r0, #105	; 0x69
 8002322:	f7ff ff06 	bl	8002132 <SD_SendCmd>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d107      	bne.n	800233c <SD_disk_initialize+0x160>
 800232c:	e00c      	b.n	8002348 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800232e:	2100      	movs	r1, #0
 8002330:	2041      	movs	r0, #65	; 0x41
 8002332:	f7ff fefe 	bl	8002132 <SD_SendCmd>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <SD_disk_initialize+0x1c4>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e2      	bne.n	800230a <SD_disk_initialize+0x12e>
 8002344:	e000      	b.n	8002348 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8002346:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <SD_disk_initialize+0x1c4>)
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <SD_disk_initialize+0x184>
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	2050      	movs	r0, #80	; 0x50
 8002356:	f7ff feec 	bl	8002132 <SD_SendCmd>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <SD_disk_initialize+0x188>
 8002360:	2300      	movs	r3, #0
 8002362:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <SD_disk_initialize+0x1c8>)
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800236a:	f7ff fd91 	bl	8001e90 <DESELECT>
	SPI_RxByte();
 800236e:	f7ff fdd1 	bl	8001f14 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002372:	7bbb      	ldrb	r3, [r7, #14]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <SD_disk_initialize+0x1c0>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SD_disk_initialize+0x1c0>)
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e001      	b.n	800238e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800238a:	f7ff fe49 	bl	8002020 <SD_PowerOff>
	}

	return Stat;
 800238e:	4b03      	ldr	r3, [pc, #12]	; (800239c <SD_disk_initialize+0x1c0>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	20000004 	.word	0x20000004
 80023a0:	20000164 	.word	0x20000164
 80023a4:	20000168 	.word	0x20000168

080023a8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <SD_disk_status+0x14>
 80023b8:	2301      	movs	r3, #1
 80023ba:	e002      	b.n	80023c2 <SD_disk_status+0x1a>
	return Stat;
 80023bc:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <SD_disk_status+0x28>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000004 	.word	0x20000004

080023d4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4603      	mov	r3, r0
 80023e2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d102      	bne.n	80023f0 <SD_disk_read+0x1c>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <SD_disk_read+0x20>
 80023f0:	2304      	movs	r3, #4
 80023f2:	e051      	b.n	8002498 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <SD_disk_read+0xcc>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SD_disk_read+0x32>
 8002402:	2303      	movs	r3, #3
 8002404:	e048      	b.n	8002498 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <SD_disk_read+0xd0>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <SD_disk_read+0x44>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	025b      	lsls	r3, r3, #9
 8002416:	607b      	str	r3, [r7, #4]

	SELECT();
 8002418:	f7ff fd2c 	bl	8001e74 <SELECT>

	if (count == 1)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d111      	bne.n	8002446 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	2051      	movs	r0, #81	; 0x51
 8002426:	f7ff fe84 	bl	8002132 <SD_SendCmd>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d129      	bne.n	8002484 <SD_disk_read+0xb0>
 8002430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002434:	68b8      	ldr	r0, [r7, #8]
 8002436:	f7ff fe0b 	bl	8002050 <SD_RxDataBlock>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d021      	beq.n	8002484 <SD_disk_read+0xb0>
 8002440:	2300      	movs	r3, #0
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	e01e      	b.n	8002484 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	2052      	movs	r0, #82	; 0x52
 800244a:	f7ff fe72 	bl	8002132 <SD_SendCmd>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d117      	bne.n	8002484 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002458:	68b8      	ldr	r0, [r7, #8]
 800245a:	f7ff fdf9 	bl	8002050 <SD_RxDataBlock>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <SD_disk_read+0xa6>
				buff += 512;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800246a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	3b01      	subs	r3, #1
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ed      	bne.n	8002454 <SD_disk_read+0x80>
 8002478:	e000      	b.n	800247c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800247a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800247c:	2100      	movs	r1, #0
 800247e:	204c      	movs	r0, #76	; 0x4c
 8002480:	f7ff fe57 	bl	8002132 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002484:	f7ff fd04 	bl	8001e90 <DESELECT>
	SPI_RxByte();
 8002488:	f7ff fd44 	bl	8001f14 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000168 	.word	0x20000168

080024a8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <SD_disk_write+0x1c>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <SD_disk_write+0x20>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e06b      	b.n	80025a0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024c8:	4b37      	ldr	r3, [pc, #220]	; (80025a8 <SD_disk_write+0x100>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <SD_disk_write+0x32>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e062      	b.n	80025a0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <SD_disk_write+0x100>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SD_disk_write+0x44>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e059      	b.n	80025a0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <SD_disk_write+0x104>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <SD_disk_write+0x56>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	025b      	lsls	r3, r3, #9
 80024fc:	607b      	str	r3, [r7, #4]

	SELECT();
 80024fe:	f7ff fcb9 	bl	8001e74 <SELECT>

	if (count == 1)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d110      	bne.n	800252a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	2058      	movs	r0, #88	; 0x58
 800250c:	f7ff fe11 	bl	8002132 <SD_SendCmd>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d13a      	bne.n	800258c <SD_disk_write+0xe4>
 8002516:	21fe      	movs	r1, #254	; 0xfe
 8002518:	68b8      	ldr	r0, [r7, #8]
 800251a:	f7ff fdc7 	bl	80020ac <SD_TxDataBlock>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d033      	beq.n	800258c <SD_disk_write+0xe4>
			count = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	e030      	b.n	800258c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800252a:	4b20      	ldr	r3, [pc, #128]	; (80025ac <SD_disk_write+0x104>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8002536:	2100      	movs	r1, #0
 8002538:	2077      	movs	r0, #119	; 0x77
 800253a:	f7ff fdfa 	bl	8002132 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	2057      	movs	r0, #87	; 0x57
 8002542:	f7ff fdf6 	bl	8002132 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	2059      	movs	r0, #89	; 0x59
 800254a:	f7ff fdf2 	bl	8002132 <SD_SendCmd>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11b      	bne.n	800258c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002554:	21fc      	movs	r1, #252	; 0xfc
 8002556:	68b8      	ldr	r0, [r7, #8]
 8002558:	f7ff fda8 	bl	80020ac <SD_TxDataBlock>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <SD_disk_write+0xd0>
				buff += 512;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002568:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	3b01      	subs	r3, #1
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ee      	bne.n	8002554 <SD_disk_write+0xac>
 8002576:	e000      	b.n	800257a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002578:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800257a:	21fd      	movs	r1, #253	; 0xfd
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff fd95 	bl	80020ac <SD_TxDataBlock>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d101      	bne.n	800258c <SD_disk_write+0xe4>
			{
				count = 1;
 8002588:	2301      	movs	r3, #1
 800258a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800258c:	f7ff fc80 	bl	8001e90 <DESELECT>
	SPI_RxByte();
 8002590:	f7ff fcc0 	bl	8001f14 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000004 	.word	0x20000004
 80025ac:	20000168 	.word	0x20000168

080025b0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b08b      	sub	sp, #44	; 0x2c
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	603a      	str	r2, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	460b      	mov	r3, r1
 80025be:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SD_disk_ioctl+0x1e>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e115      	b.n	80027fa <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d124      	bne.n	8002624 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d012      	beq.n	8002608 <SD_disk_ioctl+0x58>
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	dc1a      	bgt.n	800261c <SD_disk_ioctl+0x6c>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <SD_disk_ioctl+0x40>
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d006      	beq.n	80025fc <SD_disk_ioctl+0x4c>
 80025ee:	e015      	b.n	800261c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80025f0:	f7ff fd16 	bl	8002020 <SD_PowerOff>
			res = RES_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80025fa:	e0fc      	b.n	80027f6 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80025fc:	f7ff fcce 	bl	8001f9c <SD_PowerOn>
			res = RES_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002606:	e0f6      	b.n	80027f6 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	1c5c      	adds	r4, r3, #1
 800260c:	f7ff fd14 	bl	8002038 <SD_CheckPower>
 8002610:	4603      	mov	r3, r0
 8002612:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800261a:	e0ec      	b.n	80027f6 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800261c:	2304      	movs	r3, #4
 800261e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002622:	e0e8      	b.n	80027f6 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002624:	4b77      	ldr	r3, [pc, #476]	; (8002804 <SD_disk_ioctl+0x254>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <SD_disk_ioctl+0x86>
 8002632:	2303      	movs	r3, #3
 8002634:	e0e1      	b.n	80027fa <SD_disk_ioctl+0x24a>

		SELECT();
 8002636:	f7ff fc1d 	bl	8001e74 <SELECT>

		switch (ctrl)
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	2b0d      	cmp	r3, #13
 800263e:	f200 80cb 	bhi.w	80027d8 <SD_disk_ioctl+0x228>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <SD_disk_ioctl+0x98>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	08002743 	.word	0x08002743
 800264c:	08002681 	.word	0x08002681
 8002650:	08002733 	.word	0x08002733
 8002654:	080027d9 	.word	0x080027d9
 8002658:	080027d9 	.word	0x080027d9
 800265c:	080027d9 	.word	0x080027d9
 8002660:	080027d9 	.word	0x080027d9
 8002664:	080027d9 	.word	0x080027d9
 8002668:	080027d9 	.word	0x080027d9
 800266c:	080027d9 	.word	0x080027d9
 8002670:	080027d9 	.word	0x080027d9
 8002674:	08002755 	.word	0x08002755
 8002678:	08002779 	.word	0x08002779
 800267c:	0800279d 	.word	0x0800279d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002680:	2100      	movs	r1, #0
 8002682:	2049      	movs	r0, #73	; 0x49
 8002684:	f7ff fd55 	bl	8002132 <SD_SendCmd>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 80a8 	bne.w	80027e0 <SD_disk_ioctl+0x230>
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2110      	movs	r1, #16
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fcda 	bl	8002050 <SD_RxDataBlock>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 809e 	beq.w	80027e0 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80026a4:	7b3b      	ldrb	r3, [r7, #12]
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10e      	bne.n	80026cc <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80026ae:	7d7b      	ldrb	r3, [r7, #21]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	7d3b      	ldrb	r3, [r7, #20]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	3301      	adds	r3, #1
 80026c0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80026c2:	8bfb      	ldrh	r3, [r7, #30]
 80026c4:	029a      	lsls	r2, r3, #10
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e02e      	b.n	800272a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80026cc:	7c7b      	ldrb	r3, [r7, #17]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	7dbb      	ldrb	r3, [r7, #22]
 80026d6:	09db      	lsrs	r3, r3, #7
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4413      	add	r3, r2
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	7d7b      	ldrb	r3, [r7, #21]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	f003 0306 	and.w	r3, r3, #6
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3302      	adds	r3, #2
 80026f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80026f4:	7d3b      	ldrb	r3, [r7, #20]
 80026f6:	099b      	lsrs	r3, r3, #6
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	b29b      	uxth	r3, r3
 8002704:	4413      	add	r3, r2
 8002706:	b29a      	uxth	r2, r3
 8002708:	7cbb      	ldrb	r3, [r7, #18]
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	b29b      	uxth	r3, r3
 800270e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002712:	b29b      	uxth	r3, r3
 8002714:	4413      	add	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800271c:	8bfa      	ldrh	r2, [r7, #30]
 800271e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002722:	3b09      	subs	r3, #9
 8002724:	409a      	lsls	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002730:	e056      	b.n	80027e0 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002738:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002740:	e055      	b.n	80027ee <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002742:	f7ff fc11 	bl	8001f68 <SD_ReadyWait>
 8002746:	4603      	mov	r3, r0
 8002748:	2bff      	cmp	r3, #255	; 0xff
 800274a:	d14b      	bne.n	80027e4 <SD_disk_ioctl+0x234>
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002752:	e047      	b.n	80027e4 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002754:	2100      	movs	r1, #0
 8002756:	2049      	movs	r0, #73	; 0x49
 8002758:	f7ff fceb 	bl	8002132 <SD_SendCmd>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d142      	bne.n	80027e8 <SD_disk_ioctl+0x238>
 8002762:	2110      	movs	r1, #16
 8002764:	6a38      	ldr	r0, [r7, #32]
 8002766:	f7ff fc73 	bl	8002050 <SD_RxDataBlock>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d03b      	beq.n	80027e8 <SD_disk_ioctl+0x238>
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002776:	e037      	b.n	80027e8 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002778:	2100      	movs	r1, #0
 800277a:	204a      	movs	r0, #74	; 0x4a
 800277c:	f7ff fcd9 	bl	8002132 <SD_SendCmd>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d132      	bne.n	80027ec <SD_disk_ioctl+0x23c>
 8002786:	2110      	movs	r1, #16
 8002788:	6a38      	ldr	r0, [r7, #32]
 800278a:	f7ff fc61 	bl	8002050 <SD_RxDataBlock>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d02b      	beq.n	80027ec <SD_disk_ioctl+0x23c>
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800279a:	e027      	b.n	80027ec <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800279c:	2100      	movs	r1, #0
 800279e:	207a      	movs	r0, #122	; 0x7a
 80027a0:	f7ff fcc7 	bl	8002132 <SD_SendCmd>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80027b0:	e00b      	b.n	80027ca <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80027b2:	6a3c      	ldr	r4, [r7, #32]
 80027b4:	1c63      	adds	r3, r4, #1
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	f7ff fbac 	bl	8001f14 <SPI_RxByte>
 80027bc:	4603      	mov	r3, r0
 80027be:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80027c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027c4:	3301      	adds	r3, #1
 80027c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80027ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d9ef      	bls.n	80027b2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80027d8:	2304      	movs	r3, #4
 80027da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027de:	e006      	b.n	80027ee <SD_disk_ioctl+0x23e>
			break;
 80027e0:	bf00      	nop
 80027e2:	e004      	b.n	80027ee <SD_disk_ioctl+0x23e>
			break;
 80027e4:	bf00      	nop
 80027e6:	e002      	b.n	80027ee <SD_disk_ioctl+0x23e>
			break;
 80027e8:	bf00      	nop
 80027ea:	e000      	b.n	80027ee <SD_disk_ioctl+0x23e>
			break;
 80027ec:	bf00      	nop
		}

		DESELECT();
 80027ee:	f7ff fb4f 	bl	8001e90 <DESELECT>
		SPI_RxByte();
 80027f2:	f7ff fb8f 	bl	8001f14 <SPI_RxByte>
	}

	return res;
 80027f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	372c      	adds	r7, #44	; 0x2c
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	bf00      	nop
 8002804:	20000004 	.word	0x20000004

08002808 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C2 init function */
void MX_I2C1_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	  /* USER CODE END I2C1_Init 0 */

	  /* USER CODE BEGIN I2C1_Init 1 */

	  /* USER CODE END I2C1_Init 1 */
	  hi2c1.Instance = I2C1;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <MX_I2C1_Init+0x50>)
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <MX_I2C1_Init+0x54>)
 8002810:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.ClockSpeed = 400000;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <MX_I2C1_Init+0x50>)
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <MX_I2C1_Init+0x58>)
 8002816:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <MX_I2C1_Init+0x50>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.OwnAddress1 = 0;
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <MX_I2C1_Init+0x50>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <MX_I2C1_Init+0x50>)
 8002826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282a:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <MX_I2C1_Init+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2 = 0;
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <MX_I2C1_Init+0x50>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <MX_I2C1_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <MX_I2C1_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_I2C1_Init+0x50>)
 8002846:	f005 f979 	bl	8007b3c <HAL_I2C_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_I2C1_Init+0x4c>
	  {
	    Error_Handler();
 8002850:	f000 fefc 	bl	800364c <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	2000016c 	.word	0x2000016c
 800285c:	40005400 	.word	0x40005400
 8002860:	00061a80 	.word	0x00061a80

08002864 <I2C_ReadOneByte>:
/* USER CODE BEGIN 0 */

 uint32_t total_time=-65535;
 MPU9255_t MPU9255;
uint8_t I2C_ReadOneByte(uint8_t DevAddr, uint8_t RegAddr)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af04      	add	r7, sp, #16
 800286a:	4603      	mov	r3, r0
 800286c:	460a      	mov	r2, r1
 800286e:	71fb      	strb	r3, [r7, #7]
 8002870:	4613      	mov	r3, r2
 8002872:	71bb      	strb	r3, [r7, #6]
  uint8_t u8Ret[1]={0};
 8002874:	2300      	movs	r3, #0
 8002876:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr,RegAddr,I2C_MEMADD_SIZE_8BIT,u8Ret,1,1000);
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	b299      	uxth	r1, r3
 800287c:	79bb      	ldrb	r3, [r7, #6]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002884:	9302      	str	r3, [sp, #8]
 8002886:	2301      	movs	r3, #1
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2301      	movs	r3, #1
 8002892:	4804      	ldr	r0, [pc, #16]	; (80028a4 <I2C_ReadOneByte+0x40>)
 8002894:	f005 fc8e 	bl	80081b4 <HAL_I2C_Mem_Read>
  return u8Ret[0];
 8002898:	7b3b      	ldrb	r3, [r7, #12]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000016c 	.word	0x2000016c

080028a8 <I2C_WriteOneByte>:

void I2C_WriteOneByte(uint8_t DevAddr, uint8_t RegAddr, uint8_t value)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	460b      	mov	r3, r1
 80028b4:	71bb      	strb	r3, [r7, #6]
 80028b6:	4613      	mov	r3, r2
 80028b8:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2]={0};
 80028ba:	2300      	movs	r3, #0
 80028bc:	81bb      	strh	r3, [r7, #12]

  buf[0] = RegAddr;
 80028be:	79bb      	ldrb	r3, [r7, #6]
 80028c0:	733b      	strb	r3, [r7, #12]
  buf[1] = value;
 80028c2:	797b      	ldrb	r3, [r7, #5]
 80028c4:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1,DevAddr,buf,2,100);
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	b299      	uxth	r1, r3
 80028ca:	f107 020c 	add.w	r2, r7, #12
 80028ce:	2364      	movs	r3, #100	; 0x64
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2302      	movs	r3, #2
 80028d4:	4803      	ldr	r0, [pc, #12]	; (80028e4 <I2C_WriteOneByte+0x3c>)
 80028d6:	f005 fa75 	bl	8007dc4 <HAL_I2C_Master_Transmit>


}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	2000016c 	.word	0x2000016c

080028e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b0b8      	sub	sp, #224	; 0xe0
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ee:	f004 fb5d 	bl	8006fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028f2:	f000 fc5d 	bl	80031b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f6:	f000 fe23 	bl	8003540 <MX_GPIO_Init>
  MX_ADC1_Init();
 80028fa:	f000 fccb 	bl	8003294 <MX_ADC1_Init>
  MX_I2C1_Init();
 80028fe:	f7ff ff83 	bl	8002808 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002902:	f000 fd19 	bl	8003338 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002906:	f000 fd45 	bl	8003394 <MX_I2C3_Init>
  MX_SPI1_Init();
 800290a:	f000 fd71 	bl	80033f0 <MX_SPI1_Init>
  MX_FATFS_Init();
 800290e:	f008 f8a7 	bl	800aa60 <MX_FATFS_Init>
  MX_TIM10_Init();
 8002912:	f000 fdf1 	bl	80034f8 <MX_TIM10_Init>
  MX_TIM3_Init();
 8002916:	f000 fda1 	bl	800345c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  uint16_t timer_val=0;
 800291a:	2300      	movs	r3, #0
 800291c:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

 // mpu925x.master_specific.bus_handle = &hi2c1;

  HAL_Delay(10);
 8002920:	200a      	movs	r0, #10
 8002922:	f004 fbb5 	bl	8007090 <HAL_Delay>
  f_mount(&fs, "", 0);
 8002926:	2200      	movs	r2, #0
 8002928:	4918      	ldr	r1, [pc, #96]	; (800298c <main+0xa4>)
 800292a:	4819      	ldr	r0, [pc, #100]	; (8002990 <main+0xa8>)
 800292c:	f00a fae6 	bl	800cefc <f_mount>
  f_open(&fil, "write.txt", FA_OPEN_ALWAYS | FA_WRITE | FA_READ);
 8002930:	2213      	movs	r2, #19
 8002932:	4918      	ldr	r1, [pc, #96]	; (8002994 <main+0xac>)
 8002934:	4818      	ldr	r0, [pc, #96]	; (8002998 <main+0xb0>)
 8002936:	f00a fb27 	bl	800cf88 <f_open>
  HAL_Delay(10);
 800293a:	200a      	movs	r0, #10
 800293c:	f004 fba8 	bl	8007090 <HAL_Delay>
	IMU_EN_SENSOR_TYPE enPressureType;
//  	IMU_ST_ANGLES_DATA stAngles;
// 	IMU_ST_SENSOR_DATA stGyroRawData;
// 	IMU_ST_SENSOR_DATA stAccelRawData;
//  	IMU_ST_SENSOR_DATA stMagnRawData;
	int32_t s32PressureVal = 0, s32TemperatureVal = 0, s32AltitudeVal = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
// 	icm20948init();
// 	bmp280Init();
	imuInit(&enMotionSensorType, &enPressureType);
 8002952:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8002956:	f107 03cb 	add.w	r3, r7, #203	; 0xcb
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fc59 	bl	8001214 <imuInit>
	{
      ssd1306_SetCursor(5,5);
		char retVal= ssd1306_WriteString("Motion NULL\n", Font_7x10, White);
		      ssd1306_UpdateScreen();
	}*/
	if(IMU_EN_SENSOR_TYPE_BMP280 == enPressureType)
 8002962:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8002966:	2b02      	cmp	r3, #2
 8002968:	d11c      	bne.n	80029a4 <main+0xbc>
	{
      ssd1306_SetCursor(5,15);
 800296a:	210f      	movs	r1, #15
 800296c:	2005      	movs	r0, #5
 800296e:	f004 fb05 	bl	8006f7c <ssd1306_SetCursor>
		char retVal= ssd1306_WriteString("Pressure BMP280\n", Font_7x10, White);
 8002972:	4a0a      	ldr	r2, [pc, #40]	; (800299c <main+0xb4>)
 8002974:	2301      	movs	r3, #1
 8002976:	ca06      	ldmia	r2, {r1, r2}
 8002978:	4809      	ldr	r0, [pc, #36]	; (80029a0 <main+0xb8>)
 800297a:	f004 fad9 	bl	8006f30 <ssd1306_WriteString>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
		      ssd1306_UpdateScreen();
 8002984:	f004 f9d0 	bl	8006d28 <ssd1306_UpdateScreen>
 8002988:	e01b      	b.n	80029c2 <main+0xda>
 800298a:	bf00      	nop
 800298c:	08010078 	.word	0x08010078
 8002990:	200001c0 	.word	0x200001c0
 8002994:	0801007c 	.word	0x0801007c
 8002998:	200011f8 	.word	0x200011f8
 800299c:	20000028 	.word	0x20000028
 80029a0:	08010088 	.word	0x08010088
	}
	else
	{
      ssd1306_SetCursor(0,13);
 80029a4:	210d      	movs	r1, #13
 80029a6:	2000      	movs	r0, #0
 80029a8:	f004 fae8 	bl	8006f7c <ssd1306_SetCursor>
		char retVal= ssd1306_WriteString("Pressure NULL\n", Font_7x10, White);
 80029ac:	4aea      	ldr	r2, [pc, #936]	; (8002d58 <main+0x470>)
 80029ae:	2301      	movs	r3, #1
 80029b0:	ca06      	ldmia	r2, {r1, r2}
 80029b2:	48ea      	ldr	r0, [pc, #936]	; (8002d5c <main+0x474>)
 80029b4:	f004 fabc 	bl	8006f30 <ssd1306_WriteString>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
		      ssd1306_UpdateScreen();
 80029be:	f004 f9b3 	bl	8006d28 <ssd1306_UpdateScreen>
	}
	HAL_Delay(20);
 80029c2:	2014      	movs	r0, #20
 80029c4:	f004 fb64 	bl	8007090 <HAL_Delay>


      // Wait till' initializition is complete. Will be in endless loop if sensor
      // is unreachable (wiring is not correct, sensor is damaged...).
      //while (mpu925x_init(&mpu925x, 0)!=0);
      while (MPU9255_Init(&hi2c1) == 1);
 80029c8:	bf00      	nop
 80029ca:	48e5      	ldr	r0, [pc, #916]	; (8002d60 <main+0x478>)
 80029cc:	f000 fe44 	bl	8003658 <MPU9255_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d0f9      	beq.n	80029ca <main+0xe2>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	  HAL_Delay(10);
 80029d6:	200a      	movs	r0, #10
 80029d8:	f004 fb5a 	bl	8007090 <HAL_Delay>
     float g_lf;
     int g_l;
     uint8_t tx;
     char str[10];char str1[10];char str2[10];char str3[10];char str4[10];char str5[10];char str6[10];char str7[10];char str8[10];char str9[10];char str10[10];char str11[10];char str12[10]; char str13[10];

     int count=0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
         	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_SET);
 80029e2:	2201      	movs	r2, #1
 80029e4:	2108      	movs	r1, #8
 80029e6:	48df      	ldr	r0, [pc, #892]	; (8002d64 <main+0x47c>)
 80029e8:	f005 f88e 	bl	8007b08 <HAL_GPIO_WritePin>


            HAL_Delay(10);
 80029ec:	200a      	movs	r0, #10
 80029ee:	f004 fb4f 	bl	8007090 <HAL_Delay>
      //      HAL_NVIC_EnableIRQ(TIM3_IRQn);
     //       __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE );
            HAL_TIM_Base_Start_IT(&htim10);
 80029f2:	48dd      	ldr	r0, [pc, #884]	; (8002d68 <main+0x480>)
 80029f4:	f007 fc02 	bl	800a1fc <HAL_TIM_Base_Start_IT>
	    	//  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];
	    //	pitch = MPU9255.pitch;
	    //	yaw = MPU9255.yaw;
	   // 	roll= MPU9255.roll;
		        // Get sensor data.
	    		HAL_Delay(10);
 80029f8:	200a      	movs	r0, #10
 80029fa:	f004 fb49 	bl	8007090 <HAL_Delay>

		    	readAll(&hi2c1, &MPU9255);
 80029fe:	49db      	ldr	r1, [pc, #876]	; (8002d6c <main+0x484>)
 8002a00:	48d7      	ldr	r0, [pc, #860]	; (8002d60 <main+0x478>)
 8002a02:	f000 fe9d 	bl	8003740 <readAll>



		        HAL_Delay(10);
 8002a06:	200a      	movs	r0, #10
 8002a08:	f004 fb42 	bl	8007090 <HAL_Delay>
		        		  		  	  sprintf(str3, "%d.%d", g_h,g_l);
		        		  	  		  	  ssd1306_SetCursor(0,21);
		        		  	  		  	  retVal= ssd1306_WriteString(str3, Font_7x10, White);
		        		  	  		  	  ssd1306_UpdateScreen();*/

			  	pressSensorDataGet(&s32TemperatureVal, &s32PressureVal, &s32AltitudeVal);
 8002a0c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8002a10:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8002a14:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff f9e9 	bl	8001df0 <pressSensorDataGet>

			    timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 8002a1e:	4bd2      	ldr	r3, [pc, #840]	; (8002d68 <main+0x480>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

		  		      g_h=MPU9255.AccelX;
 8002a28:	4bd0      	ldr	r3, [pc, #832]	; (8002d6c <main+0x484>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a32:	ee17 3a90 	vmov	r3, s15
 8002a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.AccelX-g_h);
 8002a3a:	4bcc      	ldr	r3, [pc, #816]	; (8002d6c <main+0x484>)
 8002a3c:	ed93 7a00 	vldr	s14, [r3]
 8002a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a50:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002a54:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002a58:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8002d70 <main+0x488>
 8002a5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a60:	ee17 0a90 	vmov	r0, s15
 8002a64:	f7fd fd88 	bl	8000578 <__aeabi_f2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	ec43 2b10 	vmov	d0, r2, r3
 8002a70:	f00b f850 	bl	800db14 <trunc>
 8002a74:	ec53 2b10 	vmov	r2, r3, d0
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f884 	bl	8000b88 <__aeabi_d2iz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bfb8      	it	lt
 8002a86:	425b      	neglt	r3, r3
 8002a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str, "%d.%d", g_h,g_l);
 8002a8c:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002a90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a94:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002a98:	49b6      	ldr	r1, [pc, #728]	; (8002d74 <main+0x48c>)
 8002a9a:	f00c fc01 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.AccelY;
 8002a9e:	4bb3      	ldr	r3, [pc, #716]	; (8002d6c <main+0x484>)
 8002aa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa8:	ee17 3a90 	vmov	r3, s15
 8002aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.AccelY-g_h);
 8002ab0:	4bae      	ldr	r3, [pc, #696]	; (8002d6c <main+0x484>)
 8002ab2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac6:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002aca:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002ace:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002d70 <main+0x488>
 8002ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad6:	ee17 0a90 	vmov	r0, s15
 8002ada:	f7fd fd4d 	bl	8000578 <__aeabi_f2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	ec43 2b10 	vmov	d0, r2, r3
 8002ae6:	f00b f815 	bl	800db14 <trunc>
 8002aea:	ec53 2b10 	vmov	r2, r3, d0
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	f7fe f849 	bl	8000b88 <__aeabi_d2iz>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bfb8      	it	lt
 8002afc:	425b      	neglt	r3, r3
 8002afe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str2,"%d.%d", g_h,g_l);
 8002b02:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002b06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b0a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b0e:	4999      	ldr	r1, [pc, #612]	; (8002d74 <main+0x48c>)
 8002b10:	f00c fbc6 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.AccelZ;
 8002b14:	4b95      	ldr	r3, [pc, #596]	; (8002d6c <main+0x484>)
 8002b16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1e:	ee17 3a90 	vmov	r3, s15
 8002b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.AccelZ-g_h);
 8002b26:	4b91      	ldr	r3, [pc, #580]	; (8002d6c <main+0x484>)
 8002b28:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002b40:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002b44:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002d70 <main+0x488>
 8002b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b4c:	ee17 0a90 	vmov	r0, s15
 8002b50:	f7fd fd12 	bl	8000578 <__aeabi_f2d>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	ec43 2b10 	vmov	d0, r2, r3
 8002b5c:	f00a ffda 	bl	800db14 <trunc>
 8002b60:	ec53 2b10 	vmov	r2, r3, d0
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7fe f80e 	bl	8000b88 <__aeabi_d2iz>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bfb8      	it	lt
 8002b72:	425b      	neglt	r3, r3
 8002b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str3, "%d.%d", g_h,g_l);
 8002b78:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b80:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002b84:	497b      	ldr	r1, [pc, #492]	; (8002d74 <main+0x48c>)
 8002b86:	f00c fb8b 	bl	800f2a0 <siprintf>


		  		  	  g_h= MPU9255.GyroX;
 8002b8a:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <main+0x484>)
 8002b8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b94:	ee17 3a90 	vmov	r3, s15
 8002b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.GyroX-g_h);
 8002b9c:	4b73      	ldr	r3, [pc, #460]	; (8002d6c <main+0x484>)
 8002b9e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb2:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002bb6:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002bba:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002d70 <main+0x488>
 8002bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc2:	ee17 0a90 	vmov	r0, s15
 8002bc6:	f7fd fcd7 	bl	8000578 <__aeabi_f2d>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ec43 2b10 	vmov	d0, r2, r3
 8002bd2:	f00a ff9f 	bl	800db14 <trunc>
 8002bd6:	ec53 2b10 	vmov	r2, r3, d0
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f7fd ffd3 	bl	8000b88 <__aeabi_d2iz>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bfb8      	it	lt
 8002be8:	425b      	neglt	r3, r3
 8002bea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str4, "%d.%d", g_h,g_l);
 8002bee:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8002bf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bf6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002bfa:	495e      	ldr	r1, [pc, #376]	; (8002d74 <main+0x48c>)
 8002bfc:	f00c fb50 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.GyroY;
 8002c00:	4b5a      	ldr	r3, [pc, #360]	; (8002d6c <main+0x484>)
 8002c02:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c0a:	ee17 3a90 	vmov	r3, s15
 8002c0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.GyroY-g_h);
 8002c12:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <main+0x484>)
 8002c14:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c28:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002c2c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002c30:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002d70 <main+0x488>
 8002c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c38:	ee17 0a90 	vmov	r0, s15
 8002c3c:	f7fd fc9c 	bl	8000578 <__aeabi_f2d>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	ec43 2b10 	vmov	d0, r2, r3
 8002c48:	f00a ff64 	bl	800db14 <trunc>
 8002c4c:	ec53 2b10 	vmov	r2, r3, d0
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	f7fd ff98 	bl	8000b88 <__aeabi_d2iz>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bfb8      	it	lt
 8002c5e:	425b      	neglt	r3, r3
 8002c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str5, "%d.%d", g_h,g_l);
 8002c64:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c6c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002c70:	4940      	ldr	r1, [pc, #256]	; (8002d74 <main+0x48c>)
 8002c72:	f00c fb15 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.GyroZ;
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <main+0x484>)
 8002c78:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c80:	ee17 3a90 	vmov	r3, s15
 8002c84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.GyroZ-g_h);
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <main+0x484>)
 8002c8a:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c92:	ee07 3a90 	vmov	s15, r3
 8002c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c9e:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l=abs(trunc(g_lf*1000));
 8002ca2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002ca6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002d70 <main+0x488>
 8002caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cae:	ee17 0a90 	vmov	r0, s15
 8002cb2:	f7fd fc61 	bl	8000578 <__aeabi_f2d>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	ec43 2b10 	vmov	d0, r2, r3
 8002cbe:	f00a ff29 	bl	800db14 <trunc>
 8002cc2:	ec53 2b10 	vmov	r2, r3, d0
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd ff5d 	bl	8000b88 <__aeabi_d2iz>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bfb8      	it	lt
 8002cd4:	425b      	neglt	r3, r3
 8002cd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str6, "%d.%d", g_h,g_l);
 8002cda:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002ce6:	4923      	ldr	r1, [pc, #140]	; (8002d74 <main+0x48c>)
 8002ce8:	f00c fada 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.MagX;
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <main+0x484>)
 8002cee:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf6:	ee17 3a90 	vmov	r3, s15
 8002cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.MagX-g_h);
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <main+0x484>)
 8002d00:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d14:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002d18:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002d1c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002d70 <main+0x488>
 8002d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d24:	ee17 0a90 	vmov	r0, s15
 8002d28:	f7fd fc26 	bl	8000578 <__aeabi_f2d>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	ec43 2b10 	vmov	d0, r2, r3
 8002d34:	f00a feee 	bl	800db14 <trunc>
 8002d38:	ec53 2b10 	vmov	r2, r3, d0
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f7fd ff22 	bl	8000b88 <__aeabi_d2iz>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bfb8      	it	lt
 8002d4a:	425b      	neglt	r3, r3
 8002d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str7, "%d.%d", g_h,g_l);
 8002d50:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002d54:	e010      	b.n	8002d78 <main+0x490>
 8002d56:	bf00      	nop
 8002d58:	20000028 	.word	0x20000028
 8002d5c:	0801009c 	.word	0x0801009c
 8002d60:	2000016c 	.word	0x2000016c
 8002d64:	40020800 	.word	0x40020800
 8002d68:	200023b8 	.word	0x200023b8
 8002d6c:	20002400 	.word	0x20002400
 8002d70:	447a0000 	.word	0x447a0000
 8002d74:	080100ac 	.word	0x080100ac
 8002d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d7c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002d80:	49e4      	ldr	r1, [pc, #912]	; (8003114 <main+0x82c>)
 8002d82:	f00c fa8d 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.MagY;
 8002d86:	4be4      	ldr	r3, [pc, #912]	; (8003118 <main+0x830>)
 8002d88:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d90:	ee17 3a90 	vmov	r3, s15
 8002d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.MagY-g_h);
 8002d98:	4bdf      	ldr	r3, [pc, #892]	; (8003118 <main+0x830>)
 8002d9a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dae:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002db2:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002db6:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 800311c <main+0x834>
 8002dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dbe:	ee17 0a90 	vmov	r0, s15
 8002dc2:	f7fd fbd9 	bl	8000578 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	ec43 2b10 	vmov	d0, r2, r3
 8002dce:	f00a fea1 	bl	800db14 <trunc>
 8002dd2:	ec53 2b10 	vmov	r2, r3, d0
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd fed5 	bl	8000b88 <__aeabi_d2iz>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bfb8      	it	lt
 8002de4:	425b      	neglt	r3, r3
 8002de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str8, "%d.%d", g_h,g_l);
 8002dea:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002dee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002df2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002df6:	49c7      	ldr	r1, [pc, #796]	; (8003114 <main+0x82c>)
 8002df8:	f00c fa52 	bl	800f2a0 <siprintf>


		  		  	  g_h=MPU9255.MagZ;
 8002dfc:	4bc6      	ldr	r3, [pc, #792]	; (8003118 <main+0x830>)
 8002dfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e06:	ee17 3a90 	vmov	r3, s15
 8002e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(MPU9255.MagZ-g_h);
 8002e0e:	4bc2      	ldr	r3, [pc, #776]	; (8003118 <main+0x830>)
 8002e10:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e24:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002e28:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002e2c:	ed9f 7abb 	vldr	s14, [pc, #748]	; 800311c <main+0x834>
 8002e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e34:	ee17 0a90 	vmov	r0, s15
 8002e38:	f7fd fb9e 	bl	8000578 <__aeabi_f2d>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	ec43 2b10 	vmov	d0, r2, r3
 8002e44:	f00a fe66 	bl	800db14 <trunc>
 8002e48:	ec53 2b10 	vmov	r2, r3, d0
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f7fd fe9a 	bl	8000b88 <__aeabi_d2iz>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bfb8      	it	lt
 8002e5a:	425b      	neglt	r3, r3
 8002e5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str9, "%d.%d", g_h,g_l);
 8002e60:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8002e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e68:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e6c:	49a9      	ldr	r1, [pc, #676]	; (8003114 <main+0x82c>)
 8002e6e:	f00c fa17 	bl	800f2a0 <siprintf>


		  		  	  g_h=(float)s32TemperatureVal/100;
 8002e72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e7e:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8003120 <main+0x838>
 8002e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e8a:	ee17 3a90 	vmov	r3, s15
 8002e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(((float)s32TemperatureVal/100)-g_h);
 8002e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e9e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003120 <main+0x838>
 8002ea2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb6:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002eba:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002ebe:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800311c <main+0x834>
 8002ec2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ec6:	ee17 0a90 	vmov	r0, s15
 8002eca:	f7fd fb55 	bl	8000578 <__aeabi_f2d>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	ec43 2b10 	vmov	d0, r2, r3
 8002ed6:	f00a fe1d 	bl	800db14 <trunc>
 8002eda:	ec53 2b10 	vmov	r2, r3, d0
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	f7fd fe51 	bl	8000b88 <__aeabi_d2iz>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bfb8      	it	lt
 8002eec:	425b      	neglt	r3, r3
 8002eee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str10, "%d.%d", g_h,g_l);
 8002ef2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002efa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002efe:	4985      	ldr	r1, [pc, #532]	; (8003114 <main+0x82c>)
 8002f00:	f00c f9ce 	bl	800f2a0 <siprintf>

		  		  	  g_h=(float)s32PressureVal/100;
 8002f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f10:	eddf 6a83 	vldr	s13, [pc, #524]	; 8003120 <main+0x838>
 8002f14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 3a90 	vmov	r3, s15
 8002f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(((float)s32PressureVal/100)-g_h);
 8002f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f30:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8003120 <main+0x838>
 8002f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f48:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002f4c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002f50:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800311c <main+0x834>
 8002f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f58:	ee17 0a90 	vmov	r0, s15
 8002f5c:	f7fd fb0c 	bl	8000578 <__aeabi_f2d>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	ec43 2b10 	vmov	d0, r2, r3
 8002f68:	f00a fdd4 	bl	800db14 <trunc>
 8002f6c:	ec53 2b10 	vmov	r2, r3, d0
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fe08 	bl	8000b88 <__aeabi_d2iz>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bfb8      	it	lt
 8002f7e:	425b      	neglt	r3, r3
 8002f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str11, "%d.%d", g_h,g_l);
 8002f84:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002f90:	4960      	ldr	r1, [pc, #384]	; (8003114 <main+0x82c>)
 8002f92:	f00c f985 	bl	800f2a0 <siprintf>

		  		  	  g_h=(float)s32AltitudeVal/100;
 8002f96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003120 <main+0x838>
 8002fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fae:	ee17 3a90 	vmov	r3, s15
 8002fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  		  	  g_lf=(((float)s32AltitudeVal/100)-g_h);
 8002fb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc2:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003120 <main+0x838>
 8002fc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fce:	ee07 3a90 	vmov	s15, r3
 8002fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fda:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
		  		  	  g_l= abs(trunc(g_lf*1000));
 8002fde:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8002fe2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800311c <main+0x834>
 8002fe6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002fea:	ee17 0a90 	vmov	r0, s15
 8002fee:	f7fd fac3 	bl	8000578 <__aeabi_f2d>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	ec43 2b10 	vmov	d0, r2, r3
 8002ffa:	f00a fd8b 	bl	800db14 <trunc>
 8002ffe:	ec53 2b10 	vmov	r2, r3, d0
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f7fd fdbf 	bl	8000b88 <__aeabi_d2iz>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	bfb8      	it	lt
 8003010:	425b      	neglt	r3, r3
 8003012:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  		  	  sprintf(str12, "%d.%d", g_h,g_l);
 8003016:	f107 0020 	add.w	r0, r7, #32
 800301a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800301e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8003022:	493c      	ldr	r1, [pc, #240]	; (8003114 <main+0x82c>)
 8003024:	f00c f93c 	bl	800f2a0 <siprintf>

		  		  	  sprintf(str13, "%d",total_time+timer_val);
 8003028:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800302c:	4b3d      	ldr	r3, [pc, #244]	; (8003124 <main+0x83c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	441a      	add	r2, r3
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	493c      	ldr	r1, [pc, #240]	; (8003128 <main+0x840>)
 8003038:	4618      	mov	r0, r3
 800303a:	f00c f931 	bl	800f2a0 <siprintf>

		  		  	  f_puts(str , &fil);
 800303e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003042:	493a      	ldr	r1, [pc, #232]	; (800312c <main+0x844>)
 8003044:	4618      	mov	r0, r3
 8003046:	f00a fc1e 	bl	800d886 <f_puts>
		  		  	  f_puts("  ", &fil);
 800304a:	4938      	ldr	r1, [pc, #224]	; (800312c <main+0x844>)
 800304c:	4838      	ldr	r0, [pc, #224]	; (8003130 <main+0x848>)
 800304e:	f00a fc1a 	bl	800d886 <f_puts>
		  		  	  f_puts(str2 , &fil);
 8003052:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003056:	4935      	ldr	r1, [pc, #212]	; (800312c <main+0x844>)
 8003058:	4618      	mov	r0, r3
 800305a:	f00a fc14 	bl	800d886 <f_puts>
		  		  	  f_puts("  ", &fil);
 800305e:	4933      	ldr	r1, [pc, #204]	; (800312c <main+0x844>)
 8003060:	4833      	ldr	r0, [pc, #204]	; (8003130 <main+0x848>)
 8003062:	f00a fc10 	bl	800d886 <f_puts>
		  		  	  f_puts(str3 , &fil);
 8003066:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800306a:	4930      	ldr	r1, [pc, #192]	; (800312c <main+0x844>)
 800306c:	4618      	mov	r0, r3
 800306e:	f00a fc0a 	bl	800d886 <f_puts>
		  		  	  f_puts( "  ", &fil);
 8003072:	492e      	ldr	r1, [pc, #184]	; (800312c <main+0x844>)
 8003074:	482e      	ldr	r0, [pc, #184]	; (8003130 <main+0x848>)
 8003076:	f00a fc06 	bl	800d886 <f_puts>
		  		  	  f_puts(str4 , &fil);
 800307a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800307e:	492b      	ldr	r1, [pc, #172]	; (800312c <main+0x844>)
 8003080:	4618      	mov	r0, r3
 8003082:	f00a fc00 	bl	800d886 <f_puts>
		  		  	  f_puts("  ", &fil);
 8003086:	4929      	ldr	r1, [pc, #164]	; (800312c <main+0x844>)
 8003088:	4829      	ldr	r0, [pc, #164]	; (8003130 <main+0x848>)
 800308a:	f00a fbfc 	bl	800d886 <f_puts>
		  		  	  f_puts(str5 , &fil);
 800308e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003092:	4926      	ldr	r1, [pc, #152]	; (800312c <main+0x844>)
 8003094:	4618      	mov	r0, r3
 8003096:	f00a fbf6 	bl	800d886 <f_puts>
		  		  	  f_puts("  ", &fil);
 800309a:	4924      	ldr	r1, [pc, #144]	; (800312c <main+0x844>)
 800309c:	4824      	ldr	r0, [pc, #144]	; (8003130 <main+0x848>)
 800309e:	f00a fbf2 	bl	800d886 <f_puts>
		  		  	  f_puts(str6 , &fil);
 80030a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80030a6:	4921      	ldr	r1, [pc, #132]	; (800312c <main+0x844>)
 80030a8:	4618      	mov	r0, r3
 80030aa:	f00a fbec 	bl	800d886 <f_puts>
		  		  	  f_puts( "  ", &fil);
 80030ae:	491f      	ldr	r1, [pc, #124]	; (800312c <main+0x844>)
 80030b0:	481f      	ldr	r0, [pc, #124]	; (8003130 <main+0x848>)
 80030b2:	f00a fbe8 	bl	800d886 <f_puts>
		  		  	  f_puts(str7 , &fil);
 80030b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030ba:	491c      	ldr	r1, [pc, #112]	; (800312c <main+0x844>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f00a fbe2 	bl	800d886 <f_puts>
		  		  	  f_puts("  ", &fil);
 80030c2:	491a      	ldr	r1, [pc, #104]	; (800312c <main+0x844>)
 80030c4:	481a      	ldr	r0, [pc, #104]	; (8003130 <main+0x848>)
 80030c6:	f00a fbde 	bl	800d886 <f_puts>
		  		  	  f_puts(str8 , &fil);
 80030ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80030ce:	4917      	ldr	r1, [pc, #92]	; (800312c <main+0x844>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f00a fbd8 	bl	800d886 <f_puts>
		  		  	  f_puts("  ", &fil);
 80030d6:	4915      	ldr	r1, [pc, #84]	; (800312c <main+0x844>)
 80030d8:	4815      	ldr	r0, [pc, #84]	; (8003130 <main+0x848>)
 80030da:	f00a fbd4 	bl	800d886 <f_puts>
		  		  	  f_puts(str9 , &fil);
 80030de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030e2:	4912      	ldr	r1, [pc, #72]	; (800312c <main+0x844>)
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00a fbce 	bl	800d886 <f_puts>
		  		  	  f_puts( "  ", &fil);
 80030ea:	4910      	ldr	r1, [pc, #64]	; (800312c <main+0x844>)
 80030ec:	4810      	ldr	r0, [pc, #64]	; (8003130 <main+0x848>)
 80030ee:	f00a fbca 	bl	800d886 <f_puts>
		  		  	  f_puts(str10 , &fil);
 80030f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80030f6:	490d      	ldr	r1, [pc, #52]	; (800312c <main+0x844>)
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00a fbc4 	bl	800d886 <f_puts>
		  		 	  f_puts( "  ", &fil);
 80030fe:	490b      	ldr	r1, [pc, #44]	; (800312c <main+0x844>)
 8003100:	480b      	ldr	r0, [pc, #44]	; (8003130 <main+0x848>)
 8003102:	f00a fbc0 	bl	800d886 <f_puts>
		  		  	  f_puts(str11 , &fil);
 8003106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800310a:	4908      	ldr	r1, [pc, #32]	; (800312c <main+0x844>)
 800310c:	4618      	mov	r0, r3
 800310e:	f00a fbba 	bl	800d886 <f_puts>
 8003112:	e00f      	b.n	8003134 <main+0x84c>
 8003114:	080100ac 	.word	0x080100ac
 8003118:	20002400 	.word	0x20002400
 800311c:	447a0000 	.word	0x447a0000
 8003120:	42c80000 	.word	0x42c80000
 8003124:	20000008 	.word	0x20000008
 8003128:	080100b4 	.word	0x080100b4
 800312c:	200011f8 	.word	0x200011f8
 8003130:	080100b8 	.word	0x080100b8
		  		 	  f_puts( "  ", &fil);
 8003134:	491a      	ldr	r1, [pc, #104]	; (80031a0 <main+0x8b8>)
 8003136:	481b      	ldr	r0, [pc, #108]	; (80031a4 <main+0x8bc>)
 8003138:	f00a fba5 	bl	800d886 <f_puts>
		  		 	  f_puts(str12 , &fil);
 800313c:	f107 0320 	add.w	r3, r7, #32
 8003140:	4917      	ldr	r1, [pc, #92]	; (80031a0 <main+0x8b8>)
 8003142:	4618      	mov	r0, r3
 8003144:	f00a fb9f 	bl	800d886 <f_puts>
		  		 	  f_puts( "  ", &fil);
 8003148:	4915      	ldr	r1, [pc, #84]	; (80031a0 <main+0x8b8>)
 800314a:	4816      	ldr	r0, [pc, #88]	; (80031a4 <main+0x8bc>)
 800314c:	f00a fb9b 	bl	800d886 <f_puts>
		  		 	  f_puts(str13, &fil);
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4912      	ldr	r1, [pc, #72]	; (80031a0 <main+0x8b8>)
 8003156:	4618      	mov	r0, r3
 8003158:	f00a fb95 	bl	800d886 <f_puts>
		  		 	  f_puts( "  ", &fil);
 800315c:	4910      	ldr	r1, [pc, #64]	; (80031a0 <main+0x8b8>)
 800315e:	4811      	ldr	r0, [pc, #68]	; (80031a4 <main+0x8bc>)
 8003160:	f00a fb91 	bl	800d886 <f_puts>
		  		  	  f_puts( "\n", &fil);
 8003164:	490e      	ldr	r1, [pc, #56]	; (80031a0 <main+0x8b8>)
 8003166:	4810      	ldr	r0, [pc, #64]	; (80031a8 <main+0x8c0>)
 8003168:	f00a fb8d 	bl	800d886 <f_puts>

		  		  	  count++;
 800316c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003170:	3301      	adds	r3, #1
 8003172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		  		  	  if (count>2500)
 8003176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800317a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800317e:	4293      	cmp	r3, r2
 8003180:	f77f ac3a 	ble.w	80029f8 <main+0x110>
		  		  	  {
		  		  		f_close(&fil);
 8003184:	4806      	ldr	r0, [pc, #24]	; (80031a0 <main+0x8b8>)
 8003186:	f00a fadd 	bl	800d744 <f_close>
		  		  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,GPIO_PIN_RESET);
 800318a:	2200      	movs	r2, #0
 800318c:	2108      	movs	r1, #8
 800318e:	4807      	ldr	r0, [pc, #28]	; (80031ac <main+0x8c4>)
 8003190:	f004 fcba 	bl	8007b08 <HAL_GPIO_WritePin>
		  		  		break;
 8003194:	bf00      	nop
 8003196:	2300      	movs	r3, #0
		  		  	  }

		 		    }

  /* USER CODE END 3 */
}
 8003198:	4618      	mov	r0, r3
 800319a:	37e0      	adds	r7, #224	; 0xe0
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200011f8 	.word	0x200011f8
 80031a4:	080100b8 	.word	0x080100b8
 80031a8:	080100bc 	.word	0x080100bc
 80031ac:	40020800 	.word	0x40020800

080031b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b094      	sub	sp, #80	; 0x50
 80031b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	2234      	movs	r2, #52	; 0x34
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f00b ff00 	bl	800efc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <SystemClock_Config+0xdc>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <SystemClock_Config+0xdc>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6413      	str	r3, [r2, #64]	; 0x40
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <SystemClock_Config+0xdc>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f0:	2300      	movs	r3, #0
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	4b26      	ldr	r3, [pc, #152]	; (8003290 <SystemClock_Config+0xe0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <SystemClock_Config+0xe0>)
 80031fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <SystemClock_Config+0xe0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800320c:	2301      	movs	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003210:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003214:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003216:	2302      	movs	r3, #2
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800321a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003220:	230c      	movs	r3, #12
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003224:	23b4      	movs	r3, #180	; 0xb4
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003228:	2302      	movs	r3, #2
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800322c:	2302      	movs	r3, #2
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003230:	2302      	movs	r3, #2
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4618      	mov	r0, r3
 800323a:	f006 f8bf 	bl	80093bc <HAL_RCC_OscConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003244:	f000 fa02 	bl	800364c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003248:	f005 fdb8 	bl	8008dbc <HAL_PWREx_EnableOverDrive>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003252:	f000 f9fb 	bl	800364c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003256:	230f      	movs	r3, #15
 8003258:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800325a:	2302      	movs	r3, #2
 800325c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003266:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800326c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	2105      	movs	r1, #5
 8003274:	4618      	mov	r0, r3
 8003276:	f005 fdf1 	bl	8008e5c <HAL_RCC_ClockConfig>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003280:	f000 f9e4 	bl	800364c <Error_Handler>
  }
}
 8003284:	bf00      	nop
 8003286:	3750      	adds	r7, #80	; 0x50
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000

08003294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800329a:	463b      	mov	r3, r7
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80032a6:	4b21      	ldr	r3, [pc, #132]	; (800332c <MX_ADC1_Init+0x98>)
 80032a8:	4a21      	ldr	r2, [pc, #132]	; (8003330 <MX_ADC1_Init+0x9c>)
 80032aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032ac:	4b1f      	ldr	r3, [pc, #124]	; (800332c <MX_ADC1_Init+0x98>)
 80032ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <MX_ADC1_Init+0x98>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80032ba:	4b1c      	ldr	r3, [pc, #112]	; (800332c <MX_ADC1_Init+0x98>)
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <MX_ADC1_Init+0x98>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <MX_ADC1_Init+0x98>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <MX_ADC1_Init+0x98>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <MX_ADC1_Init+0x98>)
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <MX_ADC1_Init+0xa0>)
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <MX_ADC1_Init+0x98>)
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <MX_ADC1_Init+0x98>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <MX_ADC1_Init+0x98>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032ee:	4b0f      	ldr	r3, [pc, #60]	; (800332c <MX_ADC1_Init+0x98>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <MX_ADC1_Init+0x98>)
 80032f6:	f003 feef 	bl	80070d8 <HAL_ADC_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003300:	f000 f9a4 	bl	800364c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003304:	2301      	movs	r3, #1
 8003306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003308:	2301      	movs	r3, #1
 800330a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003310:	463b      	mov	r3, r7
 8003312:	4619      	mov	r1, r3
 8003314:	4805      	ldr	r0, [pc, #20]	; (800332c <MX_ADC1_Init+0x98>)
 8003316:	f003 ff23 	bl	8007160 <HAL_ADC_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003320:	f000 f994 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20002228 	.word	0x20002228
 8003330:	40012000 	.word	0x40012000
 8003334:	0f000001 	.word	0x0f000001

08003338 <MX_I2C2_Init>:
  * @param None
  * @retval None
  */

static void MX_I2C2_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <MX_I2C2_Init+0x50>)
 800333e:	4a13      	ldr	r2, [pc, #76]	; (800338c <MX_I2C2_Init+0x54>)
 8003340:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <MX_I2C2_Init+0x50>)
 8003344:	4a12      	ldr	r2, [pc, #72]	; (8003390 <MX_I2C2_Init+0x58>)
 8003346:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <MX_I2C2_Init+0x50>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <MX_I2C2_Init+0x50>)
 8003350:	2200      	movs	r2, #0
 8003352:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <MX_I2C2_Init+0x50>)
 8003356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800335a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <MX_I2C2_Init+0x50>)
 800335e:	2200      	movs	r2, #0
 8003360:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <MX_I2C2_Init+0x50>)
 8003364:	2200      	movs	r2, #0
 8003366:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <MX_I2C2_Init+0x50>)
 800336a:	2200      	movs	r2, #0
 800336c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800336e:	4b06      	ldr	r3, [pc, #24]	; (8003388 <MX_I2C2_Init+0x50>)
 8003370:	2200      	movs	r2, #0
 8003372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003374:	4804      	ldr	r0, [pc, #16]	; (8003388 <MX_I2C2_Init+0x50>)
 8003376:	f004 fbe1 	bl	8007b3c <HAL_I2C_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003380:	f000 f964 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003384:	bf00      	nop
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20002270 	.word	0x20002270
 800338c:	40005800 	.word	0x40005800
 8003390:	000186a0 	.word	0x000186a0

08003394 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <MX_I2C3_Init+0x50>)
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <MX_I2C3_Init+0x54>)
 800339c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033a0:	4a12      	ldr	r2, [pc, #72]	; (80033ec <MX_I2C3_Init+0x58>)
 80033a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <MX_I2C3_Init+0x50>)
 80033d2:	f004 fbb3 	bl	8007b3c <HAL_I2C_Init>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80033dc:	f000 f936 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	200022c4 	.word	0x200022c4
 80033e8:	40005c00 	.word	0x40005c00
 80033ec:	00061a80 	.word	0x00061a80

080033f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033f4:	4b17      	ldr	r3, [pc, #92]	; (8003454 <MX_SPI1_Init+0x64>)
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <MX_SPI1_Init+0x68>)
 80033f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <MX_SPI1_Init+0x64>)
 80033fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <MX_SPI1_Init+0x64>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <MX_SPI1_Init+0x64>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <MX_SPI1_Init+0x64>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <MX_SPI1_Init+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800341a:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <MX_SPI1_Init+0x64>)
 800341c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003420:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <MX_SPI1_Init+0x64>)
 8003424:	2200      	movs	r2, #0
 8003426:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <MX_SPI1_Init+0x64>)
 800342a:	2200      	movs	r2, #0
 800342c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_SPI1_Init+0x64>)
 8003430:	2200      	movs	r2, #0
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <MX_SPI1_Init+0x64>)
 8003436:	2200      	movs	r2, #0
 8003438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <MX_SPI1_Init+0x64>)
 800343c:	220a      	movs	r2, #10
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003440:	4804      	ldr	r0, [pc, #16]	; (8003454 <MX_SPI1_Init+0x64>)
 8003442:	f006 fa59 	bl	80098f8 <HAL_SPI_Init>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800344c:	f000 f8fe 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20002318 	.word	0x20002318
 8003458:	40013000 	.word	0x40013000

0800345c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003470:	463b      	mov	r3, r7
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003478:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <MX_TIM3_Init+0x94>)
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <MX_TIM3_Init+0x98>)
 800347c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17999;
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <MX_TIM3_Init+0x94>)
 8003480:	f244 624f 	movw	r2, #17999	; 0x464f
 8003484:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003486:	4b1a      	ldr	r3, [pc, #104]	; (80034f0 <MX_TIM3_Init+0x94>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800348c:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <MX_TIM3_Init+0x94>)
 800348e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003492:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003494:	4b16      	ldr	r3, [pc, #88]	; (80034f0 <MX_TIM3_Init+0x94>)
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <MX_TIM3_Init+0x94>)
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034a0:	4813      	ldr	r0, [pc, #76]	; (80034f0 <MX_TIM3_Init+0x94>)
 80034a2:	f006 fe5b 	bl	800a15c <HAL_TIM_Base_Init>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80034ac:	f000 f8ce 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	4619      	mov	r1, r3
 80034bc:	480c      	ldr	r0, [pc, #48]	; (80034f0 <MX_TIM3_Init+0x94>)
 80034be:	f007 f815 	bl	800a4ec <HAL_TIM_ConfigClockSource>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80034c8:	f000 f8c0 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034cc:	2300      	movs	r3, #0
 80034ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034d4:	463b      	mov	r3, r7
 80034d6:	4619      	mov	r1, r3
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <MX_TIM3_Init+0x94>)
 80034da:	f007 fa31 	bl	800a940 <HAL_TIMEx_MasterConfigSynchronization>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80034e4:	f000 f8b2 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80034e8:	bf00      	nop
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20002370 	.word	0x20002370
 80034f4:	40000400 	.word	0x40000400

080034f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <MX_TIM10_Init+0x40>)
 80034fe:	4a0f      	ldr	r2, [pc, #60]	; (800353c <MX_TIM10_Init+0x44>)
 8003500:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 17999;
 8003502:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <MX_TIM10_Init+0x40>)
 8003504:	f244 624f 	movw	r2, #17999	; 0x464f
 8003508:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <MX_TIM10_Init+0x40>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <MX_TIM10_Init+0x40>)
 8003512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003516:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <MX_TIM10_Init+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <MX_TIM10_Init+0x40>)
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003524:	4804      	ldr	r0, [pc, #16]	; (8003538 <MX_TIM10_Init+0x40>)
 8003526:	f006 fe19 	bl	800a15c <HAL_TIM_Base_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003530:	f000 f88c 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200023b8 	.word	0x200023b8
 800353c:	40014400 	.word	0x40014400

08003540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <MX_GPIO_Init+0xcc>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <MX_GPIO_Init+0xcc>)
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <MX_GPIO_Init+0xcc>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <MX_GPIO_Init+0xcc>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a24      	ldr	r2, [pc, #144]	; (800360c <MX_GPIO_Init+0xcc>)
 800357c:	f043 0304 	orr.w	r3, r3, #4
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <MX_GPIO_Init+0xcc>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <MX_GPIO_Init+0xcc>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <MX_GPIO_Init+0xcc>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6313      	str	r3, [r2, #48]	; 0x30
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <MX_GPIO_Init+0xcc>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <MX_GPIO_Init+0xcc>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <MX_GPIO_Init+0xcc>)
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <MX_GPIO_Init+0xcc>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2108      	movs	r1, #8
 80035ca:	4811      	ldr	r0, [pc, #68]	; (8003610 <MX_GPIO_Init+0xd0>)
 80035cc:	f004 fa9c 	bl	8007b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035d0:	2308      	movs	r3, #8
 80035d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	4619      	mov	r1, r3
 80035e6:	480a      	ldr	r0, [pc, #40]	; (8003610 <MX_GPIO_Init+0xd0>)
 80035e8:	f004 f8fa 	bl	80077e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80035ec:	2318      	movs	r3, #24
 80035ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4619      	mov	r1, r3
 80035fe:	4805      	ldr	r0, [pc, #20]	; (8003614 <MX_GPIO_Init+0xd4>)
 8003600:	f004 f8ee 	bl	80077e0 <HAL_GPIO_Init>

}
 8003604:	bf00      	nop
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	40020800 	.word	0x40020800
 8003614:	40020400 	.word	0x40020400

08003618 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim10 )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d106      	bne.n	8003636 <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    total_time+=65535;
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003630:	33ff      	adds	r3, #255	; 0xff
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003634:	6013      	str	r3, [r2, #0]
  }
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	200023b8 	.word	0x200023b8
 8003648:	20000008 	.word	0x20000008

0800364c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003650:	b672      	cpsid	i
}
 8003652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003654:	e7fe      	b.n	8003654 <Error_Handler+0x8>
	...

08003658 <MPU9255_Init>:

//===================================================================================================================
//====== MAIN INIT FUNCTION
//===================================================================================================================

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx){
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af04      	add	r7, sp, #16
 800365e:	6078      	str	r0, [r7, #4]
	//pre-def. vars
	uint8_t readData;
	uint8_t writeData;
	printf("**************************** \r\n");
 8003660:	482e      	ldr	r0, [pc, #184]	; (800371c <MPU9255_Init+0xc4>)
 8003662:	f00b fe05 	bl	800f270 <puts>
	printf("MPU9250 STM32 Implementation \r\n");
 8003666:	482e      	ldr	r0, [pc, #184]	; (8003720 <MPU9255_Init+0xc8>)
 8003668:	f00b fe02 	bl	800f270 <puts>
	printf("**************************** \r\n");
 800366c:	482b      	ldr	r0, [pc, #172]	; (800371c <MPU9255_Init+0xc4>)
 800366e:	f00b fdff 	bl	800f270 <puts>

	//read MPU9255 WHOAMI
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, WHO_AM_I_MPU9250, 1, &readData, 1, i2c_timeout);
 8003672:	2364      	movs	r3, #100	; 0x64
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	2301      	movs	r3, #1
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	f107 030f 	add.w	r3, r7, #15
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	2301      	movs	r3, #1
 8003682:	2275      	movs	r2, #117	; 0x75
 8003684:	21d0      	movs	r1, #208	; 0xd0
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f004 fd94 	bl	80081b4 <HAL_I2C_Mem_Read>

	if (SerialDebugA) {printf("MPU -WHO AM I- is: (Must return 113) %d\r\n", readData);}

	if (readData == 113) {
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b71      	cmp	r3, #113	; 0x71
 8003690:	d13e      	bne.n	8003710 <MPU9255_Init+0xb8>

		//Start by performing self test and reporting values
		MPU9250SelfTest(I2Cx, SelfTest);
 8003692:	4924      	ldr	r1, [pc, #144]	; (8003724 <MPU9255_Init+0xcc>)
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f001 fc87 	bl	8004fa8 <MPU9250SelfTest>

		//Calibrate gyro and accelerometers, load biases in bias registers
		calibrateMPU9250(I2Cx, gyroBias, accelBias);
 800369a:	4a23      	ldr	r2, [pc, #140]	; (8003728 <MPU9255_Init+0xd0>)
 800369c:	4923      	ldr	r1, [pc, #140]	; (800372c <MPU9255_Init+0xd4>)
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f001 f85c 	bl	800475c <calibrateMPU9250>
		HAL_Delay(1000);
 80036a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036a8:	f003 fcf2 	bl	8007090 <HAL_Delay>

		//init Gyro and Accelerometer
		initMPU9250(I2Cx);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 ff61 	bl	8004574 <initMPU9250>

		//enable Mag bypass
		writeData = 0x22;
 80036b2:	2322      	movs	r3, #34	; 0x22
 80036b4:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_PIN_CFG, 1, &writeData, 1, i2c_timeout);
 80036b6:	2364      	movs	r3, #100	; 0x64
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	2301      	movs	r3, #1
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	f107 030e 	add.w	r3, r7, #14
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2301      	movs	r3, #1
 80036c6:	2237      	movs	r2, #55	; 0x37
 80036c8:	21d0      	movs	r1, #208	; 0xd0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f004 fc78 	bl	8007fc0 <HAL_I2C_Mem_Write>

		//Read the WHO_AM_I register of the magnetometer
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_WHO_AM_I, 1, &readData, 1, i2c_timeout);// Read WHO_AM_I register for AK8963
 80036d0:	2364      	movs	r3, #100	; 0x64
 80036d2:	9302      	str	r3, [sp, #8]
 80036d4:	2301      	movs	r3, #1
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	f107 030f 	add.w	r3, r7, #15
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2301      	movs	r3, #1
 80036e0:	2200      	movs	r2, #0
 80036e2:	2118      	movs	r1, #24
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f004 fd65 	bl	80081b4 <HAL_I2C_Mem_Read>
		if (SerialDebugA) {printf("MAG -WHO AM I- is: (Must return 72) %d\r\n", readData);}
		HAL_Delay(1000);
 80036ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036ee:	f003 fccf 	bl	8007090 <HAL_Delay>

		//Get magnetometer calibration from AK8963 ROM
		initAK8963(I2Cx, magCalibration);  // Initialize device for active mode read of magnetometer
 80036f2:	490f      	ldr	r1, [pc, #60]	; (8003730 <MPU9255_Init+0xd8>)
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fcf9 	bl	80040ec <initAK8963>

		calibrateMag(I2Cx, magBias, magScale);
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <MPU9255_Init+0xdc>)
 80036fc:	490e      	ldr	r1, [pc, #56]	; (8003738 <MPU9255_Init+0xe0>)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fddc 	bl	80042bc <calibrateMag>

		HAL_Delay(1000);
 8003704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003708:	f003 fcc2 	bl	8007090 <HAL_Delay>
		return 0;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <MPU9255_Init+0xba>
	}
	return 1; // Loop forever if communication doesn't happen
 8003710:	2301      	movs	r3, #1
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	080100c0 	.word	0x080100c0
 8003720:	080100e0 	.word	0x080100e0
 8003724:	20002490 	.word	0x20002490
 8003728:	2000246c 	.word	0x2000246c
 800372c:	20002460 	.word	0x20002460
 8003730:	20002454 	.word	0x20002454
 8003734:	20002484 	.word	0x20002484
 8003738:	20002478 	.word	0x20002478
 800373c:	00000000 	.word	0x00000000

08003740 <readAll>:

void readAll(I2C_HandleTypeDef *I2Cx, MPU9255_t*DataStruct) {
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	ed2d 8b04 	vpush	{d8-d9}
 8003746:	b088      	sub	sp, #32
 8003748:	af04      	add	r7, sp, #16
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	uint8_t Data;

	// If intPin goes high, all data registers have new data
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, INT_STATUS, 1, &Data, 1, i2c_timeout);
 800374e:	2364      	movs	r3, #100	; 0x64
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	2301      	movs	r3, #1
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	f107 030f 	add.w	r3, r7, #15
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2301      	movs	r3, #1
 800375e:	223a      	movs	r2, #58	; 0x3a
 8003760:	21d0      	movs	r1, #208	; 0xd0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f004 fd26 	bl	80081b4 <HAL_I2C_Mem_Read>
	if (Data & 0x01) {  // On interrupt, check if data ready interrupt
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80fc 	beq.w	800396c <readAll+0x22c>
		readAccelData(I2Cx, accelCount);  // Read the x/y/z adc values
 8003774:	49c0      	ldr	r1, [pc, #768]	; (8003a78 <readAll+0x338>)
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fc06 	bl	8003f88 <readAccelData>
		getAres();
 800377c:	f000 fb94 	bl	8003ea8 <getAres>

		// Now we'll calculate the accleration value into actual g's
		ax = (float)accelCount[0]*aRes; // - accelBias[0];  // get actual g value, this depends on scale being set
 8003780:	4bbd      	ldr	r3, [pc, #756]	; (8003a78 <readAll+0x338>)
 8003782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800378e:	4bbb      	ldr	r3, [pc, #748]	; (8003a7c <readAll+0x33c>)
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003798:	4bb9      	ldr	r3, [pc, #740]	; (8003a80 <readAll+0x340>)
 800379a:	edc3 7a00 	vstr	s15, [r3]
		ay = (float)accelCount[1]*aRes; // - accelBias[1];
 800379e:	4bb6      	ldr	r3, [pc, #728]	; (8003a78 <readAll+0x338>)
 80037a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037a4:	ee07 3a90 	vmov	s15, r3
 80037a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ac:	4bb3      	ldr	r3, [pc, #716]	; (8003a7c <readAll+0x33c>)
 80037ae:	edd3 7a00 	vldr	s15, [r3]
 80037b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b6:	4bb3      	ldr	r3, [pc, #716]	; (8003a84 <readAll+0x344>)
 80037b8:	edc3 7a00 	vstr	s15, [r3]
		az = (float)accelCount[2]*aRes; // - accelBias[2];
 80037bc:	4bae      	ldr	r3, [pc, #696]	; (8003a78 <readAll+0x338>)
 80037be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80037c2:	ee07 3a90 	vmov	s15, r3
 80037c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ca:	4bac      	ldr	r3, [pc, #688]	; (8003a7c <readAll+0x33c>)
 80037cc:	edd3 7a00 	vldr	s15, [r3]
 80037d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d4:	4bac      	ldr	r3, [pc, #688]	; (8003a88 <readAll+0x348>)
 80037d6:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->AccelX = ax;
 80037da:	4ba9      	ldr	r3, [pc, #676]	; (8003a80 <readAll+0x340>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	601a      	str	r2, [r3, #0]
		DataStruct->AccelY = ay;
 80037e2:	4ba8      	ldr	r3, [pc, #672]	; (8003a84 <readAll+0x344>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	605a      	str	r2, [r3, #4]
		DataStruct->AccelZ = az;
 80037ea:	4ba7      	ldr	r3, [pc, #668]	; (8003a88 <readAll+0x348>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	609a      	str	r2, [r3, #8]

		readGyroData(I2Cx, gyroCount);  // Read the x/y/z adc values
 80037f2:	49a6      	ldr	r1, [pc, #664]	; (8003a8c <readAll+0x34c>)
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fbfa 	bl	8003fee <readGyroData>
		getGres();
 80037fa:	f000 fb21 	bl	8003e40 <getGres>

		// Calculate the gyro value into actual degrees per second
		gx = (float)gyroCount[0]*gRes;  // get actual gyro value, this depends on scale being set
 80037fe:	4ba3      	ldr	r3, [pc, #652]	; (8003a8c <readAll+0x34c>)
 8003800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	4ba0      	ldr	r3, [pc, #640]	; (8003a90 <readAll+0x350>)
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003816:	4b9f      	ldr	r3, [pc, #636]	; (8003a94 <readAll+0x354>)
 8003818:	edc3 7a00 	vstr	s15, [r3]
		gy = (float)gyroCount[1]*gRes;
 800381c:	4b9b      	ldr	r3, [pc, #620]	; (8003a8c <readAll+0x34c>)
 800381e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800382a:	4b99      	ldr	r3, [pc, #612]	; (8003a90 <readAll+0x350>)
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003834:	4b98      	ldr	r3, [pc, #608]	; (8003a98 <readAll+0x358>)
 8003836:	edc3 7a00 	vstr	s15, [r3]
		gz = (float)gyroCount[2]*gRes;
 800383a:	4b94      	ldr	r3, [pc, #592]	; (8003a8c <readAll+0x34c>)
 800383c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003848:	4b91      	ldr	r3, [pc, #580]	; (8003a90 <readAll+0x350>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	4b92      	ldr	r3, [pc, #584]	; (8003a9c <readAll+0x35c>)
 8003854:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->GyroX = gx;
 8003858:	4b8e      	ldr	r3, [pc, #568]	; (8003a94 <readAll+0x354>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	60da      	str	r2, [r3, #12]
		DataStruct->GyroY = gy;
 8003860:	4b8d      	ldr	r3, [pc, #564]	; (8003a98 <readAll+0x358>)
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	611a      	str	r2, [r3, #16]
		DataStruct->GyroZ = gz;
 8003868:	4b8c      	ldr	r3, [pc, #560]	; (8003a9c <readAll+0x35c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	615a      	str	r2, [r3, #20]

		readMagData(I2Cx, magCount);  // Read the x/y/z adc values
 8003870:	498b      	ldr	r1, [pc, #556]	; (8003aa0 <readAll+0x360>)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fbee 	bl	8004054 <readMagData>
		getMres();
 8003878:	f000 fac4 	bl	8003e04 <getMres>

		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float)magCount[0]*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 800387c:	4b88      	ldr	r3, [pc, #544]	; (8003aa0 <readAll+0x360>)
 800387e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800388a:	4b86      	ldr	r3, [pc, #536]	; (8003aa4 <readAll+0x364>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003894:	4b84      	ldr	r3, [pc, #528]	; (8003aa8 <readAll+0x368>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800389e:	4b83      	ldr	r3, [pc, #524]	; (8003aac <readAll+0x36c>)
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <readAll+0x370>)
 80038aa:	edc3 7a00 	vstr	s15, [r3]
		my = (float)magCount[1]*mRes*magCalibration[1] - magBias[1];
 80038ae:	4b7c      	ldr	r3, [pc, #496]	; (8003aa0 <readAll+0x360>)
 80038b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038bc:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <readAll+0x364>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c6:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <readAll+0x368>)
 80038c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80038cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d0:	4b76      	ldr	r3, [pc, #472]	; (8003aac <readAll+0x36c>)
 80038d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <readAll+0x374>)
 80038dc:	edc3 7a00 	vstr	s15, [r3]
		mz = (float)magCount[2]*mRes*magCalibration[2] - magBias[2];
 80038e0:	4b6f      	ldr	r3, [pc, #444]	; (8003aa0 <readAll+0x360>)
 80038e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038ee:	4b6d      	ldr	r3, [pc, #436]	; (8003aa4 <readAll+0x364>)
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f8:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <readAll+0x368>)
 80038fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80038fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003902:	4b6a      	ldr	r3, [pc, #424]	; (8003aac <readAll+0x36c>)
 8003904:	edd3 7a02 	vldr	s15, [r3, #8]
 8003908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390c:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <readAll+0x378>)
 800390e:	edc3 7a00 	vstr	s15, [r3]
		mx *= magScale[0];
 8003912:	4b6a      	ldr	r3, [pc, #424]	; (8003abc <readAll+0x37c>)
 8003914:	ed93 7a00 	vldr	s14, [r3]
 8003918:	4b65      	ldr	r3, [pc, #404]	; (8003ab0 <readAll+0x370>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <readAll+0x370>)
 8003924:	edc3 7a00 	vstr	s15, [r3]
		my *= magScale[1];
 8003928:	4b64      	ldr	r3, [pc, #400]	; (8003abc <readAll+0x37c>)
 800392a:	ed93 7a01 	vldr	s14, [r3, #4]
 800392e:	4b61      	ldr	r3, [pc, #388]	; (8003ab4 <readAll+0x374>)
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003938:	4b5e      	ldr	r3, [pc, #376]	; (8003ab4 <readAll+0x374>)
 800393a:	edc3 7a00 	vstr	s15, [r3]
		mz *= magScale[2];
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <readAll+0x37c>)
 8003940:	ed93 7a02 	vldr	s14, [r3, #8]
 8003944:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <readAll+0x378>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394e:	4b5a      	ldr	r3, [pc, #360]	; (8003ab8 <readAll+0x378>)
 8003950:	edc3 7a00 	vstr	s15, [r3]

		DataStruct->MagX = mx;
 8003954:	4b56      	ldr	r3, [pc, #344]	; (8003ab0 <readAll+0x370>)
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	619a      	str	r2, [r3, #24]
		DataStruct->MagY = my;
 800395c:	4b55      	ldr	r3, [pc, #340]	; (8003ab4 <readAll+0x374>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	61da      	str	r2, [r3, #28]
		DataStruct->MagZ = mz;
 8003964:	4b54      	ldr	r3, [pc, #336]	; (8003ab8 <readAll+0x378>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	621a      	str	r2, [r3, #32]
	}

	//Now = __HAL_TIM_GET_COUNTER(&htim1);
	Now = HAL_GetTick();
 800396c:	f003 fb84 	bl	8007078 <HAL_GetTick>
 8003970:	4603      	mov	r3, r0
 8003972:	4a53      	ldr	r2, [pc, #332]	; (8003ac0 <readAll+0x380>)
 8003974:	6013      	str	r3, [r2, #0]
	deltat = ((Now - lastUpdate)/1000.0f); // set integration time by time elapsed since last filter update
 8003976:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <readAll+0x380>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <readAll+0x384>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003988:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ac8 <readAll+0x388>
 800398c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003990:	4b4e      	ldr	r3, [pc, #312]	; (8003acc <readAll+0x38c>)
 8003992:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8003996:	4b4a      	ldr	r3, [pc, #296]	; (8003ac0 <readAll+0x380>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <readAll+0x384>)
 800399c:	6013      	str	r3, [r2, #0]
	sum += deltat; // sum for averaging filter update rate
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <readAll+0x390>)
 80039a0:	ed93 7a00 	vldr	s14, [r3]
 80039a4:	4b49      	ldr	r3, [pc, #292]	; (8003acc <readAll+0x38c>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ae:	4b48      	ldr	r3, [pc, #288]	; (8003ad0 <readAll+0x390>)
 80039b0:	edc3 7a00 	vstr	s15, [r3]

	// Calculate quaternions based on Madgwick's filter
	//Since MPU9250's mag. and IMU modules are different and seperate (AK8963 and MPU6050), their...
	//...coordinate systems also different. So, to compensate this, order should be my - mx - mz
	//QuaternionUpdate(-ax, ay, az, gx*PI/180.0f, -gy*PI/180.0f, -gz*PI/180.0f,  my,  -mx, mz);
	QuaternionUpdate(ax, ay, az, gx*PI/180.0f, gy*PI/180.0f, gz*PI/180.0f,  my,  mx, mz);
 80039b4:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <readAll+0x340>)
 80039b6:	ed93 8a00 	vldr	s16, [r3]
 80039ba:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <readAll+0x344>)
 80039bc:	edd3 8a00 	vldr	s17, [r3]
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <readAll+0x348>)
 80039c2:	ed93 9a00 	vldr	s18, [r3]
 80039c6:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <readAll+0x354>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fc fdd4 	bl	8000578 <__aeabi_f2d>
 80039d0:	a327      	add	r3, pc, #156	; (adr r3, 8003a70 <readAll+0x330>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fe27 	bl	8000628 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <readAll+0x394>)
 80039e8:	f7fc ff48 	bl	800087c <__aeabi_ddiv>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	f7fd f910 	bl	8000c18 <__aeabi_d2f>
 80039f8:	4604      	mov	r4, r0
 80039fa:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <readAll+0x358>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fc fdba 	bl	8000578 <__aeabi_f2d>
 8003a04:	a31a      	add	r3, pc, #104	; (adr r3, 8003a70 <readAll+0x330>)
 8003a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0a:	f7fc fe0d 	bl	8000628 <__aeabi_dmul>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4610      	mov	r0, r2
 8003a14:	4619      	mov	r1, r3
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <readAll+0x394>)
 8003a1c:	f7fc ff2e 	bl	800087c <__aeabi_ddiv>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fd f8f6 	bl	8000c18 <__aeabi_d2f>
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <readAll+0x35c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fc fda0 	bl	8000578 <__aeabi_f2d>
 8003a38:	a30d      	add	r3, pc, #52	; (adr r3, 8003a70 <readAll+0x330>)
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f7fc fdf3 	bl	8000628 <__aeabi_dmul>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	4b21      	ldr	r3, [pc, #132]	; (8003ad4 <readAll+0x394>)
 8003a50:	f7fc ff14 	bl	800087c <__aeabi_ddiv>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f8dc 	bl	8000c18 <__aeabi_d2f>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <readAll+0x374>)
 8003a64:	edd3 7a00 	vldr	s15, [r3]
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <readAll+0x370>)
 8003a6a:	ed93 7a00 	vldr	s14, [r3]
 8003a6e:	e033      	b.n	8003ad8 <readAll+0x398>
 8003a70:	35f80991 	.word	0x35f80991
 8003a74:	40092492 	.word	0x40092492
 8003a78:	2000243c 	.word	0x2000243c
 8003a7c:	20002430 	.word	0x20002430
 8003a80:	200024c4 	.word	0x200024c4
 8003a84:	200024c8 	.word	0x200024c8
 8003a88:	200024cc 	.word	0x200024cc
 8003a8c:	20002444 	.word	0x20002444
 8003a90:	20002434 	.word	0x20002434
 8003a94:	200024d0 	.word	0x200024d0
 8003a98:	200024d4 	.word	0x200024d4
 8003a9c:	200024d8 	.word	0x200024d8
 8003aa0:	2000244c 	.word	0x2000244c
 8003aa4:	20002438 	.word	0x20002438
 8003aa8:	20002454 	.word	0x20002454
 8003aac:	20002478 	.word	0x20002478
 8003ab0:	200024dc 	.word	0x200024dc
 8003ab4:	200024e0 	.word	0x200024e0
 8003ab8:	200024e4 	.word	0x200024e4
 8003abc:	20002484 	.word	0x20002484
 8003ac0:	200024c0 	.word	0x200024c0
 8003ac4:	200024bc 	.word	0x200024bc
 8003ac8:	447a0000 	.word	0x447a0000
 8003acc:	200024b4 	.word	0x200024b4
 8003ad0:	200024b8 	.word	0x200024b8
 8003ad4:	40668000 	.word	0x40668000
 8003ad8:	4bb7      	ldr	r3, [pc, #732]	; (8003db8 <readAll+0x678>)
 8003ada:	edd3 6a00 	vldr	s13, [r3]
 8003ade:	eeb0 4a66 	vmov.f32	s8, s13
 8003ae2:	eef0 3a47 	vmov.f32	s7, s14
 8003ae6:	eeb0 3a67 	vmov.f32	s6, s15
 8003aea:	ee02 2a90 	vmov	s5, r2
 8003aee:	ee02 5a10 	vmov	s4, r5
 8003af2:	ee01 4a90 	vmov	s3, r4
 8003af6:	eeb0 1a49 	vmov.f32	s2, s18
 8003afa:	eef0 0a68 	vmov.f32	s1, s17
 8003afe:	eeb0 0a48 	vmov.f32	s0, s16
 8003b02:	f001 ff45 	bl	8005990 <QuaternionUpdate>

	// Convert quaternions to Euler angles
	a12 =   2.0f * (q[1] * q[2] + q[0] * q[3]);
 8003b06:	4bad      	ldr	r3, [pc, #692]	; (8003dbc <readAll+0x67c>)
 8003b08:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b0c:	4bab      	ldr	r3, [pc, #684]	; (8003dbc <readAll+0x67c>)
 8003b0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b16:	4ba9      	ldr	r3, [pc, #676]	; (8003dbc <readAll+0x67c>)
 8003b18:	edd3 6a00 	vldr	s13, [r3]
 8003b1c:	4ba7      	ldr	r3, [pc, #668]	; (8003dbc <readAll+0x67c>)
 8003b1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b2e:	4ba4      	ldr	r3, [pc, #656]	; (8003dc0 <readAll+0x680>)
 8003b30:	edc3 7a00 	vstr	s15, [r3]
	a22 =   q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3];
 8003b34:	4ba1      	ldr	r3, [pc, #644]	; (8003dbc <readAll+0x67c>)
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	4ba0      	ldr	r3, [pc, #640]	; (8003dbc <readAll+0x67c>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b44:	4b9d      	ldr	r3, [pc, #628]	; (8003dbc <readAll+0x67c>)
 8003b46:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b4a:	4b9c      	ldr	r3, [pc, #624]	; (8003dbc <readAll+0x67c>)
 8003b4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b58:	4b98      	ldr	r3, [pc, #608]	; (8003dbc <readAll+0x67c>)
 8003b5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b5e:	4b97      	ldr	r3, [pc, #604]	; (8003dbc <readAll+0x67c>)
 8003b60:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b6c:	4b93      	ldr	r3, [pc, #588]	; (8003dbc <readAll+0x67c>)
 8003b6e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b72:	4b92      	ldr	r3, [pc, #584]	; (8003dbc <readAll+0x67c>)
 8003b74:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b80:	4b90      	ldr	r3, [pc, #576]	; (8003dc4 <readAll+0x684>)
 8003b82:	edc3 7a00 	vstr	s15, [r3]
	a31 =   2.0f * (q[0] * q[1] + q[2] * q[3]);
 8003b86:	4b8d      	ldr	r3, [pc, #564]	; (8003dbc <readAll+0x67c>)
 8003b88:	ed93 7a00 	vldr	s14, [r3]
 8003b8c:	4b8b      	ldr	r3, [pc, #556]	; (8003dbc <readAll+0x67c>)
 8003b8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b96:	4b89      	ldr	r3, [pc, #548]	; (8003dbc <readAll+0x67c>)
 8003b98:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b9c:	4b87      	ldr	r3, [pc, #540]	; (8003dbc <readAll+0x67c>)
 8003b9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bae:	4b86      	ldr	r3, [pc, #536]	; (8003dc8 <readAll+0x688>)
 8003bb0:	edc3 7a00 	vstr	s15, [r3]
	a32 =   2.0f * (q[1] * q[3] - q[0] * q[2]);
 8003bb4:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <readAll+0x67c>)
 8003bb6:	ed93 7a01 	vldr	s14, [r3, #4]
 8003bba:	4b80      	ldr	r3, [pc, #512]	; (8003dbc <readAll+0x67c>)
 8003bbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bc4:	4b7d      	ldr	r3, [pc, #500]	; (8003dbc <readAll+0x67c>)
 8003bc6:	edd3 6a00 	vldr	s13, [r3]
 8003bca:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <readAll+0x67c>)
 8003bcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bdc:	4b7b      	ldr	r3, [pc, #492]	; (8003dcc <readAll+0x68c>)
 8003bde:	edc3 7a00 	vstr	s15, [r3]
	a33 =   q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3];
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <readAll+0x67c>)
 8003be4:	ed93 7a00 	vldr	s14, [r3]
 8003be8:	4b74      	ldr	r3, [pc, #464]	; (8003dbc <readAll+0x67c>)
 8003bea:	edd3 7a00 	vldr	s15, [r3]
 8003bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bf2:	4b72      	ldr	r3, [pc, #456]	; (8003dbc <readAll+0x67c>)
 8003bf4:	edd3 6a01 	vldr	s13, [r3, #4]
 8003bf8:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <readAll+0x67c>)
 8003bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <readAll+0x67c>)
 8003c08:	edd3 6a02 	vldr	s13, [r3, #8]
 8003c0c:	4b6b      	ldr	r3, [pc, #428]	; (8003dbc <readAll+0x67c>)
 8003c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c1a:	4b68      	ldr	r3, [pc, #416]	; (8003dbc <readAll+0x67c>)
 8003c1c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <readAll+0x67c>)
 8003c22:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2e:	4b68      	ldr	r3, [pc, #416]	; (8003dd0 <readAll+0x690>)
 8003c30:	edc3 7a00 	vstr	s15, [r3]

	pitch = -asinf(a32);
 8003c34:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <readAll+0x68c>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c3e:	f00a f80b 	bl	800dc58 <asinf>
 8003c42:	eef0 7a40 	vmov.f32	s15, s0
 8003c46:	eef1 7a67 	vneg.f32	s15, s15
 8003c4a:	4b62      	ldr	r3, [pc, #392]	; (8003dd4 <readAll+0x694>)
 8003c4c:	edc3 7a00 	vstr	s15, [r3]
	roll  = atan2f(a31, a33);
 8003c50:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <readAll+0x688>)
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <readAll+0x690>)
 8003c58:	ed93 7a00 	vldr	s14, [r3]
 8003c5c:	eef0 0a47 	vmov.f32	s1, s14
 8003c60:	eeb0 0a67 	vmov.f32	s0, s15
 8003c64:	f00a f824 	bl	800dcb0 <atan2f>
 8003c68:	eef0 7a40 	vmov.f32	s15, s0
 8003c6c:	4b5a      	ldr	r3, [pc, #360]	; (8003dd8 <readAll+0x698>)
 8003c6e:	edc3 7a00 	vstr	s15, [r3]
	yaw   = atan2f(a12, a22);
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <readAll+0x680>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	4b52      	ldr	r3, [pc, #328]	; (8003dc4 <readAll+0x684>)
 8003c7a:	ed93 7a00 	vldr	s14, [r3]
 8003c7e:	eef0 0a47 	vmov.f32	s1, s14
 8003c82:	eeb0 0a67 	vmov.f32	s0, s15
 8003c86:	f00a f813 	bl	800dcb0 <atan2f>
 8003c8a:	eef0 7a40 	vmov.f32	s15, s0
 8003c8e:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <readAll+0x69c>)
 8003c90:	edc3 7a00 	vstr	s15, [r3]
	pitch *= 180.0f / PI;
 8003c94:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <readAll+0x694>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fc6d 	bl	8000578 <__aeabi_f2d>
 8003c9e:	a344      	add	r3, pc, #272	; (adr r3, 8003db0 <readAll+0x670>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc fcc0 	bl	8000628 <__aeabi_dmul>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7fc ffb2 	bl	8000c18 <__aeabi_d2f>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a47      	ldr	r2, [pc, #284]	; (8003dd4 <readAll+0x694>)
 8003cb8:	6013      	str	r3, [r2, #0]
	yaw   *= 180.0f / PI;
 8003cba:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <readAll+0x69c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc fc5a 	bl	8000578 <__aeabi_f2d>
 8003cc4:	a33a      	add	r3, pc, #232	; (adr r3, 8003db0 <readAll+0x670>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fcad 	bl	8000628 <__aeabi_dmul>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fc ff9f 	bl	8000c18 <__aeabi_d2f>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a3f      	ldr	r2, [pc, #252]	; (8003ddc <readAll+0x69c>)
 8003cde:	6013      	str	r3, [r2, #0]
	yaw   += 5.53f; // Declination
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <readAll+0x69c>)
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003de0 <readAll+0x6a0>
 8003cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cee:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <readAll+0x69c>)
 8003cf0:	edc3 7a00 	vstr	s15, [r3]

	if(yaw < 0) yaw   += 360.0f; // Ensure yaw stays between 0 and 360
 8003cf4:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <readAll+0x69c>)
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d509      	bpl.n	8003d18 <readAll+0x5d8>
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <readAll+0x69c>)
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003de4 <readAll+0x6a4>
 8003d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <readAll+0x69c>)
 8003d14:	edc3 7a00 	vstr	s15, [r3]
	roll  *= 180.0f / PI;
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <readAll+0x698>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fc fc2b 	bl	8000578 <__aeabi_f2d>
 8003d22:	a323      	add	r3, pc, #140	; (adr r3, 8003db0 <readAll+0x670>)
 8003d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d28:	f7fc fc7e 	bl	8000628 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	f7fc ff70 	bl	8000c18 <__aeabi_d2f>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <readAll+0x698>)
 8003d3c:	6013      	str	r3, [r2, #0]
	lin_ax = ax + a31;
 8003d3e:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <readAll+0x6a8>)
 8003d40:	ed93 7a00 	vldr	s14, [r3]
 8003d44:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <readAll+0x688>)
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4e:	4b27      	ldr	r3, [pc, #156]	; (8003dec <readAll+0x6ac>)
 8003d50:	edc3 7a00 	vstr	s15, [r3]
	lin_ay = ay + a32;
 8003d54:	4b26      	ldr	r3, [pc, #152]	; (8003df0 <readAll+0x6b0>)
 8003d56:	ed93 7a00 	vldr	s14, [r3]
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <readAll+0x68c>)
 8003d5c:	edd3 7a00 	vldr	s15, [r3]
 8003d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <readAll+0x6b4>)
 8003d66:	edc3 7a00 	vstr	s15, [r3]
	lin_az = az - a33;
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <readAll+0x6b8>)
 8003d6c:	ed93 7a00 	vldr	s14, [r3]
 8003d70:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <readAll+0x690>)
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <readAll+0x6bc>)
 8003d7c:	edc3 7a00 	vstr	s15, [r3]


	DataStruct->yaw = yaw;
 8003d80:	4b16      	ldr	r3, [pc, #88]	; (8003ddc <readAll+0x69c>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStruct->pitch = pitch;
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <readAll+0x694>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	625a      	str	r2, [r3, #36]	; 0x24
	DataStruct->roll = roll;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <readAll+0x698>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

	sum = 0;
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <readAll+0x6c0>)
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
	}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	ecbd 8b04 	vpop	{d8-d9}
 8003daa:	bdb0      	pop	{r4, r5, r7, pc}
 8003dac:	f3af 8000 	nop.w
 8003db0:	d0051a32 	.word	0xd0051a32
 8003db4:	404ca2e8 	.word	0x404ca2e8
 8003db8:	200024e4 	.word	0x200024e4
 8003dbc:	20000014 	.word	0x20000014
 8003dc0:	200024f4 	.word	0x200024f4
 8003dc4:	200024f8 	.word	0x200024f8
 8003dc8:	200024fc 	.word	0x200024fc
 8003dcc:	20002500 	.word	0x20002500
 8003dd0:	20002504 	.word	0x20002504
 8003dd4:	200024a8 	.word	0x200024a8
 8003dd8:	200024b0 	.word	0x200024b0
 8003ddc:	200024ac 	.word	0x200024ac
 8003de0:	40b0f5c3 	.word	0x40b0f5c3
 8003de4:	43b40000 	.word	0x43b40000
 8003de8:	200024c4 	.word	0x200024c4
 8003dec:	200024e8 	.word	0x200024e8
 8003df0:	200024c8 	.word	0x200024c8
 8003df4:	200024ec 	.word	0x200024ec
 8003df8:	200024cc 	.word	0x200024cc
 8003dfc:	200024f0 	.word	0x200024f0
 8003e00:	200024b8 	.word	0x200024b8

08003e04 <getMres>:

//==========================================================================================================
//====== FUNCTIONS TO READ AND WRITE DATA FROM REGISTERS AND ALSO INITS KALMAN AND QUATERNION FILTERS ======
//==========================================================================================================

void getMres() {
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  switch (Mscale)
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <getMres+0x2c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <getMres+0x12>
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d004      	beq.n	8003e1e <getMres+0x1a>
          break;
    case MFS_16BITS:
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8003e14:	e007      	b.n	8003e26 <getMres+0x22>
          mRes = 10.*4912./8190.; // Proper scale to return milliGauss
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <getMres+0x30>)
 8003e18:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <getMres+0x34>)
 8003e1a:	601a      	str	r2, [r3, #0]
          break;
 8003e1c:	e003      	b.n	8003e26 <getMres+0x22>
          mRes = 10.*4912./32760.0; // Proper scale to return milliGauss
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <getMres+0x30>)
 8003e20:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <getMres+0x38>)
 8003e22:	601a      	str	r2, [r3, #0]
          break;
 8003e24:	bf00      	nop
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	2000000e 	.word	0x2000000e
 8003e34:	20002438 	.word	0x20002438
 8003e38:	40bfebff 	.word	0x40bfebff
 8003e3c:	3fbfebff 	.word	0x3fbfebff

08003e40 <getGres>:

void getGres() {
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  switch (Gscale)
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <getGres+0x50>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d81b      	bhi.n	8003e84 <getGres+0x44>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <getGres+0x14>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e6d 	.word	0x08003e6d
 8003e5c:	08003e75 	.word	0x08003e75
 8003e60:	08003e7d 	.word	0x08003e7d
  {
  // Possible gyro scales (and their register bit settings) are:
  // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          gRes = 250.0/32768.0;
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <getGres+0x54>)
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <getGres+0x58>)
 8003e68:	601a      	str	r2, [r3, #0]
          break;
 8003e6a:	e00b      	b.n	8003e84 <getGres+0x44>
    case GFS_500DPS:
          gRes = 500.0/32768.0;
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <getGres+0x54>)
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <getGres+0x5c>)
 8003e70:	601a      	str	r2, [r3, #0]
          break;
 8003e72:	e007      	b.n	8003e84 <getGres+0x44>
    case GFS_1000DPS:
          gRes = 1000.0/32768.0;
 8003e74:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <getGres+0x54>)
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <getGres+0x60>)
 8003e78:	601a      	str	r2, [r3, #0]
          break;
 8003e7a:	e003      	b.n	8003e84 <getGres+0x44>
    case GFS_2000DPS:
          gRes = 2000.0/32768.0;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <getGres+0x54>)
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <getGres+0x64>)
 8003e80:	601a      	str	r2, [r3, #0]
          break;
 8003e82:	bf00      	nop
  }
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	2000000c 	.word	0x2000000c
 8003e94:	20002434 	.word	0x20002434
 8003e98:	3bfa0000 	.word	0x3bfa0000
 8003e9c:	3c7a0000 	.word	0x3c7a0000
 8003ea0:	3cfa0000 	.word	0x3cfa0000
 8003ea4:	3d7a0000 	.word	0x3d7a0000

08003ea8 <getAres>:

void getAres() {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  switch (Ascale)
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <getAres+0xc4>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d856      	bhi.n	8003f64 <getAres+0xbc>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <getAres+0x14>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003f19 	.word	0x08003f19
 8003ec8:	08003f3f 	.word	0x08003f3f
  {
  // Possible accelerometer scales (and their register bit settings) are:
  // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
          aRes = 2.0/32768.0;
 8003ecc:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <getAres+0xc8>)
 8003ece:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8003ed2:	601a      	str	r2, [r3, #0]

                    				        		  	  		  	  ssd1306_SetCursor(60,21);
 8003ed4:	2115      	movs	r1, #21
 8003ed6:	203c      	movs	r0, #60	; 0x3c
 8003ed8:	f003 f850 	bl	8006f7c <ssd1306_SetCursor>
                    				        		  	  		  	  char retValf= ssd1306_WriteString("2G", Font_7x10, White);
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <getAres+0xcc>)
 8003ede:	2301      	movs	r3, #1
 8003ee0:	ca06      	ldmia	r2, {r1, r2}
 8003ee2:	4825      	ldr	r0, [pc, #148]	; (8003f78 <getAres+0xd0>)
 8003ee4:	f003 f824 	bl	8006f30 <ssd1306_WriteString>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	713b      	strb	r3, [r7, #4]
                    				        		  	  		  	  ssd1306_UpdateScreen();
 8003eec:	f002 ff1c 	bl	8006d28 <ssd1306_UpdateScreen>
          break;
 8003ef0:	e038      	b.n	8003f64 <getAres+0xbc>
    case AFS_4G:
          aRes = 4.0/32768.0;
 8003ef2:	4b1f      	ldr	r3, [pc, #124]	; (8003f70 <getAres+0xc8>)
 8003ef4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8003ef8:	601a      	str	r2, [r3, #0]
                    				        		  	  		  	  ssd1306_SetCursor(60,21);
 8003efa:	2115      	movs	r1, #21
 8003efc:	203c      	movs	r0, #60	; 0x3c
 8003efe:	f003 f83d 	bl	8006f7c <ssd1306_SetCursor>
                    				        		  	  		  	  char retVals= ssd1306_WriteString("4G", Font_7x10, White);
 8003f02:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <getAres+0xcc>)
 8003f04:	2301      	movs	r3, #1
 8003f06:	ca06      	ldmia	r2, {r1, r2}
 8003f08:	481c      	ldr	r0, [pc, #112]	; (8003f7c <getAres+0xd4>)
 8003f0a:	f003 f811 	bl	8006f30 <ssd1306_WriteString>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	717b      	strb	r3, [r7, #5]
                    				        		  	  		  	  ssd1306_UpdateScreen();
 8003f12:	f002 ff09 	bl	8006d28 <ssd1306_UpdateScreen>
          break;
 8003f16:	e025      	b.n	8003f64 <getAres+0xbc>
    case AFS_8G:
          aRes = 8.0/32768.0;
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <getAres+0xc8>)
 8003f1a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8003f1e:	601a      	str	r2, [r3, #0]
                    				        		  	  		  	  ssd1306_SetCursor(60,21);
 8003f20:	2115      	movs	r1, #21
 8003f22:	203c      	movs	r0, #60	; 0x3c
 8003f24:	f003 f82a 	bl	8006f7c <ssd1306_SetCursor>
                    				        		  	  		  	  char retVarl= ssd1306_WriteString("8G", Font_7x10, White);
 8003f28:	4a12      	ldr	r2, [pc, #72]	; (8003f74 <getAres+0xcc>)
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	ca06      	ldmia	r2, {r1, r2}
 8003f2e:	4814      	ldr	r0, [pc, #80]	; (8003f80 <getAres+0xd8>)
 8003f30:	f002 fffe 	bl	8006f30 <ssd1306_WriteString>
 8003f34:	4603      	mov	r3, r0
 8003f36:	71bb      	strb	r3, [r7, #6]
                    				        		  	  		  	  ssd1306_UpdateScreen();
 8003f38:	f002 fef6 	bl	8006d28 <ssd1306_UpdateScreen>
          break;
 8003f3c:	e012      	b.n	8003f64 <getAres+0xbc>
    case AFS_16G:
          aRes = 16.0/32768.0;
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <getAres+0xc8>)
 8003f40:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8003f44:	601a      	str	r2, [r3, #0]

          				        		  	  		  	  ssd1306_SetCursor(60,21);
 8003f46:	2115      	movs	r1, #21
 8003f48:	203c      	movs	r0, #60	; 0x3c
 8003f4a:	f003 f817 	bl	8006f7c <ssd1306_SetCursor>
          				        		  	  		  	  char retVal= ssd1306_WriteString("16G", Font_7x10, White);
 8003f4e:	4a09      	ldr	r2, [pc, #36]	; (8003f74 <getAres+0xcc>)
 8003f50:	2301      	movs	r3, #1
 8003f52:	ca06      	ldmia	r2, {r1, r2}
 8003f54:	480b      	ldr	r0, [pc, #44]	; (8003f84 <getAres+0xdc>)
 8003f56:	f002 ffeb 	bl	8006f30 <ssd1306_WriteString>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
          				        		  	  		  	  ssd1306_UpdateScreen();
 8003f5e:	f002 fee3 	bl	8006d28 <ssd1306_UpdateScreen>

          break;
 8003f62:	bf00      	nop
  }
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	2000000d 	.word	0x2000000d
 8003f70:	20002430 	.word	0x20002430
 8003f74:	20000028 	.word	0x20000028
 8003f78:	08010100 	.word	0x08010100
 8003f7c:	08010104 	.word	0x08010104
 8003f80:	08010108 	.word	0x08010108
 8003f84:	0801010c 	.word	0x0801010c

08003f88 <readAccelData>:

//read raw Accelerometer values from registers
void readAccelData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af04      	add	r7, sp, #16
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint8_t rawAccelData[6];  // x/y/z accel register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawAccelData[0], 6, i2c_timeout); // Read the six raw data registers into data array
 8003f92:	2364      	movs	r3, #100	; 0x64
 8003f94:	9302      	str	r3, [sp, #8]
 8003f96:	2306      	movs	r3, #6
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	223b      	movs	r2, #59	; 0x3b
 8003fa4:	21d0      	movs	r1, #208	; 0xd0
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f004 f904 	bl	80081b4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawAccelData[0] << 8) | rawAccelData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8003fac:	7a3b      	ldrb	r3, [r7, #8]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	b21a      	sxth	r2, r3
 8003fb2:	7a7b      	ldrb	r3, [r7, #9]
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawAccelData[2] << 8) | rawAccelData[3];
 8003fbe:	7abb      	ldrb	r3, [r7, #10]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	b219      	sxth	r1, r3
 8003fc4:	7afb      	ldrb	r3, [r7, #11]
 8003fc6:	b21a      	sxth	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3302      	adds	r3, #2
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	b212      	sxth	r2, r2
 8003fd0:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawAccelData[4] << 8) | rawAccelData[5];
 8003fd2:	7b3b      	ldrb	r3, [r7, #12]
 8003fd4:	021b      	lsls	r3, r3, #8
 8003fd6:	b219      	sxth	r1, r3
 8003fd8:	7b7b      	ldrb	r3, [r7, #13]
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	b212      	sxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]
	printf("Acc X: %d\r\n", destination[0]);
	printf("Acc Y: %d\r\n", destination[1]);
	printf("Acc Z: %d\r\n", destination[2]);
	printf("-------------------------\r\n");
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <readGyroData>:

//read raw Gyro values from registers
void readGyroData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b088      	sub	sp, #32
 8003ff2:	af04      	add	r7, sp, #16
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]
  uint8_t rawGyroData[6];  // x/y/z gyro register data stored here
  HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawGyroData[0], 6, i2c_timeout);  // Read the six raw data registers sequentially into data array
 8003ff8:	2364      	movs	r3, #100	; 0x64
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	2306      	movs	r3, #6
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2301      	movs	r3, #1
 8004008:	2243      	movs	r2, #67	; 0x43
 800400a:	21d0      	movs	r1, #208	; 0xd0
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f004 f8d1 	bl	80081b4 <HAL_I2C_Mem_Read>
  destination[0] = ((int16_t)rawGyroData[0] << 8) | rawGyroData[1];  // Turn the MSB and LSB into a signed 16-bit value
 8004012:	7a3b      	ldrb	r3, [r7, #8]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	b21a      	sxth	r2, r3
 8004018:	7a7b      	ldrb	r3, [r7, #9]
 800401a:	b21b      	sxth	r3, r3
 800401c:	4313      	orrs	r3, r2
 800401e:	b21a      	sxth	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	801a      	strh	r2, [r3, #0]
  destination[1] = ((int16_t)rawGyroData[2] << 8) | rawGyroData[3];
 8004024:	7abb      	ldrb	r3, [r7, #10]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	b219      	sxth	r1, r3
 800402a:	7afb      	ldrb	r3, [r7, #11]
 800402c:	b21a      	sxth	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	3302      	adds	r3, #2
 8004032:	430a      	orrs	r2, r1
 8004034:	b212      	sxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]
  destination[2] = ((int16_t)rawGyroData[4] << 8) | rawGyroData[5];
 8004038:	7b3b      	ldrb	r3, [r7, #12]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	b219      	sxth	r1, r3
 800403e:	7b7b      	ldrb	r3, [r7, #13]
 8004040:	b21a      	sxth	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	3304      	adds	r3, #4
 8004046:	430a      	orrs	r2, r1
 8004048:	b212      	sxth	r2, r2
 800404a:	801a      	strh	r2, [r3, #0]
	printf("Gyro X: %d\r\n", destination[0]);
	printf("Gyro Y: %d\r\n", destination[1]);
	printf("Gyro Z: %d\r\n", destination[2]);
	printf("---------------------------\r\n");
  }
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <readMagData>:

void readMagData(I2C_HandleTypeDef *I2Cx, int16_t * destination){
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af04      	add	r7, sp, #16
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]

	uint8_t readData;

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ST1, 1, &readData, 1, i2c_timeout);
 800405e:	2364      	movs	r3, #100	; 0x64
 8004060:	9302      	str	r3, [sp, #8]
 8004062:	2301      	movs	r3, #1
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	f107 0316 	add.w	r3, r7, #22
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2301      	movs	r3, #1
 800406e:	2202      	movs	r2, #2
 8004070:	2118      	movs	r1, #24
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f004 f89e 	bl	80081b4 <HAL_I2C_Mem_Read>
	if( (readData & 0x01) == 0x01 ){
 8004078:	7dbb      	ldrb	r3, [r7, #22]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d030      	beq.n	80040e4 <readMagData+0x90>
		uint8_t rawMagData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
		HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_XOUT_L, 1, &rawMagData[0], 7, i2c_timeout);  // Read the six raw data and ST2 registers sequentially into data array
 8004082:	2364      	movs	r3, #100	; 0x64
 8004084:	9302      	str	r3, [sp, #8]
 8004086:	2307      	movs	r3, #7
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	f107 030c 	add.w	r3, r7, #12
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2301      	movs	r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	2118      	movs	r1, #24
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f004 f88c 	bl	80081b4 <HAL_I2C_Mem_Read>
		uint8_t c = rawMagData[6];
 800409c:	7cbb      	ldrb	r3, [r7, #18]
 800409e:	75fb      	strb	r3, [r7, #23]
		if(!(c & 0x08)) {
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11c      	bne.n	80040e4 <readMagData+0x90>
			destination[0] = ((int16_t)rawMagData[1] << 8) | rawMagData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
 80040aa:	7b7b      	ldrb	r3, [r7, #13]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	7b3b      	ldrb	r3, [r7, #12]
 80040b2:	b21b      	sxth	r3, r3
 80040b4:	4313      	orrs	r3, r2
 80040b6:	b21a      	sxth	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	801a      	strh	r2, [r3, #0]
			destination[1] = ((int16_t)rawMagData[3] << 8) | rawMagData[2] ;  // Data stored as little Endian
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	b219      	sxth	r1, r3
 80040c2:	7bbb      	ldrb	r3, [r7, #14]
 80040c4:	b21a      	sxth	r2, r3
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	3302      	adds	r3, #2
 80040ca:	430a      	orrs	r2, r1
 80040cc:	b212      	sxth	r2, r2
 80040ce:	801a      	strh	r2, [r3, #0]
			destination[2] = ((int16_t)rawMagData[5] << 8) | rawMagData[4] ;
 80040d0:	7c7b      	ldrb	r3, [r7, #17]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	b219      	sxth	r1, r3
 80040d6:	7c3b      	ldrb	r3, [r7, #16]
 80040d8:	b21a      	sxth	r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3304      	adds	r3, #4
 80040de:	430a      	orrs	r2, r1
 80040e0:	b212      	sxth	r2, r2
 80040e2:	801a      	strh	r2, [r3, #0]
				printf("Mag Z: %d\r\n", destination[2]);
				printf("-------------------------\r\n");
			}
		}
	}
}
 80040e4:	bf00      	nop
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <initAK8963>:

void initAK8963(I2C_HandleTypeDef *I2Cx, float * destination){
 80040ec:	b590      	push	{r4, r7, lr}
 80040ee:	b089      	sub	sp, #36	; 0x24
 80040f0:	af04      	add	r7, sp, #16
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  //First extract the factory calibration for each magnetometer axis
  // x/y/z gyro calibration data stored here
  uint8_t rawMagCalData[3];

  //Power down magnetometer
  writeData = 0x00;
 80040f6:	2300      	movs	r3, #0
 80040f8:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
 80040fa:	2364      	movs	r3, #100	; 0x64
 80040fc:	9302      	str	r3, [sp, #8]
 80040fe:	2301      	movs	r3, #1
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	f107 030e 	add.w	r3, r7, #14
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2301      	movs	r3, #1
 800410a:	220a      	movs	r2, #10
 800410c:	2118      	movs	r1, #24
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f003 ff56 	bl	8007fc0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8004114:	2064      	movs	r0, #100	; 0x64
 8004116:	f002 ffbb 	bl	8007090 <HAL_Delay>

  writeData = 0x0F;
 800411a:	230f      	movs	r3, #15
 800411c:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Enter Fuse ROM access mode
 800411e:	2364      	movs	r3, #100	; 0x64
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	2301      	movs	r3, #1
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	f107 030e 	add.w	r3, r7, #14
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2301      	movs	r3, #1
 800412e:	220a      	movs	r2, #10
 8004130:	2118      	movs	r1, #24
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f003 ff44 	bl	8007fc0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8004138:	2064      	movs	r0, #100	; 0x64
 800413a:	f002 ffa9 	bl	8007090 <HAL_Delay>


  HAL_I2C_Mem_Read(I2Cx, AK8963_ADDRESS, AK8963_ASAX, 1, &rawMagCalData[0], 3, i2c_timeout);// Read the x-, y-, and z-axis calibration values
 800413e:	2364      	movs	r3, #100	; 0x64
 8004140:	9302      	str	r3, [sp, #8]
 8004142:	2303      	movs	r3, #3
 8004144:	9301      	str	r3, [sp, #4]
 8004146:	f107 0308 	add.w	r3, r7, #8
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	2210      	movs	r2, #16
 8004150:	2118      	movs	r1, #24
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f004 f82e 	bl	80081b4 <HAL_I2C_Mem_Read>
  destination[0] =  (float)(rawMagCalData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8004158:	7a3b      	ldrb	r3, [r7, #8]
 800415a:	3b80      	subs	r3, #128	; 0x80
 800415c:	ee07 3a90 	vmov	s15, r3
 8004160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004164:	ee17 0a90 	vmov	r0, s15
 8004168:	f7fc fa06 	bl	8000578 <__aeabi_f2d>
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <initAK8963+0x1b8>)
 8004172:	f7fc fb83 	bl	800087c <__aeabi_ddiv>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <initAK8963+0x1bc>)
 8004184:	f7fc f89a 	bl	80002bc <__adddf3>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4610      	mov	r0, r2
 800418e:	4619      	mov	r1, r3
 8004190:	f7fc fd42 	bl	8000c18 <__aeabi_d2f>
 8004194:	4602      	mov	r2, r0
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	601a      	str	r2, [r3, #0]
  destination[1] =  (float)(rawMagCalData[1] - 128)/256. + 1.;
 800419a:	7a7b      	ldrb	r3, [r7, #9]
 800419c:	3b80      	subs	r3, #128	; 0x80
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a6:	ee17 0a90 	vmov	r0, s15
 80041aa:	f7fc f9e5 	bl	8000578 <__aeabi_f2d>
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	4b3c      	ldr	r3, [pc, #240]	; (80042a4 <initAK8963+0x1b8>)
 80041b4:	f7fc fb62 	bl	800087c <__aeabi_ddiv>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4610      	mov	r0, r2
 80041be:	4619      	mov	r1, r3
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <initAK8963+0x1bc>)
 80041c6:	f7fc f879 	bl	80002bc <__adddf3>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4610      	mov	r0, r2
 80041d0:	4619      	mov	r1, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	1d1c      	adds	r4, r3, #4
 80041d6:	f7fc fd1f 	bl	8000c18 <__aeabi_d2f>
 80041da:	4603      	mov	r3, r0
 80041dc:	6023      	str	r3, [r4, #0]
  destination[2] =  (float)(rawMagCalData[2] - 128)/256. + 1.;
 80041de:	7abb      	ldrb	r3, [r7, #10]
 80041e0:	3b80      	subs	r3, #128	; 0x80
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ea:	ee17 0a90 	vmov	r0, s15
 80041ee:	f7fc f9c3 	bl	8000578 <__aeabi_f2d>
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <initAK8963+0x1b8>)
 80041f8:	f7fc fb40 	bl	800087c <__aeabi_ddiv>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <initAK8963+0x1bc>)
 800420a:	f7fc f857 	bl	80002bc <__adddf3>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f103 0408 	add.w	r4, r3, #8
 800421c:	f7fc fcfc 	bl	8000c18 <__aeabi_d2f>
 8004220:	4603      	mov	r3, r0
 8004222:	6023      	str	r3, [r4, #0]
//	printf("Mag cal off Y: %f\r\n", destination[1]);
//	printf("Mag cal off Z: %f\r\n", destination[2]);
//	printf("-------------------------\r\n");
  }

  writeData = 0x00;
 8004224:	2300      	movs	r3, #0
 8004226:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Power down magnetometer
 8004228:	2364      	movs	r3, #100	; 0x64
 800422a:	9302      	str	r3, [sp, #8]
 800422c:	2301      	movs	r3, #1
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	f107 030e 	add.w	r3, r7, #14
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2301      	movs	r3, #1
 8004238:	220a      	movs	r2, #10
 800423a:	2118      	movs	r1, #24
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f003 febf 	bl	8007fc0 <HAL_I2C_Mem_Write>
  HAL_Delay(100);
 8004242:	2064      	movs	r0, #100	; 0x64
 8004244:	f002 ff24 	bl	8007090 <HAL_Delay>

  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeData = Mscale << 4 | Mmode;
 8004248:	4b18      	ldr	r3, [pc, #96]	; (80042ac <initAK8963+0x1c0>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	b25a      	sxtb	r2, r3
 8004250:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <initAK8963+0x1c4>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b25b      	sxtb	r3, r3
 8004256:	4313      	orrs	r3, r2
 8004258:	b25b      	sxtb	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	73bb      	strb	r3, [r7, #14]
  HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);// Set magnetometer data resolution and sample ODR
 800425e:	2364      	movs	r3, #100	; 0x64
 8004260:	9302      	str	r3, [sp, #8]
 8004262:	2301      	movs	r3, #1
 8004264:	9301      	str	r3, [sp, #4]
 8004266:	f107 030e 	add.w	r3, r7, #14
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2301      	movs	r3, #1
 800426e:	220a      	movs	r2, #10
 8004270:	2118      	movs	r1, #24
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f003 fea4 	bl	8007fc0 <HAL_I2C_Mem_Write>

//writeData = 0x16;
//HAL_I2C_Mem_Write(I2Cx, AK8963_ADDRESS, AK8963_CNTL, 1, &writeData, 1, i2c_timeout);
  HAL_Delay(10);
 8004278:	200a      	movs	r0, #10
 800427a:	f002 ff09 	bl	8007090 <HAL_Delay>
  ssd1306_SetCursor(40,5);
 800427e:	2105      	movs	r1, #5
 8004280:	2028      	movs	r0, #40	; 0x28
 8004282:	f002 fe7b 	bl	8006f7c <ssd1306_SetCursor>
  char retVal= ssd1306_WriteString("MAG", Font_7x10, White);
 8004286:	4a0b      	ldr	r2, [pc, #44]	; (80042b4 <initAK8963+0x1c8>)
 8004288:	2301      	movs	r3, #1
 800428a:	ca06      	ldmia	r2, {r1, r2}
 800428c:	480a      	ldr	r0, [pc, #40]	; (80042b8 <initAK8963+0x1cc>)
 800428e:	f002 fe4f 	bl	8006f30 <ssd1306_WriteString>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
  ssd1306_UpdateScreen();
 8004296:	f002 fd47 	bl	8006d28 <ssd1306_UpdateScreen>
  if(SerialDebugA){printf("MAG Init Succesful! \r\n");}
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd90      	pop	{r4, r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40700000 	.word	0x40700000
 80042a8:	3ff00000 	.word	0x3ff00000
 80042ac:	2000000e 	.word	0x2000000e
 80042b0:	2000000f 	.word	0x2000000f
 80042b4:	20000028 	.word	0x20000028
 80042b8:	08010110 	.word	0x08010110

080042bc <calibrateMag>:

void calibrateMag(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 80042bc:	b580      	push	{r7, lr}
 80042be:	b094      	sub	sp, #80	; 0x50
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]

  uint16_t ii = 0, sample_count = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80042ce:	2300      	movs	r3, #0
 80042d0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80042d4:	2300      	movs	r3, #0
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d8:	2300      	movs	r3, #0
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042dc:	2300      	movs	r3, #0
 80042de:	643b      	str	r3, [r7, #64]	; 0x40
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042e4:	2300      	movs	r3, #0
 80042e6:	633b      	str	r3, [r7, #48]	; 0x30
 80042e8:	2300      	movs	r3, #0
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80042ec:	4a9c      	ldr	r2, [pc, #624]	; (8004560 <calibrateMag+0x2a4>)
 80042ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042f6:	6018      	str	r0, [r3, #0]
 80042f8:	3304      	adds	r3, #4
 80042fa:	8019      	strh	r1, [r3, #0]
 80042fc:	4a99      	ldr	r2, [pc, #612]	; (8004564 <calibrateMag+0x2a8>)
 80042fe:	f107 031c 	add.w	r3, r7, #28
 8004302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004306:	6018      	str	r0, [r3, #0]
 8004308:	3304      	adds	r3, #4
 800430a:	8019      	strh	r1, [r3, #0]
 800430c:	2300      	movs	r3, #0
 800430e:	82bb      	strh	r3, [r7, #20]
 8004310:	2300      	movs	r3, #0
 8004312:	82fb      	strh	r3, [r7, #22]
 8004314:	2300      	movs	r3, #0
 8004316:	833b      	strh	r3, [r7, #24]

  if (SerialDebugA){printf("Mag Calibration: Wave device in a figure eight until done!\r\n");}
  HAL_Delay(4000);
 8004318:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800431c:	f002 feb8 	bl	8007090 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8004320:	4b91      	ldr	r3, [pc, #580]	; (8004568 <calibrateMag+0x2ac>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d102      	bne.n	800432e <calibrateMag+0x72>
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 800432e:	4b8e      	ldr	r3, [pc, #568]	; (8004568 <calibrateMag+0x2ac>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b06      	cmp	r3, #6
 8004334:	d103      	bne.n	800433e <calibrateMag+0x82>
 8004336:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800433a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   for(ii = 0; ii < sample_count; ii++) {
 800433e:	2300      	movs	r3, #0
 8004340:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004344:	e055      	b.n	80043f2 <calibrateMag+0x136>
    readMagData(I2Cx, mag_temp);  // Read the mag data
 8004346:	f107 0314 	add.w	r3, r7, #20
 800434a:	4619      	mov	r1, r3
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f7ff fe81 	bl	8004054 <readMagData>
    for (int jj = 0; jj < 3; jj++) {
 8004352:	2300      	movs	r3, #0
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
 8004356:	e036      	b.n	80043c6 <calibrateMag+0x10a>
      if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	3350      	adds	r3, #80	; 0x50
 800435e:	443b      	add	r3, r7
 8004360:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8004364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	3350      	adds	r3, #80	; 0x50
 800436a:	443b      	add	r3, r7
 800436c:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8004370:	429a      	cmp	r2, r3
 8004372:	dd0b      	ble.n	800438c <calibrateMag+0xd0>
 8004374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	3350      	adds	r3, #80	; 0x50
 800437a:	443b      	add	r3, r7
 800437c:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8004380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	3350      	adds	r3, #80	; 0x50
 8004386:	443b      	add	r3, r7
 8004388:	f823 2c2c 	strh.w	r2, [r3, #-44]
      if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 800438c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	3350      	adds	r3, #80	; 0x50
 8004392:	443b      	add	r3, r7
 8004394:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 8004398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	3350      	adds	r3, #80	; 0x50
 800439e:	443b      	add	r3, r7
 80043a0:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	da0b      	bge.n	80043c0 <calibrateMag+0x104>
 80043a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	3350      	adds	r3, #80	; 0x50
 80043ae:	443b      	add	r3, r7
 80043b0:	f933 2c3c 	ldrsh.w	r2, [r3, #-60]
 80043b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	3350      	adds	r3, #80	; 0x50
 80043ba:	443b      	add	r3, r7
 80043bc:	f823 2c34 	strh.w	r2, [r3, #-52]
    for (int jj = 0; jj < 3; jj++) {
 80043c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c2:	3301      	adds	r3, #1
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	ddc5      	ble.n	8004358 <calibrateMag+0x9c>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 80043cc:	4b66      	ldr	r3, [pc, #408]	; (8004568 <calibrateMag+0x2ac>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d102      	bne.n	80043da <calibrateMag+0x11e>
 80043d4:	2087      	movs	r0, #135	; 0x87
 80043d6:	f002 fe5b 	bl	8007090 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 80043da:	4b63      	ldr	r3, [pc, #396]	; (8004568 <calibrateMag+0x2ac>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d102      	bne.n	80043e8 <calibrateMag+0x12c>
 80043e2:	200c      	movs	r0, #12
 80043e4:	f002 fe54 	bl	8007090 <HAL_Delay>
   for(ii = 0; ii < sample_count; ii++) {
 80043e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043ec:	3301      	adds	r3, #1
 80043ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80043f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80043f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d3a3      	bcc.n	8004346 <calibrateMag+0x8a>
    }

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 80043fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004402:	461a      	mov	r2, r3
 8004404:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004408:	4413      	add	r3, r2
 800440a:	0fda      	lsrs	r2, r3, #31
 800440c:	4413      	add	r3, r2
 800440e:	105b      	asrs	r3, r3, #1
 8004410:	63bb      	str	r3, [r7, #56]	; 0x38
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8004412:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004416:	461a      	mov	r2, r3
 8004418:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800441c:	4413      	add	r3, r2
 800441e:	0fda      	lsrs	r2, r3, #31
 8004420:	4413      	add	r3, r2
 8004422:	105b      	asrs	r3, r3, #1
 8004424:	63fb      	str	r3, [r7, #60]	; 0x3c
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8004426:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800442a:	461a      	mov	r2, r3
 800442c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004430:	4413      	add	r3, r2
 8004432:	0fda      	lsrs	r2, r3, #31
 8004434:	4413      	add	r3, r2
 8004436:	105b      	asrs	r3, r3, #1
 8004438:	643b      	str	r3, [r7, #64]	; 0x40

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	ee07 3a90 	vmov	s15, r3
 8004440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004444:	4b49      	ldr	r3, [pc, #292]	; (800456c <calibrateMag+0x2b0>)
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800444e:	4b48      	ldr	r3, [pc, #288]	; (8004570 <calibrateMag+0x2b4>)
 8004450:	edd3 7a00 	vldr	s15, [r3]
 8004454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	edc3 7a00 	vstr	s15, [r3]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 800445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004460:	ee07 3a90 	vmov	s15, r3
 8004464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004468:	4b40      	ldr	r3, [pc, #256]	; (800456c <calibrateMag+0x2b0>)
 800446a:	edd3 7a00 	vldr	s15, [r3]
 800446e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <calibrateMag+0x2b4>)
 8004474:	edd3 7a01 	vldr	s15, [r3, #4]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	3304      	adds	r3, #4
 800447c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004480:	edc3 7a00 	vstr	s15, [r3]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8004484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800448e:	4b37      	ldr	r3, [pc, #220]	; (800456c <calibrateMag+0x2b0>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004498:	4b35      	ldr	r3, [pc, #212]	; (8004570 <calibrateMag+0x2b4>)
 800449a:	edd3 7a02 	vldr	s15, [r3, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	3308      	adds	r3, #8
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc3 7a00 	vstr	s15, [r3]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 80044aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80044ae:	461a      	mov	r2, r3
 80044b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	0fda      	lsrs	r2, r3, #31
 80044b8:	4413      	add	r3, r2
 80044ba:	105b      	asrs	r3, r3, #1
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 80044be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80044c2:	461a      	mov	r2, r3
 80044c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	0fda      	lsrs	r2, r3, #31
 80044cc:	4413      	add	r3, r2
 80044ce:	105b      	asrs	r3, r3, #1
 80044d0:	633b      	str	r3, [r7, #48]	; 0x30
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 80044d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80044d6:	461a      	mov	r2, r3
 80044d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	0fda      	lsrs	r2, r3, #31
 80044e0:	4413      	add	r3, r2
 80044e2:	105b      	asrs	r3, r3, #1
 80044e4:	637b      	str	r3, [r7, #52]	; 0x34

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 80044e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	441a      	add	r2, r3
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	4413      	add	r3, r2
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    avg_rad /= 3.0;
 80044fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8004500:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8004504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004508:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    dest2[0] = avg_rad/((float)mag_scale[0]);
 800450c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004516:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800451a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	edc3 7a00 	vstr	s15, [r3]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8004524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800453a:	edc3 7a00 	vstr	s15, [r3]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3308      	adds	r3, #8
 800454c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8004550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004554:	edc3 7a00 	vstr	s15, [r3]

    if (SerialDebugA){printf("Mag Calibration done!\r\n");}
}
 8004558:	bf00      	nop
 800455a:	3750      	adds	r7, #80	; 0x50
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	08010114 	.word	0x08010114
 8004564:	0801011c 	.word	0x0801011c
 8004568:	2000000f 	.word	0x2000000f
 800456c:	20002438 	.word	0x20002438
 8004570:	20002454 	.word	0x20002454

08004574 <initMPU9250>:


void initMPU9250(I2C_HandleTypeDef *I2Cx){
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af04      	add	r7, sp, #16
 800457a:	6078      	str	r0, [r7, #4]
	//pre def. vars
	uint8_t readData;
	uint8_t writeData;

	//Wake up device
	writeData = 0x00;
 800457c:	2300      	movs	r3, #0
 800457e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 8004580:	2364      	movs	r3, #100	; 0x64
 8004582:	9302      	str	r3, [sp, #8]
 8004584:	2301      	movs	r3, #1
 8004586:	9301      	str	r3, [sp, #4]
 8004588:	f107 030d 	add.w	r3, r7, #13
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2301      	movs	r3, #1
 8004590:	226b      	movs	r2, #107	; 0x6b
 8004592:	21d0      	movs	r1, #208	; 0xd0
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f003 fd13 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800459a:	2064      	movs	r0, #100	; 0x64
 800459c:	f002 fd78 	bl	8007090 <HAL_Delay>

	writeData = 0x01;
 80045a0:	2301      	movs	r3, #1
 80045a2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80045a4:	2364      	movs	r3, #100	; 0x64
 80045a6:	9302      	str	r3, [sp, #8]
 80045a8:	2301      	movs	r3, #1
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	f107 030d 	add.w	r3, r7, #13
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2301      	movs	r3, #1
 80045b4:	226b      	movs	r2, #107	; 0x6b
 80045b6:	21d0      	movs	r1, #208	; 0xd0
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f003 fd01 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80045be:	2064      	movs	r0, #100	; 0x64
 80045c0:	f002 fd66 	bl	8007090 <HAL_Delay>

	writeData = 0x03;
 80045c4:	2303      	movs	r3, #3
 80045c6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);
 80045c8:	2364      	movs	r3, #100	; 0x64
 80045ca:	9302      	str	r3, [sp, #8]
 80045cc:	2301      	movs	r3, #1
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	f107 030d 	add.w	r3, r7, #13
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2301      	movs	r3, #1
 80045d8:	221a      	movs	r2, #26
 80045da:	21d0      	movs	r1, #208	; 0xd0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f003 fcef 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80045e2:	2064      	movs	r0, #100	; 0x64
 80045e4:	f002 fd54 	bl	8007090 <HAL_Delay>

	writeData = 0x04;
 80045e8:	2304      	movs	r3, #4
 80045ea:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);
 80045ec:	2364      	movs	r3, #100	; 0x64
 80045ee:	9302      	str	r3, [sp, #8]
 80045f0:	2301      	movs	r3, #1
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	f107 030d 	add.w	r3, r7, #13
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	2301      	movs	r3, #1
 80045fc:	2219      	movs	r2, #25
 80045fe:	21d0      	movs	r1, #208	; 0xd0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f003 fcdd 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004606:	2064      	movs	r0, #100	; 0x64
 8004608:	f002 fd42 	bl	8007090 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &readData, 1, i2c_timeout);
 800460c:	2364      	movs	r3, #100	; 0x64
 800460e:	9302      	str	r3, [sp, #8]
 8004610:	2301      	movs	r3, #1
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	f107 030e 	add.w	r3, r7, #14
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2301      	movs	r3, #1
 800461c:	221b      	movs	r2, #27
 800461e:	21d0      	movs	r1, #208	; 0xd0
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f003 fdc7 	bl	80081b4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x03; // Clear Fchoice bits [1:0]
 8004626:	7bbb      	ldrb	r3, [r7, #14]
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	b2db      	uxtb	r3, r3
 800462e:	73bb      	strb	r3, [r7, #14]
	readData = readData & ~0x18; // Clear GFS bits [4:3]
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	f023 0318 	bic.w	r3, r3, #24
 8004636:	b2db      	uxtb	r3, r3
 8004638:	73bb      	strb	r3, [r7, #14]
	readData = readData | Gscale << 3; // Set full scale range for the gyro
 800463a:	4b44      	ldr	r3, [pc, #272]	; (800474c <initMPU9250+0x1d8>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	b25a      	sxtb	r2, r3
 8004642:	7bbb      	ldrb	r3, [r7, #14]
 8004644:	b25b      	sxtb	r3, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	b25b      	sxtb	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(100);
 800464e:	2064      	movs	r0, #100	; 0x64
 8004650:	f002 fd1e 	bl	8007090 <HAL_Delay>

	writeData = readData;
 8004654:	7bbb      	ldrb	r3, [r7, #14]
 8004656:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 8004658:	2364      	movs	r3, #100	; 0x64
 800465a:	9302      	str	r3, [sp, #8]
 800465c:	2301      	movs	r3, #1
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	f107 030d 	add.w	r3, r7, #13
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2301      	movs	r3, #1
 8004668:	221b      	movs	r2, #27
 800466a:	21d0      	movs	r1, #208	; 0xd0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f003 fca7 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004672:	2064      	movs	r0, #100	; 0x64
 8004674:	f002 fd0c 	bl	8007090 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &readData, 1, i2c_timeout);
 8004678:	2364      	movs	r3, #100	; 0x64
 800467a:	9302      	str	r3, [sp, #8]
 800467c:	2301      	movs	r3, #1
 800467e:	9301      	str	r3, [sp, #4]
 8004680:	f107 030e 	add.w	r3, r7, #14
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2301      	movs	r3, #1
 8004688:	221c      	movs	r2, #28
 800468a:	21d0      	movs	r1, #208	; 0xd0
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f003 fd91 	bl	80081b4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x18;  // Clear AFS bits [4:3]
 8004692:	7bbb      	ldrb	r3, [r7, #14]
 8004694:	f023 0318 	bic.w	r3, r3, #24
 8004698:	b2db      	uxtb	r3, r3
 800469a:	73bb      	strb	r3, [r7, #14]
	readData = readData | Ascale << 3; // Set full scale range for the accelerometer
 800469c:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <initMPU9250+0x1dc>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	00db      	lsls	r3, r3, #3
 80046a2:	b25a      	sxtb	r2, r3
 80046a4:	7bbb      	ldrb	r3, [r7, #14]
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	4313      	orrs	r3, r2
 80046aa:	b25b      	sxtb	r3, r3
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	73bb      	strb	r3, [r7, #14]

	writeData = readData;
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 80046b4:	2364      	movs	r3, #100	; 0x64
 80046b6:	9302      	str	r3, [sp, #8]
 80046b8:	2301      	movs	r3, #1
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	f107 030d 	add.w	r3, r7, #13
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	2301      	movs	r3, #1
 80046c4:	221c      	movs	r2, #28
 80046c6:	21d0      	movs	r1, #208	; 0xd0
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f003 fc79 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80046ce:	2064      	movs	r0, #100	; 0x64
 80046d0:	f002 fcde 	bl	8007090 <HAL_Delay>
	//**
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &readData, 1, i2c_timeout);
 80046d4:	2364      	movs	r3, #100	; 0x64
 80046d6:	9302      	str	r3, [sp, #8]
 80046d8:	2301      	movs	r3, #1
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	f107 030e 	add.w	r3, r7, #14
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	2301      	movs	r3, #1
 80046e4:	221d      	movs	r2, #29
 80046e6:	21d0      	movs	r1, #208	; 0xd0
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f003 fd63 	bl	80081b4 <HAL_I2C_Mem_Read>
	readData = readData & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80046ee:	7bbb      	ldrb	r3, [r7, #14]
 80046f0:	f023 030f 	bic.w	r3, r3, #15
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	73bb      	strb	r3, [r7, #14]
	readData = readData | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80046f8:	7bbb      	ldrb	r3, [r7, #14]
 80046fa:	f043 0303 	orr.w	r3, r3, #3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	73bb      	strb	r3, [r7, #14]

	writeData = readData;
 8004702:	7bbb      	ldrb	r3, [r7, #14]
 8004704:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);
 8004706:	2364      	movs	r3, #100	; 0x64
 8004708:	9302      	str	r3, [sp, #8]
 800470a:	2301      	movs	r3, #1
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	f107 030d 	add.w	r3, r7, #13
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2301      	movs	r3, #1
 8004716:	221d      	movs	r2, #29
 8004718:	21d0      	movs	r1, #208	; 0xd0
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f003 fc50 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8004720:	2064      	movs	r0, #100	; 0x64
 8004722:	f002 fcb5 	bl	8007090 <HAL_Delay>

    ssd1306_SetCursor(5,5);
 8004726:	2105      	movs	r1, #5
 8004728:	2005      	movs	r0, #5
 800472a:	f002 fc27 	bl	8006f7c <ssd1306_SetCursor>
    char retVal= ssd1306_WriteString("MPU", Font_7x10, White);
 800472e:	4a09      	ldr	r2, [pc, #36]	; (8004754 <initMPU9250+0x1e0>)
 8004730:	2301      	movs	r3, #1
 8004732:	ca06      	ldmia	r2, {r1, r2}
 8004734:	4808      	ldr	r0, [pc, #32]	; (8004758 <initMPU9250+0x1e4>)
 8004736:	f002 fbfb 	bl	8006f30 <ssd1306_WriteString>
 800473a:	4603      	mov	r3, r0
 800473c:	73fb      	strb	r3, [r7, #15]
    ssd1306_UpdateScreen();
 800473e:	f002 faf3 	bl	8006d28 <ssd1306_UpdateScreen>

	if(SerialDebugA){printf("MPU Init Succesful! \r\n");}
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	2000000c 	.word	0x2000000c
 8004750:	2000000d 	.word	0x2000000d
 8004754:	20000028 	.word	0x20000028
 8004758:	08010124 	.word	0x08010124

0800475c <calibrateMPU9250>:


// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(I2C_HandleTypeDef *I2Cx, float * dest1, float * dest2){
 800475c:	b580      	push	{r7, lr}
 800475e:	b09e      	sub	sp, #120	; 0x78
 8004760:	af04      	add	r7, sp, #16
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  //pre def. vars
  uint8_t writeData;

	uint8_t calibData[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8004768:	2300      	movs	r3, #0
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476c:	2300      	movs	r3, #0
 800476e:	643b      	str	r3, [r7, #64]	; 0x40
 8004770:	2300      	movs	r3, #0
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
 8004774:	2300      	movs	r3, #0
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
 8004778:	2300      	movs	r3, #0
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
 800477c:	2300      	movs	r3, #0
 800477e:	63bb      	str	r3, [r7, #56]	; 0x38

	// reset device
	writeData = 0x80;
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Write a one to bit 7 reset bit; toggle reset device
 8004786:	2364      	movs	r3, #100	; 0x64
 8004788:	9302      	str	r3, [sp, #8]
 800478a:	2301      	movs	r3, #1
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2301      	movs	r3, #1
 8004796:	226b      	movs	r2, #107	; 0x6b
 8004798:	21d0      	movs	r1, #208	; 0xd0
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f003 fc10 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80047a0:	2064      	movs	r0, #100	; 0x64
 80047a2:	f002 fc75 	bl	8007090 <HAL_Delay>

	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeData = 0x01;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);
 80047ac:	2364      	movs	r3, #100	; 0x64
 80047ae:	9302      	str	r3, [sp, #8]
 80047b0:	2301      	movs	r3, #1
 80047b2:	9301      	str	r3, [sp, #4]
 80047b4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	2301      	movs	r3, #1
 80047bc:	226b      	movs	r2, #107	; 0x6b
 80047be:	21d0      	movs	r1, #208	; 0xd0
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f003 fbfd 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_2, 1, &writeData, 1, i2c_timeout);
 80047cc:	2364      	movs	r3, #100	; 0x64
 80047ce:	9302      	str	r3, [sp, #8]
 80047d0:	2301      	movs	r3, #1
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2301      	movs	r3, #1
 80047dc:	226c      	movs	r2, #108	; 0x6c
 80047de:	21d0      	movs	r1, #208	; 0xd0
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f003 fbed 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(200);
 80047e6:	20c8      	movs	r0, #200	; 0xc8
 80047e8:	f002 fc52 	bl	8007090 <HAL_Delay>

	// Configure device for bias calculation
	writeData = 0x00;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, INT_ENABLE, 1, &writeData, 1, i2c_timeout);// Disable all interrupts
 80047f2:	2364      	movs	r3, #100	; 0x64
 80047f4:	9302      	str	r3, [sp, #8]
 80047f6:	2301      	movs	r3, #1
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2301      	movs	r3, #1
 8004802:	2238      	movs	r2, #56	; 0x38
 8004804:	21d0      	movs	r1, #208	; 0xd0
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f003 fbda 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable FIFO
 8004812:	2364      	movs	r3, #100	; 0x64
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	2301      	movs	r3, #1
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2301      	movs	r3, #1
 8004822:	2223      	movs	r2, #35	; 0x23
 8004824:	21d0      	movs	r1, #208	; 0xd0
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f003 fbca 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, PWR_MGMT_1, 1, &writeData, 1, i2c_timeout);// Turn on internal clock source
 8004832:	2364      	movs	r3, #100	; 0x64
 8004834:	9302      	str	r3, [sp, #8]
 8004836:	2301      	movs	r3, #1
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	226b      	movs	r2, #107	; 0x6b
 8004844:	21d0      	movs	r1, #208	; 0xd0
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f003 fbba 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, I2C_MST_CTRL, 1, &writeData, 1, i2c_timeout);// Disable I2C master
 8004852:	2364      	movs	r3, #100	; 0x64
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	2301      	movs	r3, #1
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	2301      	movs	r3, #1
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	21d0      	movs	r1, #208	; 0xd0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f003 fbaa 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 800486c:	2300      	movs	r3, #0
 800486e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Disable FIFO and I2C master modes
 8004872:	2364      	movs	r3, #100	; 0x64
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	2301      	movs	r3, #1
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2301      	movs	r3, #1
 8004882:	226a      	movs	r2, #106	; 0x6a
 8004884:	21d0      	movs	r1, #208	; 0xd0
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f003 fb9a 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x0C;
 800488c:	230c      	movs	r3, #12
 800488e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Reset FIFO and DMP
 8004892:	2364      	movs	r3, #100	; 0x64
 8004894:	9302      	str	r3, [sp, #8]
 8004896:	2301      	movs	r3, #1
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	2301      	movs	r3, #1
 80048a2:	226a      	movs	r2, #106	; 0x6a
 80048a4:	21d0      	movs	r1, #208	; 0xd0
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f003 fb8a 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(15);
 80048ac:	200f      	movs	r0, #15
 80048ae:	f002 fbef 	bl	8007090 <HAL_Delay>

	// Configure MPU6050 gyro and accelerometer for bias calculation
	writeData = 0x01;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set low-pass filter to 188 Hz
 80048b8:	2364      	movs	r3, #100	; 0x64
 80048ba:	9302      	str	r3, [sp, #8]
 80048bc:	2301      	movs	r3, #1
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2301      	movs	r3, #1
 80048c8:	221a      	movs	r2, #26
 80048ca:	21d0      	movs	r1, #208	; 0xd0
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f003 fb77 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set sample rate to 1 kHz
 80048d8:	2364      	movs	r3, #100	; 0x64
 80048da:	9302      	str	r3, [sp, #8]
 80048dc:	2301      	movs	r3, #1
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2301      	movs	r3, #1
 80048e8:	2219      	movs	r2, #25
 80048ea:	21d0      	movs	r1, #208	; 0xd0
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f003 fb67 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80048f8:	2364      	movs	r3, #100	; 0x64
 80048fa:	9302      	str	r3, [sp, #8]
 80048fc:	2301      	movs	r3, #1
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2301      	movs	r3, #1
 8004908:	221b      	movs	r2, #27
 800490a:	21d0      	movs	r1, #208	; 0xd0
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f003 fb57 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 8004912:	2300      	movs	r3, #0
 8004914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set accelerometer full-scale to 2 g, maximum sensitivity
 8004918:	2364      	movs	r3, #100	; 0x64
 800491a:	9302      	str	r3, [sp, #8]
 800491c:	2301      	movs	r3, #1
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2301      	movs	r3, #1
 8004928:	221c      	movs	r2, #28
 800492a:	21d0      	movs	r1, #208	; 0xd0
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f003 fb47 	bl	8007fc0 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8004932:	2383      	movs	r3, #131	; 0x83
 8004934:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8004938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800493c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeData = 0x40;
 8004940:	2340      	movs	r3, #64	; 0x40
 8004942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, USER_CTRL, 1, &writeData, 1, i2c_timeout);// Enable FIFO
 8004946:	2364      	movs	r3, #100	; 0x64
 8004948:	9302      	str	r3, [sp, #8]
 800494a:	2301      	movs	r3, #1
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2301      	movs	r3, #1
 8004956:	226a      	movs	r2, #106	; 0x6a
 8004958:	21d0      	movs	r1, #208	; 0xd0
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f003 fb30 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x78;
 8004960:	2378      	movs	r3, #120	; 0x78
 8004962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8004966:	2364      	movs	r3, #100	; 0x64
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	2301      	movs	r3, #1
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2301      	movs	r3, #1
 8004976:	2223      	movs	r2, #35	; 0x23
 8004978:	21d0      	movs	r1, #208	; 0xd0
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f003 fb20 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8004980:	2028      	movs	r0, #40	; 0x28
 8004982:	f002 fb85 	bl	8007090 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeData = 0x00;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, FIFO_EN, 1, &writeData, 1, i2c_timeout);// Disable gyro and accelerometer sensors for FIFO
 800498c:	2364      	movs	r3, #100	; 0x64
 800498e:	9302      	str	r3, [sp, #8]
 8004990:	2301      	movs	r3, #1
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	2301      	movs	r3, #1
 800499c:	2223      	movs	r2, #35	; 0x23
 800499e:	21d0      	movs	r1, #208	; 0xd0
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f003 fb0d 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_COUNTH, 1, &calibData[0], 2, i2c_timeout);// read FIFO sample count
 80049a6:	2364      	movs	r3, #100	; 0x64
 80049a8:	9302      	str	r3, [sp, #8]
 80049aa:	2302      	movs	r3, #2
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	2301      	movs	r3, #1
 80049b6:	2272      	movs	r2, #114	; 0x72
 80049b8:	21d0      	movs	r1, #208	; 0xd0
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f003 fbfa 	bl	80081b4 <HAL_I2C_Mem_Read>
	fifo_count = ((uint16_t)calibData[0] << 8) | calibData[1];
 80049c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	b21a      	sxth	r2, r3
 80049c8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80049cc:	b21b      	sxth	r3, r3
 80049ce:	4313      	orrs	r3, r2
 80049d0:	b21b      	sxth	r3, r3
 80049d2:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 80049d6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80049da:	4a5a      	ldr	r2, [pc, #360]	; (8004b44 <calibrateMPU9250+0x3e8>)
 80049dc:	fba2 2303 	umull	r2, r3, r2, r3
 80049e0:	08db      	lsrs	r3, r3, #3
 80049e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	for (ii = 0; ii < packet_count; ii++) {
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80049ec:	e077      	b.n	8004ade <calibrateMPU9250+0x382>
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 80049ee:	2300      	movs	r3, #0
 80049f0:	833b      	strh	r3, [r7, #24]
 80049f2:	2300      	movs	r3, #0
 80049f4:	837b      	strh	r3, [r7, #26]
 80049f6:	2300      	movs	r3, #0
 80049f8:	83bb      	strh	r3, [r7, #28]
 80049fa:	2300      	movs	r3, #0
 80049fc:	823b      	strh	r3, [r7, #16]
 80049fe:	2300      	movs	r3, #0
 8004a00:	827b      	strh	r3, [r7, #18]
 8004a02:	2300      	movs	r3, #0
 8004a04:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, FIFO_R_W, 1, &calibData[0], 12, i2c_timeout);
 8004a06:	2364      	movs	r3, #100	; 0x64
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2301      	movs	r3, #1
 8004a16:	2274      	movs	r2, #116	; 0x74
 8004a18:	21d0      	movs	r1, #208	; 0xd0
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f003 fbca 	bl	80081b4 <HAL_I2C_Mem_Read>

		//Form signed 16-bit integer for each sample in FIFO
		accel_temp[0] = (int16_t) (((int16_t)calibData[0] << 8) | calibData[1]  ) ;
 8004a20:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	b21a      	sxth	r2, r3
 8004a28:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004a2c:	b21b      	sxth	r3, r3
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	b21b      	sxth	r3, r3
 8004a32:	833b      	strh	r3, [r7, #24]
		accel_temp[1] = (int16_t) (((int16_t)calibData[2] << 8) | calibData[3]  ) ;
 8004a34:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	b21a      	sxth	r2, r3
 8004a3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004a40:	b21b      	sxth	r3, r3
 8004a42:	4313      	orrs	r3, r2
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	837b      	strh	r3, [r7, #26]
		accel_temp[2] = (int16_t) (((int16_t)calibData[4] << 8) | calibData[5]  ) ;
 8004a48:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	b21a      	sxth	r2, r3
 8004a50:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a54:	b21b      	sxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	83bb      	strh	r3, [r7, #28]
		gyro_temp[0]  = (int16_t) (((int16_t)calibData[6] << 8) | calibData[7]  ) ;
 8004a5c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	b21a      	sxth	r2, r3
 8004a64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	b21b      	sxth	r3, r3
 8004a6e:	823b      	strh	r3, [r7, #16]
		gyro_temp[1]  = (int16_t) (((int16_t)calibData[8] << 8) | calibData[9]  ) ;
 8004a70:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	b21a      	sxth	r2, r3
 8004a78:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004a7c:	b21b      	sxth	r3, r3
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	827b      	strh	r3, [r7, #18]
		gyro_temp[2]  = (int16_t) (((int16_t)calibData[10] << 8) | calibData[11]) ;
 8004a84:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	b21a      	sxth	r2, r3
 8004a8c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004a90:	b21b      	sxth	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	82bb      	strh	r3, [r7, #20]

		//Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
		accel_bias[0] += (int32_t) accel_temp[0];
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
		accel_bias[1] += (int32_t) accel_temp[1];
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	637b      	str	r3, [r7, #52]	; 0x34
		accel_bias[2] += (int32_t) accel_temp[2];
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	63bb      	str	r3, [r7, #56]	; 0x38
		gyro_bias[0]  += (int32_t) gyro_temp[0];
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
		gyro_bias[1]  += (int32_t) gyro_temp[1];
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
		gyro_bias[2]  += (int32_t) gyro_temp[2];
 8004aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004acc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	647b      	str	r3, [r7, #68]	; 0x44
	for (ii = 0; ii < packet_count; ii++) {
 8004ad4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004ade:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8004ae2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d381      	bcc.n	80049ee <calibrateMPU9250+0x292>
	}

	//Normalize sums to get average count biases
	accel_bias[0] /= (int32_t) packet_count;
 8004aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004af0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004af4:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias[1] /= (int32_t) packet_count;
 8004af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004afc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias[2] /= (int32_t) packet_count;
 8004b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b08:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
	gyro_bias[0]  /= (int32_t) packet_count;
 8004b0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
	gyro_bias[1]  /= (int32_t) packet_count;
 8004b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
	gyro_bias[2]  /= (int32_t) packet_count;
 8004b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b28:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44

	//Remove gravity from the z-axis accelerometer bias calculation
	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}
 8004b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dd07      	ble.n	8004b48 <calibrateMPU9250+0x3ec>
 8004b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b42:	e006      	b.n	8004b52 <calibrateMPU9250+0x3f6>
 8004b44:	aaaaaaab 	.word	0xaaaaaaab
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8004b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004b4e:	4413      	add	r3, r2
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38

	//Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	calibData[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b54:	425b      	negs	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da00      	bge.n	8004b5c <calibrateMPU9250+0x400>
 8004b5a:	3303      	adds	r3, #3
 8004b5c:	109b      	asrs	r3, r3, #2
 8004b5e:	121b      	asrs	r3, r3, #8
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8004b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b68:	425b      	negs	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da00      	bge.n	8004b70 <calibrateMPU9250+0x414>
 8004b6e:	3303      	adds	r3, #3
 8004b70:	109b      	asrs	r3, r3, #2
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 8004b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b7a:	425b      	negs	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	da00      	bge.n	8004b82 <calibrateMPU9250+0x426>
 8004b80:	3303      	adds	r3, #3
 8004b82:	109b      	asrs	r3, r3, #2
 8004b84:	121b      	asrs	r3, r3, #8
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (-gyro_bias[1]/4)       & 0xFF;
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	425b      	negs	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da00      	bge.n	8004b96 <calibrateMPU9250+0x43a>
 8004b94:	3303      	adds	r3, #3
 8004b96:	109b      	asrs	r3, r3, #2
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8004b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba0:	425b      	negs	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da00      	bge.n	8004ba8 <calibrateMPU9250+0x44c>
 8004ba6:	3303      	adds	r3, #3
 8004ba8:	109b      	asrs	r3, r3, #2
 8004baa:	121b      	asrs	r3, r3, #8
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (-gyro_bias[2]/4)       & 0xFF;
 8004bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb4:	425b      	negs	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da00      	bge.n	8004bbc <calibrateMPU9250+0x460>
 8004bba:	3303      	adds	r3, #3
 8004bbc:	109b      	asrs	r3, r3, #2
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push gyro biases to hardware registers
	writeData = calibData[0];
 8004bc4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004bc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004bcc:	2364      	movs	r3, #100	; 0x64
 8004bce:	9302      	str	r3, [sp, #8]
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2213      	movs	r2, #19
 8004bde:	21d0      	movs	r1, #208	; 0xd0
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f003 f9ed 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004be6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004bea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004bee:	2364      	movs	r3, #100	; 0x64
 8004bf0:	9302      	str	r3, [sp, #8]
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	9301      	str	r3, [sp, #4]
 8004bf6:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	2214      	movs	r2, #20
 8004c00:	21d0      	movs	r1, #208	; 0xd0
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f003 f9dc 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004c08:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004c10:	2364      	movs	r3, #100	; 0x64
 8004c12:	9302      	str	r3, [sp, #8]
 8004c14:	2301      	movs	r3, #1
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	2301      	movs	r3, #1
 8004c20:	2215      	movs	r2, #21
 8004c22:	21d0      	movs	r1, #208	; 0xd0
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f003 f9cb 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004c2a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004c2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004c32:	2364      	movs	r3, #100	; 0x64
 8004c34:	9302      	str	r3, [sp, #8]
 8004c36:	2301      	movs	r3, #1
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2301      	movs	r3, #1
 8004c42:	2216      	movs	r2, #22
 8004c44:	21d0      	movs	r1, #208	; 0xd0
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f003 f9ba 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004c4c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004c50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004c54:	2364      	movs	r3, #100	; 0x64
 8004c56:	9302      	str	r3, [sp, #8]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9301      	str	r3, [sp, #4]
 8004c5c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2301      	movs	r3, #1
 8004c64:	2217      	movs	r2, #23
 8004c66:	21d0      	movs	r1, #208	; 0xd0
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f003 f9a9 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004c6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZG_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004c76:	2364      	movs	r3, #100	; 0x64
 8004c78:	9302      	str	r3, [sp, #8]
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	2301      	movs	r3, #1
 8004c86:	2218      	movs	r2, #24
 8004c88:	21d0      	movs	r1, #208	; 0xd0
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f003 f998 	bl	8007fc0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c9a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cce:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8004cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	3308      	adds	r3, #8
 8004cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf0:	edc3 7a00 	vstr	s15, [r3]

	//	printf("-------------------------\r\n");
	}

	//Construct the accelerometer biases for push to the hardware accelerometer bias registers.
	int32_t accel_bias_reg[3] = {0, 0, 0}; //A place to hold the factory accelerometer trim biases
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout); //Read factory accelerometer trim values
 8004d00:	2364      	movs	r3, #100	; 0x64
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	2302      	movs	r3, #2
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2301      	movs	r3, #1
 8004d10:	2277      	movs	r2, #119	; 0x77
 8004d12:	21d0      	movs	r1, #208	; 0xd0
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f003 fa4d 	bl	80081b4 <HAL_I2C_Mem_Read>
	accel_bias_reg[0] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004d1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004d24:	4313      	orrs	r3, r2
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004d28:	2364      	movs	r3, #100	; 0x64
 8004d2a:	9302      	str	r3, [sp, #8]
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2301      	movs	r3, #1
 8004d38:	227a      	movs	r2, #122	; 0x7a
 8004d3a:	21d0      	movs	r1, #208	; 0xd0
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f003 fa39 	bl	80081b4 <HAL_I2C_Mem_Read>
	accel_bias_reg[1] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004d42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &calibData[0], 2, i2c_timeout);
 8004d50:	2364      	movs	r3, #100	; 0x64
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	2302      	movs	r3, #2
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	227d      	movs	r2, #125	; 0x7d
 8004d62:	21d0      	movs	r1, #208	; 0xd0
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f003 fa25 	bl	80081b4 <HAL_I2C_Mem_Read>
	accel_bias_reg[2] = (int32_t) (((int16_t)calibData[0] << 8) | calibData[1]);
 8004d6a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004d74:	4313      	orrs	r3, r2
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c

	//Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint32_t mask = 1uL;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	65bb      	str	r3, [r7, #88]	; 0x58
	//Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
 8004d7c:	4a89      	ldr	r2, [pc, #548]	; (8004fa4 <calibrateMPU9250+0x848>)
 8004d7e:	f107 0320 	add.w	r3, r7, #32
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	4611      	mov	r1, r2
 8004d86:	8019      	strh	r1, [r3, #0]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	0c12      	lsrs	r2, r2, #16
 8004d8c:	701a      	strb	r2, [r3, #0]

	for(ii = 0; ii < 3; ii++) {
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004d94:	e017      	b.n	8004dc6 <calibrateMPU9250+0x66a>
		//If temperature compensation bit is set, record that fact in mask_bit
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01;
 8004d96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	3368      	adds	r3, #104	; 0x68
 8004d9e:	443b      	add	r3, r7
 8004da0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004da4:	461a      	mov	r2, r3
 8004da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <calibrateMPU9250+0x660>
 8004dae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004db2:	3368      	adds	r3, #104	; 0x68
 8004db4:	443b      	add	r3, r7
 8004db6:	2201      	movs	r2, #1
 8004db8:	f803 2c48 	strb.w	r2, [r3, #-72]
	for(ii = 0; ii < 3; ii++) {
 8004dbc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004dc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d9e3      	bls.n	8004d96 <calibrateMPU9250+0x63a>
	}

	//Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); //Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	da00      	bge.n	8004dd8 <calibrateMPU9250+0x67c>
 8004dd6:	3307      	adds	r3, #7
 8004dd8:	10db      	asrs	r3, r3, #3
 8004dda:	425b      	negs	r3, r3
 8004ddc:	4413      	add	r3, r2
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
	accel_bias_reg[1] -= (accel_bias[1]/8);
 8004de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	da00      	bge.n	8004dea <calibrateMPU9250+0x68e>
 8004de8:	3307      	adds	r3, #7
 8004dea:	10db      	asrs	r3, r3, #3
 8004dec:	425b      	negs	r3, r3
 8004dee:	4413      	add	r3, r2
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
	accel_bias_reg[2] -= (accel_bias[2]/8);
 8004df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	da00      	bge.n	8004dfc <calibrateMPU9250+0x6a0>
 8004dfa:	3307      	adds	r3, #7
 8004dfc:	10db      	asrs	r3, r3, #3
 8004dfe:	425b      	negs	r3, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c

	calibData[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	121b      	asrs	r3, r3, #8
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	calibData[1] = (accel_bias_reg[0])      & 0xFF;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[1] = calibData[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004e16:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8004e1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	calibData[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	121b      	asrs	r3, r3, #8
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	calibData[3] = (accel_bias_reg[1])      & 0xFF;
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[3] = calibData[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004e38:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8004e3c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004e40:	4313      	orrs	r3, r2
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	calibData[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	121b      	asrs	r3, r3, #8
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	calibData[5] = (accel_bias_reg[2])      & 0xFF;
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	calibData[5] = calibData[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8004e5a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004e5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004e62:	4313      	orrs	r3, r2
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	//Push accelerometer biases to hardware registers
	writeData = calibData[0];
 8004e6a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004e72:	2364      	movs	r3, #100	; 0x64
 8004e74:	9302      	str	r3, [sp, #8]
 8004e76:	2301      	movs	r3, #1
 8004e78:	9301      	str	r3, [sp, #4]
 8004e7a:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	2301      	movs	r3, #1
 8004e82:	2277      	movs	r2, #119	; 0x77
 8004e84:	21d0      	movs	r1, #208	; 0xd0
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f003 f89a 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[1];
 8004e8c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004e90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, XA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004e94:	2364      	movs	r3, #100	; 0x64
 8004e96:	9302      	str	r3, [sp, #8]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	2278      	movs	r2, #120	; 0x78
 8004ea6:	21d0      	movs	r1, #208	; 0xd0
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f003 f889 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[2];
 8004eae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004eb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004eb6:	2364      	movs	r3, #100	; 0x64
 8004eb8:	9302      	str	r3, [sp, #8]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	227a      	movs	r2, #122	; 0x7a
 8004ec8:	21d0      	movs	r1, #208	; 0xd0
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f003 f878 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[3];
 8004ed0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, YA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004ed8:	2364      	movs	r3, #100	; 0x64
 8004eda:	9302      	str	r3, [sp, #8]
 8004edc:	2301      	movs	r3, #1
 8004ede:	9301      	str	r3, [sp, #4]
 8004ee0:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	227b      	movs	r2, #123	; 0x7b
 8004eea:	21d0      	movs	r1, #208	; 0xd0
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f003 f867 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[4];
 8004ef2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004ef6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_H, 1, &writeData, 1, i2c_timeout);
 8004efa:	2364      	movs	r3, #100	; 0x64
 8004efc:	9302      	str	r3, [sp, #8]
 8004efe:	2301      	movs	r3, #1
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2301      	movs	r3, #1
 8004f0a:	227d      	movs	r2, #125	; 0x7d
 8004f0c:	21d0      	movs	r1, #208	; 0xd0
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f003 f856 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = calibData[5];
 8004f14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ZA_OFFSET_L, 1, &writeData, 1, i2c_timeout);
 8004f1c:	2364      	movs	r3, #100	; 0x64
 8004f1e:	9302      	str	r3, [sp, #8]
 8004f20:	2301      	movs	r3, #1
 8004f22:	9301      	str	r3, [sp, #4]
 8004f24:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	227e      	movs	r2, #126	; 0x7e
 8004f2e:	21d0      	movs	r1, #208	; 0xd0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f003 f845 	bl	8007fc0 <HAL_I2C_Mem_Write>

	//Output scaled gyro biases for display in the main program
	dest2[0] = (float) accel_bias[0]/(float) accelsensitivity;
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = (float) accel_bias[1]/(float) accelsensitivity;
 8004f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f58:	ee07 3a90 	vmov	s15, r3
 8004f5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f60:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f74:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = (float) accel_bias[2]/(float) accelsensitivity;
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	ee07 3a90 	vmov	s15, r3
 8004f7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004f82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3308      	adds	r3, #8
 8004f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f96:	edc3 7a00 	vstr	s15, [r3]
//		printf("Accel bias Y: %f\r\n", accelBiasY);
//		printf("Accel bias Z: %f\r\n", accelBiasZ);

//		printf("-------------------------\r\n");
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3768      	adds	r7, #104	; 0x68
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	08010128 	.word	0x08010128

08004fa8 <MPU9250SelfTest>:


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(I2C_HandleTypeDef *I2Cx, float * destination) {
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	b0a8      	sub	sp, #160	; 0xa0
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
	uint8_t writeData;

	uint8_t rawTestData[6] = {0, 0, 0, 0, 0, 0};
 8004fb2:	4aa2      	ldr	r2, [pc, #648]	; (800523c <MPU9250SelfTest+0x294>)
 8004fb4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004fb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fbc:	6018      	str	r0, [r3, #0]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	8019      	strh	r1, [r3, #0]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8004fc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	605a      	str	r2, [r3, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
 8004fe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	writeData = 0x00;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, SMPLRT_DIV, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz
 8004ffe:	2364      	movs	r3, #100	; 0x64
 8005000:	9302      	str	r3, [sp, #8]
 8005002:	2301      	movs	r3, #1
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2301      	movs	r3, #1
 800500e:	2219      	movs	r2, #25
 8005010:	21d0      	movs	r1, #208	; 0xd0
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f002 ffd4 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, CONFIG, 1, &writeData, 1, i2c_timeout);// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800501e:	2364      	movs	r3, #100	; 0x64
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	2301      	movs	r3, #1
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	2301      	movs	r3, #1
 800502e:	221a      	movs	r2, #26
 8005030:	21d0      	movs	r1, #208	; 0xd0
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 ffc4 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 8005038:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the gyro to 250 dps
 8005044:	2364      	movs	r3, #100	; 0x64
 8005046:	9302      	str	r3, [sp, #8]
 8005048:	2301      	movs	r3, #1
 800504a:	9301      	str	r3, [sp, #4]
 800504c:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	2301      	movs	r3, #1
 8005054:	221b      	movs	r2, #27
 8005056:	21d0      	movs	r1, #208	; 0xd0
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f002 ffb1 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x02;
 800505e:	2302      	movs	r3, #2
 8005060:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG2, 1, &writeData, 1, i2c_timeout);// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8005064:	2364      	movs	r3, #100	; 0x64
 8005066:	9302      	str	r3, [sp, #8]
 8005068:	2301      	movs	r3, #1
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2301      	movs	r3, #1
 8005074:	221d      	movs	r2, #29
 8005076:	21d0      	movs	r1, #208	; 0xd0
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f002 ffa1 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = FS<<3;
 800507e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Set full scale range for the accelerometer to 2 g
 800508a:	2364      	movs	r3, #100	; 0x64
 800508c:	9302      	str	r3, [sp, #8]
 800508e:	2301      	movs	r3, #1
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2301      	movs	r3, #1
 800509a:	221c      	movs	r2, #28
 800509c:	21d0      	movs	r1, #208	; 0xd0
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f002 ff8e 	bl	8007fc0 <HAL_I2C_Mem_Write>

	//get average current values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 80050a4:	2300      	movs	r3, #0
 80050a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80050aa:	e066      	b.n	800517a <MPU9250SelfTest+0x1d2>

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 80050ac:	2364      	movs	r3, #100	; 0x64
 80050ae:	9302      	str	r3, [sp, #8]
 80050b0:	2306      	movs	r3, #6
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	2301      	movs	r3, #1
 80050bc:	223b      	movs	r2, #59	; 0x3b
 80050be:	21d0      	movs	r1, #208	; 0xd0
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f003 f877 	bl	80081b4 <HAL_I2C_Mem_Read>
		aAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80050cc:	0212      	lsls	r2, r2, #8
 80050ce:	b211      	sxth	r1, r2
 80050d0:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80050d4:	b212      	sxth	r2, r2
 80050d6:	430a      	orrs	r2, r1
 80050d8:	b212      	sxth	r2, r2
 80050da:	4413      	add	r3, r2
 80050dc:	653b      	str	r3, [r7, #80]	; 0x50
		aAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80050de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e0:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80050e4:	0212      	lsls	r2, r2, #8
 80050e6:	b211      	sxth	r1, r2
 80050e8:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80050ec:	b212      	sxth	r2, r2
 80050ee:	430a      	orrs	r2, r1
 80050f0:	b212      	sxth	r2, r2
 80050f2:	4413      	add	r3, r2
 80050f4:	657b      	str	r3, [r7, #84]	; 0x54
		aAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80050f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f8:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80050fc:	0212      	lsls	r2, r2, #8
 80050fe:	b211      	sxth	r1, r2
 8005100:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8005104:	b212      	sxth	r2, r2
 8005106:	430a      	orrs	r2, r1
 8005108:	b212      	sxth	r2, r2
 800510a:	4413      	add	r3, r2
 800510c:	65bb      	str	r3, [r7, #88]	; 0x58

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 800510e:	2364      	movs	r3, #100	; 0x64
 8005110:	9302      	str	r3, [sp, #8]
 8005112:	2306      	movs	r3, #6
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2301      	movs	r3, #1
 800511e:	2243      	movs	r2, #67	; 0x43
 8005120:	21d0      	movs	r1, #208	; 0xd0
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f003 f846 	bl	80081b4 <HAL_I2C_Mem_Read>
		gAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 8005128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512a:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800512e:	0212      	lsls	r2, r2, #8
 8005130:	b211      	sxth	r1, r2
 8005132:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 8005136:	b212      	sxth	r2, r2
 8005138:	430a      	orrs	r2, r1
 800513a:	b212      	sxth	r2, r2
 800513c:	4413      	add	r3, r2
 800513e:	65fb      	str	r3, [r7, #92]	; 0x5c
		gAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005140:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005142:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 8005146:	0212      	lsls	r2, r2, #8
 8005148:	b211      	sxth	r1, r2
 800514a:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800514e:	b212      	sxth	r2, r2
 8005150:	430a      	orrs	r2, r1
 8005152:	b212      	sxth	r2, r2
 8005154:	4413      	add	r3, r2
 8005156:	663b      	str	r3, [r7, #96]	; 0x60
		gAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 8005158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800515e:	0212      	lsls	r2, r2, #8
 8005160:	b211      	sxth	r1, r2
 8005162:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8005166:	b212      	sxth	r2, r2
 8005168:	430a      	orrs	r2, r1
 800516a:	b212      	sxth	r2, r2
 800516c:	4413      	add	r3, r2
 800516e:	667b      	str	r3, [r7, #100]	; 0x64
	for( int ii = 0; ii < 200; ii++) {
 8005170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005174:	3301      	adds	r3, #1
 8005176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800517a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800517e:	2bc7      	cmp	r3, #199	; 0xc7
 8005180:	dd94      	ble.n	80050ac <MPU9250SelfTest+0x104>
	}

	//Get average of 200 values and store as average current readings
	for (int ii =0; ii < 3; ii++) {
 8005182:	2300      	movs	r3, #0
 8005184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005188:	e02c      	b.n	80051e4 <MPU9250SelfTest+0x23c>
		aAvg[ii] /= 200;
 800518a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	3390      	adds	r3, #144	; 0x90
 8005192:	443b      	add	r3, r7
 8005194:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005198:	4a29      	ldr	r2, [pc, #164]	; (8005240 <MPU9250SelfTest+0x298>)
 800519a:	fb82 1203 	smull	r1, r2, r2, r3
 800519e:	1192      	asrs	r2, r2, #6
 80051a0:	17db      	asrs	r3, r3, #31
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	3390      	adds	r3, #144	; 0x90
 80051ac:	443b      	add	r3, r7
 80051ae:	f843 2c40 	str.w	r2, [r3, #-64]
		gAvg[ii] /= 200;
 80051b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	3390      	adds	r3, #144	; 0x90
 80051ba:	443b      	add	r3, r7
 80051bc:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <MPU9250SelfTest+0x298>)
 80051c2:	fb82 1203 	smull	r1, r2, r2, r3
 80051c6:	1192      	asrs	r2, r2, #6
 80051c8:	17db      	asrs	r3, r3, #31
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3390      	adds	r3, #144	; 0x90
 80051d4:	443b      	add	r3, r7
 80051d6:	f843 2c34 	str.w	r2, [r3, #-52]
	for (int ii =0; ii < 3; ii++) {
 80051da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051de:	3301      	adds	r3, #1
 80051e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	ddce      	ble.n	800518a <MPU9250SelfTest+0x1e2>
	}

	//Configure the accelerometer for self-test
	writeData = 0xE0;
 80051ec:	23e0      	movs	r3, #224	; 0xe0
 80051ee:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set accelerometer range to +/- 2 g
 80051f2:	2364      	movs	r3, #100	; 0x64
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	2301      	movs	r3, #1
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	2301      	movs	r3, #1
 8005202:	221c      	movs	r2, #28
 8005204:	21d0      	movs	r1, #208	; 0xd0
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f002 feda 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0xE0;
 800520c:	23e0      	movs	r3, #224	; 0xe0
 800520e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);// Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8005212:	2364      	movs	r3, #100	; 0x64
 8005214:	9302      	str	r3, [sp, #8]
 8005216:	2301      	movs	r3, #1
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	f107 0376 	add.w	r3, r7, #118	; 0x76
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2301      	movs	r3, #1
 8005222:	221b      	movs	r2, #27
 8005224:	21d0      	movs	r1, #208	; 0xd0
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f002 feca 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 800522c:	2019      	movs	r0, #25
 800522e:	f001 ff2f 	bl	8007090 <HAL_Delay>

	//get average self-test values of gyro and acclerometer
	for( int ii = 0; ii < 200; ii++) {
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005238:	e06b      	b.n	8005312 <MPU9250SelfTest+0x36a>
 800523a:	bf00      	nop
 800523c:	0801012c 	.word	0x0801012c
 8005240:	51eb851f 	.word	0x51eb851f

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers into data array
 8005244:	2364      	movs	r3, #100	; 0x64
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	2306      	movs	r3, #6
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	2301      	movs	r3, #1
 8005254:	223b      	movs	r2, #59	; 0x3b
 8005256:	21d0      	movs	r1, #208	; 0xd0
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f002 ffab 	bl	80081b4 <HAL_I2C_Mem_Read>
		aSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 800525e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005260:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8005264:	0212      	lsls	r2, r2, #8
 8005266:	b211      	sxth	r1, r2
 8005268:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 800526c:	b212      	sxth	r2, r2
 800526e:	430a      	orrs	r2, r1
 8005270:	b212      	sxth	r2, r2
 8005272:	4413      	add	r3, r2
 8005274:	647b      	str	r3, [r7, #68]	; 0x44
		aSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 8005276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005278:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800527c:	0212      	lsls	r2, r2, #8
 800527e:	b211      	sxth	r1, r2
 8005280:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8005284:	b212      	sxth	r2, r2
 8005286:	430a      	orrs	r2, r1
 8005288:	b212      	sxth	r2, r2
 800528a:	4413      	add	r3, r2
 800528c:	64bb      	str	r3, [r7, #72]	; 0x48
		aSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 800528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005290:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8005294:	0212      	lsls	r2, r2, #8
 8005296:	b211      	sxth	r1, r2
 8005298:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 800529c:	b212      	sxth	r2, r2
 800529e:	430a      	orrs	r2, r1
 80052a0:	b212      	sxth	r2, r2
 80052a2:	4413      	add	r3, r2
 80052a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, GYRO_XOUT_H, 1, &rawTestData[0], 6, i2c_timeout);// Read the six raw data registers sequentially into data array
 80052a6:	2364      	movs	r3, #100	; 0x64
 80052a8:	9302      	str	r3, [sp, #8]
 80052aa:	2306      	movs	r3, #6
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2301      	movs	r3, #1
 80052b6:	2243      	movs	r2, #67	; 0x43
 80052b8:	21d0      	movs	r1, #208	; 0xd0
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f002 ff7a 	bl	80081b4 <HAL_I2C_Mem_Read>
		gSTAvg[0] += (int16_t)(((int16_t)rawTestData[0] << 8) | rawTestData[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 80052c6:	0212      	lsls	r2, r2, #8
 80052c8:	b211      	sxth	r1, r2
 80052ca:	f897 2071 	ldrb.w	r2, [r7, #113]	; 0x71
 80052ce:	b212      	sxth	r2, r2
 80052d0:	430a      	orrs	r2, r1
 80052d2:	b212      	sxth	r2, r2
 80052d4:	4413      	add	r3, r2
 80052d6:	63bb      	str	r3, [r7, #56]	; 0x38
		gSTAvg[1] += (int16_t)(((int16_t)rawTestData[2] << 8) | rawTestData[3]) ;
 80052d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052da:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80052de:	0212      	lsls	r2, r2, #8
 80052e0:	b211      	sxth	r1, r2
 80052e2:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 80052e6:	b212      	sxth	r2, r2
 80052e8:	430a      	orrs	r2, r1
 80052ea:	b212      	sxth	r2, r2
 80052ec:	4413      	add	r3, r2
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
		gSTAvg[2] += (int16_t)(((int16_t)rawTestData[4] << 8) | rawTestData[5]) ;
 80052f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052f2:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 80052f6:	0212      	lsls	r2, r2, #8
 80052f8:	b211      	sxth	r1, r2
 80052fa:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 80052fe:	b212      	sxth	r2, r2
 8005300:	430a      	orrs	r2, r1
 8005302:	b212      	sxth	r2, r2
 8005304:	4413      	add	r3, r2
 8005306:	643b      	str	r3, [r7, #64]	; 0x40
	for( int ii = 0; ii < 200; ii++) {
 8005308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800530c:	3301      	adds	r3, #1
 800530e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005316:	2bc7      	cmp	r3, #199	; 0xc7
 8005318:	dd94      	ble.n	8005244 <MPU9250SelfTest+0x29c>
	}

	//Get average of 200 values and store as average self-test readings
	for (int ii =0; ii < 3; ii++) {
 800531a:	2300      	movs	r3, #0
 800531c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005320:	e02c      	b.n	800537c <MPU9250SelfTest+0x3d4>
		aSTAvg[ii] /= 200;
 8005322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	3390      	adds	r3, #144	; 0x90
 800532a:	443b      	add	r3, r7
 800532c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005330:	4ae3      	ldr	r2, [pc, #908]	; (80056c0 <MPU9250SelfTest+0x718>)
 8005332:	fb82 1203 	smull	r1, r2, r2, r3
 8005336:	1192      	asrs	r2, r2, #6
 8005338:	17db      	asrs	r3, r3, #31
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	3390      	adds	r3, #144	; 0x90
 8005344:	443b      	add	r3, r7
 8005346:	f843 2c4c 	str.w	r2, [r3, #-76]
		gSTAvg[ii] /= 200;
 800534a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	3390      	adds	r3, #144	; 0x90
 8005352:	443b      	add	r3, r7
 8005354:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8005358:	4ad9      	ldr	r2, [pc, #868]	; (80056c0 <MPU9250SelfTest+0x718>)
 800535a:	fb82 1203 	smull	r1, r2, r2, r3
 800535e:	1192      	asrs	r2, r2, #6
 8005360:	17db      	asrs	r3, r3, #31
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	3390      	adds	r3, #144	; 0x90
 800536c:	443b      	add	r3, r7
 800536e:	f843 2c58 	str.w	r2, [r3, #-88]
	for (int ii =0; ii < 3; ii++) {
 8005372:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005376:	3301      	adds	r3, #1
 8005378:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800537c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005380:	2b02      	cmp	r3, #2
 8005382:	ddce      	ble.n	8005322 <MPU9250SelfTest+0x37a>
	}

	//Configure the gyro and accelerometer for normal operation
	writeData = 0x00;
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, ACCEL_CONFIG, 1, &writeData, 1, i2c_timeout);
 800538a:	2364      	movs	r3, #100	; 0x64
 800538c:	9302      	str	r3, [sp, #8]
 800538e:	2301      	movs	r3, #1
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	f107 0376 	add.w	r3, r7, #118	; 0x76
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	2301      	movs	r3, #1
 800539a:	221c      	movs	r2, #28
 800539c:	21d0      	movs	r1, #208	; 0xd0
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f002 fe0e 	bl	8007fc0 <HAL_I2C_Mem_Write>
	writeData = 0x00;
 80053a4:	2300      	movs	r3, #0
 80053a6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	HAL_I2C_Mem_Write(I2Cx, MPU9250_ADDRESS, GYRO_CONFIG, 1, &writeData, 1, i2c_timeout);
 80053aa:	2364      	movs	r3, #100	; 0x64
 80053ac:	9302      	str	r3, [sp, #8]
 80053ae:	2301      	movs	r3, #1
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	2301      	movs	r3, #1
 80053ba:	221b      	movs	r2, #27
 80053bc:	21d0      	movs	r1, #208	; 0xd0
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f002 fdfe 	bl	8007fc0 <HAL_I2C_Mem_Write>
	HAL_Delay(25);  // Delay a while to let the device stabilize
 80053c4:	2019      	movs	r0, #25
 80053c6:	f001 fe63 	bl	8007090 <HAL_Delay>

	//Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_ACCEL, 1, &selfTest[0], 1, i2c_timeout);// X-axis accel self-test results
 80053ca:	2364      	movs	r3, #100	; 0x64
 80053cc:	9302      	str	r3, [sp, #8]
 80053ce:	2301      	movs	r3, #1
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	2301      	movs	r3, #1
 80053da:	220d      	movs	r2, #13
 80053dc:	21d0      	movs	r1, #208	; 0xd0
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f002 fee8 	bl	80081b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_ACCEL, 1, &selfTest[1], 1, i2c_timeout);// Y-axis accel self-test results
 80053e4:	2364      	movs	r3, #100	; 0x64
 80053e6:	9302      	str	r3, [sp, #8]
 80053e8:	2301      	movs	r3, #1
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80053f0:	3301      	adds	r3, #1
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	2301      	movs	r3, #1
 80053f6:	220e      	movs	r2, #14
 80053f8:	21d0      	movs	r1, #208	; 0xd0
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f002 feda 	bl	80081b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_ACCEL, 1, &selfTest[2], 1, i2c_timeout);// Z-axis accel self-test results
 8005400:	2364      	movs	r3, #100	; 0x64
 8005402:	9302      	str	r3, [sp, #8]
 8005404:	2301      	movs	r3, #1
 8005406:	9301      	str	r3, [sp, #4]
 8005408:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800540c:	3302      	adds	r3, #2
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	2301      	movs	r3, #1
 8005412:	220f      	movs	r2, #15
 8005414:	21d0      	movs	r1, #208	; 0xd0
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f002 fecc 	bl	80081b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_X_GYRO, 1, &selfTest[3], 1, i2c_timeout);// X-axis gyro self-test results
 800541c:	2364      	movs	r3, #100	; 0x64
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	2301      	movs	r3, #1
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005428:	3303      	adds	r3, #3
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	2301      	movs	r3, #1
 800542e:	2200      	movs	r2, #0
 8005430:	21d0      	movs	r1, #208	; 0xd0
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f002 febe 	bl	80081b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Y_GYRO, 1, &selfTest[4], 1, i2c_timeout);// Y-axis gyro self-test results
 8005438:	2364      	movs	r3, #100	; 0x64
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	2301      	movs	r3, #1
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005444:	3304      	adds	r3, #4
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2301      	movs	r3, #1
 800544a:	2201      	movs	r2, #1
 800544c:	21d0      	movs	r1, #208	; 0xd0
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f002 feb0 	bl	80081b4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2Cx, MPU9250_ADDRESS, SELF_TEST_Z_GYRO, 1, &selfTest[5], 1, i2c_timeout);// Z-axis gyro self-test results
 8005454:	2364      	movs	r3, #100	; 0x64
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	2301      	movs	r3, #1
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005460:	3305      	adds	r3, #5
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2301      	movs	r3, #1
 8005466:	2202      	movs	r2, #2
 8005468:	21d0      	movs	r1, #208	; 0xd0
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f002 fea2 	bl	80081b4 <HAL_I2C_Mem_Read>

	//Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8005470:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005474:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005478:	fa02 f303 	lsl.w	r3, r2, r3
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005484:	ee17 0a90 	vmov	r0, s15
 8005488:	f7fb f876 	bl	8000578 <__aeabi_f2d>
 800548c:	4604      	mov	r4, r0
 800548e:	460d      	mov	r5, r1
 8005490:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549c:	ee17 0a90 	vmov	r0, s15
 80054a0:	f7fb f86a 	bl	8000578 <__aeabi_f2d>
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	4b86      	ldr	r3, [pc, #536]	; (80056c4 <MPU9250SelfTest+0x71c>)
 80054aa:	f7fa ff05 	bl	80002b8 <__aeabi_dsub>
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	ec43 2b17 	vmov	d7, r2, r3
 80054b6:	eeb0 1a47 	vmov.f32	s2, s14
 80054ba:	eef0 1a67 	vmov.f32	s3, s15
 80054be:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 80056b8 <MPU9250SelfTest+0x710>
 80054c2:	f008 fb59 	bl	800db78 <pow>
 80054c6:	ec53 2b10 	vmov	r2, r3, d0
 80054ca:	4620      	mov	r0, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	f7fb f8ab 	bl	8000628 <__aeabi_dmul>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	f7fb fb9d 	bl	8000c18 <__aeabi_d2f>
 80054de:	4603      	mov	r3, r0
 80054e0:	623b      	str	r3, [r7, #32]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80054e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80054e6:	f640 223c 	movw	r2, #2620	; 0xa3c
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054f6:	ee17 0a90 	vmov	r0, s15
 80054fa:	f7fb f83d 	bl	8000578 <__aeabi_f2d>
 80054fe:	4604      	mov	r4, r0
 8005500:	460d      	mov	r5, r1
 8005502:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800550e:	ee17 0a90 	vmov	r0, s15
 8005512:	f7fb f831 	bl	8000578 <__aeabi_f2d>
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	4b6a      	ldr	r3, [pc, #424]	; (80056c4 <MPU9250SelfTest+0x71c>)
 800551c:	f7fa fecc 	bl	80002b8 <__aeabi_dsub>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	ec43 2b17 	vmov	d7, r2, r3
 8005528:	eeb0 1a47 	vmov.f32	s2, s14
 800552c:	eef0 1a67 	vmov.f32	s3, s15
 8005530:	ed9f 0b61 	vldr	d0, [pc, #388]	; 80056b8 <MPU9250SelfTest+0x710>
 8005534:	f008 fb20 	bl	800db78 <pow>
 8005538:	ec53 2b10 	vmov	r2, r3, d0
 800553c:	4620      	mov	r0, r4
 800553e:	4629      	mov	r1, r5
 8005540:	f7fb f872 	bl	8000628 <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	f7fb fb64 	bl	8000c18 <__aeabi_d2f>
 8005550:	4603      	mov	r3, r0
 8005552:	627b      	str	r3, [r7, #36]	; 0x24
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 8005554:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005558:	f640 223c 	movw	r2, #2620	; 0xa3c
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005568:	ee17 0a90 	vmov	r0, s15
 800556c:	f7fb f804 	bl	8000578 <__aeabi_f2d>
 8005570:	4604      	mov	r4, r0
 8005572:	460d      	mov	r5, r1
 8005574:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005580:	ee17 0a90 	vmov	r0, s15
 8005584:	f7fa fff8 	bl	8000578 <__aeabi_f2d>
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <MPU9250SelfTest+0x71c>)
 800558e:	f7fa fe93 	bl	80002b8 <__aeabi_dsub>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	ec43 2b17 	vmov	d7, r2, r3
 800559a:	eeb0 1a47 	vmov.f32	s2, s14
 800559e:	eef0 1a67 	vmov.f32	s3, s15
 80055a2:	ed9f 0b45 	vldr	d0, [pc, #276]	; 80056b8 <MPU9250SelfTest+0x710>
 80055a6:	f008 fae7 	bl	800db78 <pow>
 80055aa:	ec53 2b10 	vmov	r2, r3, d0
 80055ae:	4620      	mov	r0, r4
 80055b0:	4629      	mov	r1, r5
 80055b2:	f7fb f839 	bl	8000628 <__aeabi_dmul>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4610      	mov	r0, r2
 80055bc:	4619      	mov	r1, r3
 80055be:	f7fb fb2b 	bl	8000c18 <__aeabi_d2f>
 80055c2:	4603      	mov	r3, r0
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 80055c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80055ca:	f640 223c 	movw	r2, #2620	; 0xa3c
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055da:	ee17 0a90 	vmov	r0, s15
 80055de:	f7fa ffcb 	bl	8000578 <__aeabi_f2d>
 80055e2:	4604      	mov	r4, r0
 80055e4:	460d      	mov	r5, r1
 80055e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f2:	ee17 0a90 	vmov	r0, s15
 80055f6:	f7fa ffbf 	bl	8000578 <__aeabi_f2d>
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	4b31      	ldr	r3, [pc, #196]	; (80056c4 <MPU9250SelfTest+0x71c>)
 8005600:	f7fa fe5a 	bl	80002b8 <__aeabi_dsub>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	ec43 2b17 	vmov	d7, r2, r3
 800560c:	eeb0 1a47 	vmov.f32	s2, s14
 8005610:	eef0 1a67 	vmov.f32	s3, s15
 8005614:	ed9f 0b28 	vldr	d0, [pc, #160]	; 80056b8 <MPU9250SelfTest+0x710>
 8005618:	f008 faae 	bl	800db78 <pow>
 800561c:	ec53 2b10 	vmov	r2, r3, d0
 8005620:	4620      	mov	r0, r4
 8005622:	4629      	mov	r1, r5
 8005624:	f7fb f800 	bl	8000628 <__aeabi_dmul>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	f7fb faf2 	bl	8000c18 <__aeabi_d2f>
 8005634:	4603      	mov	r3, r0
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 8005638:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800563c:	f640 223c 	movw	r2, #2620	; 0xa3c
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	ee17 0a90 	vmov	r0, s15
 8005650:	f7fa ff92 	bl	8000578 <__aeabi_f2d>
 8005654:	4604      	mov	r4, r0
 8005656:	460d      	mov	r5, r1
 8005658:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005664:	ee17 0a90 	vmov	r0, s15
 8005668:	f7fa ff86 	bl	8000578 <__aeabi_f2d>
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <MPU9250SelfTest+0x71c>)
 8005672:	f7fa fe21 	bl	80002b8 <__aeabi_dsub>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	ec43 2b17 	vmov	d7, r2, r3
 800567e:	eeb0 1a47 	vmov.f32	s2, s14
 8005682:	eef0 1a67 	vmov.f32	s3, s15
 8005686:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80056b8 <MPU9250SelfTest+0x710>
 800568a:	f008 fa75 	bl	800db78 <pow>
 800568e:	ec53 2b10 	vmov	r2, r3, d0
 8005692:	4620      	mov	r0, r4
 8005694:	4629      	mov	r1, r5
 8005696:	f7fa ffc7 	bl	8000628 <__aeabi_dmul>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	f7fb fab9 	bl	8000c18 <__aeabi_d2f>
 80056a6:	4603      	mov	r3, r0
 80056a8:	633b      	str	r3, [r7, #48]	; 0x30
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 80056aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80056ae:	f640 223c 	movw	r2, #2620	; 0xa3c
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	e007      	b.n	80056c8 <MPU9250SelfTest+0x720>
 80056b8:	c28f5c29 	.word	0xc28f5c29
 80056bc:	3ff028f5 	.word	0x3ff028f5
 80056c0:	51eb851f 	.word	0x51eb851f
 80056c4:	3ff00000 	.word	0x3ff00000
 80056c8:	ee07 3a90 	vmov	s15, r3
 80056cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d0:	ee17 0a90 	vmov	r0, s15
 80056d4:	f7fa ff50 	bl	8000578 <__aeabi_f2d>
 80056d8:	4604      	mov	r4, r0
 80056da:	460d      	mov	r5, r1
 80056dc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e8:	ee17 0a90 	vmov	r0, s15
 80056ec:	f7fa ff44 	bl	8000578 <__aeabi_f2d>
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	4ba4      	ldr	r3, [pc, #656]	; (8005988 <MPU9250SelfTest+0x9e0>)
 80056f6:	f7fa fddf 	bl	80002b8 <__aeabi_dsub>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	ec43 2b17 	vmov	d7, r2, r3
 8005702:	eeb0 1a47 	vmov.f32	s2, s14
 8005706:	eef0 1a67 	vmov.f32	s3, s15
 800570a:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8005980 <MPU9250SelfTest+0x9d8>
 800570e:	f008 fa33 	bl	800db78 <pow>
 8005712:	ec53 2b10 	vmov	r2, r3, d0
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	f7fa ff85 	bl	8000628 <__aeabi_dmul>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	4610      	mov	r0, r2
 8005724:	4619      	mov	r1, r3
 8005726:	f7fb fa77 	bl	8000c18 <__aeabi_d2f>
 800572a:	4603      	mov	r3, r0
 800572c:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t testResults[6];

	//Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	//To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 800572e:	2300      	movs	r3, #0
 8005730:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005732:	e08a      	b.n	800584a <MPU9250SelfTest+0x8a2>
		testResults[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	3390      	adds	r3, #144	; 0x90
 800573a:	443b      	add	r3, r7
 800573c:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005740:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	3390      	adds	r3, #144	; 0x90
 8005746:	443b      	add	r3, r7
 8005748:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005756:	ee17 0a90 	vmov	r0, s15
 800575a:	f7fa ff0d 	bl	8000578 <__aeabi_f2d>
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	4b8a      	ldr	r3, [pc, #552]	; (800598c <MPU9250SelfTest+0x9e4>)
 8005764:	f7fa ff60 	bl	8000628 <__aeabi_dmul>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4614      	mov	r4, r2
 800576e:	461d      	mov	r5, r3
 8005770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	3390      	adds	r3, #144	; 0x90
 8005776:	443b      	add	r3, r7
 8005778:	3b70      	subs	r3, #112	; 0x70
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fa fefb 	bl	8000578 <__aeabi_f2d>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4620      	mov	r0, r4
 8005788:	4629      	mov	r1, r5
 800578a:	f7fb f877 	bl	800087c <__aeabi_ddiv>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	4b7c      	ldr	r3, [pc, #496]	; (800598c <MPU9250SelfTest+0x9e4>)
 800579c:	f7fa fd8c 	bl	80002b8 <__aeabi_dsub>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	f7fb fa16 	bl	8000bd8 <__aeabi_d2uiz>
 80057ac:	4602      	mov	r2, r0
 80057ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3390      	adds	r3, #144	; 0x90
 80057b4:	443b      	add	r3, r7
 80057b6:	f843 2c88 	str.w	r2, [r3, #-136]
		testResults[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80057ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	3390      	adds	r3, #144	; 0x90
 80057c0:	443b      	add	r3, r7
 80057c2:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80057c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	3390      	adds	r3, #144	; 0x90
 80057cc:	443b      	add	r3, r7
 80057ce:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057dc:	ee17 0a90 	vmov	r0, s15
 80057e0:	f7fa feca 	bl	8000578 <__aeabi_f2d>
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	4b68      	ldr	r3, [pc, #416]	; (800598c <MPU9250SelfTest+0x9e4>)
 80057ea:	f7fa ff1d 	bl	8000628 <__aeabi_dmul>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4614      	mov	r4, r2
 80057f4:	461d      	mov	r5, r3
 80057f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057f8:	3303      	adds	r3, #3
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	3390      	adds	r3, #144	; 0x90
 80057fe:	443b      	add	r3, r7
 8005800:	3b70      	subs	r3, #112	; 0x70
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f7fa feb7 	bl	8000578 <__aeabi_f2d>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4620      	mov	r0, r4
 8005810:	4629      	mov	r1, r5
 8005812:	f7fb f833 	bl	800087c <__aeabi_ddiv>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4610      	mov	r0, r2
 800581c:	4619      	mov	r1, r3
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	4b5a      	ldr	r3, [pc, #360]	; (800598c <MPU9250SelfTest+0x9e4>)
 8005824:	f7fa fd48 	bl	80002b8 <__aeabi_dsub>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005832:	1cdc      	adds	r4, r3, #3
 8005834:	f7fb f9d0 	bl	8000bd8 <__aeabi_d2uiz>
 8005838:	4602      	mov	r2, r0
 800583a:	00a3      	lsls	r3, r4, #2
 800583c:	3390      	adds	r3, #144	; 0x90
 800583e:	443b      	add	r3, r7
 8005840:	f843 2c88 	str.w	r2, [r3, #-136]
	for (int i = 0; i < 3; i++) {
 8005844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005846:	3301      	adds	r3, #1
 8005848:	67fb      	str	r3, [r7, #124]	; 0x7c
 800584a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800584c:	2b02      	cmp	r3, #2
 800584e:	f77f af71 	ble.w	8005734 <MPU9250SelfTest+0x78c>
//		printf("Gyro Test Y: %f\r\n", testResultGyroY);
//		printf("Gyro Test Z: %f\r\n", testResultGyroZ);
//		printf("-------------------------\r\n");
	}

   for (int i = 0; i < 3; i++) {
 8005852:	2300      	movs	r3, #0
 8005854:	67bb      	str	r3, [r7, #120]	; 0x78
 8005856:	e088      	b.n	800596a <MPU9250SelfTest+0x9c2>
     destination[i]   = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.;   // Report percent differences
 8005858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	3390      	adds	r3, #144	; 0x90
 800585e:	443b      	add	r3, r7
 8005860:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3390      	adds	r3, #144	; 0x90
 800586a:	443b      	add	r3, r7
 800586c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800587a:	ee17 0a90 	vmov	r0, s15
 800587e:	f7fa fe7b 	bl	8000578 <__aeabi_f2d>
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	4b41      	ldr	r3, [pc, #260]	; (800598c <MPU9250SelfTest+0x9e4>)
 8005888:	f7fa fece 	bl	8000628 <__aeabi_dmul>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4614      	mov	r4, r2
 8005892:	461d      	mov	r5, r3
 8005894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	3390      	adds	r3, #144	; 0x90
 800589a:	443b      	add	r3, r7
 800589c:	3b70      	subs	r3, #112	; 0x70
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fa fe69 	bl	8000578 <__aeabi_f2d>
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	4620      	mov	r0, r4
 80058ac:	4629      	mov	r1, r5
 80058ae:	f7fa ffe5 	bl	800087c <__aeabi_ddiv>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4610      	mov	r0, r2
 80058b8:	4619      	mov	r1, r3
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	4b33      	ldr	r3, [pc, #204]	; (800598c <MPU9250SelfTest+0x9e4>)
 80058c0:	f7fa fcfa 	bl	80002b8 <__aeabi_dsub>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4610      	mov	r0, r2
 80058ca:	4619      	mov	r1, r3
 80058cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	18d4      	adds	r4, r2, r3
 80058d4:	f7fb f9a0 	bl	8000c18 <__aeabi_d2f>
 80058d8:	4603      	mov	r3, r0
 80058da:	6023      	str	r3, [r4, #0]
     destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 80058dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	3390      	adds	r3, #144	; 0x90
 80058e2:	443b      	add	r3, r7
 80058e4:	f853 2c58 	ldr.w	r2, [r3, #-88]
 80058e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	3390      	adds	r3, #144	; 0x90
 80058ee:	443b      	add	r3, r7
 80058f0:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058fe:	ee17 0a90 	vmov	r0, s15
 8005902:	f7fa fe39 	bl	8000578 <__aeabi_f2d>
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	4b20      	ldr	r3, [pc, #128]	; (800598c <MPU9250SelfTest+0x9e4>)
 800590c:	f7fa fe8c 	bl	8000628 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4614      	mov	r4, r2
 8005916:	461d      	mov	r5, r3
 8005918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591a:	3303      	adds	r3, #3
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	3390      	adds	r3, #144	; 0x90
 8005920:	443b      	add	r3, r7
 8005922:	3b70      	subs	r3, #112	; 0x70
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7fa fe26 	bl	8000578 <__aeabi_f2d>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4620      	mov	r0, r4
 8005932:	4629      	mov	r1, r5
 8005934:	f7fa ffa2 	bl	800087c <__aeabi_ddiv>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4610      	mov	r0, r2
 800593e:	4619      	mov	r1, r3
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <MPU9250SelfTest+0x9e4>)
 8005946:	f7fa fcb7 	bl	80002b8 <__aeabi_dsub>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4610      	mov	r0, r2
 8005950:	4619      	mov	r1, r3
 8005952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005954:	3303      	adds	r3, #3
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	18d4      	adds	r4, r2, r3
 800595c:	f7fb f95c 	bl	8000c18 <__aeabi_d2f>
 8005960:	4603      	mov	r3, r0
 8005962:	6023      	str	r3, [r4, #0]
   for (int i = 0; i < 3; i++) {
 8005964:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005966:	3301      	adds	r3, #1
 8005968:	67bb      	str	r3, [r7, #120]	; 0x78
 800596a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596c:	2b02      	cmp	r3, #2
 800596e:	f77f af73 	ble.w	8005858 <MPU9250SelfTest+0x8b0>
   }
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	3790      	adds	r7, #144	; 0x90
 8005978:	46bd      	mov	sp, r7
 800597a:	bdb0      	pop	{r4, r5, r7, pc}
 800597c:	f3af 8000 	nop.w
 8005980:	c28f5c29 	.word	0xc28f5c29
 8005984:	3ff028f5 	.word	0x3ff028f5
 8005988:	3ff00000 	.word	0x3ff00000
 800598c:	40590000 	.word	0x40590000

08005990 <QuaternionUpdate>:

void QuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz){
 8005990:	b580      	push	{r7, lr}
 8005992:	b0b2      	sub	sp, #200	; 0xc8
 8005994:	af00      	add	r7, sp, #0
 8005996:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800599a:	edc7 0a08 	vstr	s1, [r7, #32]
 800599e:	ed87 1a07 	vstr	s2, [r7, #28]
 80059a2:	edc7 1a06 	vstr	s3, [r7, #24]
 80059a6:	ed87 2a05 	vstr	s4, [r7, #20]
 80059aa:	edc7 2a04 	vstr	s5, [r7, #16]
 80059ae:	ed87 3a03 	vstr	s6, [r7, #12]
 80059b2:	edc7 3a02 	vstr	s7, [r7, #8]
 80059b6:	ed87 4a01 	vstr	s8, [r7, #4]
    float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];   // short name local variable for readability
 80059ba:	4b70      	ldr	r3, [pc, #448]	; (8005b7c <QuaternionUpdate+0x1ec>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059c2:	4b6e      	ldr	r3, [pc, #440]	; (8005b7c <QuaternionUpdate+0x1ec>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ca:	4b6c      	ldr	r3, [pc, #432]	; (8005b7c <QuaternionUpdate+0x1ec>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059d2:	4b6a      	ldr	r3, [pc, #424]	; (8005b7c <QuaternionUpdate+0x1ec>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    float _2q1my;
    float _2q1mz;
    float _2q2mx;
    float _4bx;
    float _4bz;
    float _2q1 = 2.0f * q1;
 80059da:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80059de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    float _2q2 = 2.0f * q2;
 80059e6:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80059ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    float _2q3 = 2.0f * q3;
 80059f2:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80059f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80059fa:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    float _2q4 = 2.0f * q4;
 80059fe:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a06:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    float _2q1q3 = 2.0f * q1 * q3;
 8005a0a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005a0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a12:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a1a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    float _2q3q4 = 2.0f * q3 * q4;
 8005a1e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005a22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a26:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    float q1q1 = q1 * q1;
 8005a32:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005a36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a3a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float q1q2 = q1 * q2;
 8005a3e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005a42:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    float q1q3 = q1 * q3;
 8005a4e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005a52:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q1q4 = q1 * q4;
 8005a5e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8005a62:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q2q2 = q2 * q2;
 8005a6e:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a76:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q2q3 = q2 * q3;
 8005a7a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005a7e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a86:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q2q4 = q2 * q4;
 8005a8a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8005a8e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q3q3 = q3 * q3;
 8005a9a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005a9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005aa2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q3q4 = q3 * q4;
 8005aa6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005aaa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q4q4 = q4 * q4;
 8005ab6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005aba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005abe:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

    // Normalise accelerometer measurement
    norm = sqrtf(ax * ax + ay * ay + az * az);
 8005ac2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005ac6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ace:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ad6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ada:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae6:	f008 f8e5 	bl	800dcb4 <sqrtf>
 8005aea:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 8005aee:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005af2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005afa:	f000 85b2 	beq.w	8006662 <QuaternionUpdate+0xcd2>
    norm = 1.0f/norm;
 8005afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b02:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b0a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    ax *= norm;
 8005b0e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005b12:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b1a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= norm;
 8005b1e:	ed97 7a08 	vldr	s14, [r7, #32]
 8005b22:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= norm;
 8005b2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005b32:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    norm = sqrtf(mx * mx + my * my + mz * mz);
 8005b3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b62:	f008 f8a7 	bl	800dcb4 <sqrtf>
 8005b66:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    if (norm == 0.0f) return; // handle NaN
 8005b6a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b6e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b76:	f000 8576 	beq.w	8006666 <QuaternionUpdate+0xcd6>
 8005b7a:	e001      	b.n	8005b80 <QuaternionUpdate+0x1f0>
 8005b7c:	20000014 	.word	0x20000014
    norm = 1.0f/norm;
 8005b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b84:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b8c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    mx *= norm;
 8005b90:	ed97 7a03 	vldr	s14, [r7, #12]
 8005b94:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b9c:	edc7 7a03 	vstr	s15, [r7, #12]
    my *= norm;
 8005ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ba4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bac:	edc7 7a02 	vstr	s15, [r7, #8]
    mz *= norm;
 8005bb0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bb4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbc:	edc7 7a01 	vstr	s15, [r7, #4]

    // Reference direction of Earth's magnetic field
    _2q1mx = 2.0f * q1 * mx;
 8005bc0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005bc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bc8:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1my = 2.0f * q1 * my;
 8005bd4:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005bd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8005be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005be4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q1mz = 2.0f * q1 * mz;
 8005be8:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8005bec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005bf0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bf8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q2mx = 2.0f * q2 * mx;
 8005bfc:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005c00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c04:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
 8005c10:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c14:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c1c:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005c20:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c2c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8005c30:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c3c:	edd7 6a03 	vldr	s13, [r7, #12]
 8005c40:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c4c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8005c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c58:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c64:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8005c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c70:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8005c80:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c8c:	edd7 6a03 	vldr	s13, [r7, #12]
 8005c90:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c9c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
 8005ca0:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005ca4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cac:	edd7 6a02 	vldr	s13, [r7, #8]
 8005cb0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cbc:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8005cc0:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ccc:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8005cd0:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cdc:	edd7 6a02 	vldr	s13, [r7, #8]
 8005ce0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cec:	edd7 6a02 	vldr	s13, [r7, #8]
 8005cf0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cfc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005d00:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d08:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d14:	edd7 6a02 	vldr	s13, [r7, #8]
 8005d18:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d24:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2bx = sqrtf(hx * hx + hy * hy);
 8005d28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005d2c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005d30:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005d34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d40:	f007 ffb8 	bl	800dcb4 <sqrtf>
 8005d44:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
    _2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
 8005d48:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005d4c:	eeb1 7a67 	vneg.f32	s14, s15
 8005d50:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d58:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8005d5c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d68:	edd7 6a01 	vldr	s13, [r7, #4]
 8005d6c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d78:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8005d7c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d88:	edd7 6a01 	vldr	s13, [r7, #4]
 8005d8c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d98:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8005d9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005da0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005da4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005db0:	edd7 6a01 	vldr	s13, [r7, #4]
 8005db4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dc0:	edd7 6a01 	vldr	s13, [r7, #4]
 8005dc4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4bx = 2.0f * _2bx;
 8005dd4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005dd8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ddc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4bz = 2.0f * _2bz;
 8005de0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005de4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005de8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005dec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005df0:	eeb1 7a67 	vneg.f32	s14, s15
 8005df4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005df8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005dfc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005e00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005e08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e10:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005e14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e18:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005e1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005e20:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005e28:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e34:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005e38:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005e3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005e44:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005e48:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e4c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005e50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005e54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005e5c:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005e60:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005e64:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005e68:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005e6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005e70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e84:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e88:	eef1 6a67 	vneg.f32	s13, s15
 8005e8c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e94:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8005e98:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005e9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005ea0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ea4:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8005ea8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005eac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005eb0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005eb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005eb8:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8005ebc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005ec0:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005ec4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005ec8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005ecc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ed4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005edc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ee0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8005ee4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005ee8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005eec:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8005ef0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005ef4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ef8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005efc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005f00:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8005f04:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f08:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f0c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f10:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005f14:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005f18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005f1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005f20:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f30:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 8005f34:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005f38:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005f3c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005f40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005f48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f4c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f54:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f5c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005f60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f64:	edd7 7a08 	vldr	s15, [r7, #32]
 8005f68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005f6c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f78:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8005f7c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005f80:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f84:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005f90:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f94:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f9c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fa0:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fa4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fb0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005fb4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005fb8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fbc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005fc0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005fc4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fc8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005fcc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fd0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fd4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005fd8:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 8005fdc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005fe0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005fe4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005fe8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8005fec:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ff0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ff4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006000:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006004:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006008:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800600c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006010:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8006014:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006018:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800601c:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8006020:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006024:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006028:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800602c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006030:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 8006034:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006038:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800603c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006040:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006044:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006048:	edd7 7a02 	vldr	s15, [r7, #8]
 800604c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006058:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800605c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006060:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006064:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8006068:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800606c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006070:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006074:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006078:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800607c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006080:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006084:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006088:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800608c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006090:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006094:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006098:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800609c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80060a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80060a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80060a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80060ac:	ee76 7a67 	vsub.f32	s15, s12, s15
 80060b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 80060bc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80060c0:	eeb1 7a67 	vneg.f32	s14, s15
 80060c4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80060c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80060cc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80060d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80060d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80060dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060e0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80060e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80060e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80060ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80060f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80060f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060f8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80060fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006104:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006108:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800610c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006110:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006114:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006118:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800611c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006120:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006124:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006128:	ee36 6a67 	vsub.f32	s12, s12, s15
 800612c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006130:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006138:	ee37 7a67 	vsub.f32	s14, s14, s15
 800613c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006140:	eef1 6a67 	vneg.f32	s13, s15
 8006144:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8006148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800614c:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006150:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8006154:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006158:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800615c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006160:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006164:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006168:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800616c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006170:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006174:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006178:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 800617c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006180:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006184:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006188:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800618c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006190:	edd7 7a03 	vldr	s15, [r7, #12]
 8006194:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800619c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061a0:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80061a4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80061a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80061ac:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80061b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80061b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80061b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80061bc:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 80061c0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80061c4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80061c8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80061cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80061d0:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 80061d4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80061d8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80061dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80061e0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80061e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80061e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80061ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80061f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061f8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80061fc:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8006200:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006204:	ed97 6a13 	vldr	s12, [r7, #76]	; 0x4c
 8006208:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800620c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006210:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006214:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006218:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800621c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006220:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006224:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006228:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800622c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006230:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006234:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006238:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800623c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006240:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8006244:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006248:	edd7 7a01 	vldr	s15, [r7, #4]
 800624c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006258:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
 800625c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006260:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006264:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006268:	ee37 7a67 	vsub.f32	s14, s14, s15
 800626c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006274:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8006278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800627c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006280:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006284:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006288:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800628c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006290:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006294:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800629c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80062a4:	eef1 6a67 	vneg.f32	s13, s15
 80062a8:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80062ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062b0:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 80062b4:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80062b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80062bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80062c0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80062c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80062c8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80062cc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80062d0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80062d4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80062d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80062dc:	edd7 5a21 	vldr	s11, [r7, #132]	; 0x84
 80062e0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80062e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80062e8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80062ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80062f0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80062f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80062f8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80062fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006304:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006308:	eef1 6a67 	vneg.f32	s13, s15
 800630c:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8006310:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006314:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 8006318:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800631c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006320:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006324:	ed97 6a22 	vldr	s12, [r7, #136]	; 0x88
 8006328:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800632c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006330:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006334:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006338:	edd7 5a26 	vldr	s11, [r7, #152]	; 0x98
 800633c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006340:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006344:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006348:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800634c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006350:	edd7 7a02 	vldr	s15, [r7, #8]
 8006354:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800635c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006360:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006364:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006368:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800636c:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006370:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006374:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006378:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800637c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006380:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8006384:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006388:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800638c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006390:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8006394:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006398:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800639c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80063a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80063a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80063a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    norm = sqrtf(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);    // normalise step magnitude
 80063b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80063b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80063bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80063c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063c8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80063cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80063d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80063dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063e0:	eeb0 0a67 	vmov.f32	s0, s15
 80063e4:	f007 fc66 	bl	800dcb4 <sqrtf>
 80063e8:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 80063ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f0:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80063f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    s1 *= norm;
 80063fc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006400:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006408:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s2 *= norm;
 800640c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006410:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006418:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s3 *= norm;
 800641c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006420:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006428:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s4 *= norm;
 800642c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006430:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006438:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Compute rate of change of quaternion
    qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
 800643c:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006440:	eeb1 7a67 	vneg.f32	s14, s15
 8006444:	edd7 7a06 	vldr	s15, [r7, #24]
 8006448:	ee27 7a27 	vmul.f32	s14, s14, s15
 800644c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8006450:	edd7 7a05 	vldr	s15, [r7, #20]
 8006454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006458:	ee37 7a67 	vsub.f32	s14, s14, s15
 800645c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006460:	edd7 7a04 	vldr	s15, [r7, #16]
 8006464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800646c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006470:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006474:	4b7e      	ldr	r3, [pc, #504]	; (8006670 <QuaternionUpdate+0xce0>)
 8006476:	edd3 6a00 	vldr	s13, [r3]
 800647a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800647e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006486:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
 800648a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800648e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006496:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800649a:	edd7 7a04 	vldr	s15, [r7, #16]
 800649e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064a6:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80064aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80064ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80064ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064be:	4b6c      	ldr	r3, [pc, #432]	; (8006670 <QuaternionUpdate+0xce0>)
 80064c0:	edd3 6a00 	vldr	s13, [r3]
 80064c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80064c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
 80064d4:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 80064d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80064dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064e0:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 80064e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80064e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064f0:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 80064f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80064f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006500:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006504:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006508:	4b59      	ldr	r3, [pc, #356]	; (8006670 <QuaternionUpdate+0xce0>)
 800650a:	edd3 6a00 	vldr	s13, [r3]
 800650e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800651a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;
 800651e:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006522:	edd7 7a04 	vldr	s15, [r7, #16]
 8006526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800652a:	edd7 6a30 	vldr	s13, [r7, #192]	; 0xc0
 800652e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800653a:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 800653e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800654e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006552:	4b47      	ldr	r3, [pc, #284]	; (8006670 <QuaternionUpdate+0xce0>)
 8006554:	edd3 6a00 	vldr	s13, [r3]
 8006558:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800655c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006564:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

    // Integrate to yield quaternion
    q1 += qDot1 * deltat;
 8006568:	4b42      	ldr	r3, [pc, #264]	; (8006674 <QuaternionUpdate+0xce4>)
 800656a:	ed93 7a00 	vldr	s14, [r3]
 800656e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800657a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800657e:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    q2 += qDot2 * deltat;
 8006582:	4b3c      	ldr	r3, [pc, #240]	; (8006674 <QuaternionUpdate+0xce4>)
 8006584:	ed93 7a00 	vldr	s14, [r3]
 8006588:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800658c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006590:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8006594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006598:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
    q3 += qDot3 * deltat;
 800659c:	4b35      	ldr	r3, [pc, #212]	; (8006674 <QuaternionUpdate+0xce4>)
 800659e:	ed93 7a00 	vldr	s14, [r3]
 80065a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 80065ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065b2:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
    q4 += qDot4 * deltat;
 80065b6:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <QuaternionUpdate+0xce4>)
 80065b8:	ed93 7a00 	vldr	s14, [r3]
 80065bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80065c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065c4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80065c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065cc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);    // normalise quaternion
 80065d0:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80065d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80065d8:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 80065dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065e4:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80065e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80065f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006600:	f007 fb58 	bl	800dcb4 <sqrtf>
 8006604:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
    norm = 1.0f/norm;
 8006608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800660c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8006610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006614:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q[0] = q1 * norm;
 8006618:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800661c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006624:	4b14      	ldr	r3, [pc, #80]	; (8006678 <QuaternionUpdate+0xce8>)
 8006626:	edc3 7a00 	vstr	s15, [r3]
    q[1] = q2 * norm;
 800662a:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 800662e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <QuaternionUpdate+0xce8>)
 8006638:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] = q3 * norm;
 800663c:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006640:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006648:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <QuaternionUpdate+0xce8>)
 800664a:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] = q4 * norm;
 800664e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006652:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <QuaternionUpdate+0xce8>)
 800665c:	edc3 7a03 	vstr	s15, [r3, #12]
 8006660:	e002      	b.n	8006668 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 8006662:	bf00      	nop
 8006664:	e000      	b.n	8006668 <QuaternionUpdate+0xcd8>
    if (norm == 0.0f) return; // handle NaN
 8006666:	bf00      	nop

}
 8006668:	37c8      	adds	r7, #200	; 0xc8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000010 	.word	0x20000010
 8006674:	200024b4 	.word	0x200024b4
 8006678:	20000014 	.word	0x20000014

0800667c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
 8006686:	4b10      	ldr	r3, [pc, #64]	; (80066c8 <HAL_MspInit+0x4c>)
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	4a0f      	ldr	r2, [pc, #60]	; (80066c8 <HAL_MspInit+0x4c>)
 800668c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006690:	6453      	str	r3, [r2, #68]	; 0x44
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <HAL_MspInit+0x4c>)
 8006694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800669e:	2300      	movs	r3, #0
 80066a0:	603b      	str	r3, [r7, #0]
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <HAL_MspInit+0x4c>)
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <HAL_MspInit+0x4c>)
 80066a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ac:	6413      	str	r3, [r2, #64]	; 0x40
 80066ae:	4b06      	ldr	r3, [pc, #24]	; (80066c8 <HAL_MspInit+0x4c>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40023800 	.word	0x40023800

080066cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d4:	f107 0314 	add.w	r3, r7, #20
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a17      	ldr	r2, [pc, #92]	; (8006748 <HAL_ADC_MspInit+0x7c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d127      	bne.n	800673e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80066ee:	2300      	movs	r3, #0
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	4b16      	ldr	r3, [pc, #88]	; (800674c <HAL_ADC_MspInit+0x80>)
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	4a15      	ldr	r2, [pc, #84]	; (800674c <HAL_ADC_MspInit+0x80>)
 80066f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fc:	6453      	str	r3, [r2, #68]	; 0x44
 80066fe:	4b13      	ldr	r3, [pc, #76]	; (800674c <HAL_ADC_MspInit+0x80>)
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	4b0f      	ldr	r3, [pc, #60]	; (800674c <HAL_ADC_MspInit+0x80>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a0e      	ldr	r2, [pc, #56]	; (800674c <HAL_ADC_MspInit+0x80>)
 8006714:	f043 0301 	orr.w	r3, r3, #1
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	4b0c      	ldr	r3, [pc, #48]	; (800674c <HAL_ADC_MspInit+0x80>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006726:	2302      	movs	r3, #2
 8006728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800672a:	2303      	movs	r3, #3
 800672c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672e:	2300      	movs	r3, #0
 8006730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006732:	f107 0314 	add.w	r3, r7, #20
 8006736:	4619      	mov	r1, r3
 8006738:	4805      	ldr	r0, [pc, #20]	; (8006750 <HAL_ADC_MspInit+0x84>)
 800673a:	f001 f851 	bl	80077e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800673e:	bf00      	nop
 8006740:	3728      	adds	r7, #40	; 0x28
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40012000 	.word	0x40012000
 800674c:	40023800 	.word	0x40023800
 8006750:	40020000 	.word	0x40020000

08006754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b090      	sub	sp, #64	; 0x40
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800675c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a6b      	ldr	r2, [pc, #428]	; (8006920 <HAL_I2C_MspInit+0x1cc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d12d      	bne.n	80067d2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
 800677a:	4b6a      	ldr	r3, [pc, #424]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	4a69      	ldr	r2, [pc, #420]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006780:	f043 0302 	orr.w	r3, r3, #2
 8006784:	6313      	str	r3, [r2, #48]	; 0x30
 8006786:	4b67      	ldr	r3, [pc, #412]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006790:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006792:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006798:	2312      	movs	r3, #18
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679c:	2300      	movs	r3, #0
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a0:	2303      	movs	r3, #3
 80067a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067a4:	2304      	movs	r3, #4
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067ac:	4619      	mov	r1, r3
 80067ae:	485e      	ldr	r0, [pc, #376]	; (8006928 <HAL_I2C_MspInit+0x1d4>)
 80067b0:	f001 f816 	bl	80077e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	4b5a      	ldr	r3, [pc, #360]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	4a59      	ldr	r2, [pc, #356]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067c2:	6413      	str	r3, [r2, #64]	; 0x40
 80067c4:	4b57      	ldr	r3, [pc, #348]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80067d0:	e0a2      	b.n	8006918 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a55      	ldr	r2, [pc, #340]	; (800692c <HAL_I2C_MspInit+0x1d8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d14c      	bne.n	8006876 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067dc:	2300      	movs	r3, #0
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	4b50      	ldr	r3, [pc, #320]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	4a4f      	ldr	r2, [pc, #316]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067e6:	f043 0302 	orr.w	r3, r3, #2
 80067ea:	6313      	str	r3, [r2, #48]	; 0x30
 80067ec:	4b4d      	ldr	r3, [pc, #308]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	4b49      	ldr	r3, [pc, #292]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	4a48      	ldr	r2, [pc, #288]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006802:	f043 0304 	orr.w	r3, r3, #4
 8006806:	6313      	str	r3, [r2, #48]	; 0x30
 8006808:	4b46      	ldr	r3, [pc, #280]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800681a:	2312      	movs	r3, #18
 800681c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006822:	2303      	movs	r3, #3
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006826:	2304      	movs	r3, #4
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800682e:	4619      	mov	r1, r3
 8006830:	483d      	ldr	r0, [pc, #244]	; (8006928 <HAL_I2C_MspInit+0x1d4>)
 8006832:	f000 ffd5 	bl	80077e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800683a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800683c:	2312      	movs	r3, #18
 800683e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006840:	2300      	movs	r3, #0
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006844:	2303      	movs	r3, #3
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006848:	2304      	movs	r3, #4
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800684c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006850:	4619      	mov	r1, r3
 8006852:	4837      	ldr	r0, [pc, #220]	; (8006930 <HAL_I2C_MspInit+0x1dc>)
 8006854:	f000 ffc4 	bl	80077e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	4b31      	ldr	r3, [pc, #196]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	4a30      	ldr	r2, [pc, #192]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006866:	6413      	str	r3, [r2, #64]	; 0x40
 8006868:	4b2e      	ldr	r3, [pc, #184]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69bb      	ldr	r3, [r7, #24]
}
 8006874:	e050      	b.n	8006918 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2e      	ldr	r2, [pc, #184]	; (8006934 <HAL_I2C_MspInit+0x1e0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d14b      	bne.n	8006918 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	4b27      	ldr	r3, [pc, #156]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	4a26      	ldr	r2, [pc, #152]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 800688a:	f043 0304 	orr.w	r3, r3, #4
 800688e:	6313      	str	r3, [r2, #48]	; 0x30
 8006890:	4b24      	ldr	r3, [pc, #144]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800689c:	2300      	movs	r3, #0
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	4b20      	ldr	r3, [pc, #128]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	6313      	str	r3, [r2, #48]	; 0x30
 80068ac:	4b1d      	ldr	r3, [pc, #116]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80068b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068be:	2312      	movs	r3, #18
 80068c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c6:	2303      	movs	r3, #3
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068ca:	2304      	movs	r3, #4
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068d2:	4619      	mov	r1, r3
 80068d4:	4816      	ldr	r0, [pc, #88]	; (8006930 <HAL_I2C_MspInit+0x1dc>)
 80068d6:	f000 ff83 	bl	80077e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80068da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068e0:	2312      	movs	r3, #18
 80068e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068e8:	2303      	movs	r3, #3
 80068ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80068ec:	2304      	movs	r3, #4
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80068f4:	4619      	mov	r1, r3
 80068f6:	4810      	ldr	r0, [pc, #64]	; (8006938 <HAL_I2C_MspInit+0x1e4>)
 80068f8:	f000 ff72 	bl	80077e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	4b08      	ldr	r3, [pc, #32]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	4a07      	ldr	r2, [pc, #28]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 8006906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800690a:	6413      	str	r3, [r2, #64]	; 0x40
 800690c:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_I2C_MspInit+0x1d0>)
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	bf00      	nop
 800691a:	3740      	adds	r7, #64	; 0x40
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40005400 	.word	0x40005400
 8006924:	40023800 	.word	0x40023800
 8006928:	40020400 	.word	0x40020400
 800692c:	40005800 	.word	0x40005800
 8006930:	40020800 	.word	0x40020800
 8006934:	40005c00 	.word	0x40005c00
 8006938:	40020000 	.word	0x40020000

0800693c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006944:	f107 0314 	add.w	r3, r7, #20
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	609a      	str	r2, [r3, #8]
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <HAL_SPI_MspInit+0x84>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12b      	bne.n	80069b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <HAL_SPI_MspInit+0x88>)
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <HAL_SPI_MspInit+0x88>)
 8006968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800696c:	6453      	str	r3, [r2, #68]	; 0x44
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <HAL_SPI_MspInit+0x88>)
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <HAL_SPI_MspInit+0x88>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	4a10      	ldr	r2, [pc, #64]	; (80069c4 <HAL_SPI_MspInit+0x88>)
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	6313      	str	r3, [r2, #48]	; 0x30
 800698a:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <HAL_SPI_MspInit+0x88>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006996:	23e0      	movs	r3, #224	; 0xe0
 8006998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800699a:	2302      	movs	r3, #2
 800699c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a2:	2303      	movs	r3, #3
 80069a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80069a6:	2305      	movs	r3, #5
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069aa:	f107 0314 	add.w	r3, r7, #20
 80069ae:	4619      	mov	r1, r3
 80069b0:	4805      	ldr	r0, [pc, #20]	; (80069c8 <HAL_SPI_MspInit+0x8c>)
 80069b2:	f000 ff15 	bl	80077e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80069b6:	bf00      	nop
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40013000 	.word	0x40013000
 80069c4:	40023800 	.word	0x40023800
 80069c8:	40020000 	.word	0x40020000

080069cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <HAL_TIM_Base_MspInit+0x80>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d116      	bne.n	8006a0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <HAL_TIM_Base_MspInit+0x84>)
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	4a1a      	ldr	r2, [pc, #104]	; (8006a50 <HAL_TIM_Base_MspInit+0x84>)
 80069e8:	f043 0302 	orr.w	r3, r3, #2
 80069ec:	6413      	str	r3, [r2, #64]	; 0x40
 80069ee:	4b18      	ldr	r3, [pc, #96]	; (8006a50 <HAL_TIM_Base_MspInit+0x84>)
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80069fa:	2200      	movs	r2, #0
 80069fc:	2100      	movs	r1, #0
 80069fe:	201d      	movs	r0, #29
 8006a00:	f000 feb7 	bl	8007772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006a04:	201d      	movs	r0, #29
 8006a06:	f000 fed0 	bl	80077aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006a0a:	e01a      	b.n	8006a42 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a10      	ldr	r2, [pc, #64]	; (8006a54 <HAL_TIM_Base_MspInit+0x88>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d115      	bne.n	8006a42 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <HAL_TIM_Base_MspInit+0x84>)
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <HAL_TIM_Base_MspInit+0x84>)
 8006a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a24:	6453      	str	r3, [r2, #68]	; 0x44
 8006a26:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <HAL_TIM_Base_MspInit+0x84>)
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006a32:	2200      	movs	r2, #0
 8006a34:	2100      	movs	r1, #0
 8006a36:	2019      	movs	r0, #25
 8006a38:	f000 fe9b 	bl	8007772 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006a3c:	2019      	movs	r0, #25
 8006a3e:	f000 feb4 	bl	80077aa <HAL_NVIC_EnableIRQ>
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40023800 	.word	0x40023800
 8006a54:	40014400 	.word	0x40014400

08006a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a5c:	e7fe      	b.n	8006a5c <NMI_Handler+0x4>

08006a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a62:	e7fe      	b.n	8006a62 <HardFault_Handler+0x4>

08006a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a68:	e7fe      	b.n	8006a68 <MemManage_Handler+0x4>

08006a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a6e:	e7fe      	b.n	8006a6e <BusFault_Handler+0x4>

08006a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a70:	b480      	push	{r7}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a74:	e7fe      	b.n	8006a74 <UsageFault_Handler+0x4>

08006a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a7a:	bf00      	nop
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a88:	bf00      	nop
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a92:	b480      	push	{r7}
 8006a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a96:	bf00      	nop
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <SysTick_Handler+0x34>)
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <SysTick_Handler+0x18>
		Timer1--;
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <SysTick_Handler+0x34>)
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <SysTick_Handler+0x34>)
 8006ab6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <SysTick_Handler+0x38>)
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <SysTick_Handler+0x2c>
		Timer2--;
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <SysTick_Handler+0x38>)
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <SysTick_Handler+0x38>)
 8006aca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006acc:	f000 fac0 	bl	8007050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ad0:	bf00      	nop
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000164 	.word	0x20000164
 8006ad8:	20000166 	.word	0x20000166

08006adc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006ae0:	4802      	ldr	r0, [pc, #8]	; (8006aec <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006ae2:	f003 fbfb 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006ae6:	bf00      	nop
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	200023b8 	.word	0x200023b8

08006af0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006af4:	4802      	ldr	r0, [pc, #8]	; (8006b00 <TIM3_IRQHandler+0x10>)
 8006af6:	f003 fbf1 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20002370 	.word	0x20002370

08006b04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e00a      	b.n	8006b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006b16:	f3af 8000 	nop.w
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	60ba      	str	r2, [r7, #8]
 8006b22:	b2ca      	uxtb	r2, r1
 8006b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	dbf0      	blt.n	8006b16 <_read+0x12>
	}

return len;
 8006b34:	687b      	ldr	r3, [r7, #4]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3718      	adds	r7, #24
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b086      	sub	sp, #24
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	e009      	b.n	8006b64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	60ba      	str	r2, [r7, #8]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	3301      	adds	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	dbf1      	blt.n	8006b50 <_write+0x12>
	}
	return len;
 8006b6c:	687b      	ldr	r3, [r7, #4]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <_close>:

int _close(int file)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <_isatty>:

int _isatty(int file)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8006bb6:	2301      	movs	r3, #1
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
	return 0;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <_sbrk+0x5c>)
 8006bea:	4b15      	ldr	r3, [pc, #84]	; (8006c40 <_sbrk+0x60>)
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <_sbrk+0x64>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006bfc:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <_sbrk+0x64>)
 8006bfe:	4a12      	ldr	r2, [pc, #72]	; (8006c48 <_sbrk+0x68>)
 8006c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c02:	4b10      	ldr	r3, [pc, #64]	; (8006c44 <_sbrk+0x64>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d207      	bcs.n	8006c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c10:	f008 f986 	bl	800ef20 <__errno>
 8006c14:	4603      	mov	r3, r0
 8006c16:	220c      	movs	r2, #12
 8006c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1e:	e009      	b.n	8006c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <_sbrk+0x64>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c26:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <_sbrk+0x64>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	4a05      	ldr	r2, [pc, #20]	; (8006c44 <_sbrk+0x64>)
 8006c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20020000 	.word	0x20020000
 8006c40:	00000400 	.word	0x00000400
 8006c44:	20002508 	.word	0x20002508
 8006c48:	20002968 	.word	0x20002968

08006c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <SystemInit+0x20>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	4a05      	ldr	r2, [pc, #20]	; (8006c6c <SystemInit+0x20>)
 8006c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c60:	bf00      	nop
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	e000ed00 	.word	0xe000ed00

08006c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c74:	480d      	ldr	r0, [pc, #52]	; (8006cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006c76:	490e      	ldr	r1, [pc, #56]	; (8006cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c7c:	e002      	b.n	8006c84 <LoopCopyDataInit>

08006c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c82:	3304      	adds	r3, #4

08006c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c88:	d3f9      	bcc.n	8006c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c8a:	4a0b      	ldr	r2, [pc, #44]	; (8006cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006c8c:	4c0b      	ldr	r4, [pc, #44]	; (8006cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8006c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c90:	e001      	b.n	8006c96 <LoopFillZerobss>

08006c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c94:	3204      	adds	r2, #4

08006c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c98:	d3fb      	bcc.n	8006c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006c9a:	f7ff ffd7 	bl	8006c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c9e:	f008 f945 	bl	800ef2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ca2:	f7fb fe21 	bl	80028e8 <main>
  bx  lr    
 8006ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006cb0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8006cb4:	08010e50 	.word	0x08010e50
  ldr r2, =_sbss
 8006cb8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8006cbc:	20002964 	.word	0x20002964

08006cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cc0:	e7fe      	b.n	8006cc0 <ADC_IRQHandler>
	...

08006cc4 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af04      	add	r7, sp, #16
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8006cce:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	1dfb      	adds	r3, r7, #7
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2178      	movs	r1, #120	; 0x78
 8006ce2:	4803      	ldr	r0, [pc, #12]	; (8006cf0 <ssd1306_WriteCommand+0x2c>)
 8006ce4:	f001 f96c 	bl	8007fc0 <HAL_I2C_Mem_Write>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20002270 	.word	0x20002270

08006cf4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af04      	add	r7, sp, #16
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f04f 32ff 	mov.w	r2, #4294967295
 8006d06:	9202      	str	r2, [sp, #8]
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	2240      	movs	r2, #64	; 0x40
 8006d12:	2178      	movs	r1, #120	; 0x78
 8006d14:	4803      	ldr	r0, [pc, #12]	; (8006d24 <ssd1306_WriteData+0x30>)
 8006d16:	f001 f953 	bl	8007fc0 <HAL_I2C_Mem_Write>
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20002270 	.word	0x20002270

08006d28 <ssd1306_UpdateScreen>:
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
    }
}

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006d2e:	2300      	movs	r3, #0
 8006d30:	71fb      	strb	r3, [r7, #7]
 8006d32:	e016      	b.n	8006d62 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006d34:	79fb      	ldrb	r3, [r7, #7]
 8006d36:	3b50      	subs	r3, #80	; 0x50
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff ffc2 	bl	8006cc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8006d40:	2000      	movs	r0, #0
 8006d42:	f7ff ffbf 	bl	8006cc4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006d46:	2010      	movs	r0, #16
 8006d48:	f7ff ffbc 	bl	8006cc4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006d4c:	79fb      	ldrb	r3, [r7, #7]
 8006d4e:	01db      	lsls	r3, r3, #7
 8006d50:	4a08      	ldr	r2, [pc, #32]	; (8006d74 <ssd1306_UpdateScreen+0x4c>)
 8006d52:	4413      	add	r3, r2
 8006d54:	2180      	movs	r1, #128	; 0x80
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff ffcc 	bl	8006cf4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	71fb      	strb	r3, [r7, #7]
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d9e5      	bls.n	8006d34 <ssd1306_UpdateScreen+0xc>
    }
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000250c 	.word	0x2000250c

08006d78 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
 8006d82:	460b      	mov	r3, r1
 8006d84:	71bb      	strb	r3, [r7, #6]
 8006d86:	4613      	mov	r3, r2
 8006d88:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	db3d      	blt.n	8006e0e <ssd1306_DrawPixel+0x96>
 8006d92:	79bb      	ldrb	r3, [r7, #6]
 8006d94:	2b1f      	cmp	r3, #31
 8006d96:	d83a      	bhi.n	8006e0e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8006d98:	797b      	ldrb	r3, [r7, #5]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d11a      	bne.n	8006dd4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006d9e:	79fa      	ldrb	r2, [r7, #7]
 8006da0:	79bb      	ldrb	r3, [r7, #6]
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	b2d8      	uxtb	r0, r3
 8006da6:	4603      	mov	r3, r0
 8006da8:	01db      	lsls	r3, r3, #7
 8006daa:	4413      	add	r3, r2
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <ssd1306_DrawPixel+0xa4>)
 8006dae:	5cd3      	ldrb	r3, [r2, r3]
 8006db0:	b25a      	sxtb	r2, r3
 8006db2:	79bb      	ldrb	r3, [r7, #6]
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	2101      	movs	r1, #1
 8006dba:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	b259      	sxtb	r1, r3
 8006dc4:	79fa      	ldrb	r2, [r7, #7]
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	01db      	lsls	r3, r3, #7
 8006dca:	4413      	add	r3, r2
 8006dcc:	b2c9      	uxtb	r1, r1
 8006dce:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <ssd1306_DrawPixel+0xa4>)
 8006dd0:	54d1      	strb	r1, [r2, r3]
 8006dd2:	e01d      	b.n	8006e10 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006dd4:	79fa      	ldrb	r2, [r7, #7]
 8006dd6:	79bb      	ldrb	r3, [r7, #6]
 8006dd8:	08db      	lsrs	r3, r3, #3
 8006dda:	b2d8      	uxtb	r0, r3
 8006ddc:	4603      	mov	r3, r0
 8006dde:	01db      	lsls	r3, r3, #7
 8006de0:	4413      	add	r3, r2
 8006de2:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <ssd1306_DrawPixel+0xa4>)
 8006de4:	5cd3      	ldrb	r3, [r2, r3]
 8006de6:	b25a      	sxtb	r2, r3
 8006de8:	79bb      	ldrb	r3, [r7, #6]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2101      	movs	r1, #1
 8006df0:	fa01 f303 	lsl.w	r3, r1, r3
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	43db      	mvns	r3, r3
 8006df8:	b25b      	sxtb	r3, r3
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	b259      	sxtb	r1, r3
 8006dfe:	79fa      	ldrb	r2, [r7, #7]
 8006e00:	4603      	mov	r3, r0
 8006e02:	01db      	lsls	r3, r3, #7
 8006e04:	4413      	add	r3, r2
 8006e06:	b2c9      	uxtb	r1, r1
 8006e08:	4a04      	ldr	r2, [pc, #16]	; (8006e1c <ssd1306_DrawPixel+0xa4>)
 8006e0a:	54d1      	strb	r1, [r2, r3]
 8006e0c:	e000      	b.n	8006e10 <ssd1306_DrawPixel+0x98>
        return;
 8006e0e:	bf00      	nop
    }
}
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	2000250c 	.word	0x2000250c

08006e20 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8006e20:	b590      	push	{r4, r7, lr}
 8006e22:	b089      	sub	sp, #36	; 0x24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	1d38      	adds	r0, r7, #4
 8006e2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8006e2e:	461a      	mov	r2, r3
 8006e30:	4623      	mov	r3, r4
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	4613      	mov	r3, r2
 8006e36:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	2b1f      	cmp	r3, #31
 8006e3c:	d902      	bls.n	8006e44 <ssd1306_WriteChar+0x24>
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	2b7e      	cmp	r3, #126	; 0x7e
 8006e42:	d901      	bls.n	8006e48 <ssd1306_WriteChar+0x28>
        return 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	e06d      	b.n	8006f24 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006e48:	4b38      	ldr	r3, [pc, #224]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006e4a:	881b      	ldrh	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	793b      	ldrb	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	2b80      	cmp	r3, #128	; 0x80
 8006e54:	dc06      	bgt.n	8006e64 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006e56:	4b35      	ldr	r3, [pc, #212]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006e58:	885b      	ldrh	r3, [r3, #2]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	797b      	ldrb	r3, [r7, #5]
 8006e5e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	dd01      	ble.n	8006e68 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006e64:	2300      	movs	r3, #0
 8006e66:	e05d      	b.n	8006f24 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]
 8006e6c:	e04c      	b.n	8006f08 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	3b20      	subs	r3, #32
 8006e74:	7979      	ldrb	r1, [r7, #5]
 8006e76:	fb01 f303 	mul.w	r3, r1, r3
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	440b      	add	r3, r1
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	4413      	add	r3, r2
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	e034      	b.n	8006ef8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d012      	beq.n	8006ec4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8006e9e:	4b23      	ldr	r3, [pc, #140]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	b2d8      	uxtb	r0, r3
 8006eac:	4b1f      	ldr	r3, [pc, #124]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006eae:	885b      	ldrh	r3, [r3, #2]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4413      	add	r3, r2
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	7bba      	ldrb	r2, [r7, #14]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f7ff ff5b 	bl	8006d78 <ssd1306_DrawPixel>
 8006ec2:	e016      	b.n	8006ef2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	4413      	add	r3, r2
 8006ed0:	b2d8      	uxtb	r0, r3
 8006ed2:	4b16      	ldr	r3, [pc, #88]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006ed4:	885b      	ldrh	r3, [r3, #2]
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	4413      	add	r3, r2
 8006ede:	b2d9      	uxtb	r1, r3
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	bf0c      	ite	eq
 8006ee6:	2301      	moveq	r3, #1
 8006ee8:	2300      	movne	r3, #0
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	f7ff ff43 	bl	8006d78 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	793b      	ldrb	r3, [r7, #4]
 8006efa:	461a      	mov	r2, r3
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d3c5      	bcc.n	8006e8e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	3301      	adds	r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	797b      	ldrb	r3, [r7, #5]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d3ad      	bcc.n	8006e6e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	793b      	ldrb	r3, [r7, #4]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <ssd1306_WriteChar+0x10c>)
 8006f20:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3724      	adds	r7, #36	; 0x24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd90      	pop	{r4, r7, pc}
 8006f2c:	2000270c 	.word	0x2000270c

08006f30 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	1d38      	adds	r0, r7, #4
 8006f3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8006f3e:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8006f40:	e012      	b.n	8006f68 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	7818      	ldrb	r0, [r3, #0]
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	1d3a      	adds	r2, r7, #4
 8006f4a:	ca06      	ldmia	r2, {r1, r2}
 8006f4c:	f7ff ff68 	bl	8006e20 <ssd1306_WriteChar>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d002      	beq.n	8006f62 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	e008      	b.n	8006f74 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e8      	bne.n	8006f42 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	781b      	ldrb	r3, [r3, #0]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	460a      	mov	r2, r1
 8006f86:	71fb      	strb	r3, [r7, #7]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <ssd1306_SetCursor+0x2c>)
 8006f92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8006f94:	79bb      	ldrb	r3, [r7, #6]
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <ssd1306_SetCursor+0x2c>)
 8006f9a:	805a      	strh	r2, [r3, #2]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	2000270c 	.word	0x2000270c

08006fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <HAL_Init+0x40>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a0d      	ldr	r2, [pc, #52]	; (8006fec <HAL_Init+0x40>)
 8006fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <HAL_Init+0x40>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <HAL_Init+0x40>)
 8006fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006fc8:	4b08      	ldr	r3, [pc, #32]	; (8006fec <HAL_Init+0x40>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a07      	ldr	r2, [pc, #28]	; (8006fec <HAL_Init+0x40>)
 8006fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fd4:	2003      	movs	r0, #3
 8006fd6:	f000 fbc1 	bl	800775c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fda:	200f      	movs	r0, #15
 8006fdc:	f000 f808 	bl	8006ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fe0:	f7ff fb4c 	bl	800667c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40023c00 	.word	0x40023c00

08006ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ff8:	4b12      	ldr	r3, [pc, #72]	; (8007044 <HAL_InitTick+0x54>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	4b12      	ldr	r3, [pc, #72]	; (8007048 <HAL_InitTick+0x58>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	4619      	mov	r1, r3
 8007002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007006:	fbb3 f3f1 	udiv	r3, r3, r1
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fbd9 	bl	80077c6 <HAL_SYSTICK_Config>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e00e      	b.n	800703c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b0f      	cmp	r3, #15
 8007022:	d80a      	bhi.n	800703a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007024:	2200      	movs	r2, #0
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	f000 fba1 	bl	8007772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007030:	4a06      	ldr	r2, [pc, #24]	; (800704c <HAL_InitTick+0x5c>)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	e000      	b.n	800703c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	20000024 	.word	0x20000024
 8007048:	20000034 	.word	0x20000034
 800704c:	20000030 	.word	0x20000030

08007050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007054:	4b06      	ldr	r3, [pc, #24]	; (8007070 <HAL_IncTick+0x20>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	4b06      	ldr	r3, [pc, #24]	; (8007074 <HAL_IncTick+0x24>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4413      	add	r3, r2
 8007060:	4a04      	ldr	r2, [pc, #16]	; (8007074 <HAL_IncTick+0x24>)
 8007062:	6013      	str	r3, [r2, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000034 	.word	0x20000034
 8007074:	20002714 	.word	0x20002714

08007078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
  return uwTick;
 800707c:	4b03      	ldr	r3, [pc, #12]	; (800708c <HAL_GetTick+0x14>)
 800707e:	681b      	ldr	r3, [r3, #0]
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	20002714 	.word	0x20002714

08007090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007098:	f7ff ffee 	bl	8007078 <HAL_GetTick>
 800709c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d005      	beq.n	80070b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070aa:	4b0a      	ldr	r3, [pc, #40]	; (80070d4 <HAL_Delay+0x44>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	461a      	mov	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4413      	add	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070b6:	bf00      	nop
 80070b8:	f7ff ffde 	bl	8007078 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d8f7      	bhi.n	80070b8 <HAL_Delay+0x28>
  {
  }
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000034 	.word	0x20000034

080070d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e033      	b.n	8007156 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff fae8 	bl	80066cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	2b00      	cmp	r3, #0
 8007114:	d118      	bne.n	8007148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800711e:	f023 0302 	bic.w	r3, r3, #2
 8007122:	f043 0202 	orr.w	r2, r3, #2
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f94a 	bl	80073c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	f043 0201 	orr.w	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	641a      	str	r2, [r3, #64]	; 0x40
 8007146:	e001      	b.n	800714c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_ADC_ConfigChannel+0x1c>
 8007178:	2302      	movs	r3, #2
 800717a:	e113      	b.n	80073a4 <HAL_ADC_ConfigChannel+0x244>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b09      	cmp	r3, #9
 800718a:	d925      	bls.n	80071d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68d9      	ldr	r1, [r3, #12]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	4613      	mov	r3, r2
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	4413      	add	r3, r2
 80071a0:	3b1e      	subs	r3, #30
 80071a2:	2207      	movs	r2, #7
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	43da      	mvns	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	400a      	ands	r2, r1
 80071b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68d9      	ldr	r1, [r3, #12]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	4618      	mov	r0, r3
 80071c4:	4603      	mov	r3, r0
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4403      	add	r3, r0
 80071ca:	3b1e      	subs	r3, #30
 80071cc:	409a      	lsls	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	e022      	b.n	800721e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6919      	ldr	r1, [r3, #16]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	4613      	mov	r3, r2
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	4413      	add	r3, r2
 80071ec:	2207      	movs	r2, #7
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43da      	mvns	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	400a      	ands	r2, r1
 80071fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6919      	ldr	r1, [r3, #16]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b29b      	uxth	r3, r3
 800720c:	4618      	mov	r0, r3
 800720e:	4603      	mov	r3, r0
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	4403      	add	r3, r0
 8007214:	409a      	lsls	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b06      	cmp	r3, #6
 8007224:	d824      	bhi.n	8007270 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	3b05      	subs	r3, #5
 8007238:	221f      	movs	r2, #31
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	43da      	mvns	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	400a      	ands	r2, r1
 8007246:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	4618      	mov	r0, r3
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	3b05      	subs	r3, #5
 8007262:	fa00 f203 	lsl.w	r2, r0, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	635a      	str	r2, [r3, #52]	; 0x34
 800726e:	e04c      	b.n	800730a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b0c      	cmp	r3, #12
 8007276:	d824      	bhi.n	80072c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	3b23      	subs	r3, #35	; 0x23
 800728a:	221f      	movs	r2, #31
 800728c:	fa02 f303 	lsl.w	r3, r2, r3
 8007290:	43da      	mvns	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	400a      	ands	r2, r1
 8007298:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	4618      	mov	r0, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	3b23      	subs	r3, #35	; 0x23
 80072b4:	fa00 f203 	lsl.w	r2, r0, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	430a      	orrs	r2, r1
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
 80072c0:	e023      	b.n	800730a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	3b41      	subs	r3, #65	; 0x41
 80072d4:	221f      	movs	r2, #31
 80072d6:	fa02 f303 	lsl.w	r3, r2, r3
 80072da:	43da      	mvns	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	400a      	ands	r2, r1
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	4618      	mov	r0, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	3b41      	subs	r3, #65	; 0x41
 80072fe:	fa00 f203 	lsl.w	r2, r0, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800730a:	4b29      	ldr	r3, [pc, #164]	; (80073b0 <HAL_ADC_ConfigChannel+0x250>)
 800730c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a28      	ldr	r2, [pc, #160]	; (80073b4 <HAL_ADC_ConfigChannel+0x254>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10f      	bne.n	8007338 <HAL_ADC_ConfigChannel+0x1d8>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b12      	cmp	r3, #18
 800731e:	d10b      	bne.n	8007338 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <HAL_ADC_ConfigChannel+0x254>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d12b      	bne.n	800739a <HAL_ADC_ConfigChannel+0x23a>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <HAL_ADC_ConfigChannel+0x258>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <HAL_ADC_ConfigChannel+0x1f4>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b11      	cmp	r3, #17
 8007352:	d122      	bne.n	800739a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a11      	ldr	r2, [pc, #68]	; (80073b8 <HAL_ADC_ConfigChannel+0x258>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d111      	bne.n	800739a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <HAL_ADC_ConfigChannel+0x25c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a11      	ldr	r2, [pc, #68]	; (80073c0 <HAL_ADC_ConfigChannel+0x260>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	0c9a      	lsrs	r2, r3, #18
 8007382:	4613      	mov	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	4413      	add	r3, r2
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800738c:	e002      	b.n	8007394 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	3b01      	subs	r3, #1
 8007392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1f9      	bne.n	800738e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	40012300 	.word	0x40012300
 80073b4:	40012000 	.word	0x40012000
 80073b8:	10000012 	.word	0x10000012
 80073bc:	20000024 	.word	0x20000024
 80073c0:	431bde83 	.word	0x431bde83

080073c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073cc:	4b79      	ldr	r3, [pc, #484]	; (80075b4 <ADC_Init+0x1f0>)
 80073ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	021a      	lsls	r2, r3, #8
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800741c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6859      	ldr	r1, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800743e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6899      	ldr	r1, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <ADC_Init+0x1f4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d022      	beq.n	80074a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800746a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6899      	ldr	r1, [r3, #8]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800748c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6899      	ldr	r1, [r3, #8]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	e00f      	b.n	80074c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0202 	bic.w	r2, r2, #2
 80074d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6899      	ldr	r1, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	7e1b      	ldrb	r3, [r3, #24]
 80074dc:	005a      	lsls	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01b      	beq.n	8007528 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800750e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6859      	ldr	r1, [r3, #4]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	3b01      	subs	r3, #1
 800751c:	035a      	lsls	r2, r3, #13
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	430a      	orrs	r2, r1
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	e007      	b.n	8007538 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007536:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	3b01      	subs	r3, #1
 8007554:	051a      	lsls	r2, r3, #20
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800756c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6899      	ldr	r1, [r3, #8]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800757a:	025a      	lsls	r2, r3, #9
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6899      	ldr	r1, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	029a      	lsls	r2, r3, #10
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40012300 	.word	0x40012300
 80075b8:	0f000001 	.word	0x0f000001

080075bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075cc:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <__NVIC_SetPriorityGrouping+0x44>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80075d8:	4013      	ands	r3, r2
 80075da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80075e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075ee:	4a04      	ldr	r2, [pc, #16]	; (8007600 <__NVIC_SetPriorityGrouping+0x44>)
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	60d3      	str	r3, [r2, #12]
}
 80075f4:	bf00      	nop
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	e000ed00 	.word	0xe000ed00

08007604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007608:	4b04      	ldr	r3, [pc, #16]	; (800761c <__NVIC_GetPriorityGrouping+0x18>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	0a1b      	lsrs	r3, r3, #8
 800760e:	f003 0307 	and.w	r3, r3, #7
}
 8007612:	4618      	mov	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	e000ed00 	.word	0xe000ed00

08007620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800762a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762e:	2b00      	cmp	r3, #0
 8007630:	db0b      	blt.n	800764a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	f003 021f 	and.w	r2, r3, #31
 8007638:	4907      	ldr	r1, [pc, #28]	; (8007658 <__NVIC_EnableIRQ+0x38>)
 800763a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	2001      	movs	r0, #1
 8007642:	fa00 f202 	lsl.w	r2, r0, r2
 8007646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	e000e100 	.word	0xe000e100

0800765c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766c:	2b00      	cmp	r3, #0
 800766e:	db0a      	blt.n	8007686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	490c      	ldr	r1, [pc, #48]	; (80076a8 <__NVIC_SetPriority+0x4c>)
 8007676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800767a:	0112      	lsls	r2, r2, #4
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	440b      	add	r3, r1
 8007680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007684:	e00a      	b.n	800769c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	4908      	ldr	r1, [pc, #32]	; (80076ac <__NVIC_SetPriority+0x50>)
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	3b04      	subs	r3, #4
 8007694:	0112      	lsls	r2, r2, #4
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	440b      	add	r3, r1
 800769a:	761a      	strb	r2, [r3, #24]
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	e000e100 	.word	0xe000e100
 80076ac:	e000ed00 	.word	0xe000ed00

080076b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f1c3 0307 	rsb	r3, r3, #7
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	bf28      	it	cs
 80076ce:	2304      	movcs	r3, #4
 80076d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3304      	adds	r3, #4
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d902      	bls.n	80076e0 <NVIC_EncodePriority+0x30>
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3b03      	subs	r3, #3
 80076de:	e000      	b.n	80076e2 <NVIC_EncodePriority+0x32>
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	43da      	mvns	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	401a      	ands	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076f8:	f04f 31ff 	mov.w	r1, #4294967295
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007702:	43d9      	mvns	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007708:	4313      	orrs	r3, r2
         );
}
 800770a:	4618      	mov	r0, r3
 800770c:	3724      	adds	r7, #36	; 0x24
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3b01      	subs	r3, #1
 8007724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007728:	d301      	bcc.n	800772e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800772a:	2301      	movs	r3, #1
 800772c:	e00f      	b.n	800774e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800772e:	4a0a      	ldr	r2, [pc, #40]	; (8007758 <SysTick_Config+0x40>)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3b01      	subs	r3, #1
 8007734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007736:	210f      	movs	r1, #15
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	f7ff ff8e 	bl	800765c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <SysTick_Config+0x40>)
 8007742:	2200      	movs	r2, #0
 8007744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007746:	4b04      	ldr	r3, [pc, #16]	; (8007758 <SysTick_Config+0x40>)
 8007748:	2207      	movs	r2, #7
 800774a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	e000e010 	.word	0xe000e010

0800775c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff ff29 	bl	80075bc <__NVIC_SetPriorityGrouping>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007772:	b580      	push	{r7, lr}
 8007774:	b086      	sub	sp, #24
 8007776:	af00      	add	r7, sp, #0
 8007778:	4603      	mov	r3, r0
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	607a      	str	r2, [r7, #4]
 800777e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007780:	2300      	movs	r3, #0
 8007782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007784:	f7ff ff3e 	bl	8007604 <__NVIC_GetPriorityGrouping>
 8007788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	6978      	ldr	r0, [r7, #20]
 8007790:	f7ff ff8e 	bl	80076b0 <NVIC_EncodePriority>
 8007794:	4602      	mov	r2, r0
 8007796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff ff5d 	bl	800765c <__NVIC_SetPriority>
}
 80077a2:	bf00      	nop
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	4603      	mov	r3, r0
 80077b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80077b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff ff31 	bl	8007620 <__NVIC_EnableIRQ>
}
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7ff ffa2 	bl	8007718 <SysTick_Config>
 80077d4:	4603      	mov	r3, r0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	; 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077f6:	2300      	movs	r3, #0
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	e165      	b.n	8007ac8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077fc:	2201      	movs	r2, #1
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	fa02 f303 	lsl.w	r3, r2, r3
 8007804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4013      	ands	r3, r2
 800780e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	f040 8154 	bne.w	8007ac2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	2b01      	cmp	r3, #1
 8007824:	d005      	beq.n	8007832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800782e:	2b02      	cmp	r3, #2
 8007830:	d130      	bne.n	8007894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	2203      	movs	r2, #3
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	43db      	mvns	r3, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4013      	ands	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	4313      	orrs	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007868:	2201      	movs	r2, #1
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	43db      	mvns	r3, r3
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	4013      	ands	r3, r2
 8007876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	091b      	lsrs	r3, r3, #4
 800787e:	f003 0201 	and.w	r2, r3, #1
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	4313      	orrs	r3, r2
 800788c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f003 0303 	and.w	r3, r3, #3
 800789c:	2b03      	cmp	r3, #3
 800789e:	d017      	beq.n	80078d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	2203      	movs	r2, #3
 80078ac:	fa02 f303 	lsl.w	r3, r2, r3
 80078b0:	43db      	mvns	r3, r3
 80078b2:	69ba      	ldr	r2, [r7, #24]
 80078b4:	4013      	ands	r3, r2
 80078b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f003 0303 	and.w	r3, r3, #3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d123      	bne.n	8007924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	08da      	lsrs	r2, r3, #3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3208      	adds	r2, #8
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	220f      	movs	r2, #15
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	43db      	mvns	r3, r3
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	4013      	ands	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	69ba      	ldr	r2, [r7, #24]
 8007912:	4313      	orrs	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	08da      	lsrs	r2, r3, #3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3208      	adds	r2, #8
 800791e:	69b9      	ldr	r1, [r7, #24]
 8007920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	2203      	movs	r2, #3
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	43db      	mvns	r3, r3
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	4013      	ands	r3, r2
 800793a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0203 	and.w	r2, r3, #3
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	69ba      	ldr	r2, [r7, #24]
 800794e:	4313      	orrs	r3, r2
 8007950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 80ae 	beq.w	8007ac2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007966:	2300      	movs	r3, #0
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	4b5d      	ldr	r3, [pc, #372]	; (8007ae0 <HAL_GPIO_Init+0x300>)
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	4a5c      	ldr	r2, [pc, #368]	; (8007ae0 <HAL_GPIO_Init+0x300>)
 8007970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007974:	6453      	str	r3, [r2, #68]	; 0x44
 8007976:	4b5a      	ldr	r3, [pc, #360]	; (8007ae0 <HAL_GPIO_Init+0x300>)
 8007978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800797a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007982:	4a58      	ldr	r2, [pc, #352]	; (8007ae4 <HAL_GPIO_Init+0x304>)
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	089b      	lsrs	r3, r3, #2
 8007988:	3302      	adds	r3, #2
 800798a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800798e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	220f      	movs	r2, #15
 800799a:	fa02 f303 	lsl.w	r3, r2, r3
 800799e:	43db      	mvns	r3, r3
 80079a0:	69ba      	ldr	r2, [r7, #24]
 80079a2:	4013      	ands	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a4f      	ldr	r2, [pc, #316]	; (8007ae8 <HAL_GPIO_Init+0x308>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d025      	beq.n	80079fa <HAL_GPIO_Init+0x21a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a4e      	ldr	r2, [pc, #312]	; (8007aec <HAL_GPIO_Init+0x30c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d01f      	beq.n	80079f6 <HAL_GPIO_Init+0x216>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a4d      	ldr	r2, [pc, #308]	; (8007af0 <HAL_GPIO_Init+0x310>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d019      	beq.n	80079f2 <HAL_GPIO_Init+0x212>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a4c      	ldr	r2, [pc, #304]	; (8007af4 <HAL_GPIO_Init+0x314>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <HAL_GPIO_Init+0x20e>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a4b      	ldr	r2, [pc, #300]	; (8007af8 <HAL_GPIO_Init+0x318>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d00d      	beq.n	80079ea <HAL_GPIO_Init+0x20a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a4a      	ldr	r2, [pc, #296]	; (8007afc <HAL_GPIO_Init+0x31c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d007      	beq.n	80079e6 <HAL_GPIO_Init+0x206>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a49      	ldr	r2, [pc, #292]	; (8007b00 <HAL_GPIO_Init+0x320>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d101      	bne.n	80079e2 <HAL_GPIO_Init+0x202>
 80079de:	2306      	movs	r3, #6
 80079e0:	e00c      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079e2:	2307      	movs	r3, #7
 80079e4:	e00a      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079e6:	2305      	movs	r3, #5
 80079e8:	e008      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079ea:	2304      	movs	r3, #4
 80079ec:	e006      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079ee:	2303      	movs	r3, #3
 80079f0:	e004      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e002      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <HAL_GPIO_Init+0x21c>
 80079fa:	2300      	movs	r3, #0
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	f002 0203 	and.w	r2, r2, #3
 8007a02:	0092      	lsls	r2, r2, #2
 8007a04:	4093      	lsls	r3, r2
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a0c:	4935      	ldr	r1, [pc, #212]	; (8007ae4 <HAL_GPIO_Init+0x304>)
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	089b      	lsrs	r3, r3, #2
 8007a12:	3302      	adds	r3, #2
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a1a:	4b3a      	ldr	r3, [pc, #232]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	43db      	mvns	r3, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4013      	ands	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a3e:	4a31      	ldr	r2, [pc, #196]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a44:	4b2f      	ldr	r3, [pc, #188]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a68:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a6e:	4b25      	ldr	r3, [pc, #148]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	43db      	mvns	r3, r3
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a92:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	43db      	mvns	r3, r3
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d003      	beq.n	8007abc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007abc:	4a11      	ldr	r2, [pc, #68]	; (8007b04 <HAL_GPIO_Init+0x324>)
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b0f      	cmp	r3, #15
 8007acc:	f67f ae96 	bls.w	80077fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	bf00      	nop
 8007ad4:	3724      	adds	r7, #36	; 0x24
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	40013800 	.word	0x40013800
 8007ae8:	40020000 	.word	0x40020000
 8007aec:	40020400 	.word	0x40020400
 8007af0:	40020800 	.word	0x40020800
 8007af4:	40020c00 	.word	0x40020c00
 8007af8:	40021000 	.word	0x40021000
 8007afc:	40021400 	.word	0x40021400
 8007b00:	40021800 	.word	0x40021800
 8007b04:	40013c00 	.word	0x40013c00

08007b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
 8007b14:	4613      	mov	r3, r2
 8007b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b18:	787b      	ldrb	r3, [r7, #1]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b1e:	887a      	ldrh	r2, [r7, #2]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b24:	e003      	b.n	8007b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b26:	887b      	ldrh	r3, [r7, #2]
 8007b28:	041a      	lsls	r2, r3, #16
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	619a      	str	r2, [r3, #24]
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e12b      	b.n	8007da6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d106      	bne.n	8007b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fe fdf6 	bl	8006754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2224      	movs	r2, #36	; 0x24
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ba0:	f001 fa4e 	bl	8009040 <HAL_RCC_GetPCLK1Freq>
 8007ba4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	4a81      	ldr	r2, [pc, #516]	; (8007db0 <HAL_I2C_Init+0x274>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d807      	bhi.n	8007bc0 <HAL_I2C_Init+0x84>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a80      	ldr	r2, [pc, #512]	; (8007db4 <HAL_I2C_Init+0x278>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	bf94      	ite	ls
 8007bb8:	2301      	movls	r3, #1
 8007bba:	2300      	movhi	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	e006      	b.n	8007bce <HAL_I2C_Init+0x92>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a7d      	ldr	r2, [pc, #500]	; (8007db8 <HAL_I2C_Init+0x27c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	bf94      	ite	ls
 8007bc8:	2301      	movls	r3, #1
 8007bca:	2300      	movhi	r3, #0
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e0e7      	b.n	8007da6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a78      	ldr	r2, [pc, #480]	; (8007dbc <HAL_I2C_Init+0x280>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	0c9b      	lsrs	r3, r3, #18
 8007be0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	4a6a      	ldr	r2, [pc, #424]	; (8007db0 <HAL_I2C_Init+0x274>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d802      	bhi.n	8007c10 <HAL_I2C_Init+0xd4>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	e009      	b.n	8007c24 <HAL_I2C_Init+0xe8>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c16:	fb02 f303 	mul.w	r3, r2, r3
 8007c1a:	4a69      	ldr	r2, [pc, #420]	; (8007dc0 <HAL_I2C_Init+0x284>)
 8007c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c20:	099b      	lsrs	r3, r3, #6
 8007c22:	3301      	adds	r3, #1
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	430b      	orrs	r3, r1
 8007c2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	495c      	ldr	r1, [pc, #368]	; (8007db0 <HAL_I2C_Init+0x274>)
 8007c40:	428b      	cmp	r3, r1
 8007c42:	d819      	bhi.n	8007c78 <HAL_I2C_Init+0x13c>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	1e59      	subs	r1, r3, #1
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c58:	400b      	ands	r3, r1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <HAL_I2C_Init+0x138>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1e59      	subs	r1, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c72:	e051      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007c74:	2304      	movs	r3, #4
 8007c76:	e04f      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d111      	bne.n	8007ca4 <HAL_I2C_Init+0x168>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	1e58      	subs	r0, r3, #1
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	440b      	add	r3, r1
 8007c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c92:	3301      	adds	r3, #1
 8007c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	bf0c      	ite	eq
 8007c9c:	2301      	moveq	r3, #1
 8007c9e:	2300      	movne	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e012      	b.n	8007cca <HAL_I2C_Init+0x18e>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1e58      	subs	r0, r3, #1
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6859      	ldr	r1, [r3, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	0099      	lsls	r1, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cba:	3301      	adds	r3, #1
 8007cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <HAL_I2C_Init+0x196>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e022      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_I2C_Init+0x1bc>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1e58      	subs	r0, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6859      	ldr	r1, [r3, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	440b      	add	r3, r1
 8007ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cec:	3301      	adds	r3, #1
 8007cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf6:	e00f      	b.n	8007d18 <HAL_I2C_Init+0x1dc>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	1e58      	subs	r0, r3, #1
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6859      	ldr	r1, [r3, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	0099      	lsls	r1, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	6809      	ldr	r1, [r1, #0]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	69da      	ldr	r2, [r3, #28]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6911      	ldr	r1, [r2, #16]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	68d2      	ldr	r2, [r2, #12]
 8007d52:	4311      	orrs	r1, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	000186a0 	.word	0x000186a0
 8007db4:	001e847f 	.word	0x001e847f
 8007db8:	003d08ff 	.word	0x003d08ff
 8007dbc:	431bde83 	.word	0x431bde83
 8007dc0:	10624dd3 	.word	0x10624dd3

08007dc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af02      	add	r7, sp, #8
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	607a      	str	r2, [r7, #4]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	817b      	strh	r3, [r7, #10]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dd8:	f7ff f94e 	bl	8007078 <HAL_GetTick>
 8007ddc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	2b20      	cmp	r3, #32
 8007de8:	f040 80e0 	bne.w	8007fac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	2319      	movs	r3, #25
 8007df2:	2201      	movs	r2, #1
 8007df4:	4970      	ldr	r1, [pc, #448]	; (8007fb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 fe02 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
 8007e04:	e0d3      	b.n	8007fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d101      	bne.n	8007e14 <HAL_I2C_Master_Transmit+0x50>
 8007e10:	2302      	movs	r3, #2
 8007e12:	e0cc      	b.n	8007fae <HAL_I2C_Master_Transmit+0x1ea>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d007      	beq.n	8007e3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2221      	movs	r2, #33	; 0x21
 8007e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2210      	movs	r2, #16
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	893a      	ldrh	r2, [r7, #8]
 8007e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4a50      	ldr	r2, [pc, #320]	; (8007fbc <HAL_I2C_Master_Transmit+0x1f8>)
 8007e7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e7c:	8979      	ldrh	r1, [r7, #10]
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	6a3a      	ldr	r2, [r7, #32]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fbbc 	bl	8008600 <I2C_MasterRequestWrite>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e08d      	b.n	8007fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	695b      	ldr	r3, [r3, #20]
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	613b      	str	r3, [r7, #16]
 8007ea6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007ea8:	e066      	b.n	8007f78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	6a39      	ldr	r1, [r7, #32]
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fe7c 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00d      	beq.n	8007ed6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d107      	bne.n	8007ed2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e06b      	b.n	8007fae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	781a      	ldrb	r2, [r3, #0]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d11b      	bne.n	8007f4c <HAL_I2C_Master_Transmit+0x188>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d017      	beq.n	8007f4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f20:	781a      	ldrb	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	6a39      	ldr	r1, [r7, #32]
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fe6c 	bl	8008c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d107      	bne.n	8007f74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e01a      	b.n	8007fae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d194      	bne.n	8007eaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2220      	movs	r2, #32
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	00100002 	.word	0x00100002
 8007fbc:	ffff0000 	.word	0xffff0000

08007fc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	4608      	mov	r0, r1
 8007fca:	4611      	mov	r1, r2
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4603      	mov	r3, r0
 8007fd0:	817b      	strh	r3, [r7, #10]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	813b      	strh	r3, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007fda:	f7ff f84d 	bl	8007078 <HAL_GetTick>
 8007fde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b20      	cmp	r3, #32
 8007fea:	f040 80d9 	bne.w	80081a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2319      	movs	r3, #25
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	496d      	ldr	r1, [pc, #436]	; (80081ac <HAL_I2C_Mem_Write+0x1ec>)
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 fd01 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008004:	2302      	movs	r3, #2
 8008006:	e0cc      	b.n	80081a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_I2C_Mem_Write+0x56>
 8008012:	2302      	movs	r3, #2
 8008014:	e0c5      	b.n	80081a2 <HAL_I2C_Mem_Write+0x1e2>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b01      	cmp	r3, #1
 800802a:	d007      	beq.n	800803c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800804a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2221      	movs	r2, #33	; 0x21
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2240      	movs	r2, #64	; 0x40
 8008058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a3a      	ldr	r2, [r7, #32]
 8008066:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800806c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a4d      	ldr	r2, [pc, #308]	; (80081b0 <HAL_I2C_Mem_Write+0x1f0>)
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800807e:	88f8      	ldrh	r0, [r7, #6]
 8008080:	893a      	ldrh	r2, [r7, #8]
 8008082:	8979      	ldrh	r1, [r7, #10]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	9301      	str	r3, [sp, #4]
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	4603      	mov	r3, r0
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 fb38 	bl	8008704 <I2C_RequestMemoryWrite>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d052      	beq.n	8008140 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e081      	b.n	80081a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 fd82 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00d      	beq.n	80080ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d107      	bne.n	80080c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e06b      	b.n	80081a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	2b04      	cmp	r3, #4
 8008106:	d11b      	bne.n	8008140 <HAL_I2C_Mem_Write+0x180>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800810c:	2b00      	cmp	r3, #0
 800810e:	d017      	beq.n	8008140 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	781a      	ldrb	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29a      	uxth	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1aa      	bne.n	800809e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 fd6e 	bl	8008c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00d      	beq.n	8008174 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	2b04      	cmp	r3, #4
 800815e:	d107      	bne.n	8008170 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800816e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e016      	b.n	80081a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	e000      	b.n	80081a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80081a0:	2302      	movs	r3, #2
  }
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	00100002 	.word	0x00100002
 80081b0:	ffff0000 	.word	0xffff0000

080081b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	; 0x30
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	817b      	strh	r3, [r7, #10]
 80081c6:	460b      	mov	r3, r1
 80081c8:	813b      	strh	r3, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081ce:	f7fe ff53 	bl	8007078 <HAL_GetTick>
 80081d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b20      	cmp	r3, #32
 80081de:	f040 8208 	bne.w	80085f2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2319      	movs	r3, #25
 80081e8:	2201      	movs	r2, #1
 80081ea:	497b      	ldr	r1, [pc, #492]	; (80083d8 <HAL_I2C_Mem_Read+0x224>)
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fc07 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d001      	beq.n	80081fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80081f8:	2302      	movs	r3, #2
 80081fa:	e1fb      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008202:	2b01      	cmp	r3, #1
 8008204:	d101      	bne.n	800820a <HAL_I2C_Mem_Read+0x56>
 8008206:	2302      	movs	r3, #2
 8008208:	e1f4      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b01      	cmp	r3, #1
 800821e:	d007      	beq.n	8008230 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0201 	orr.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800823e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2222      	movs	r2, #34	; 0x22
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2240      	movs	r2, #64	; 0x40
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008260:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4a5b      	ldr	r2, [pc, #364]	; (80083dc <HAL_I2C_Mem_Read+0x228>)
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008272:	88f8      	ldrh	r0, [r7, #6]
 8008274:	893a      	ldrh	r2, [r7, #8]
 8008276:	8979      	ldrh	r1, [r7, #10]
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	4603      	mov	r3, r0
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 fad4 	bl	8008830 <I2C_RequestMemoryRead>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e1b0      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008296:	2b00      	cmp	r3, #0
 8008298:	d113      	bne.n	80082c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800829a:	2300      	movs	r3, #0
 800829c:	623b      	str	r3, [r7, #32]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	623b      	str	r3, [r7, #32]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	623b      	str	r3, [r7, #32]
 80082ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	e184      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d11b      	bne.n	8008302 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	61fb      	str	r3, [r7, #28]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	61fb      	str	r3, [r7, #28]
 80082ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e164      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008306:	2b02      	cmp	r3, #2
 8008308:	d11b      	bne.n	8008342 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008318:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	e144      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	617b      	str	r3, [r7, #20]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008358:	e138      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835e:	2b03      	cmp	r3, #3
 8008360:	f200 80f1 	bhi.w	8008546 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008368:	2b01      	cmp	r3, #1
 800836a:	d123      	bne.n	80083b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800836c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fc9d 	bl	8008cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e139      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839c:	3b01      	subs	r3, #1
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	3b01      	subs	r3, #1
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083b2:	e10b      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d14e      	bne.n	800845a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c2:	2200      	movs	r2, #0
 80083c4:	4906      	ldr	r1, [pc, #24]	; (80083e0 <HAL_I2C_Mem_Read+0x22c>)
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 fb1a 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d008      	beq.n	80083e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e10e      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
 80083d6:	bf00      	nop
 80083d8:	00100002 	.word	0x00100002
 80083dc:	ffff0000 	.word	0xffff0000
 80083e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	691a      	ldr	r2, [r3, #16]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	b2d2      	uxtb	r2, r2
 8008400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008410:	3b01      	subs	r3, #1
 8008412:	b29a      	uxth	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841c:	b29b      	uxth	r3, r3
 800841e:	3b01      	subs	r3, #1
 8008420:	b29a      	uxth	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	b2d2      	uxtb	r2, r2
 8008432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008442:	3b01      	subs	r3, #1
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008458:	e0b8      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	2200      	movs	r2, #0
 8008462:	4966      	ldr	r1, [pc, #408]	; (80085fc <HAL_I2C_Mem_Read+0x448>)
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 facb 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e0bf      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008482:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	1c5a      	adds	r2, r3, #1
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084a0:	3b01      	subs	r3, #1
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	2200      	movs	r2, #0
 80084be:	494f      	ldr	r1, [pc, #316]	; (80085fc <HAL_I2C_Mem_Read+0x448>)
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 fa9d 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e091      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	691a      	ldr	r2, [r3, #16]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29a      	uxth	r2, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008544:	e042      	b.n	80085cc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 fbb0 	bl	8008cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e04c      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	b2d2      	uxtb	r2, r2
 8008566:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008576:	3b01      	subs	r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	f003 0304 	and.w	r3, r3, #4
 8008596:	2b04      	cmp	r3, #4
 8008598:	d118      	bne.n	80085cc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	691a      	ldr	r2, [r3, #16]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	1c5a      	adds	r2, r3, #1
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f47f aec2 	bne.w	800835a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2220      	movs	r2, #32
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e000      	b.n	80085f4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80085f2:	2302      	movs	r3, #2
  }
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3728      	adds	r7, #40	; 0x28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	00010004 	.word	0x00010004

08008600 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	460b      	mov	r3, r1
 800860e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b08      	cmp	r3, #8
 800861a:	d006      	beq.n	800862a <I2C_MasterRequestWrite+0x2a>
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d003      	beq.n	800862a <I2C_MasterRequestWrite+0x2a>
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008628:	d108      	bne.n	800863c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e00b      	b.n	8008654 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	2b12      	cmp	r3, #18
 8008642:	d107      	bne.n	8008654 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f9cd 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00d      	beq.n	8008688 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800867a:	d103      	bne.n	8008684 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e035      	b.n	80086f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008690:	d108      	bne.n	80086a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008692:	897b      	ldrh	r3, [r7, #10]
 8008694:	b2db      	uxtb	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086a0:	611a      	str	r2, [r3, #16]
 80086a2:	e01b      	b.n	80086dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80086a4:	897b      	ldrh	r3, [r7, #10]
 80086a6:	11db      	asrs	r3, r3, #7
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	f003 0306 	and.w	r3, r3, #6
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f063 030f 	orn	r3, r3, #15
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	490e      	ldr	r1, [pc, #56]	; (80086fc <I2C_MasterRequestWrite+0xfc>)
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 f9f3 	bl	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e010      	b.n	80086f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80086d2:	897b      	ldrh	r3, [r7, #10]
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	4907      	ldr	r1, [pc, #28]	; (8008700 <I2C_MasterRequestWrite+0x100>)
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 f9e3 	bl	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	00010008 	.word	0x00010008
 8008700:	00010002 	.word	0x00010002

08008704 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b088      	sub	sp, #32
 8008708:	af02      	add	r7, sp, #8
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	4608      	mov	r0, r1
 800870e:	4611      	mov	r1, r2
 8008710:	461a      	mov	r2, r3
 8008712:	4603      	mov	r3, r0
 8008714:	817b      	strh	r3, [r7, #10]
 8008716:	460b      	mov	r3, r1
 8008718:	813b      	strh	r3, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800872c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	6a3b      	ldr	r3, [r7, #32]
 8008734:	2200      	movs	r2, #0
 8008736:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f960 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00d      	beq.n	8008762 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008754:	d103      	bne.n	800875e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800875c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e05f      	b.n	8008822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008762:	897b      	ldrh	r3, [r7, #10]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008770:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	6a3a      	ldr	r2, [r7, #32]
 8008776:	492d      	ldr	r1, [pc, #180]	; (800882c <I2C_RequestMemoryWrite+0x128>)
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 f998 	bl	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e04c      	b.n	8008822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800879e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a0:	6a39      	ldr	r1, [r7, #32]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fa02 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d107      	bne.n	80087c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e02b      	b.n	8008822 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d105      	bne.n	80087dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80087d0:	893b      	ldrh	r3, [r7, #8]
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	611a      	str	r2, [r3, #16]
 80087da:	e021      	b.n	8008820 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80087dc:	893b      	ldrh	r3, [r7, #8]
 80087de:	0a1b      	lsrs	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ec:	6a39      	ldr	r1, [r7, #32]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f9dc 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d107      	bne.n	8008812 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008810:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e005      	b.n	8008822 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008816:	893b      	ldrh	r3, [r7, #8]
 8008818:	b2da      	uxtb	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	00010002 	.word	0x00010002

08008830 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af02      	add	r7, sp, #8
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	4608      	mov	r0, r1
 800883a:	4611      	mov	r1, r2
 800883c:	461a      	mov	r2, r3
 800883e:	4603      	mov	r3, r0
 8008840:	817b      	strh	r3, [r7, #10]
 8008842:	460b      	mov	r3, r1
 8008844:	813b      	strh	r3, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008858:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008868:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	2200      	movs	r2, #0
 8008872:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f8c2 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00d      	beq.n	800889e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008890:	d103      	bne.n	800889a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e0aa      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800889e:	897b      	ldrh	r3, [r7, #10]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	461a      	mov	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80088ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	4952      	ldr	r1, [pc, #328]	; (80089fc <I2C_RequestMemoryRead+0x1cc>)
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f8fa 	bl	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e097      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c4:	2300      	movs	r3, #0
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088dc:	6a39      	ldr	r1, [r7, #32]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f964 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00d      	beq.n	8008906 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	d107      	bne.n	8008902 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008900:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e076      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d105      	bne.n	8008918 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800890c:	893b      	ldrh	r3, [r7, #8]
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	611a      	str	r2, [r3, #16]
 8008916:	e021      	b.n	800895c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008918:	893b      	ldrh	r3, [r7, #8]
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	b29b      	uxth	r3, r3
 800891e:	b2da      	uxtb	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008928:	6a39      	ldr	r1, [r7, #32]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f93e 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00d      	beq.n	8008952 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	2b04      	cmp	r3, #4
 800893c:	d107      	bne.n	800894e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800894c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e050      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008952:	893b      	ldrh	r3, [r7, #8]
 8008954:	b2da      	uxtb	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	6a39      	ldr	r1, [r7, #32]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f923 	bl	8008bac <I2C_WaitOnTXEFlagUntilTimeout>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00d      	beq.n	8008988 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	2b04      	cmp	r3, #4
 8008972:	d107      	bne.n	8008984 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008982:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e035      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008996:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	2200      	movs	r2, #0
 80089a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f82b 	bl	8008a00 <I2C_WaitOnFlagUntilTimeout>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00d      	beq.n	80089cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089be:	d103      	bne.n	80089c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e013      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80089cc:	897b      	ldrh	r3, [r7, #10]
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	f043 0301 	orr.w	r3, r3, #1
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	6a3a      	ldr	r2, [r7, #32]
 80089e0:	4906      	ldr	r1, [pc, #24]	; (80089fc <I2C_RequestMemoryRead+0x1cc>)
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f863 	bl	8008aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	00010002 	.word	0x00010002

08008a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	603b      	str	r3, [r7, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a10:	e025      	b.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	d021      	beq.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1a:	f7fe fb2d 	bl	8007078 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d302      	bcc.n	8008a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d116      	bne.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	f043 0220 	orr.w	r2, r3, #32
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e023      	b.n	8008aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d10d      	bne.n	8008a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	43da      	mvns	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4013      	ands	r3, r2
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	bf0c      	ite	eq
 8008a7a:	2301      	moveq	r3, #1
 8008a7c:	2300      	movne	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	e00c      	b.n	8008a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	43da      	mvns	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	bf0c      	ite	eq
 8008a96:	2301      	moveq	r3, #1
 8008a98:	2300      	movne	r3, #0
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d0b6      	beq.n	8008a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008abc:	e051      	b.n	8008b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008acc:	d123      	bne.n	8008b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2220      	movs	r2, #32
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b02:	f043 0204 	orr.w	r2, r3, #4
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e046      	b.n	8008ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d021      	beq.n	8008b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b1e:	f7fe faab 	bl	8007078 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d302      	bcc.n	8008b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d116      	bne.n	8008b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2220      	movs	r2, #32
 8008b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	f043 0220 	orr.w	r2, r3, #32
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e020      	b.n	8008ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	0c1b      	lsrs	r3, r3, #16
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d10c      	bne.n	8008b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	43da      	mvns	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4013      	ands	r3, r2
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	2300      	moveq	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	e00b      	b.n	8008b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	43da      	mvns	r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4013      	ands	r3, r2
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bf14      	ite	ne
 8008b98:	2301      	movne	r3, #1
 8008b9a:	2300      	moveq	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d18d      	bne.n	8008abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bb8:	e02d      	b.n	8008c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 f8ce 	bl	8008d5c <I2C_IsAcknowledgeFailed>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e02d      	b.n	8008c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd0:	d021      	beq.n	8008c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bd2:	f7fe fa51 	bl	8007078 <HAL_GetTick>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	1ad3      	subs	r3, r2, r3
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d302      	bcc.n	8008be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d116      	bne.n	8008c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2200      	movs	r2, #0
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	f043 0220 	orr.w	r2, r3, #32
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e007      	b.n	8008c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c20:	2b80      	cmp	r3, #128	; 0x80
 8008c22:	d1ca      	bne.n	8008bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c3a:	e02d      	b.n	8008c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f88d 	bl	8008d5c <I2C_IsAcknowledgeFailed>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e02d      	b.n	8008ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c52:	d021      	beq.n	8008c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c54:	f7fe fa10 	bl	8007078 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d302      	bcc.n	8008c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d116      	bne.n	8008c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2220      	movs	r2, #32
 8008c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c84:	f043 0220 	orr.w	r2, r3, #32
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	e007      	b.n	8008ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	f003 0304 	and.w	r3, r3, #4
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d1ca      	bne.n	8008c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008cbc:	e042      	b.n	8008d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d119      	bne.n	8008d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0210 	mvn.w	r2, #16
 8008cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e029      	b.n	8008d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d00:	f7fe f9ba 	bl	8007078 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d302      	bcc.n	8008d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d116      	bne.n	8008d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	f043 0220 	orr.w	r2, r3, #32
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	e007      	b.n	8008d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	d1b5      	bne.n	8008cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	695b      	ldr	r3, [r3, #20]
 8008d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d72:	d11b      	bne.n	8008dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d98:	f043 0204 	orr.w	r2, r3, #4
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	603b      	str	r3, [r7, #0]
 8008dca:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8008dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dce:	4a1f      	ldr	r2, [pc, #124]	; (8008e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8008dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8008dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008de2:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <HAL_PWREx_EnableOverDrive+0x94>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008de8:	f7fe f946 	bl	8007078 <HAL_GetTick>
 8008dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008dee:	e009      	b.n	8008e04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008df0:	f7fe f942 	bl	8007078 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dfe:	d901      	bls.n	8008e04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e01f      	b.n	8008e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008e04:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d1ee      	bne.n	8008df0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008e12:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e18:	f7fe f92e 	bl	8007078 <HAL_GetTick>
 8008e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e1e:	e009      	b.n	8008e34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008e20:	f7fe f92a 	bl	8007078 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e2e:	d901      	bls.n	8008e34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e007      	b.n	8008e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008e34:	4b07      	ldr	r3, [pc, #28]	; (8008e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e40:	d1ee      	bne.n	8008e20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	40023800 	.word	0x40023800
 8008e50:	420e0040 	.word	0x420e0040
 8008e54:	40007000 	.word	0x40007000
 8008e58:	420e0044 	.word	0x420e0044

08008e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e0cc      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e70:	4b68      	ldr	r3, [pc, #416]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d90c      	bls.n	8008e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7e:	4b65      	ldr	r3, [pc, #404]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e86:	4b63      	ldr	r3, [pc, #396]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d001      	beq.n	8008e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e0b8      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d020      	beq.n	8008ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008eb0:	4b59      	ldr	r3, [pc, #356]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	4a58      	ldr	r2, [pc, #352]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0308 	and.w	r3, r3, #8
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d005      	beq.n	8008ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ec8:	4b53      	ldr	r3, [pc, #332]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4a52      	ldr	r2, [pc, #328]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ed4:	4b50      	ldr	r3, [pc, #320]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	494d      	ldr	r1, [pc, #308]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d044      	beq.n	8008f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d107      	bne.n	8008f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008efa:	4b47      	ldr	r3, [pc, #284]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d119      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e07f      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d003      	beq.n	8008f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d107      	bne.n	8008f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f1a:	4b3f      	ldr	r3, [pc, #252]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e06f      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f2a:	4b3b      	ldr	r3, [pc, #236]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e067      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f3a:	4b37      	ldr	r3, [pc, #220]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 0203 	bic.w	r2, r3, #3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	4934      	ldr	r1, [pc, #208]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f4c:	f7fe f894 	bl	8007078 <HAL_GetTick>
 8008f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f52:	e00a      	b.n	8008f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f54:	f7fe f890 	bl	8007078 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e04f      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f6a:	4b2b      	ldr	r3, [pc, #172]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 020c 	and.w	r2, r3, #12
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d1eb      	bne.n	8008f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f7c:	4b25      	ldr	r3, [pc, #148]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 030f 	and.w	r3, r3, #15
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d20c      	bcs.n	8008fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f8a:	4b22      	ldr	r3, [pc, #136]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	b2d2      	uxtb	r2, r2
 8008f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f92:	4b20      	ldr	r3, [pc, #128]	; (8009014 <HAL_RCC_ClockConfig+0x1b8>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 030f 	and.w	r3, r3, #15
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d001      	beq.n	8008fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e032      	b.n	800900a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0304 	and.w	r3, r3, #4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d008      	beq.n	8008fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fb0:	4b19      	ldr	r3, [pc, #100]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4916      	ldr	r1, [pc, #88]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0308 	and.w	r3, r3, #8
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d009      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	00db      	lsls	r3, r3, #3
 8008fdc:	490e      	ldr	r1, [pc, #56]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008fe2:	f000 f841 	bl	8009068 <HAL_RCC_GetSysClockFreq>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <HAL_RCC_ClockConfig+0x1bc>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	091b      	lsrs	r3, r3, #4
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	490a      	ldr	r1, [pc, #40]	; (800901c <HAL_RCC_ClockConfig+0x1c0>)
 8008ff4:	5ccb      	ldrb	r3, [r1, r3]
 8008ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffa:	4a09      	ldr	r2, [pc, #36]	; (8009020 <HAL_RCC_ClockConfig+0x1c4>)
 8008ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <HAL_RCC_ClockConfig+0x1c8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f7fd fff4 	bl	8006ff0 <HAL_InitTick>

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40023c00 	.word	0x40023c00
 8009018:	40023800 	.word	0x40023800
 800901c:	0801017c 	.word	0x0801017c
 8009020:	20000024 	.word	0x20000024
 8009024:	20000030 	.word	0x20000030

08009028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800902c:	4b03      	ldr	r3, [pc, #12]	; (800903c <HAL_RCC_GetHCLKFreq+0x14>)
 800902e:	681b      	ldr	r3, [r3, #0]
}
 8009030:	4618      	mov	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000024 	.word	0x20000024

08009040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009044:	f7ff fff0 	bl	8009028 <HAL_RCC_GetHCLKFreq>
 8009048:	4602      	mov	r2, r0
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	0a9b      	lsrs	r3, r3, #10
 8009050:	f003 0307 	and.w	r3, r3, #7
 8009054:	4903      	ldr	r1, [pc, #12]	; (8009064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009056:	5ccb      	ldrb	r3, [r1, r3]
 8009058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800905c:	4618      	mov	r0, r3
 800905e:	bd80      	pop	{r7, pc}
 8009060:	40023800 	.word	0x40023800
 8009064:	0801018c 	.word	0x0801018c

08009068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800906c:	b0a6      	sub	sp, #152	; 0x98
 800906e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800908e:	4bc8      	ldr	r3, [pc, #800]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	f003 030c 	and.w	r3, r3, #12
 8009096:	2b0c      	cmp	r3, #12
 8009098:	f200 817e 	bhi.w	8009398 <HAL_RCC_GetSysClockFreq+0x330>
 800909c:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800909e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a2:	bf00      	nop
 80090a4:	080090d9 	.word	0x080090d9
 80090a8:	08009399 	.word	0x08009399
 80090ac:	08009399 	.word	0x08009399
 80090b0:	08009399 	.word	0x08009399
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	08009399 	.word	0x08009399
 80090bc:	08009399 	.word	0x08009399
 80090c0:	08009399 	.word	0x08009399
 80090c4:	080090e9 	.word	0x080090e9
 80090c8:	08009399 	.word	0x08009399
 80090cc:	08009399 	.word	0x08009399
 80090d0:	08009399 	.word	0x08009399
 80090d4:	08009253 	.word	0x08009253
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80090d8:	4bb6      	ldr	r3, [pc, #728]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80090da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80090de:	e15f      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80090e0:	4bb5      	ldr	r3, [pc, #724]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x350>)
 80090e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80090e6:	e15b      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80090e8:	4bb1      	ldr	r3, [pc, #708]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80090f4:	4bae      	ldr	r3, [pc, #696]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d031      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009100:	4bab      	ldr	r3, [pc, #684]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	099b      	lsrs	r3, r3, #6
 8009106:	2200      	movs	r2, #0
 8009108:	66bb      	str	r3, [r7, #104]	; 0x68
 800910a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800910c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800910e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009112:	663b      	str	r3, [r7, #96]	; 0x60
 8009114:	2300      	movs	r3, #0
 8009116:	667b      	str	r3, [r7, #100]	; 0x64
 8009118:	4ba7      	ldr	r3, [pc, #668]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800911a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800911e:	462a      	mov	r2, r5
 8009120:	fb03 f202 	mul.w	r2, r3, r2
 8009124:	2300      	movs	r3, #0
 8009126:	4621      	mov	r1, r4
 8009128:	fb01 f303 	mul.w	r3, r1, r3
 800912c:	4413      	add	r3, r2
 800912e:	4aa2      	ldr	r2, [pc, #648]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8009130:	4621      	mov	r1, r4
 8009132:	fba1 1202 	umull	r1, r2, r1, r2
 8009136:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009138:	460a      	mov	r2, r1
 800913a:	67ba      	str	r2, [r7, #120]	; 0x78
 800913c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800913e:	4413      	add	r3, r2
 8009140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009146:	2200      	movs	r2, #0
 8009148:	65bb      	str	r3, [r7, #88]	; 0x58
 800914a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800914c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009150:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009154:	f7f7 febe 	bl	8000ed4 <__aeabi_uldivmod>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4613      	mov	r3, r2
 800915e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009162:	e064      	b.n	800922e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009164:	4b92      	ldr	r3, [pc, #584]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	099b      	lsrs	r3, r3, #6
 800916a:	2200      	movs	r2, #0
 800916c:	653b      	str	r3, [r7, #80]	; 0x50
 800916e:	657a      	str	r2, [r7, #84]	; 0x54
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	64bb      	str	r3, [r7, #72]	; 0x48
 8009178:	2300      	movs	r3, #0
 800917a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800917c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009180:	4622      	mov	r2, r4
 8009182:	462b      	mov	r3, r5
 8009184:	f04f 0000 	mov.w	r0, #0
 8009188:	f04f 0100 	mov.w	r1, #0
 800918c:	0159      	lsls	r1, r3, #5
 800918e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009192:	0150      	lsls	r0, r2, #5
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	4621      	mov	r1, r4
 800919a:	1a51      	subs	r1, r2, r1
 800919c:	6139      	str	r1, [r7, #16]
 800919e:	4629      	mov	r1, r5
 80091a0:	eb63 0301 	sbc.w	r3, r3, r1
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	f04f 0300 	mov.w	r3, #0
 80091ae:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80091b2:	4659      	mov	r1, fp
 80091b4:	018b      	lsls	r3, r1, #6
 80091b6:	4651      	mov	r1, sl
 80091b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091bc:	4651      	mov	r1, sl
 80091be:	018a      	lsls	r2, r1, #6
 80091c0:	4651      	mov	r1, sl
 80091c2:	ebb2 0801 	subs.w	r8, r2, r1
 80091c6:	4659      	mov	r1, fp
 80091c8:	eb63 0901 	sbc.w	r9, r3, r1
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091e0:	4690      	mov	r8, r2
 80091e2:	4699      	mov	r9, r3
 80091e4:	4623      	mov	r3, r4
 80091e6:	eb18 0303 	adds.w	r3, r8, r3
 80091ea:	60bb      	str	r3, [r7, #8]
 80091ec:	462b      	mov	r3, r5
 80091ee:	eb49 0303 	adc.w	r3, r9, r3
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	f04f 0300 	mov.w	r3, #0
 80091fc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009200:	4629      	mov	r1, r5
 8009202:	028b      	lsls	r3, r1, #10
 8009204:	4621      	mov	r1, r4
 8009206:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800920a:	4621      	mov	r1, r4
 800920c:	028a      	lsls	r2, r1, #10
 800920e:	4610      	mov	r0, r2
 8009210:	4619      	mov	r1, r3
 8009212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009216:	2200      	movs	r2, #0
 8009218:	643b      	str	r3, [r7, #64]	; 0x40
 800921a:	647a      	str	r2, [r7, #68]	; 0x44
 800921c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009220:	f7f7 fe58 	bl	8000ed4 <__aeabi_uldivmod>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4613      	mov	r3, r2
 800922a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800922e:	4b60      	ldr	r3, [pc, #384]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	f003 0303 	and.w	r3, r3, #3
 8009238:	3301      	adds	r3, #1
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8009240:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009248:	fbb2 f3f3 	udiv	r3, r2, r3
 800924c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009250:	e0a6      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009252:	4b57      	ldr	r3, [pc, #348]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800925a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800925e:	4b54      	ldr	r3, [pc, #336]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d02a      	beq.n	80092c0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800926a:	4b51      	ldr	r3, [pc, #324]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	099b      	lsrs	r3, r3, #6
 8009270:	2200      	movs	r2, #0
 8009272:	63bb      	str	r3, [r7, #56]	; 0x38
 8009274:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800927c:	2100      	movs	r1, #0
 800927e:	4b4e      	ldr	r3, [pc, #312]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x350>)
 8009280:	fb03 f201 	mul.w	r2, r3, r1
 8009284:	2300      	movs	r3, #0
 8009286:	fb00 f303 	mul.w	r3, r0, r3
 800928a:	4413      	add	r3, r2
 800928c:	4a4a      	ldr	r2, [pc, #296]	; (80093b8 <HAL_RCC_GetSysClockFreq+0x350>)
 800928e:	fba0 1202 	umull	r1, r2, r0, r2
 8009292:	677a      	str	r2, [r7, #116]	; 0x74
 8009294:	460a      	mov	r2, r1
 8009296:	673a      	str	r2, [r7, #112]	; 0x70
 8009298:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800929a:	4413      	add	r3, r2
 800929c:	677b      	str	r3, [r7, #116]	; 0x74
 800929e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092a2:	2200      	movs	r2, #0
 80092a4:	633b      	str	r3, [r7, #48]	; 0x30
 80092a6:	637a      	str	r2, [r7, #52]	; 0x34
 80092a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80092ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80092b0:	f7f7 fe10 	bl	8000ed4 <__aeabi_uldivmod>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4613      	mov	r3, r2
 80092ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092be:	e05b      	b.n	8009378 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092c0:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	099b      	lsrs	r3, r3, #6
 80092c6:	2200      	movs	r2, #0
 80092c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80092ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	623b      	str	r3, [r7, #32]
 80092d4:	2300      	movs	r3, #0
 80092d6:	627b      	str	r3, [r7, #36]	; 0x24
 80092d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	f04f 0000 	mov.w	r0, #0
 80092e4:	f04f 0100 	mov.w	r1, #0
 80092e8:	0159      	lsls	r1, r3, #5
 80092ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092ee:	0150      	lsls	r0, r2, #5
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4641      	mov	r1, r8
 80092f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80092fa:	4649      	mov	r1, r9
 80092fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800930c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009310:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009314:	ebb2 040a 	subs.w	r4, r2, sl
 8009318:	eb63 050b 	sbc.w	r5, r3, fp
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	00eb      	lsls	r3, r5, #3
 8009326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800932a:	00e2      	lsls	r2, r4, #3
 800932c:	4614      	mov	r4, r2
 800932e:	461d      	mov	r5, r3
 8009330:	4643      	mov	r3, r8
 8009332:	18e3      	adds	r3, r4, r3
 8009334:	603b      	str	r3, [r7, #0]
 8009336:	464b      	mov	r3, r9
 8009338:	eb45 0303 	adc.w	r3, r5, r3
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	f04f 0200 	mov.w	r2, #0
 8009342:	f04f 0300 	mov.w	r3, #0
 8009346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800934a:	4629      	mov	r1, r5
 800934c:	028b      	lsls	r3, r1, #10
 800934e:	4621      	mov	r1, r4
 8009350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009354:	4621      	mov	r1, r4
 8009356:	028a      	lsls	r2, r1, #10
 8009358:	4610      	mov	r0, r2
 800935a:	4619      	mov	r1, r3
 800935c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009360:	2200      	movs	r2, #0
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	61fa      	str	r2, [r7, #28]
 8009366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800936a:	f7f7 fdb3 	bl	8000ed4 <__aeabi_uldivmod>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4613      	mov	r3, r2
 8009374:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009378:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <HAL_RCC_GetSysClockFreq+0x348>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	0f1b      	lsrs	r3, r3, #28
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8009386:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800938a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800938e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009396:	e003      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800939a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800939e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3798      	adds	r7, #152	; 0x98
 80093a8:	46bd      	mov	sp, r7
 80093aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093ae:	bf00      	nop
 80093b0:	40023800 	.word	0x40023800
 80093b4:	00f42400 	.word	0x00f42400
 80093b8:	016e3600 	.word	0x016e3600

080093bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e28d      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 8083 	beq.w	80094e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80093dc:	4b94      	ldr	r3, [pc, #592]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f003 030c 	and.w	r3, r3, #12
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d019      	beq.n	800941c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80093e8:	4b91      	ldr	r3, [pc, #580]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d106      	bne.n	8009402 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80093f4:	4b8e      	ldr	r3, [pc, #568]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009400:	d00c      	beq.n	800941c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009402:	4b8b      	ldr	r3, [pc, #556]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800940a:	2b0c      	cmp	r3, #12
 800940c:	d112      	bne.n	8009434 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800940e:	4b88      	ldr	r3, [pc, #544]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800941a:	d10b      	bne.n	8009434 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800941c:	4b84      	ldr	r3, [pc, #528]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d05b      	beq.n	80094e0 <HAL_RCC_OscConfig+0x124>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d157      	bne.n	80094e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e25a      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800943c:	d106      	bne.n	800944c <HAL_RCC_OscConfig+0x90>
 800943e:	4b7c      	ldr	r3, [pc, #496]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a7b      	ldr	r2, [pc, #492]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009448:	6013      	str	r3, [r2, #0]
 800944a:	e01d      	b.n	8009488 <HAL_RCC_OscConfig+0xcc>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009454:	d10c      	bne.n	8009470 <HAL_RCC_OscConfig+0xb4>
 8009456:	4b76      	ldr	r3, [pc, #472]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a75      	ldr	r2, [pc, #468]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 800945c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	4b73      	ldr	r3, [pc, #460]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a72      	ldr	r2, [pc, #456]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	e00b      	b.n	8009488 <HAL_RCC_OscConfig+0xcc>
 8009470:	4b6f      	ldr	r3, [pc, #444]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a6e      	ldr	r2, [pc, #440]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	4b6c      	ldr	r3, [pc, #432]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a6b      	ldr	r2, [pc, #428]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d013      	beq.n	80094b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009490:	f7fd fdf2 	bl	8007078 <HAL_GetTick>
 8009494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009496:	e008      	b.n	80094aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009498:	f7fd fdee 	bl	8007078 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b64      	cmp	r3, #100	; 0x64
 80094a4:	d901      	bls.n	80094aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e21f      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094aa:	4b61      	ldr	r3, [pc, #388]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0f0      	beq.n	8009498 <HAL_RCC_OscConfig+0xdc>
 80094b6:	e014      	b.n	80094e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b8:	f7fd fdde 	bl	8007078 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094c0:	f7fd fdda 	bl	8007078 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b64      	cmp	r3, #100	; 0x64
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e20b      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094d2:	4b57      	ldr	r3, [pc, #348]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f0      	bne.n	80094c0 <HAL_RCC_OscConfig+0x104>
 80094de:	e000      	b.n	80094e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0302 	and.w	r3, r3, #2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d06f      	beq.n	80095ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80094ee:	4b50      	ldr	r3, [pc, #320]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f003 030c 	and.w	r3, r3, #12
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d017      	beq.n	800952a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80094fa:	4b4d      	ldr	r3, [pc, #308]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009502:	2b08      	cmp	r3, #8
 8009504:	d105      	bne.n	8009512 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009506:	4b4a      	ldr	r3, [pc, #296]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009512:	4b47      	ldr	r3, [pc, #284]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800951a:	2b0c      	cmp	r3, #12
 800951c:	d11c      	bne.n	8009558 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800951e:	4b44      	ldr	r3, [pc, #272]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d116      	bne.n	8009558 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800952a:	4b41      	ldr	r3, [pc, #260]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d005      	beq.n	8009542 <HAL_RCC_OscConfig+0x186>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d001      	beq.n	8009542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e1d3      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009542:	4b3b      	ldr	r3, [pc, #236]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4937      	ldr	r1, [pc, #220]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009552:	4313      	orrs	r3, r2
 8009554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009556:	e03a      	b.n	80095ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d020      	beq.n	80095a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009560:	4b34      	ldr	r3, [pc, #208]	; (8009634 <HAL_RCC_OscConfig+0x278>)
 8009562:	2201      	movs	r2, #1
 8009564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009566:	f7fd fd87 	bl	8007078 <HAL_GetTick>
 800956a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800956c:	e008      	b.n	8009580 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800956e:	f7fd fd83 	bl	8007078 <HAL_GetTick>
 8009572:	4602      	mov	r2, r0
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	2b02      	cmp	r3, #2
 800957a:	d901      	bls.n	8009580 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e1b4      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009580:	4b2b      	ldr	r3, [pc, #172]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0f0      	beq.n	800956e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800958c:	4b28      	ldr	r3, [pc, #160]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	691b      	ldr	r3, [r3, #16]
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	4925      	ldr	r1, [pc, #148]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 800959c:	4313      	orrs	r3, r2
 800959e:	600b      	str	r3, [r1, #0]
 80095a0:	e015      	b.n	80095ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <HAL_RCC_OscConfig+0x278>)
 80095a4:	2200      	movs	r2, #0
 80095a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7fd fd66 	bl	8007078 <HAL_GetTick>
 80095ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80095b0:	f7fd fd62 	bl	8007078 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e193      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095c2:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1f0      	bne.n	80095b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0308 	and.w	r3, r3, #8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d036      	beq.n	8009648 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d016      	beq.n	8009610 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <HAL_RCC_OscConfig+0x27c>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e8:	f7fd fd46 	bl	8007078 <HAL_GetTick>
 80095ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095ee:	e008      	b.n	8009602 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095f0:	f7fd fd42 	bl	8007078 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d901      	bls.n	8009602 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e173      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009602:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <HAL_RCC_OscConfig+0x274>)
 8009604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d0f0      	beq.n	80095f0 <HAL_RCC_OscConfig+0x234>
 800960e:	e01b      	b.n	8009648 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <HAL_RCC_OscConfig+0x27c>)
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009616:	f7fd fd2f 	bl	8007078 <HAL_GetTick>
 800961a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800961c:	e00e      	b.n	800963c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800961e:	f7fd fd2b 	bl	8007078 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d907      	bls.n	800963c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e15c      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
 8009630:	40023800 	.word	0x40023800
 8009634:	42470000 	.word	0x42470000
 8009638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800963c:	4b8a      	ldr	r3, [pc, #552]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800963e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1ea      	bne.n	800961e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8097 	beq.w	8009784 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009656:	2300      	movs	r3, #0
 8009658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800965a:	4b83      	ldr	r3, [pc, #524]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10f      	bne.n	8009686 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009666:	2300      	movs	r3, #0
 8009668:	60bb      	str	r3, [r7, #8]
 800966a:	4b7f      	ldr	r3, [pc, #508]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966e:	4a7e      	ldr	r2, [pc, #504]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009674:	6413      	str	r3, [r2, #64]	; 0x40
 8009676:	4b7c      	ldr	r3, [pc, #496]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800967e:	60bb      	str	r3, [r7, #8]
 8009680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009682:	2301      	movs	r3, #1
 8009684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009686:	4b79      	ldr	r3, [pc, #484]	; (800986c <HAL_RCC_OscConfig+0x4b0>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968e:	2b00      	cmp	r3, #0
 8009690:	d118      	bne.n	80096c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009692:	4b76      	ldr	r3, [pc, #472]	; (800986c <HAL_RCC_OscConfig+0x4b0>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a75      	ldr	r2, [pc, #468]	; (800986c <HAL_RCC_OscConfig+0x4b0>)
 8009698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800969c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800969e:	f7fd fceb 	bl	8007078 <HAL_GetTick>
 80096a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096a4:	e008      	b.n	80096b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a6:	f7fd fce7 	bl	8007078 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d901      	bls.n	80096b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e118      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096b8:	4b6c      	ldr	r3, [pc, #432]	; (800986c <HAL_RCC_OscConfig+0x4b0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f0      	beq.n	80096a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d106      	bne.n	80096da <HAL_RCC_OscConfig+0x31e>
 80096cc:	4b66      	ldr	r3, [pc, #408]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d0:	4a65      	ldr	r2, [pc, #404]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	6713      	str	r3, [r2, #112]	; 0x70
 80096d8:	e01c      	b.n	8009714 <HAL_RCC_OscConfig+0x358>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	2b05      	cmp	r3, #5
 80096e0:	d10c      	bne.n	80096fc <HAL_RCC_OscConfig+0x340>
 80096e2:	4b61      	ldr	r3, [pc, #388]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e6:	4a60      	ldr	r2, [pc, #384]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096e8:	f043 0304 	orr.w	r3, r3, #4
 80096ec:	6713      	str	r3, [r2, #112]	; 0x70
 80096ee:	4b5e      	ldr	r3, [pc, #376]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f2:	4a5d      	ldr	r2, [pc, #372]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096f4:	f043 0301 	orr.w	r3, r3, #1
 80096f8:	6713      	str	r3, [r2, #112]	; 0x70
 80096fa:	e00b      	b.n	8009714 <HAL_RCC_OscConfig+0x358>
 80096fc:	4b5a      	ldr	r3, [pc, #360]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80096fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009700:	4a59      	ldr	r2, [pc, #356]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	6713      	str	r3, [r2, #112]	; 0x70
 8009708:	4b57      	ldr	r3, [pc, #348]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800970a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970c:	4a56      	ldr	r2, [pc, #344]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800970e:	f023 0304 	bic.w	r3, r3, #4
 8009712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d015      	beq.n	8009748 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800971c:	f7fd fcac 	bl	8007078 <HAL_GetTick>
 8009720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009722:	e00a      	b.n	800973a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009724:	f7fd fca8 	bl	8007078 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009732:	4293      	cmp	r3, r2
 8009734:	d901      	bls.n	800973a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e0d7      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800973a:	4b4b      	ldr	r3, [pc, #300]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800973c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973e:	f003 0302 	and.w	r3, r3, #2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0ee      	beq.n	8009724 <HAL_RCC_OscConfig+0x368>
 8009746:	e014      	b.n	8009772 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009748:	f7fd fc96 	bl	8007078 <HAL_GetTick>
 800974c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800974e:	e00a      	b.n	8009766 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009750:	f7fd fc92 	bl	8007078 <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	f241 3288 	movw	r2, #5000	; 0x1388
 800975e:	4293      	cmp	r3, r2
 8009760:	d901      	bls.n	8009766 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e0c1      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009766:	4b40      	ldr	r3, [pc, #256]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1ee      	bne.n	8009750 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d105      	bne.n	8009784 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009778:	4b3b      	ldr	r3, [pc, #236]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	4a3a      	ldr	r2, [pc, #232]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 800977e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80ad 	beq.w	80098e8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800978e:	4b36      	ldr	r3, [pc, #216]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f003 030c 	and.w	r3, r3, #12
 8009796:	2b08      	cmp	r3, #8
 8009798:	d060      	beq.n	800985c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d145      	bne.n	800982e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097a2:	4b33      	ldr	r3, [pc, #204]	; (8009870 <HAL_RCC_OscConfig+0x4b4>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097a8:	f7fd fc66 	bl	8007078 <HAL_GetTick>
 80097ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097ae:	e008      	b.n	80097c2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097b0:	f7fd fc62 	bl	8007078 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d901      	bls.n	80097c2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e093      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097c2:	4b29      	ldr	r3, [pc, #164]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f0      	bne.n	80097b0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69da      	ldr	r2, [r3, #28]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	431a      	orrs	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	019b      	lsls	r3, r3, #6
 80097de:	431a      	orrs	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	085b      	lsrs	r3, r3, #1
 80097e6:	3b01      	subs	r3, #1
 80097e8:	041b      	lsls	r3, r3, #16
 80097ea:	431a      	orrs	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	061b      	lsls	r3, r3, #24
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f8:	071b      	lsls	r3, r3, #28
 80097fa:	491b      	ldr	r1, [pc, #108]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009800:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <HAL_RCC_OscConfig+0x4b4>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009806:	f7fd fc37 	bl	8007078 <HAL_GetTick>
 800980a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800980c:	e008      	b.n	8009820 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800980e:	f7fd fc33 	bl	8007078 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	2b02      	cmp	r3, #2
 800981a:	d901      	bls.n	8009820 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e064      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0f0      	beq.n	800980e <HAL_RCC_OscConfig+0x452>
 800982c:	e05c      	b.n	80098e8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800982e:	4b10      	ldr	r3, [pc, #64]	; (8009870 <HAL_RCC_OscConfig+0x4b4>)
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009834:	f7fd fc20 	bl	8007078 <HAL_GetTick>
 8009838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800983c:	f7fd fc1c 	bl	8007078 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e04d      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800984e:	4b06      	ldr	r3, [pc, #24]	; (8009868 <HAL_RCC_OscConfig+0x4ac>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1f0      	bne.n	800983c <HAL_RCC_OscConfig+0x480>
 800985a:	e045      	b.n	80098e8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d107      	bne.n	8009874 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e040      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
 8009868:	40023800 	.word	0x40023800
 800986c:	40007000 	.word	0x40007000
 8009870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009874:	4b1f      	ldr	r3, [pc, #124]	; (80098f4 <HAL_RCC_OscConfig+0x538>)
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d030      	beq.n	80098e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800988c:	429a      	cmp	r2, r3
 800988e:	d129      	bne.n	80098e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800989a:	429a      	cmp	r2, r3
 800989c:	d122      	bne.n	80098e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80098a4:	4013      	ands	r3, r2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d119      	bne.n	80098e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	085b      	lsrs	r3, r3, #1
 80098bc:	3b01      	subs	r3, #1
 80098be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d10f      	bne.n	80098e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d107      	bne.n	80098e4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d001      	beq.n	80098e8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e000      	b.n	80098ea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3718      	adds	r7, #24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	40023800 	.word	0x40023800

080098f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e07b      	b.n	8009a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	2b00      	cmp	r3, #0
 8009910:	d108      	bne.n	8009924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800991a:	d009      	beq.n	8009930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	61da      	str	r2, [r3, #28]
 8009922:	e005      	b.n	8009930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d106      	bne.n	8009950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7fc fff6 	bl	800693c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009982:	431a      	orrs	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	f003 0302 	and.w	r3, r3, #2
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099aa:	431a      	orrs	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b4:	ea42 0103 	orr.w	r1, r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	699b      	ldr	r3, [r3, #24]
 80099cc:	0c1b      	lsrs	r3, r3, #16
 80099ce:	f003 0104 	and.w	r1, r3, #4
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	f003 0210 	and.w	r2, r3, #16
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69da      	ldr	r2, [r3, #28]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b088      	sub	sp, #32
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	603b      	str	r3, [r7, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d101      	bne.n	8009a2c <HAL_SPI_Transmit+0x22>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e126      	b.n	8009c7a <HAL_SPI_Transmit+0x270>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a34:	f7fd fb20 	bl	8007078 <HAL_GetTick>
 8009a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d002      	beq.n	8009a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a4e:	e10b      	b.n	8009c68 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <HAL_SPI_Transmit+0x52>
 8009a56:	88fb      	ldrh	r3, [r7, #6]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a60:	e102      	b.n	8009c68 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2203      	movs	r2, #3
 8009a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	88fa      	ldrh	r2, [r7, #6]
 8009a7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	88fa      	ldrh	r2, [r7, #6]
 8009a80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2200      	movs	r2, #0
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa8:	d10f      	bne.n	8009aca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ac8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad4:	2b40      	cmp	r3, #64	; 0x40
 8009ad6:	d007      	beq.n	8009ae8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009af0:	d14b      	bne.n	8009b8a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <HAL_SPI_Transmit+0xf6>
 8009afa:	8afb      	ldrh	r3, [r7, #22]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d13e      	bne.n	8009b7e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b04:	881a      	ldrh	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b10:	1c9a      	adds	r2, r3, #2
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b24:	e02b      	b.n	8009b7e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f003 0302 	and.w	r3, r3, #2
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d112      	bne.n	8009b5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	881a      	ldrh	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b44:	1c9a      	adds	r2, r3, #2
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	3b01      	subs	r3, #1
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b58:	e011      	b.n	8009b7e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b5a:	f7fd fa8d 	bl	8007078 <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	683a      	ldr	r2, [r7, #0]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d803      	bhi.n	8009b72 <HAL_SPI_Transmit+0x168>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b70:	d102      	bne.n	8009b78 <HAL_SPI_Transmit+0x16e>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b7c:	e074      	b.n	8009c68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1ce      	bne.n	8009b26 <HAL_SPI_Transmit+0x11c>
 8009b88:	e04c      	b.n	8009c24 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d002      	beq.n	8009b98 <HAL_SPI_Transmit+0x18e>
 8009b92:	8afb      	ldrh	r3, [r7, #22]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d140      	bne.n	8009c1a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	7812      	ldrb	r2, [r2, #0]
 8009ba4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009bbe:	e02c      	b.n	8009c1a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d113      	bne.n	8009bf6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	7812      	ldrb	r2, [r2, #0]
 8009bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8009bf4:	e011      	b.n	8009c1a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bf6:	f7fd fa3f 	bl	8007078 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	683a      	ldr	r2, [r7, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d803      	bhi.n	8009c0e <HAL_SPI_Transmit+0x204>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d102      	bne.n	8009c14 <HAL_SPI_Transmit+0x20a>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d102      	bne.n	8009c1a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c18:	e026      	b.n	8009c68 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1cd      	bne.n	8009bc0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c24:	69ba      	ldr	r2, [r7, #24]
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fa55 	bl	800a0d8 <SPI_EndRxTxTransaction>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2220      	movs	r2, #32
 8009c38:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d10a      	bne.n	8009c58 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	613b      	str	r3, [r7, #16]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	77fb      	strb	r3, [r7, #31]
 8009c64:	e000      	b.n	8009c68 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c78:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3720      	adds	r7, #32
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b08c      	sub	sp, #48	; 0x30
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
 8009c8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c90:	2301      	movs	r3, #1
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_SPI_TransmitReceive+0x26>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e18a      	b.n	8009fbe <HAL_SPI_TransmitReceive+0x33c>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cb0:	f7fd f9e2 	bl	8007078 <HAL_GetTick>
 8009cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009cc6:	887b      	ldrh	r3, [r7, #2]
 8009cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d00f      	beq.n	8009cf2 <HAL_SPI_TransmitReceive+0x70>
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cd8:	d107      	bne.n	8009cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d103      	bne.n	8009cea <HAL_SPI_TransmitReceive+0x68>
 8009ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d003      	beq.n	8009cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
 8009cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009cf0:	e15b      	b.n	8009faa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d005      	beq.n	8009d04 <HAL_SPI_TransmitReceive+0x82>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <HAL_SPI_TransmitReceive+0x82>
 8009cfe:	887b      	ldrh	r3, [r7, #2]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d103      	bne.n	8009d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009d0a:	e14e      	b.n	8009faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d003      	beq.n	8009d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2205      	movs	r2, #5
 8009d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	887a      	ldrh	r2, [r7, #2]
 8009d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	887a      	ldrh	r2, [r7, #2]
 8009d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	887a      	ldrh	r2, [r7, #2]
 8009d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	887a      	ldrh	r2, [r7, #2]
 8009d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d60:	2b40      	cmp	r3, #64	; 0x40
 8009d62:	d007      	beq.n	8009d74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d7c:	d178      	bne.n	8009e70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <HAL_SPI_TransmitReceive+0x10a>
 8009d86:	8b7b      	ldrh	r3, [r7, #26]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d166      	bne.n	8009e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d90:	881a      	ldrh	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9c:	1c9a      	adds	r2, r3, #2
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29a      	uxth	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009db0:	e053      	b.n	8009e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 0302 	and.w	r3, r3, #2
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d11b      	bne.n	8009df8 <HAL_SPI_TransmitReceive+0x176>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d016      	beq.n	8009df8 <HAL_SPI_TransmitReceive+0x176>
 8009dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d113      	bne.n	8009df8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd4:	881a      	ldrh	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	1c9a      	adds	r2, r3, #2
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d119      	bne.n	8009e3a <HAL_SPI_TransmitReceive+0x1b8>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d014      	beq.n	8009e3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1a:	b292      	uxth	r2, r2
 8009e1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	1c9a      	adds	r2, r3, #2
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e36:	2301      	movs	r3, #1
 8009e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e3a:	f7fd f91d 	bl	8007078 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d807      	bhi.n	8009e5a <HAL_SPI_TransmitReceive+0x1d8>
 8009e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d003      	beq.n	8009e5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009e58:	e0a7      	b.n	8009faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1a6      	bne.n	8009db2 <HAL_SPI_TransmitReceive+0x130>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1a1      	bne.n	8009db2 <HAL_SPI_TransmitReceive+0x130>
 8009e6e:	e07c      	b.n	8009f6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <HAL_SPI_TransmitReceive+0x1fc>
 8009e78:	8b7b      	ldrh	r3, [r7, #26]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d16b      	bne.n	8009f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	330c      	adds	r3, #12
 8009e88:	7812      	ldrb	r2, [r2, #0]
 8009e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e90:	1c5a      	adds	r2, r3, #1
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ea4:	e057      	b.n	8009f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d11c      	bne.n	8009eee <HAL_SPI_TransmitReceive+0x26c>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d017      	beq.n	8009eee <HAL_SPI_TransmitReceive+0x26c>
 8009ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d114      	bne.n	8009eee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	330c      	adds	r3, #12
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d119      	bne.n	8009f30 <HAL_SPI_TransmitReceive+0x2ae>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d014      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68da      	ldr	r2, [r3, #12]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f30:	f7fd f8a2 	bl	8007078 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d803      	bhi.n	8009f48 <HAL_SPI_TransmitReceive+0x2c6>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f46:	d102      	bne.n	8009f4e <HAL_SPI_TransmitReceive+0x2cc>
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d103      	bne.n	8009f56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f54:	e029      	b.n	8009faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f5a:	b29b      	uxth	r3, r3
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1a2      	bne.n	8009ea6 <HAL_SPI_TransmitReceive+0x224>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d19d      	bne.n	8009ea6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f000 f8b2 	bl	800a0d8 <SPI_EndRxTxTransaction>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d006      	beq.n	8009f88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009f86:	e010      	b.n	8009faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10b      	bne.n	8009fa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68db      	ldr	r3, [r3, #12]
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	e000      	b.n	8009faa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3730      	adds	r7, #48	; 0x30
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fd8:	f7fd f84e 	bl	8007078 <HAL_GetTick>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fe8:	f7fd f846 	bl	8007078 <HAL_GetTick>
 8009fec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fee:	4b39      	ldr	r3, [pc, #228]	; (800a0d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	015b      	lsls	r3, r3, #5
 8009ff4:	0d1b      	lsrs	r3, r3, #20
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	fb02 f303 	mul.w	r3, r2, r3
 8009ffc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ffe:	e054      	b.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d050      	beq.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a008:	f7fd f836 	bl	8007078 <HAL_GetTick>
 800a00c:	4602      	mov	r2, r0
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	1ad3      	subs	r3, r2, r3
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	429a      	cmp	r2, r3
 800a016:	d902      	bls.n	800a01e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d13d      	bne.n	800a09a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a02c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a036:	d111      	bne.n	800a05c <SPI_WaitFlagStateUntilTimeout+0x94>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a040:	d004      	beq.n	800a04c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a04a:	d107      	bne.n	800a05c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a05a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a064:	d10f      	bne.n	800a086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e017      	b.n	800a0ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	bf0c      	ite	eq
 800a0ba:	2301      	moveq	r3, #1
 800a0bc:	2300      	movne	r3, #0
 800a0be:	b2db      	uxtb	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	79fb      	ldrb	r3, [r7, #7]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d19b      	bne.n	800a000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	20000024 	.word	0x20000024

0800a0d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a0e4:	4b1b      	ldr	r3, [pc, #108]	; (800a154 <SPI_EndRxTxTransaction+0x7c>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a1b      	ldr	r2, [pc, #108]	; (800a158 <SPI_EndRxTxTransaction+0x80>)
 800a0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ee:	0d5b      	lsrs	r3, r3, #21
 800a0f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0f4:	fb02 f303 	mul.w	r3, r2, r3
 800a0f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a102:	d112      	bne.n	800a12a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2200      	movs	r2, #0
 800a10c:	2180      	movs	r1, #128	; 0x80
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff ff5a 	bl	8009fc8 <SPI_WaitFlagStateUntilTimeout>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d016      	beq.n	800a148 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a11e:	f043 0220 	orr.w	r2, r3, #32
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e00f      	b.n	800a14a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00a      	beq.n	800a146 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	3b01      	subs	r3, #1
 800a134:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b80      	cmp	r3, #128	; 0x80
 800a142:	d0f2      	beq.n	800a12a <SPI_EndRxTxTransaction+0x52>
 800a144:	e000      	b.n	800a148 <SPI_EndRxTxTransaction+0x70>
        break;
 800a146:	bf00      	nop
  }

  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	20000024 	.word	0x20000024
 800a158:	165e9f81 	.word	0x165e9f81

0800a15c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e041      	b.n	800a1f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7fc fc22 	bl	80069cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f000 fa96 	bl	800a6cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d001      	beq.n	800a214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e04e      	b.n	800a2b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0201 	orr.w	r2, r2, #1
 800a22a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a23      	ldr	r2, [pc, #140]	; (800a2c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d022      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a23e:	d01d      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a1f      	ldr	r2, [pc, #124]	; (800a2c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d018      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a1e      	ldr	r2, [pc, #120]	; (800a2c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d013      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a1c      	ldr	r2, [pc, #112]	; (800a2cc <HAL_TIM_Base_Start_IT+0xd0>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d00e      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a1b      	ldr	r2, [pc, #108]	; (800a2d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d009      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a19      	ldr	r2, [pc, #100]	; (800a2d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d004      	beq.n	800a27c <HAL_TIM_Base_Start_IT+0x80>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a18      	ldr	r2, [pc, #96]	; (800a2d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d111      	bne.n	800a2a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b06      	cmp	r3, #6
 800a28c:	d010      	beq.n	800a2b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f042 0201 	orr.w	r2, r2, #1
 800a29c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a29e:	e007      	b.n	800a2b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0201 	orr.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	40010000 	.word	0x40010000
 800a2c4:	40000400 	.word	0x40000400
 800a2c8:	40000800 	.word	0x40000800
 800a2cc:	40000c00 	.word	0x40000c00
 800a2d0:	40010400 	.word	0x40010400
 800a2d4:	40014000 	.word	0x40014000
 800a2d8:	40001800 	.word	0x40001800

0800a2dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d122      	bne.n	800a338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d11b      	bne.n	800a338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0202 	mvn.w	r2, #2
 800a308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f9b5 	bl	800a68e <HAL_TIM_IC_CaptureCallback>
 800a324:	e005      	b.n	800a332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f9a7 	bl	800a67a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f9b8 	bl	800a6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b04      	cmp	r3, #4
 800a344:	d122      	bne.n	800a38c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b04      	cmp	r3, #4
 800a352:	d11b      	bne.n	800a38c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0204 	mvn.w	r2, #4
 800a35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f98b 	bl	800a68e <HAL_TIM_IC_CaptureCallback>
 800a378:	e005      	b.n	800a386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f97d 	bl	800a67a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f98e 	bl	800a6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	2b08      	cmp	r3, #8
 800a398:	d122      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 0308 	and.w	r3, r3, #8
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d11b      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0208 	mvn.w	r2, #8
 800a3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f961 	bl	800a68e <HAL_TIM_IC_CaptureCallback>
 800a3cc:	e005      	b.n	800a3da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f953 	bl	800a67a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f964 	bl	800a6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0310 	and.w	r3, r3, #16
 800a3ea:	2b10      	cmp	r3, #16
 800a3ec:	d122      	bne.n	800a434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d11b      	bne.n	800a434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0210 	mvn.w	r2, #16
 800a404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2208      	movs	r2, #8
 800a40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f937 	bl	800a68e <HAL_TIM_IC_CaptureCallback>
 800a420:	e005      	b.n	800a42e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f929 	bl	800a67a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f93a 	bl	800a6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10e      	bne.n	800a460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d107      	bne.n	800a460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f06f 0201 	mvn.w	r2, #1
 800a458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f7f9 f8dc 	bl	8003618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46a:	2b80      	cmp	r3, #128	; 0x80
 800a46c:	d10e      	bne.n	800a48c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a478:	2b80      	cmp	r3, #128	; 0x80
 800a47a:	d107      	bne.n	800a48c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fae0 	bl	800aa4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a496:	2b40      	cmp	r3, #64	; 0x40
 800a498:	d10e      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a4:	2b40      	cmp	r3, #64	; 0x40
 800a4a6:	d107      	bne.n	800a4b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f8ff 	bl	800a6b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b20      	cmp	r3, #32
 800a4c4:	d10e      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0320 	and.w	r3, r3, #32
 800a4d0:	2b20      	cmp	r3, #32
 800a4d2:	d107      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f06f 0220 	mvn.w	r2, #32
 800a4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 faaa 	bl	800aa38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_TIM_ConfigClockSource+0x1c>
 800a504:	2302      	movs	r3, #2
 800a506:	e0b4      	b.n	800a672 <HAL_TIM_ConfigClockSource+0x186>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a52e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a540:	d03e      	beq.n	800a5c0 <HAL_TIM_ConfigClockSource+0xd4>
 800a542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a546:	f200 8087 	bhi.w	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a54e:	f000 8086 	beq.w	800a65e <HAL_TIM_ConfigClockSource+0x172>
 800a552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a556:	d87f      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a558:	2b70      	cmp	r3, #112	; 0x70
 800a55a:	d01a      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0xa6>
 800a55c:	2b70      	cmp	r3, #112	; 0x70
 800a55e:	d87b      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a560:	2b60      	cmp	r3, #96	; 0x60
 800a562:	d050      	beq.n	800a606 <HAL_TIM_ConfigClockSource+0x11a>
 800a564:	2b60      	cmp	r3, #96	; 0x60
 800a566:	d877      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a568:	2b50      	cmp	r3, #80	; 0x50
 800a56a:	d03c      	beq.n	800a5e6 <HAL_TIM_ConfigClockSource+0xfa>
 800a56c:	2b50      	cmp	r3, #80	; 0x50
 800a56e:	d873      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a570:	2b40      	cmp	r3, #64	; 0x40
 800a572:	d058      	beq.n	800a626 <HAL_TIM_ConfigClockSource+0x13a>
 800a574:	2b40      	cmp	r3, #64	; 0x40
 800a576:	d86f      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a578:	2b30      	cmp	r3, #48	; 0x30
 800a57a:	d064      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x15a>
 800a57c:	2b30      	cmp	r3, #48	; 0x30
 800a57e:	d86b      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a580:	2b20      	cmp	r3, #32
 800a582:	d060      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x15a>
 800a584:	2b20      	cmp	r3, #32
 800a586:	d867      	bhi.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d05c      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x15a>
 800a58c:	2b10      	cmp	r3, #16
 800a58e:	d05a      	beq.n	800a646 <HAL_TIM_ConfigClockSource+0x15a>
 800a590:	e062      	b.n	800a658 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6899      	ldr	r1, [r3, #8]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685a      	ldr	r2, [r3, #4]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f000 f9ad 	bl	800a900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a5b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	609a      	str	r2, [r3, #8]
      break;
 800a5be:	e04f      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	6899      	ldr	r1, [r3, #8]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f000 f996 	bl	800a900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689a      	ldr	r2, [r3, #8]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5e2:	609a      	str	r2, [r3, #8]
      break;
 800a5e4:	e03c      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	6859      	ldr	r1, [r3, #4]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f000 f90a 	bl	800a80c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2150      	movs	r1, #80	; 0x50
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 f963 	bl	800a8ca <TIM_ITRx_SetConfig>
      break;
 800a604:	e02c      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6859      	ldr	r1, [r3, #4]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	461a      	mov	r2, r3
 800a614:	f000 f929 	bl	800a86a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2160      	movs	r1, #96	; 0x60
 800a61e:	4618      	mov	r0, r3
 800a620:	f000 f953 	bl	800a8ca <TIM_ITRx_SetConfig>
      break;
 800a624:	e01c      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	6859      	ldr	r1, [r3, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	461a      	mov	r2, r3
 800a634:	f000 f8ea 	bl	800a80c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2140      	movs	r1, #64	; 0x40
 800a63e:	4618      	mov	r0, r3
 800a640:	f000 f943 	bl	800a8ca <TIM_ITRx_SetConfig>
      break;
 800a644:	e00c      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f000 f93a 	bl	800a8ca <TIM_ITRx_SetConfig>
      break;
 800a656:	e003      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	73fb      	strb	r3, [r7, #15]
      break;
 800a65c:	e000      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a65e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a670:	7bfb      	ldrb	r3, [r7, #15]
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a682:	bf00      	nop
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6aa:	bf00      	nop
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
	...

0800a6cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4a40      	ldr	r2, [pc, #256]	; (800a7e0 <TIM_Base_SetConfig+0x114>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d013      	beq.n	800a70c <TIM_Base_SetConfig+0x40>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ea:	d00f      	beq.n	800a70c <TIM_Base_SetConfig+0x40>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a3d      	ldr	r2, [pc, #244]	; (800a7e4 <TIM_Base_SetConfig+0x118>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d00b      	beq.n	800a70c <TIM_Base_SetConfig+0x40>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a3c      	ldr	r2, [pc, #240]	; (800a7e8 <TIM_Base_SetConfig+0x11c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d007      	beq.n	800a70c <TIM_Base_SetConfig+0x40>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a3b      	ldr	r2, [pc, #236]	; (800a7ec <TIM_Base_SetConfig+0x120>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d003      	beq.n	800a70c <TIM_Base_SetConfig+0x40>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a3a      	ldr	r2, [pc, #232]	; (800a7f0 <TIM_Base_SetConfig+0x124>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d108      	bne.n	800a71e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	4a2f      	ldr	r2, [pc, #188]	; (800a7e0 <TIM_Base_SetConfig+0x114>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d02b      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72c:	d027      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a2c      	ldr	r2, [pc, #176]	; (800a7e4 <TIM_Base_SetConfig+0x118>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d023      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a2b      	ldr	r2, [pc, #172]	; (800a7e8 <TIM_Base_SetConfig+0x11c>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d01f      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a2a      	ldr	r2, [pc, #168]	; (800a7ec <TIM_Base_SetConfig+0x120>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d01b      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a29      	ldr	r2, [pc, #164]	; (800a7f0 <TIM_Base_SetConfig+0x124>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d017      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a28      	ldr	r2, [pc, #160]	; (800a7f4 <TIM_Base_SetConfig+0x128>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d013      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a27      	ldr	r2, [pc, #156]	; (800a7f8 <TIM_Base_SetConfig+0x12c>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00f      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a26      	ldr	r2, [pc, #152]	; (800a7fc <TIM_Base_SetConfig+0x130>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d00b      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a25      	ldr	r2, [pc, #148]	; (800a800 <TIM_Base_SetConfig+0x134>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d007      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a24      	ldr	r2, [pc, #144]	; (800a804 <TIM_Base_SetConfig+0x138>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d003      	beq.n	800a77e <TIM_Base_SetConfig+0xb2>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4a23      	ldr	r2, [pc, #140]	; (800a808 <TIM_Base_SetConfig+0x13c>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d108      	bne.n	800a790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	681a      	ldr	r2, [r3, #0]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a0a      	ldr	r2, [pc, #40]	; (800a7e0 <TIM_Base_SetConfig+0x114>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d003      	beq.n	800a7c4 <TIM_Base_SetConfig+0xf8>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4a0c      	ldr	r2, [pc, #48]	; (800a7f0 <TIM_Base_SetConfig+0x124>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d103      	bne.n	800a7cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	691a      	ldr	r2, [r3, #16]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	615a      	str	r2, [r3, #20]
}
 800a7d2:	bf00      	nop
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	40010000 	.word	0x40010000
 800a7e4:	40000400 	.word	0x40000400
 800a7e8:	40000800 	.word	0x40000800
 800a7ec:	40000c00 	.word	0x40000c00
 800a7f0:	40010400 	.word	0x40010400
 800a7f4:	40014000 	.word	0x40014000
 800a7f8:	40014400 	.word	0x40014400
 800a7fc:	40014800 	.word	0x40014800
 800a800:	40001800 	.word	0x40001800
 800a804:	40001c00 	.word	0x40001c00
 800a808:	40002000 	.word	0x40002000

0800a80c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6a1b      	ldr	r3, [r3, #32]
 800a81c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f023 0201 	bic.w	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4313      	orrs	r3, r2
 800a840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f023 030a 	bic.w	r3, r3, #10
 800a848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	4313      	orrs	r3, r2
 800a850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	693a      	ldr	r2, [r7, #16]
 800a856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	621a      	str	r2, [r3, #32]
}
 800a85e:	bf00      	nop
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b087      	sub	sp, #28
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	f023 0210 	bic.w	r2, r3, #16
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	031b      	lsls	r3, r3, #12
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a8a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	621a      	str	r2, [r3, #32]
}
 800a8be:	bf00      	nop
 800a8c0:	371c      	adds	r7, #28
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr

0800a8ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8ca:	b480      	push	{r7}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	f043 0307 	orr.w	r3, r3, #7
 800a8ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	609a      	str	r2, [r3, #8]
}
 800a8f4:	bf00      	nop
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a91a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	021a      	lsls	r2, r3, #8
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	431a      	orrs	r2, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	4313      	orrs	r3, r2
 800a928:	697a      	ldr	r2, [r7, #20]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	609a      	str	r2, [r3, #8]
}
 800a934:	bf00      	nop
 800a936:	371c      	adds	r7, #28
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a940:	b480      	push	{r7}
 800a942:	b085      	sub	sp, #20
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a950:	2b01      	cmp	r3, #1
 800a952:	d101      	bne.n	800a958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a954:	2302      	movs	r3, #2
 800a956:	e05a      	b.n	800aa0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2202      	movs	r2, #2
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a21      	ldr	r2, [pc, #132]	; (800aa1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d022      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9a4:	d01d      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a1d      	ldr	r2, [pc, #116]	; (800aa20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d018      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a1b      	ldr	r2, [pc, #108]	; (800aa24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d013      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a1a      	ldr	r2, [pc, #104]	; (800aa28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00e      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a18      	ldr	r2, [pc, #96]	; (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d009      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a17      	ldr	r2, [pc, #92]	; (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d004      	beq.n	800a9e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a15      	ldr	r2, [pc, #84]	; (800aa34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d10c      	bne.n	800a9fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	40010000 	.word	0x40010000
 800aa20:	40000400 	.word	0x40000400
 800aa24:	40000800 	.word	0x40000800
 800aa28:	40000c00 	.word	0x40000c00
 800aa2c:	40010400 	.word	0x40010400
 800aa30:	40014000 	.word	0x40014000
 800aa34:	40001800 	.word	0x40001800

0800aa38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa64:	4904      	ldr	r1, [pc, #16]	; (800aa78 <MX_FATFS_Init+0x18>)
 800aa66:	4805      	ldr	r0, [pc, #20]	; (800aa7c <MX_FATFS_Init+0x1c>)
 800aa68:	f002 ff7e 	bl	800d968 <FATFS_LinkDriver>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	461a      	mov	r2, r3
 800aa70:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <MX_FATFS_Init+0x20>)
 800aa72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa74:	bf00      	nop
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	2000271c 	.word	0x2000271c
 800aa7c:	20000038 	.word	0x20000038
 800aa80:	20002718 	.word	0x20002718

0800aa84 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa88:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
/*    Stat = STA_NOINIT;
    return Stat;*/
	return SD_disk_initialize(pdrv);
 800aa9e:	79fb      	ldrb	r3, [r7, #7]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7f7 fb9b 	bl	80021dc <SD_disk_initialize>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	4603      	mov	r3, r0
 800aaba:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    /*Stat = STA_NOINIT;
    return Stat;*/
    return SD_disk_status(pdrv);
 800aabc:	79fb      	ldrb	r3, [r7, #7]
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7f7 fc72 	bl	80023a8 <SD_disk_status>
 800aac4:	4603      	mov	r3, r0
 800aac6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60b9      	str	r1, [r7, #8]
 800aad8:	607a      	str	r2, [r7, #4]
 800aada:	603b      	str	r3, [r7, #0]
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    /*return RES_OK;*/
    return SD_disk_read(pdrv, buff, sector, count);
 800aae0:	7bf8      	ldrb	r0, [r7, #15]
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	f7f7 fc74 	bl	80023d4 <SD_disk_read>
 800aaec:	4603      	mov	r3, r0
 800aaee:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	4603      	mov	r3, r0
 800ab06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   /* return RES_OK;*/
    return SD_disk_write(pdrv, buff, sector, count);
 800ab08:	7bf8      	ldrb	r0, [r7, #15]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68b9      	ldr	r1, [r7, #8]
 800ab10:	f7f7 fcca 	bl	80024a8 <SD_disk_write>
 800ab14:	4603      	mov	r3, r0
 800ab16:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	603a      	str	r2, [r7, #0]
 800ab2a:	71fb      	strb	r3, [r7, #7]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    /*DRESULT res = RES_ERROR;
    return res;*/
    return SD_disk_ioctl(pdrv, cmd, buff);
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	79b9      	ldrb	r1, [r7, #6]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7f7 fd3a 	bl	80025b0 <SD_disk_ioctl>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	4603      	mov	r3, r0
 800ab50:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	4a08      	ldr	r2, [pc, #32]	; (800ab78 <disk_status+0x30>)
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4413      	add	r3, r2
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	79fa      	ldrb	r2, [r7, #7]
 800ab60:	4905      	ldr	r1, [pc, #20]	; (800ab78 <disk_status+0x30>)
 800ab62:	440a      	add	r2, r1
 800ab64:	7a12      	ldrb	r2, [r2, #8]
 800ab66:	4610      	mov	r0, r2
 800ab68:	4798      	blx	r3
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20002948 	.word	0x20002948

0800ab7c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	4a0d      	ldr	r2, [pc, #52]	; (800abc4 <disk_initialize+0x48>)
 800ab8e:	5cd3      	ldrb	r3, [r2, r3]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d111      	bne.n	800abb8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	4a0b      	ldr	r2, [pc, #44]	; (800abc4 <disk_initialize+0x48>)
 800ab98:	2101      	movs	r1, #1
 800ab9a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	4a09      	ldr	r2, [pc, #36]	; (800abc4 <disk_initialize+0x48>)
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	79fa      	ldrb	r2, [r7, #7]
 800abaa:	4906      	ldr	r1, [pc, #24]	; (800abc4 <disk_initialize+0x48>)
 800abac:	440a      	add	r2, r1
 800abae:	7a12      	ldrb	r2, [r2, #8]
 800abb0:	4610      	mov	r0, r2
 800abb2:	4798      	blx	r3
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20002948 	.word	0x20002948

0800abc8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	4603      	mov	r3, r0
 800abd6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	4a0a      	ldr	r2, [pc, #40]	; (800ac04 <disk_read+0x3c>)
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	689c      	ldr	r4, [r3, #8]
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
 800abe6:	4a07      	ldr	r2, [pc, #28]	; (800ac04 <disk_read+0x3c>)
 800abe8:	4413      	add	r3, r2
 800abea:	7a18      	ldrb	r0, [r3, #8]
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	68b9      	ldr	r1, [r7, #8]
 800abf2:	47a0      	blx	r4
 800abf4:	4603      	mov	r3, r0
 800abf6:	75fb      	strb	r3, [r7, #23]
  return res;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20002948 	.word	0x20002948

0800ac08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ac08:	b590      	push	{r4, r7, lr}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	4603      	mov	r3, r0
 800ac16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac18:	7bfb      	ldrb	r3, [r7, #15]
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <disk_write+0x3c>)
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	68dc      	ldr	r4, [r3, #12]
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	4a07      	ldr	r2, [pc, #28]	; (800ac44 <disk_write+0x3c>)
 800ac28:	4413      	add	r3, r2
 800ac2a:	7a18      	ldrb	r0, [r3, #8]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	68b9      	ldr	r1, [r7, #8]
 800ac32:	47a0      	blx	r4
 800ac34:	4603      	mov	r3, r0
 800ac36:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	371c      	adds	r7, #28
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd90      	pop	{r4, r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20002948 	.word	0x20002948

0800ac48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	603a      	str	r2, [r7, #0]
 800ac52:	71fb      	strb	r3, [r7, #7]
 800ac54:	460b      	mov	r3, r1
 800ac56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	4a09      	ldr	r2, [pc, #36]	; (800ac80 <disk_ioctl+0x38>)
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	79fa      	ldrb	r2, [r7, #7]
 800ac66:	4906      	ldr	r1, [pc, #24]	; (800ac80 <disk_ioctl+0x38>)
 800ac68:	440a      	add	r2, r1
 800ac6a:	7a10      	ldrb	r0, [r2, #8]
 800ac6c:	79b9      	ldrb	r1, [r7, #6]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	4798      	blx	r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20002948 	.word	0x20002948

0800ac84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac94:	89fb      	ldrh	r3, [r7, #14]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	b21a      	sxth	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	b21b      	sxth	r3, r3
 800aca0:	4313      	orrs	r3, r2
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aca6:	89fb      	ldrh	r3, [r7, #14]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3303      	adds	r3, #3
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	021b      	lsls	r3, r3, #8
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	3202      	adds	r2, #2
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	4313      	orrs	r3, r2
 800acd0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	021b      	lsls	r3, r3, #8
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	3201      	adds	r2, #1
 800acda:	7812      	ldrb	r2, [r2, #0]
 800acdc:	4313      	orrs	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]
	return rv;
 800acec:	68fb      	ldr	r3, [r7, #12]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800acfa:	b480      	push	{r7}
 800acfc:	b083      	sub	sp, #12
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	460b      	mov	r3, r1
 800ad04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	1c5a      	adds	r2, r3, #1
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	887a      	ldrh	r2, [r7, #2]
 800ad0e:	b2d2      	uxtb	r2, r2
 800ad10:	701a      	strb	r2, [r3, #0]
 800ad12:	887b      	ldrh	r3, [r7, #2]
 800ad14:	0a1b      	lsrs	r3, r3, #8
 800ad16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	1c5a      	adds	r2, r3, #1
 800ad1c:	607a      	str	r2, [r7, #4]
 800ad1e:	887a      	ldrh	r2, [r7, #2]
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	701a      	strb	r2, [r3, #0]
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	683a      	ldr	r2, [r7, #0]
 800ad42:	b2d2      	uxtb	r2, r2
 800ad44:	701a      	strb	r2, [r3, #0]
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	0a1b      	lsrs	r3, r3, #8
 800ad4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	607a      	str	r2, [r7, #4]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	b2d2      	uxtb	r2, r2
 800ad56:	701a      	strb	r2, [r3, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	0a1b      	lsrs	r3, r3, #8
 800ad5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	1c5a      	adds	r2, r3, #1
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	b2d2      	uxtb	r2, r2
 800ad68:	701a      	strb	r2, [r3, #0]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	0a1b      	lsrs	r3, r3, #8
 800ad6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	607a      	str	r2, [r7, #4]
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	b2d2      	uxtb	r2, r2
 800ad7a:	701a      	strb	r2, [r3, #0]
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad88:	b480      	push	{r7}
 800ad8a:	b087      	sub	sp, #28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00d      	beq.n	800adbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	1c53      	adds	r3, r2, #1
 800ada6:	613b      	str	r3, [r7, #16]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	1c59      	adds	r1, r3, #1
 800adac:	6179      	str	r1, [r7, #20]
 800adae:	7812      	ldrb	r2, [r2, #0]
 800adb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	607b      	str	r3, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1f1      	bne.n	800ada2 <mem_cpy+0x1a>
	}
}
 800adbe:	bf00      	nop
 800adc0:	371c      	adds	r7, #28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800adca:	b480      	push	{r7}
 800adcc:	b087      	sub	sp, #28
 800adce:	af00      	add	r7, sp, #0
 800add0:	60f8      	str	r0, [r7, #12]
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	617a      	str	r2, [r7, #20]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	3b01      	subs	r3, #1
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1f3      	bne.n	800adda <mem_set+0x10>
}
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ae00:	b480      	push	{r7}
 800ae02:	b089      	sub	sp, #36	; 0x24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	61fb      	str	r3, [r7, #28]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	61fa      	str	r2, [r7, #28]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	61ba      	str	r2, [r7, #24]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	1acb      	subs	r3, r1, r3
 800ae2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	607b      	str	r3, [r7, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d002      	beq.n	800ae40 <mem_cmp+0x40>
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0eb      	beq.n	800ae18 <mem_cmp+0x18>

	return r;
 800ae40:	697b      	ldr	r3, [r7, #20]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3724      	adds	r7, #36	; 0x24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae58:	e002      	b.n	800ae60 <chk_chr+0x12>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	607b      	str	r3, [r7, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <chk_chr+0x26>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d1f2      	bne.n	800ae5a <chk_chr+0xc>
	return *str;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	781b      	ldrb	r3, [r3, #0]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae8e:	2300      	movs	r3, #0
 800ae90:	60bb      	str	r3, [r7, #8]
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	e029      	b.n	800aeec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae98:	4a27      	ldr	r2, [pc, #156]	; (800af38 <chk_lock+0xb4>)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	011b      	lsls	r3, r3, #4
 800ae9e:	4413      	add	r3, r2
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01d      	beq.n	800aee2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aea6:	4a24      	ldr	r2, [pc, #144]	; (800af38 <chk_lock+0xb4>)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	4413      	add	r3, r2
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d116      	bne.n	800aee6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aeb8:	4a1f      	ldr	r2, [pc, #124]	; (800af38 <chk_lock+0xb4>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	4413      	add	r3, r2
 800aec0:	3304      	adds	r3, #4
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d10c      	bne.n	800aee6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aecc:	4a1a      	ldr	r2, [pc, #104]	; (800af38 <chk_lock+0xb4>)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	011b      	lsls	r3, r3, #4
 800aed2:	4413      	add	r3, r2
 800aed4:	3308      	adds	r3, #8
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aedc:	429a      	cmp	r2, r3
 800aede:	d102      	bne.n	800aee6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aee0:	e007      	b.n	800aef2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d9d2      	bls.n	800ae98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d109      	bne.n	800af0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d102      	bne.n	800af04 <chk_lock+0x80>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b02      	cmp	r3, #2
 800af02:	d101      	bne.n	800af08 <chk_lock+0x84>
 800af04:	2300      	movs	r3, #0
 800af06:	e010      	b.n	800af2a <chk_lock+0xa6>
 800af08:	2312      	movs	r3, #18
 800af0a:	e00e      	b.n	800af2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d108      	bne.n	800af24 <chk_lock+0xa0>
 800af12:	4a09      	ldr	r2, [pc, #36]	; (800af38 <chk_lock+0xb4>)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	011b      	lsls	r3, r3, #4
 800af18:	4413      	add	r3, r2
 800af1a:	330c      	adds	r3, #12
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af22:	d101      	bne.n	800af28 <chk_lock+0xa4>
 800af24:	2310      	movs	r3, #16
 800af26:	e000      	b.n	800af2a <chk_lock+0xa6>
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	20002728 	.word	0x20002728

0800af3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af42:	2300      	movs	r3, #0
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	e002      	b.n	800af4e <enq_lock+0x12>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	3301      	adds	r3, #1
 800af4c:	607b      	str	r3, [r7, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d806      	bhi.n	800af62 <enq_lock+0x26>
 800af54:	4a09      	ldr	r2, [pc, #36]	; (800af7c <enq_lock+0x40>)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	011b      	lsls	r3, r3, #4
 800af5a:	4413      	add	r3, r2
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1f2      	bne.n	800af48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b02      	cmp	r3, #2
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
}
 800af6e:	4618      	mov	r0, r3
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	20002728 	.word	0x20002728

0800af80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	e01f      	b.n	800afd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af90:	4a41      	ldr	r2, [pc, #260]	; (800b098 <inc_lock+0x118>)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	011b      	lsls	r3, r3, #4
 800af96:	4413      	add	r3, r2
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d113      	bne.n	800afca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800afa2:	4a3d      	ldr	r2, [pc, #244]	; (800b098 <inc_lock+0x118>)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	4413      	add	r3, r2
 800afaa:	3304      	adds	r3, #4
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d109      	bne.n	800afca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afb6:	4a38      	ldr	r2, [pc, #224]	; (800b098 <inc_lock+0x118>)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	011b      	lsls	r3, r3, #4
 800afbc:	4413      	add	r3, r2
 800afbe:	3308      	adds	r3, #8
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d006      	beq.n	800afd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d9dc      	bls.n	800af90 <inc_lock+0x10>
 800afd6:	e000      	b.n	800afda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d132      	bne.n	800b046 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afe0:	2300      	movs	r3, #0
 800afe2:	60fb      	str	r3, [r7, #12]
 800afe4:	e002      	b.n	800afec <inc_lock+0x6c>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	3301      	adds	r3, #1
 800afea:	60fb      	str	r3, [r7, #12]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d806      	bhi.n	800b000 <inc_lock+0x80>
 800aff2:	4a29      	ldr	r2, [pc, #164]	; (800b098 <inc_lock+0x118>)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	011b      	lsls	r3, r3, #4
 800aff8:	4413      	add	r3, r2
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1f2      	bne.n	800afe6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d101      	bne.n	800b00a <inc_lock+0x8a>
 800b006:	2300      	movs	r3, #0
 800b008:	e040      	b.n	800b08c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	4922      	ldr	r1, [pc, #136]	; (800b098 <inc_lock+0x118>)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	011b      	lsls	r3, r3, #4
 800b014:	440b      	add	r3, r1
 800b016:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	491e      	ldr	r1, [pc, #120]	; (800b098 <inc_lock+0x118>)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	440b      	add	r3, r1
 800b024:	3304      	adds	r3, #4
 800b026:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	695a      	ldr	r2, [r3, #20]
 800b02c:	491a      	ldr	r1, [pc, #104]	; (800b098 <inc_lock+0x118>)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	011b      	lsls	r3, r3, #4
 800b032:	440b      	add	r3, r1
 800b034:	3308      	adds	r3, #8
 800b036:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b038:	4a17      	ldr	r2, [pc, #92]	; (800b098 <inc_lock+0x118>)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	011b      	lsls	r3, r3, #4
 800b03e:	4413      	add	r3, r2
 800b040:	330c      	adds	r3, #12
 800b042:	2200      	movs	r2, #0
 800b044:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d009      	beq.n	800b060 <inc_lock+0xe0>
 800b04c:	4a12      	ldr	r2, [pc, #72]	; (800b098 <inc_lock+0x118>)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	011b      	lsls	r3, r3, #4
 800b052:	4413      	add	r3, r2
 800b054:	330c      	adds	r3, #12
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <inc_lock+0xe0>
 800b05c:	2300      	movs	r3, #0
 800b05e:	e015      	b.n	800b08c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d108      	bne.n	800b078 <inc_lock+0xf8>
 800b066:	4a0c      	ldr	r2, [pc, #48]	; (800b098 <inc_lock+0x118>)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	4413      	add	r3, r2
 800b06e:	330c      	adds	r3, #12
 800b070:	881b      	ldrh	r3, [r3, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	b29a      	uxth	r2, r3
 800b076:	e001      	b.n	800b07c <inc_lock+0xfc>
 800b078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b07c:	4906      	ldr	r1, [pc, #24]	; (800b098 <inc_lock+0x118>)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	011b      	lsls	r3, r3, #4
 800b082:	440b      	add	r3, r1
 800b084:	330c      	adds	r3, #12
 800b086:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3301      	adds	r3, #1
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	20002728 	.word	0x20002728

0800b09c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	607b      	str	r3, [r7, #4]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d825      	bhi.n	800b0fc <dec_lock+0x60>
		n = Files[i].ctr;
 800b0b0:	4a17      	ldr	r2, [pc, #92]	; (800b110 <dec_lock+0x74>)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	011b      	lsls	r3, r3, #4
 800b0b6:	4413      	add	r3, r2
 800b0b8:	330c      	adds	r3, #12
 800b0ba:	881b      	ldrh	r3, [r3, #0]
 800b0bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0be:	89fb      	ldrh	r3, [r7, #14]
 800b0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0c4:	d101      	bne.n	800b0ca <dec_lock+0x2e>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0ca:	89fb      	ldrh	r3, [r7, #14]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <dec_lock+0x3a>
 800b0d0:	89fb      	ldrh	r3, [r7, #14]
 800b0d2:	3b01      	subs	r3, #1
 800b0d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0d6:	4a0e      	ldr	r2, [pc, #56]	; (800b110 <dec_lock+0x74>)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	011b      	lsls	r3, r3, #4
 800b0dc:	4413      	add	r3, r2
 800b0de:	330c      	adds	r3, #12
 800b0e0:	89fa      	ldrh	r2, [r7, #14]
 800b0e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0e4:	89fb      	ldrh	r3, [r7, #14]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <dec_lock+0x5a>
 800b0ea:	4a09      	ldr	r2, [pc, #36]	; (800b110 <dec_lock+0x74>)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	4413      	add	r3, r2
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	737b      	strb	r3, [r7, #13]
 800b0fa:	e001      	b.n	800b100 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b100:	7b7b      	ldrb	r3, [r7, #13]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	20002728 	.word	0x20002728

0800b114 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e010      	b.n	800b144 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b122:	4a0d      	ldr	r2, [pc, #52]	; (800b158 <clear_lock+0x44>)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	011b      	lsls	r3, r3, #4
 800b128:	4413      	add	r3, r2
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d105      	bne.n	800b13e <clear_lock+0x2a>
 800b132:	4a09      	ldr	r2, [pc, #36]	; (800b158 <clear_lock+0x44>)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	4413      	add	r3, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d9eb      	bls.n	800b122 <clear_lock+0xe>
	}
}
 800b14a:	bf00      	nop
 800b14c:	bf00      	nop
 800b14e:	3714      	adds	r7, #20
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	20002728 	.word	0x20002728

0800b15c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	78db      	ldrb	r3, [r3, #3]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d034      	beq.n	800b1da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b174:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	7858      	ldrb	r0, [r3, #1]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b180:	2301      	movs	r3, #1
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	f7ff fd40 	bl	800ac08 <disk_write>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d002      	beq.n	800b194 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b18e:	2301      	movs	r3, #1
 800b190:	73fb      	strb	r3, [r7, #15]
 800b192:	e022      	b.n	800b1da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	1ad2      	subs	r2, r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a1b      	ldr	r3, [r3, #32]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d217      	bcs.n	800b1da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	789b      	ldrb	r3, [r3, #2]
 800b1ae:	613b      	str	r3, [r7, #16]
 800b1b0:	e010      	b.n	800b1d4 <sync_window+0x78>
					wsect += fs->fsize;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7858      	ldrb	r0, [r3, #1]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	f7ff fd1d 	bl	800ac08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d8eb      	bhi.n	800b1b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d01b      	beq.n	800b234 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff ffad 	bl	800b15c <sync_window>
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d113      	bne.n	800b234 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7858      	ldrb	r0, [r3, #1]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b216:	2301      	movs	r3, #1
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	f7ff fcd5 	bl	800abc8 <disk_read>
 800b21e:	4603      	mov	r3, r0
 800b220:	2b00      	cmp	r3, #0
 800b222:	d004      	beq.n	800b22e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b224:	f04f 33ff 	mov.w	r3, #4294967295
 800b228:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b234:	7bfb      	ldrb	r3, [r7, #15]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ff87 	bl	800b15c <sync_window>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d159      	bne.n	800b30c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	2b03      	cmp	r3, #3
 800b25e:	d149      	bne.n	800b2f4 <sync_fs+0xb4>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	791b      	ldrb	r3, [r3, #4]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d145      	bne.n	800b2f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	899b      	ldrh	r3, [r3, #12]
 800b272:	461a      	mov	r2, r3
 800b274:	2100      	movs	r1, #0
 800b276:	f7ff fda8 	bl	800adca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3338      	adds	r3, #56	; 0x38
 800b27e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b282:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b286:	4618      	mov	r0, r3
 800b288:	f7ff fd37 	bl	800acfa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	3338      	adds	r3, #56	; 0x38
 800b290:	4921      	ldr	r1, [pc, #132]	; (800b318 <sync_fs+0xd8>)
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff fd4c 	bl	800ad30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	3338      	adds	r3, #56	; 0x38
 800b29c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b2a0:	491e      	ldr	r1, [pc, #120]	; (800b31c <sync_fs+0xdc>)
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff fd44 	bl	800ad30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	3338      	adds	r3, #56	; 0x38
 800b2ac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	699b      	ldr	r3, [r3, #24]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f7ff fd3a 	bl	800ad30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3338      	adds	r3, #56	; 0x38
 800b2c0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7ff fd30 	bl	800ad30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	7858      	ldrb	r0, [r3, #1]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	f7ff fc8d 	bl	800ac08 <disk_write>
			fs->fsi_flag = 0;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	785b      	ldrb	r3, [r3, #1]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff fca3 	bl	800ac48 <disk_ioctl>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <sync_fs+0xcc>
 800b308:	2301      	movs	r3, #1
 800b30a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	41615252 	.word	0x41615252
 800b31c:	61417272 	.word	0x61417272

0800b320 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	3b02      	subs	r3, #2
 800b32e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	3b02      	subs	r3, #2
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d301      	bcc.n	800b340 <clust2sect+0x20>
 800b33c:	2300      	movs	r3, #0
 800b33e:	e008      	b.n	800b352 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	895b      	ldrh	r3, [r3, #10]
 800b344:	461a      	mov	r2, r3
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	fb03 f202 	mul.w	r2, r3, r2
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b350:	4413      	add	r3, r2
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b086      	sub	sp, #24
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
 800b366:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b01      	cmp	r3, #1
 800b372:	d904      	bls.n	800b37e <get_fat+0x20>
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d302      	bcc.n	800b384 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b37e:	2301      	movs	r3, #1
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e0bb      	b.n	800b4fc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b384:	f04f 33ff 	mov.w	r3, #4294967295
 800b388:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	2b03      	cmp	r3, #3
 800b390:	f000 8083 	beq.w	800b49a <get_fat+0x13c>
 800b394:	2b03      	cmp	r3, #3
 800b396:	f300 80a7 	bgt.w	800b4e8 <get_fat+0x18a>
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d002      	beq.n	800b3a4 <get_fat+0x46>
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d056      	beq.n	800b450 <get_fat+0xf2>
 800b3a2:	e0a1      	b.n	800b4e8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	899b      	ldrh	r3, [r3, #12]
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	fbb3 f3f1 	udiv	r3, r3, r1
 800b3c2:	4413      	add	r3, r2
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	6938      	ldr	r0, [r7, #16]
 800b3c8:	f7ff ff0c 	bl	800b1e4 <move_window>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f040 808d 	bne.w	800b4ee <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	60fa      	str	r2, [r7, #12]
 800b3da:	693a      	ldr	r2, [r7, #16]
 800b3dc:	8992      	ldrh	r2, [r2, #12]
 800b3de:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3e2:	fb01 f202 	mul.w	r2, r1, r2
 800b3e6:	1a9b      	subs	r3, r3, r2
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	899b      	ldrh	r3, [r3, #12]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800b402:	4413      	add	r3, r2
 800b404:	4619      	mov	r1, r3
 800b406:	6938      	ldr	r0, [r7, #16]
 800b408:	f7ff feec 	bl	800b1e4 <move_window>
 800b40c:	4603      	mov	r3, r0
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d16f      	bne.n	800b4f2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	899b      	ldrh	r3, [r3, #12]
 800b416:	461a      	mov	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b41e:	fb01 f202 	mul.w	r2, r1, r2
 800b422:	1a9b      	subs	r3, r3, r2
 800b424:	693a      	ldr	r2, [r7, #16]
 800b426:	4413      	add	r3, r2
 800b428:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b42c:	021b      	lsls	r3, r3, #8
 800b42e:	461a      	mov	r2, r3
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	4313      	orrs	r3, r2
 800b434:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <get_fat+0xe8>
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	091b      	lsrs	r3, r3, #4
 800b444:	e002      	b.n	800b44c <get_fat+0xee>
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b44c:	617b      	str	r3, [r7, #20]
			break;
 800b44e:	e055      	b.n	800b4fc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	899b      	ldrh	r3, [r3, #12]
 800b458:	085b      	lsrs	r3, r3, #1
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	4619      	mov	r1, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	fbb3 f3f1 	udiv	r3, r3, r1
 800b464:	4413      	add	r3, r2
 800b466:	4619      	mov	r1, r3
 800b468:	6938      	ldr	r0, [r7, #16]
 800b46a:	f7ff febb 	bl	800b1e4 <move_window>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d140      	bne.n	800b4f6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	8992      	ldrh	r2, [r2, #12]
 800b482:	fbb3 f0f2 	udiv	r0, r3, r2
 800b486:	fb00 f202 	mul.w	r2, r0, r2
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	440b      	add	r3, r1
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fbf8 	bl	800ac84 <ld_word>
 800b494:	4603      	mov	r3, r0
 800b496:	617b      	str	r3, [r7, #20]
			break;
 800b498:	e030      	b.n	800b4fc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	899b      	ldrh	r3, [r3, #12]
 800b4a2:	089b      	lsrs	r3, r3, #2
 800b4a4:	b29b      	uxth	r3, r3
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4ae:	4413      	add	r3, r2
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6938      	ldr	r0, [r7, #16]
 800b4b4:	f7ff fe96 	bl	800b1e4 <move_window>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d11d      	bne.n	800b4fa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	693a      	ldr	r2, [r7, #16]
 800b4ca:	8992      	ldrh	r2, [r2, #12]
 800b4cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4d0:	fb00 f202 	mul.w	r2, r0, r2
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	440b      	add	r3, r1
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff fbeb 	bl	800acb4 <ld_dword>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b4e4:	617b      	str	r3, [r7, #20]
			break;
 800b4e6:	e009      	b.n	800b4fc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	e006      	b.n	800b4fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4ee:	bf00      	nop
 800b4f0:	e004      	b.n	800b4fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4f2:	bf00      	nop
 800b4f4:	e002      	b.n	800b4fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4f6:	bf00      	nop
 800b4f8:	e000      	b.n	800b4fc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4fa:	bf00      	nop
		}
	}

	return val;
 800b4fc:	697b      	ldr	r3, [r7, #20]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3718      	adds	r7, #24
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b506:	b590      	push	{r4, r7, lr}
 800b508:	b089      	sub	sp, #36	; 0x24
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b512:	2302      	movs	r3, #2
 800b514:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	f240 8102 	bls.w	800b722 <put_fat+0x21c>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	69db      	ldr	r3, [r3, #28]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	429a      	cmp	r2, r3
 800b526:	f080 80fc 	bcs.w	800b722 <put_fat+0x21c>
		switch (fs->fs_type) {
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b03      	cmp	r3, #3
 800b530:	f000 80b6 	beq.w	800b6a0 <put_fat+0x19a>
 800b534:	2b03      	cmp	r3, #3
 800b536:	f300 80fd 	bgt.w	800b734 <put_fat+0x22e>
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d003      	beq.n	800b546 <put_fat+0x40>
 800b53e:	2b02      	cmp	r3, #2
 800b540:	f000 8083 	beq.w	800b64a <put_fat+0x144>
 800b544:	e0f6      	b.n	800b734 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	61bb      	str	r3, [r7, #24]
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	085b      	lsrs	r3, r3, #1
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	4413      	add	r3, r2
 800b552:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	899b      	ldrh	r3, [r3, #12]
 800b55c:	4619      	mov	r1, r3
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	fbb3 f3f1 	udiv	r3, r3, r1
 800b564:	4413      	add	r3, r2
 800b566:	4619      	mov	r1, r3
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7ff fe3b 	bl	800b1e4 <move_window>
 800b56e:	4603      	mov	r3, r0
 800b570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b572:	7ffb      	ldrb	r3, [r7, #31]
 800b574:	2b00      	cmp	r3, #0
 800b576:	f040 80d6 	bne.w	800b726 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	61ba      	str	r2, [r7, #24]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	8992      	ldrh	r2, [r2, #12]
 800b58a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b58e:	fb00 f202 	mul.w	r2, r0, r2
 800b592:	1a9b      	subs	r3, r3, r2
 800b594:	440b      	add	r3, r1
 800b596:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	f003 0301 	and.w	r3, r3, #1
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00d      	beq.n	800b5be <put_fat+0xb8>
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b25b      	sxtb	r3, r3
 800b5a8:	f003 030f 	and.w	r3, r3, #15
 800b5ac:	b25a      	sxtb	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	011b      	lsls	r3, r3, #4
 800b5b4:	b25b      	sxtb	r3, r3
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	b25b      	sxtb	r3, r3
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	e001      	b.n	800b5c2 <put_fat+0xbc>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	697a      	ldr	r2, [r7, #20]
 800b5c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	899b      	ldrh	r3, [r3, #12]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5dc:	4413      	add	r3, r2
 800b5de:	4619      	mov	r1, r3
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f7ff fdff 	bl	800b1e4 <move_window>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5ea:	7ffb      	ldrb	r3, [r7, #31]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f040 809c 	bne.w	800b72a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	899b      	ldrh	r3, [r3, #12]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	fbb3 f0f2 	udiv	r0, r3, r2
 800b604:	fb00 f202 	mul.w	r2, r0, r2
 800b608:	1a9b      	subs	r3, r3, r2
 800b60a:	440b      	add	r3, r1
 800b60c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d003      	beq.n	800b620 <put_fat+0x11a>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	091b      	lsrs	r3, r3, #4
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	e00e      	b.n	800b63e <put_fat+0x138>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	b25b      	sxtb	r3, r3
 800b626:	f023 030f 	bic.w	r3, r3, #15
 800b62a:	b25a      	sxtb	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	0a1b      	lsrs	r3, r3, #8
 800b630:	b25b      	sxtb	r3, r3
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	b25b      	sxtb	r3, r3
 800b638:	4313      	orrs	r3, r2
 800b63a:	b25b      	sxtb	r3, r3
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2201      	movs	r2, #1
 800b646:	70da      	strb	r2, [r3, #3]
			break;
 800b648:	e074      	b.n	800b734 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	899b      	ldrh	r3, [r3, #12]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	b29b      	uxth	r3, r3
 800b656:	4619      	mov	r1, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b65e:	4413      	add	r3, r2
 800b660:	4619      	mov	r1, r3
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff fdbe 	bl	800b1e4 <move_window>
 800b668:	4603      	mov	r3, r0
 800b66a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b66c:	7ffb      	ldrb	r3, [r7, #31]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d15d      	bne.n	800b72e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	005b      	lsls	r3, r3, #1
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	8992      	ldrh	r2, [r2, #12]
 800b680:	fbb3 f0f2 	udiv	r0, r3, r2
 800b684:	fb00 f202 	mul.w	r2, r0, r2
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	440b      	add	r3, r1
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	b292      	uxth	r2, r2
 800b690:	4611      	mov	r1, r2
 800b692:	4618      	mov	r0, r3
 800b694:	f7ff fb31 	bl	800acfa <st_word>
			fs->wflag = 1;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	70da      	strb	r2, [r3, #3]
			break;
 800b69e:	e049      	b.n	800b734 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	899b      	ldrh	r3, [r3, #12]
 800b6a8:	089b      	lsrs	r3, r3, #2
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b6b4:	4413      	add	r3, r2
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff fd93 	bl	800b1e4 <move_window>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6c2:	7ffb      	ldrb	r3, [r7, #31]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d134      	bne.n	800b732 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	8992      	ldrh	r2, [r2, #12]
 800b6dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6e0:	fb00 f202 	mul.w	r2, r0, r2
 800b6e4:	1a9b      	subs	r3, r3, r2
 800b6e6:	440b      	add	r3, r1
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7ff fae3 	bl	800acb4 <ld_dword>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6f4:	4323      	orrs	r3, r4
 800b6f6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	8992      	ldrh	r2, [r2, #12]
 800b706:	fbb3 f0f2 	udiv	r0, r3, r2
 800b70a:	fb00 f202 	mul.w	r2, r0, r2
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	440b      	add	r3, r1
 800b712:	6879      	ldr	r1, [r7, #4]
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff fb0b 	bl	800ad30 <st_dword>
			fs->wflag = 1;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2201      	movs	r2, #1
 800b71e:	70da      	strb	r2, [r3, #3]
			break;
 800b720:	e008      	b.n	800b734 <put_fat+0x22e>
		}
	}
 800b722:	bf00      	nop
 800b724:	e006      	b.n	800b734 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b726:	bf00      	nop
 800b728:	e004      	b.n	800b734 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b72a:	bf00      	nop
 800b72c:	e002      	b.n	800b734 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b72e:	bf00      	nop
 800b730:	e000      	b.n	800b734 <put_fat+0x22e>
			if (res != FR_OK) break;
 800b732:	bf00      	nop
	return res;
 800b734:	7ffb      	ldrb	r3, [r7, #31]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3724      	adds	r7, #36	; 0x24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd90      	pop	{r4, r7, pc}

0800b73e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b088      	sub	sp, #32
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	60b9      	str	r1, [r7, #8]
 800b748:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d904      	bls.n	800b764 <remove_chain+0x26>
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	429a      	cmp	r2, r3
 800b762:	d301      	bcc.n	800b768 <remove_chain+0x2a>
 800b764:	2302      	movs	r3, #2
 800b766:	e04b      	b.n	800b800 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00c      	beq.n	800b788 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	69b8      	ldr	r0, [r7, #24]
 800b776:	f7ff fec6 	bl	800b506 <put_fat>
 800b77a:	4603      	mov	r3, r0
 800b77c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b77e:	7ffb      	ldrb	r3, [r7, #31]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <remove_chain+0x4a>
 800b784:	7ffb      	ldrb	r3, [r7, #31]
 800b786:	e03b      	b.n	800b800 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b788:	68b9      	ldr	r1, [r7, #8]
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f7ff fde7 	bl	800b35e <get_fat>
 800b790:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d031      	beq.n	800b7fc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d101      	bne.n	800b7a2 <remove_chain+0x64>
 800b79e:	2302      	movs	r3, #2
 800b7a0:	e02e      	b.n	800b800 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7a8:	d101      	bne.n	800b7ae <remove_chain+0x70>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e028      	b.n	800b800 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	69b8      	ldr	r0, [r7, #24]
 800b7b4:	f7ff fea7 	bl	800b506 <put_fat>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b7bc:	7ffb      	ldrb	r3, [r7, #31]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <remove_chain+0x88>
 800b7c2:	7ffb      	ldrb	r3, [r7, #31]
 800b7c4:	e01c      	b.n	800b800 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	699a      	ldr	r2, [r3, #24]
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	3b02      	subs	r3, #2
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d20b      	bcs.n	800b7ec <remove_chain+0xae>
			fs->free_clst++;
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	69bb      	ldr	r3, [r7, #24]
 800b7dc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	791b      	ldrb	r3, [r3, #4]
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	69db      	ldr	r3, [r3, #28]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d3c6      	bcc.n	800b788 <remove_chain+0x4a>
 800b7fa:	e000      	b.n	800b7fe <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b7fc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3720      	adds	r7, #32
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10d      	bne.n	800b83a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <create_chain+0x2c>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	69ba      	ldr	r2, [r7, #24]
 800b830:	429a      	cmp	r2, r3
 800b832:	d31b      	bcc.n	800b86c <create_chain+0x64>
 800b834:	2301      	movs	r3, #1
 800b836:	61bb      	str	r3, [r7, #24]
 800b838:	e018      	b.n	800b86c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff fd8e 	bl	800b35e <get_fat>
 800b842:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b01      	cmp	r3, #1
 800b848:	d801      	bhi.n	800b84e <create_chain+0x46>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e070      	b.n	800b930 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b854:	d101      	bne.n	800b85a <create_chain+0x52>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	e06a      	b.n	800b930 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	69db      	ldr	r3, [r3, #28]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	429a      	cmp	r2, r3
 800b862:	d201      	bcs.n	800b868 <create_chain+0x60>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	e063      	b.n	800b930 <create_chain+0x128>
		scl = clst;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	3301      	adds	r3, #1
 800b874:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d307      	bcc.n	800b890 <create_chain+0x88>
				ncl = 2;
 800b880:	2302      	movs	r3, #2
 800b882:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b884:	69fa      	ldr	r2, [r7, #28]
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d901      	bls.n	800b890 <create_chain+0x88>
 800b88c:	2300      	movs	r3, #0
 800b88e:	e04f      	b.n	800b930 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b890:	69f9      	ldr	r1, [r7, #28]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fd63 	bl	800b35e <get_fat>
 800b898:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00e      	beq.n	800b8be <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d003      	beq.n	800b8ae <create_chain+0xa6>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ac:	d101      	bne.n	800b8b2 <create_chain+0xaa>
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	e03e      	b.n	800b930 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b8b2:	69fa      	ldr	r2, [r7, #28]
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d1da      	bne.n	800b870 <create_chain+0x68>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e038      	b.n	800b930 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b8be:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c4:	69f9      	ldr	r1, [r7, #28]
 800b8c6:	6938      	ldr	r0, [r7, #16]
 800b8c8:	f7ff fe1d 	bl	800b506 <put_fat>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b8d0:	7dfb      	ldrb	r3, [r7, #23]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d109      	bne.n	800b8ea <create_chain+0xe2>
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d006      	beq.n	800b8ea <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b8dc:	69fa      	ldr	r2, [r7, #28]
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6938      	ldr	r0, [r7, #16]
 800b8e2:	f7ff fe10 	bl	800b506 <put_fat>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b8ea:	7dfb      	ldrb	r3, [r7, #23]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d116      	bne.n	800b91e <create_chain+0x116>
		fs->last_clst = ncl;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	699a      	ldr	r2, [r3, #24]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	3b02      	subs	r3, #2
 800b900:	429a      	cmp	r2, r3
 800b902:	d804      	bhi.n	800b90e <create_chain+0x106>
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	791b      	ldrb	r3, [r3, #4]
 800b912:	f043 0301 	orr.w	r3, r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	711a      	strb	r2, [r3, #4]
 800b91c:	e007      	b.n	800b92e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d102      	bne.n	800b92a <create_chain+0x122>
 800b924:	f04f 33ff 	mov.w	r3, #4294967295
 800b928:	e000      	b.n	800b92c <create_chain+0x124>
 800b92a:	2301      	movs	r3, #1
 800b92c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b92e:	69fb      	ldr	r3, [r7, #28]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3720      	adds	r7, #32
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b938:	b480      	push	{r7}
 800b93a:	b087      	sub	sp, #28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	3304      	adds	r3, #4
 800b94e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	899b      	ldrh	r3, [r3, #12]
 800b954:	461a      	mov	r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	fbb3 f3f2 	udiv	r3, r3, r2
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	8952      	ldrh	r2, [r2, #10]
 800b960:	fbb3 f3f2 	udiv	r3, r3, r2
 800b964:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	1d1a      	adds	r2, r3, #4
 800b96a:	613a      	str	r2, [r7, #16]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <clmt_clust+0x42>
 800b976:	2300      	movs	r3, #0
 800b978:	e010      	b.n	800b99c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d307      	bcc.n	800b992 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	617b      	str	r3, [r7, #20]
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3304      	adds	r3, #4
 800b98e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b990:	e7e9      	b.n	800b966 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b992:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	4413      	add	r3, r2
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	371c      	adds	r7, #28
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9be:	d204      	bcs.n	800b9ca <dir_sdi+0x22>
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	f003 031f 	and.w	r3, r3, #31
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <dir_sdi+0x26>
		return FR_INT_ERR;
 800b9ca:	2302      	movs	r3, #2
 800b9cc:	e071      	b.n	800bab2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d106      	bne.n	800b9ee <dir_sdi+0x46>
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d902      	bls.n	800b9ee <dir_sdi+0x46>
		clst = fs->dirbase;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10c      	bne.n	800ba0e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	095b      	lsrs	r3, r3, #5
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	8912      	ldrh	r2, [r2, #8]
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d301      	bcc.n	800ba04 <dir_sdi+0x5c>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e056      	b.n	800bab2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	61da      	str	r2, [r3, #28]
 800ba0c:	e02d      	b.n	800ba6a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	895b      	ldrh	r3, [r3, #10]
 800ba12:	461a      	mov	r2, r3
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	899b      	ldrh	r3, [r3, #12]
 800ba18:	fb02 f303 	mul.w	r3, r2, r3
 800ba1c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba1e:	e019      	b.n	800ba54 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6979      	ldr	r1, [r7, #20]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fc9a 	bl	800b35e <get_fat>
 800ba2a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba32:	d101      	bne.n	800ba38 <dir_sdi+0x90>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e03c      	b.n	800bab2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d904      	bls.n	800ba48 <dir_sdi+0xa0>
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d301      	bcc.n	800ba4c <dir_sdi+0xa4>
 800ba48:	2302      	movs	r3, #2
 800ba4a:	e032      	b.n	800bab2 <dir_sdi+0x10a>
			ofs -= csz;
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba54:	683a      	ldr	r2, [r7, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d2e1      	bcs.n	800ba20 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ba5c:	6979      	ldr	r1, [r7, #20]
 800ba5e:	6938      	ldr	r0, [r7, #16]
 800ba60:	f7ff fc5e 	bl	800b320 <clust2sect>
 800ba64:	4602      	mov	r2, r0
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	69db      	ldr	r3, [r3, #28]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <dir_sdi+0xd4>
 800ba78:	2302      	movs	r3, #2
 800ba7a:	e01a      	b.n	800bab2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	69da      	ldr	r2, [r3, #28]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	899b      	ldrh	r3, [r3, #12]
 800ba84:	4619      	mov	r1, r3
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba8c:	441a      	add	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	899b      	ldrh	r3, [r3, #12]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	fbb3 f0f2 	udiv	r0, r3, r2
 800baa4:	fb00 f202 	mul.w	r2, r0, r2
 800baa8:	1a9b      	subs	r3, r3, r2
 800baaa:	18ca      	adds	r2, r1, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b086      	sub	sp, #24
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	3320      	adds	r3, #32
 800bad0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <dir_next+0x28>
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bae0:	d301      	bcc.n	800bae6 <dir_next+0x2c>
 800bae2:	2304      	movs	r3, #4
 800bae4:	e0bb      	b.n	800bc5e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	899b      	ldrh	r3, [r3, #12]
 800baea:	461a      	mov	r2, r3
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	fbb3 f1f2 	udiv	r1, r3, r2
 800baf2:	fb01 f202 	mul.w	r2, r1, r2
 800baf6:	1a9b      	subs	r3, r3, r2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	f040 809d 	bne.w	800bc38 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10b      	bne.n	800bb28 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	095b      	lsrs	r3, r3, #5
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	8912      	ldrh	r2, [r2, #8]
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	f0c0 808d 	bcc.w	800bc38 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	61da      	str	r2, [r3, #28]
 800bb24:	2304      	movs	r3, #4
 800bb26:	e09a      	b.n	800bc5e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	899b      	ldrh	r3, [r3, #12]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	8952      	ldrh	r2, [r2, #10]
 800bb38:	3a01      	subs	r2, #1
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d17b      	bne.n	800bc38 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7ff fc08 	bl	800b35e <get_fat>
 800bb4e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d801      	bhi.n	800bb5a <dir_next+0xa0>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e081      	b.n	800bc5e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb60:	d101      	bne.n	800bb66 <dir_next+0xac>
 800bb62:	2301      	movs	r3, #1
 800bb64:	e07b      	b.n	800bc5e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d359      	bcc.n	800bc24 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d104      	bne.n	800bb80 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	61da      	str	r2, [r3, #28]
 800bb7c:	2304      	movs	r3, #4
 800bb7e:	e06e      	b.n	800bc5e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7ff fe3d 	bl	800b808 <create_chain>
 800bb8e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <dir_next+0xe0>
 800bb96:	2307      	movs	r3, #7
 800bb98:	e061      	b.n	800bc5e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d101      	bne.n	800bba4 <dir_next+0xea>
 800bba0:	2302      	movs	r3, #2
 800bba2:	e05c      	b.n	800bc5e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbaa:	d101      	bne.n	800bbb0 <dir_next+0xf6>
 800bbac:	2301      	movs	r3, #1
 800bbae:	e056      	b.n	800bc5e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff fad3 	bl	800b15c <sync_window>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d001      	beq.n	800bbc0 <dir_next+0x106>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e04e      	b.n	800bc5e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	899b      	ldrh	r3, [r3, #12]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	2100      	movs	r1, #0
 800bbce:	f7ff f8fc 	bl	800adca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	613b      	str	r3, [r7, #16]
 800bbd6:	6979      	ldr	r1, [r7, #20]
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff fba1 	bl	800b320 <clust2sect>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	635a      	str	r2, [r3, #52]	; 0x34
 800bbe4:	e012      	b.n	800bc0c <dir_next+0x152>
						fs->wflag = 1;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7ff fab5 	bl	800b15c <sync_window>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <dir_next+0x142>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e030      	b.n	800bc5e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	613b      	str	r3, [r7, #16]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	635a      	str	r2, [r3, #52]	; 0x34
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	895b      	ldrh	r3, [r3, #10]
 800bc10:	461a      	mov	r2, r3
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d3e6      	bcc.n	800bbe6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	1ad2      	subs	r2, r2, r3
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	697a      	ldr	r2, [r7, #20]
 800bc28:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bc2a:	6979      	ldr	r1, [r7, #20]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f7ff fb77 	bl	800b320 <clust2sect>
 800bc32:	4602      	mov	r2, r0
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	899b      	ldrh	r3, [r3, #12]
 800bc48:	461a      	mov	r2, r3
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc50:	fb00 f202 	mul.w	r2, r0, r2
 800bc54:	1a9b      	subs	r3, r3, r2
 800bc56:	18ca      	adds	r2, r1, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b086      	sub	sp, #24
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bc76:	2100      	movs	r1, #0
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff fe95 	bl	800b9a8 <dir_sdi>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d12b      	bne.n	800bce0 <dir_alloc+0x7a>
		n = 0;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	4619      	mov	r1, r3
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f7ff faa6 	bl	800b1e4 <move_window>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d11d      	bne.n	800bcde <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a1b      	ldr	r3, [r3, #32]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2be5      	cmp	r3, #229	; 0xe5
 800bcaa:	d004      	beq.n	800bcb6 <dir_alloc+0x50>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1b      	ldr	r3, [r3, #32]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d107      	bne.n	800bcc6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	613b      	str	r3, [r7, #16]
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d102      	bne.n	800bcca <dir_alloc+0x64>
 800bcc4:	e00c      	b.n	800bce0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bcca:	2101      	movs	r1, #1
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f7ff fef4 	bl	800baba <dir_next>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0d7      	beq.n	800bc8c <dir_alloc+0x26>
 800bcdc:	e000      	b.n	800bce0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bcde:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d101      	bne.n	800bcea <dir_alloc+0x84>
 800bce6:	2307      	movs	r3, #7
 800bce8:	75fb      	strb	r3, [r7, #23]
	return res;
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	331a      	adds	r3, #26
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fe ffbe 	bl	800ac84 <ld_word>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d109      	bne.n	800bd28 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	3314      	adds	r3, #20
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe ffb3 	bl	800ac84 <ld_word>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	041b      	lsls	r3, r3, #16
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd28:	68fb      	ldr	r3, [r7, #12]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b084      	sub	sp, #16
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	331a      	adds	r3, #26
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	b292      	uxth	r2, r2
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe ffd6 	bl	800acfa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	2b03      	cmp	r3, #3
 800bd54:	d109      	bne.n	800bd6a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	f103 0214 	add.w	r2, r3, #20
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	0c1b      	lsrs	r3, r3, #16
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fe ffc8 	bl	800acfa <st_word>
	}
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
	...

0800bd74 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800bd74:	b590      	push	{r4, r7, lr}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	331a      	adds	r3, #26
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fe ff7e 	bl	800ac84 <ld_word>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <cmp_lfn+0x1e>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e059      	b.n	800be46 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd9a:	1e5a      	subs	r2, r3, #1
 800bd9c:	4613      	mov	r3, r2
 800bd9e:	005b      	lsls	r3, r3, #1
 800bda0:	4413      	add	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bda8:	2301      	movs	r3, #1
 800bdaa:	81fb      	strh	r3, [r7, #14]
 800bdac:	2300      	movs	r3, #0
 800bdae:	613b      	str	r3, [r7, #16]
 800bdb0:	e033      	b.n	800be1a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bdb2:	4a27      	ldr	r2, [pc, #156]	; (800be50 <cmp_lfn+0xdc>)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe ff5f 	bl	800ac84 <ld_word>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bdca:	89fb      	ldrh	r3, [r7, #14]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d01a      	beq.n	800be06 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2bfe      	cmp	r3, #254	; 0xfe
 800bdd4:	d812      	bhi.n	800bdfc <cmp_lfn+0x88>
 800bdd6:	89bb      	ldrh	r3, [r7, #12]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 fe11 	bl	800da00 <ff_wtoupper>
 800bdde:	4603      	mov	r3, r0
 800bde0:	461c      	mov	r4, r3
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	617a      	str	r2, [r7, #20]
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	4413      	add	r3, r2
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	f001 fe05 	bl	800da00 <ff_wtoupper>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	429c      	cmp	r4, r3
 800bdfa:	d001      	beq.n	800be00 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	e022      	b.n	800be46 <cmp_lfn+0xd2>
			}
			wc = uc;
 800be00:	89bb      	ldrh	r3, [r7, #12]
 800be02:	81fb      	strh	r3, [r7, #14]
 800be04:	e006      	b.n	800be14 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800be06:	89bb      	ldrh	r3, [r7, #12]
 800be08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d001      	beq.n	800be14 <cmp_lfn+0xa0>
 800be10:	2300      	movs	r3, #0
 800be12:	e018      	b.n	800be46 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	3301      	adds	r3, #1
 800be18:	613b      	str	r3, [r7, #16]
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	2b0c      	cmp	r3, #12
 800be1e:	d9c8      	bls.n	800bdb2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00b      	beq.n	800be44 <cmp_lfn+0xd0>
 800be2c:	89fb      	ldrh	r3, [r7, #14]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d008      	beq.n	800be44 <cmp_lfn+0xd0>
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	687a      	ldr	r2, [r7, #4]
 800be38:	4413      	add	r3, r2
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d001      	beq.n	800be44 <cmp_lfn+0xd0>
 800be40:	2300      	movs	r3, #0
 800be42:	e000      	b.n	800be46 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800be44:	2301      	movs	r3, #1
}
 800be46:	4618      	mov	r0, r3
 800be48:	371c      	adds	r7, #28
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd90      	pop	{r4, r7, pc}
 800be4e:	bf00      	nop
 800be50:	08010980 	.word	0x08010980

0800be54 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4611      	mov	r1, r2
 800be60:	461a      	mov	r2, r3
 800be62:	460b      	mov	r3, r1
 800be64:	71fb      	strb	r3, [r7, #7]
 800be66:	4613      	mov	r3, r2
 800be68:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	330d      	adds	r3, #13
 800be6e:	79ba      	ldrb	r2, [r7, #6]
 800be70:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	330b      	adds	r3, #11
 800be76:	220f      	movs	r2, #15
 800be78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	330c      	adds	r3, #12
 800be7e:	2200      	movs	r2, #0
 800be80:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	331a      	adds	r3, #26
 800be86:	2100      	movs	r1, #0
 800be88:	4618      	mov	r0, r3
 800be8a:	f7fe ff36 	bl	800acfa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800be8e:	79fb      	ldrb	r3, [r7, #7]
 800be90:	1e5a      	subs	r2, r3, #1
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800be9e:	2300      	movs	r3, #0
 800bea0:	82fb      	strh	r3, [r7, #22]
 800bea2:	2300      	movs	r3, #0
 800bea4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bea6:	8afb      	ldrh	r3, [r7, #22]
 800bea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beac:	4293      	cmp	r3, r2
 800beae:	d007      	beq.n	800bec0 <put_lfn+0x6c>
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	61fa      	str	r2, [r7, #28]
 800beb6:	005b      	lsls	r3, r3, #1
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bec0:	4a17      	ldr	r2, [pc, #92]	; (800bf20 <put_lfn+0xcc>)
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	4413      	add	r3, r2
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	4413      	add	r3, r2
 800bece:	8afa      	ldrh	r2, [r7, #22]
 800bed0:	4611      	mov	r1, r2
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fe ff11 	bl	800acfa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bed8:	8afb      	ldrh	r3, [r7, #22]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d102      	bne.n	800bee4 <put_lfn+0x90>
 800bede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bee2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	3301      	adds	r3, #1
 800bee8:	61bb      	str	r3, [r7, #24]
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	2b0c      	cmp	r3, #12
 800beee:	d9da      	bls.n	800bea6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bef0:	8afb      	ldrh	r3, [r7, #22]
 800bef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d006      	beq.n	800bf08 <put_lfn+0xb4>
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	4413      	add	r3, r2
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d103      	bne.n	800bf10 <put_lfn+0xbc>
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf0e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	79fa      	ldrb	r2, [r7, #7]
 800bf14:	701a      	strb	r2, [r3, #0]
}
 800bf16:	bf00      	nop
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	08010980 	.word	0x08010980

0800bf24 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08c      	sub	sp, #48	; 0x30
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bf32:	220b      	movs	r2, #11
 800bf34:	68b9      	ldr	r1, [r7, #8]
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f7fe ff26 	bl	800ad88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b05      	cmp	r3, #5
 800bf40:	d92b      	bls.n	800bf9a <gen_numname+0x76>
		sr = seq;
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bf46:	e022      	b.n	800bf8e <gen_numname+0x6a>
			wc = *lfn++;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	1c9a      	adds	r2, r3, #2
 800bf4c:	607a      	str	r2, [r7, #4]
 800bf4e:	881b      	ldrh	r3, [r3, #0]
 800bf50:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bf52:	2300      	movs	r3, #0
 800bf54:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf56:	e017      	b.n	800bf88 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bf58:	69fb      	ldr	r3, [r7, #28]
 800bf5a:	005a      	lsls	r2, r3, #1
 800bf5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	4413      	add	r3, r2
 800bf64:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bf66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf68:	085b      	lsrs	r3, r3, #1
 800bf6a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d005      	beq.n	800bf82 <gen_numname+0x5e>
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bf7c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bf80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	3301      	adds	r3, #1
 800bf86:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8a:	2b0f      	cmp	r3, #15
 800bf8c:	d9e4      	bls.n	800bf58 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d1d8      	bne.n	800bf48 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bf9a:	2307      	movs	r3, #7
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	3330      	adds	r3, #48	; 0x30
 800bfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bfae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfb2:	2b39      	cmp	r3, #57	; 0x39
 800bfb4:	d904      	bls.n	800bfc0 <gen_numname+0x9c>
 800bfb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bfba:	3307      	adds	r3, #7
 800bfbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	1e5a      	subs	r2, r3, #1
 800bfc4:	62ba      	str	r2, [r7, #40]	; 0x28
 800bfc6:	3330      	adds	r3, #48	; 0x30
 800bfc8:	443b      	add	r3, r7
 800bfca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bfce:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	091b      	lsrs	r3, r3, #4
 800bfd6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1df      	bne.n	800bf9e <gen_numname+0x7a>
	ns[i] = '~';
 800bfde:	f107 0214 	add.w	r2, r7, #20
 800bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe4:	4413      	add	r3, r2
 800bfe6:	227e      	movs	r2, #126	; 0x7e
 800bfe8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bfea:	2300      	movs	r3, #0
 800bfec:	627b      	str	r3, [r7, #36]	; 0x24
 800bfee:	e002      	b.n	800bff6 <gen_numname+0xd2>
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	3301      	adds	r3, #1
 800bff4:	627b      	str	r3, [r7, #36]	; 0x24
 800bff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d205      	bcs.n	800c00a <gen_numname+0xe6>
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	4413      	add	r3, r2
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b20      	cmp	r3, #32
 800c008:	d1f2      	bne.n	800bff0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00c:	2b07      	cmp	r3, #7
 800c00e:	d807      	bhi.n	800c020 <gen_numname+0xfc>
 800c010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c012:	1c5a      	adds	r2, r3, #1
 800c014:	62ba      	str	r2, [r7, #40]	; 0x28
 800c016:	3330      	adds	r3, #48	; 0x30
 800c018:	443b      	add	r3, r7
 800c01a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c01e:	e000      	b.n	800c022 <gen_numname+0xfe>
 800c020:	2120      	movs	r1, #32
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	1c5a      	adds	r2, r3, #1
 800c026:	627a      	str	r2, [r7, #36]	; 0x24
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	460a      	mov	r2, r1
 800c02e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	2b07      	cmp	r3, #7
 800c034:	d9e9      	bls.n	800c00a <gen_numname+0xe6>
}
 800c036:	bf00      	nop
 800c038:	bf00      	nop
 800c03a:	3730      	adds	r7, #48	; 0x30
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c04c:	230b      	movs	r3, #11
 800c04e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	b2da      	uxtb	r2, r3
 800c054:	0852      	lsrs	r2, r2, #1
 800c056:	01db      	lsls	r3, r3, #7
 800c058:	4313      	orrs	r3, r2
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	1c59      	adds	r1, r3, #1
 800c060:	6079      	str	r1, [r7, #4]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	4413      	add	r3, r2
 800c066:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	60bb      	str	r3, [r7, #8]
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1ed      	bne.n	800c050 <sum_sfn+0x10>
	return sum;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c090:	2100      	movs	r1, #0
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff fc88 	bl	800b9a8 <dir_sdi>
 800c098:	4603      	mov	r3, r0
 800c09a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c09c:	7dfb      	ldrb	r3, [r7, #23]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d001      	beq.n	800c0a6 <dir_find+0x24>
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	e0a9      	b.n	800c1fa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c0a6:	23ff      	movs	r3, #255	; 0xff
 800c0a8:	753b      	strb	r3, [r7, #20]
 800c0aa:	7d3b      	ldrb	r3, [r7, #20]
 800c0ac:	757b      	strb	r3, [r7, #21]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	69db      	ldr	r3, [r3, #28]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6938      	ldr	r0, [r7, #16]
 800c0be:	f7ff f891 	bl	800b1e4 <move_window>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f040 8090 	bne.w	800c1ee <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6a1b      	ldr	r3, [r3, #32]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c0d6:	7dbb      	ldrb	r3, [r7, #22]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d102      	bne.n	800c0e2 <dir_find+0x60>
 800c0dc:	2304      	movs	r3, #4
 800c0de:	75fb      	strb	r3, [r7, #23]
 800c0e0:	e08a      	b.n	800c1f8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	330b      	adds	r3, #11
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ee:	73fb      	strb	r3, [r7, #15]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7bfa      	ldrb	r2, [r7, #15]
 800c0f4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c0f6:	7dbb      	ldrb	r3, [r7, #22]
 800c0f8:	2be5      	cmp	r3, #229	; 0xe5
 800c0fa:	d007      	beq.n	800c10c <dir_find+0x8a>
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	f003 0308 	and.w	r3, r3, #8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d009      	beq.n	800c11a <dir_find+0x98>
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	2b0f      	cmp	r3, #15
 800c10a:	d006      	beq.n	800c11a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c10c:	23ff      	movs	r3, #255	; 0xff
 800c10e:	757b      	strb	r3, [r7, #21]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f04f 32ff 	mov.w	r2, #4294967295
 800c116:	631a      	str	r2, [r3, #48]	; 0x30
 800c118:	e05e      	b.n	800c1d8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c11a:	7bfb      	ldrb	r3, [r7, #15]
 800c11c:	2b0f      	cmp	r3, #15
 800c11e:	d136      	bne.n	800c18e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d154      	bne.n	800c1d8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c12e:	7dbb      	ldrb	r3, [r7, #22]
 800c130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00d      	beq.n	800c154 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	7b5b      	ldrb	r3, [r3, #13]
 800c13e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c140:	7dbb      	ldrb	r3, [r7, #22]
 800c142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c146:	75bb      	strb	r3, [r7, #22]
 800c148:	7dbb      	ldrb	r3, [r7, #22]
 800c14a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	695a      	ldr	r2, [r3, #20]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c154:	7dba      	ldrb	r2, [r7, #22]
 800c156:	7d7b      	ldrb	r3, [r7, #21]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d115      	bne.n	800c188 <dir_find+0x106>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	330d      	adds	r3, #13
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	7d3a      	ldrb	r2, [r7, #20]
 800c166:	429a      	cmp	r2, r3
 800c168:	d10e      	bne.n	800c188 <dir_find+0x106>
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	691a      	ldr	r2, [r3, #16]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7ff fdfd 	bl	800bd74 <cmp_lfn>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <dir_find+0x106>
 800c180:	7d7b      	ldrb	r3, [r7, #21]
 800c182:	3b01      	subs	r3, #1
 800c184:	b2db      	uxtb	r3, r3
 800c186:	e000      	b.n	800c18a <dir_find+0x108>
 800c188:	23ff      	movs	r3, #255	; 0xff
 800c18a:	757b      	strb	r3, [r7, #21]
 800c18c:	e024      	b.n	800c1d8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c18e:	7d7b      	ldrb	r3, [r7, #21]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d109      	bne.n	800c1a8 <dir_find+0x126>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff ff51 	bl	800c040 <sum_sfn>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	7d3b      	ldrb	r3, [r7, #20]
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d024      	beq.n	800c1f2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <dir_find+0x14a>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a18      	ldr	r0, [r3, #32]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3324      	adds	r3, #36	; 0x24
 800c1be:	220b      	movs	r2, #11
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7fe fe1d 	bl	800ae00 <mem_cmp>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d014      	beq.n	800c1f6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1cc:	23ff      	movs	r3, #255	; 0xff
 800c1ce:	757b      	strb	r3, [r7, #21]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1d8:	2100      	movs	r1, #0
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7ff fc6d 	bl	800baba <dir_next>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1e4:	7dfb      	ldrb	r3, [r7, #23]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f43f af65 	beq.w	800c0b6 <dir_find+0x34>
 800c1ec:	e004      	b.n	800c1f8 <dir_find+0x176>
		if (res != FR_OK) break;
 800c1ee:	bf00      	nop
 800c1f0:	e002      	b.n	800c1f8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c1f2:	bf00      	nop
 800c1f4:	e000      	b.n	800c1f8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c1f6:	bf00      	nop

	return res;
 800c1f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
	...

0800c204 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b08c      	sub	sp, #48	; 0x30
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c218:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <dir_register+0x20>
 800c220:	2306      	movs	r3, #6
 800c222:	e0e0      	b.n	800c3e6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c224:	2300      	movs	r3, #0
 800c226:	627b      	str	r3, [r7, #36]	; 0x24
 800c228:	e002      	b.n	800c230 <dir_register+0x2c>
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	3301      	adds	r3, #1
 800c22e:	627b      	str	r3, [r7, #36]	; 0x24
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	691a      	ldr	r2, [r3, #16]
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	005b      	lsls	r3, r3, #1
 800c238:	4413      	add	r3, r2
 800c23a:	881b      	ldrh	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1f4      	bne.n	800c22a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c246:	f107 030c 	add.w	r3, r7, #12
 800c24a:	220c      	movs	r2, #12
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fd9b 	bl	800ad88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c252:	7dfb      	ldrb	r3, [r7, #23]
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d032      	beq.n	800c2c2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2240      	movs	r2, #64	; 0x40
 800c260:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800c264:	2301      	movs	r3, #1
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
 800c268:	e016      	b.n	800c298 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	691a      	ldr	r2, [r3, #16]
 800c274:	f107 010c 	add.w	r1, r7, #12
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f7ff fe53 	bl	800bf24 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff feff 	bl	800c082 <dir_find>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800c28a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d106      	bne.n	800c2a0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	3301      	adds	r3, #1
 800c296:	62bb      	str	r3, [r7, #40]	; 0x28
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	2b63      	cmp	r3, #99	; 0x63
 800c29c:	d9e5      	bls.n	800c26a <dir_register+0x66>
 800c29e:	e000      	b.n	800c2a2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c2a0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a4:	2b64      	cmp	r3, #100	; 0x64
 800c2a6:	d101      	bne.n	800c2ac <dir_register+0xa8>
 800c2a8:	2307      	movs	r3, #7
 800c2aa:	e09c      	b.n	800c3e6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c2ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d002      	beq.n	800c2ba <dir_register+0xb6>
 800c2b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2b8:	e095      	b.n	800c3e6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c2ba:	7dfa      	ldrb	r2, [r7, #23]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c2c2:	7dfb      	ldrb	r3, [r7, #23]
 800c2c4:	f003 0302 	and.w	r3, r3, #2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <dir_register+0xd8>
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	330c      	adds	r3, #12
 800c2d0:	4a47      	ldr	r2, [pc, #284]	; (800c3f0 <dir_register+0x1ec>)
 800c2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d6:	089b      	lsrs	r3, r3, #2
 800c2d8:	3301      	adds	r3, #1
 800c2da:	e000      	b.n	800c2de <dir_register+0xda>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c2e0:	6a39      	ldr	r1, [r7, #32]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff fcbf 	bl	800bc66 <dir_alloc>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c2ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d148      	bne.n	800c388 <dir_register+0x184>
 800c2f6:	6a3b      	ldr	r3, [r7, #32]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	623b      	str	r3, [r7, #32]
 800c2fc:	6a3b      	ldr	r3, [r7, #32]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d042      	beq.n	800c388 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	695a      	ldr	r2, [r3, #20]
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	015b      	lsls	r3, r3, #5
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7ff fb4a 	bl	800b9a8 <dir_sdi>
 800c314:	4603      	mov	r3, r0
 800c316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c31a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d132      	bne.n	800c388 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3324      	adds	r3, #36	; 0x24
 800c326:	4618      	mov	r0, r3
 800c328:	f7ff fe8a 	bl	800c040 <sum_sfn>
 800c32c:	4603      	mov	r3, r0
 800c32e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	4619      	mov	r1, r3
 800c336:	69f8      	ldr	r0, [r7, #28]
 800c338:	f7fe ff54 	bl	800b1e4 <move_window>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800c342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c346:	2b00      	cmp	r3, #0
 800c348:	d11d      	bne.n	800c386 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	6918      	ldr	r0, [r3, #16]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a19      	ldr	r1, [r3, #32]
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	b2da      	uxtb	r2, r3
 800c356:	7efb      	ldrb	r3, [r7, #27]
 800c358:	f7ff fd7c 	bl	800be54 <put_lfn>
				fs->wflag = 1;
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	2201      	movs	r2, #1
 800c360:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c362:	2100      	movs	r1, #0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7ff fba8 	bl	800baba <dir_next>
 800c36a:	4603      	mov	r3, r0
 800c36c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800c370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c374:	2b00      	cmp	r3, #0
 800c376:	d107      	bne.n	800c388 <dir_register+0x184>
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	623b      	str	r3, [r7, #32]
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1d5      	bne.n	800c330 <dir_register+0x12c>
 800c384:	e000      	b.n	800c388 <dir_register+0x184>
				if (res != FR_OK) break;
 800c386:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d128      	bne.n	800c3e2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	4619      	mov	r1, r3
 800c396:	69f8      	ldr	r0, [r7, #28]
 800c398:	f7fe ff24 	bl	800b1e4 <move_window>
 800c39c:	4603      	mov	r3, r0
 800c39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800c3a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d11b      	bne.n	800c3e2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	2220      	movs	r2, #32
 800c3b0:	2100      	movs	r1, #0
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fd09 	bl	800adca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a18      	ldr	r0, [r3, #32]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3324      	adds	r3, #36	; 0x24
 800c3c0:	220b      	movs	r2, #11
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	f7fe fce0 	bl	800ad88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	330c      	adds	r3, #12
 800c3d4:	f002 0218 	and.w	r2, r2, #24
 800c3d8:	b2d2      	uxtb	r2, r2
 800c3da:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c3e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3730      	adds	r7, #48	; 0x30
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	4ec4ec4f 	.word	0x4ec4ec4f

0800c3f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08a      	sub	sp, #40	; 0x28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	60fb      	str	r3, [r7, #12]
 800c40c:	2300      	movs	r3, #0
 800c40e:	617b      	str	r3, [r7, #20]
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	1c5a      	adds	r2, r3, #1
 800c418:	61ba      	str	r2, [r7, #24]
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	4413      	add	r3, r2
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c424:	2b1f      	cmp	r3, #31
 800c426:	d940      	bls.n	800c4aa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c42a:	2b2f      	cmp	r3, #47	; 0x2f
 800c42c:	d006      	beq.n	800c43c <create_name+0x48>
 800c42e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c430:	2b5c      	cmp	r3, #92	; 0x5c
 800c432:	d110      	bne.n	800c456 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c434:	e002      	b.n	800c43c <create_name+0x48>
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	3301      	adds	r3, #1
 800c43a:	61bb      	str	r3, [r7, #24]
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	4413      	add	r3, r2
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b2f      	cmp	r3, #47	; 0x2f
 800c446:	d0f6      	beq.n	800c436 <create_name+0x42>
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	4413      	add	r3, r2
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b5c      	cmp	r3, #92	; 0x5c
 800c452:	d0f0      	beq.n	800c436 <create_name+0x42>
			break;
 800c454:	e02a      	b.n	800c4ac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2bfe      	cmp	r3, #254	; 0xfe
 800c45a:	d901      	bls.n	800c460 <create_name+0x6c>
 800c45c:	2306      	movs	r3, #6
 800c45e:	e17d      	b.n	800c75c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c462:	b2db      	uxtb	r3, r3
 800c464:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c468:	2101      	movs	r1, #1
 800c46a:	4618      	mov	r0, r3
 800c46c:	f001 fa8c 	bl	800d988 <ff_convert>
 800c470:	4603      	mov	r3, r0
 800c472:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <create_name+0x8a>
 800c47a:	2306      	movs	r3, #6
 800c47c:	e16e      	b.n	800c75c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c47e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c480:	2b7f      	cmp	r3, #127	; 0x7f
 800c482:	d809      	bhi.n	800c498 <create_name+0xa4>
 800c484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c486:	4619      	mov	r1, r3
 800c488:	488d      	ldr	r0, [pc, #564]	; (800c6c0 <create_name+0x2cc>)
 800c48a:	f7fe fce0 	bl	800ae4e <chk_chr>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <create_name+0xa4>
 800c494:	2306      	movs	r3, #6
 800c496:	e161      	b.n	800c75c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	617a      	str	r2, [r7, #20]
 800c49e:	005b      	lsls	r3, r3, #1
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4a6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c4a8:	e7b4      	b.n	800c414 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c4aa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c4ac:	693a      	ldr	r2, [r7, #16]
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	441a      	add	r2, r3
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c4b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4b8:	2b1f      	cmp	r3, #31
 800c4ba:	d801      	bhi.n	800c4c0 <create_name+0xcc>
 800c4bc:	2304      	movs	r3, #4
 800c4be:	e000      	b.n	800c4c2 <create_name+0xce>
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4c6:	e011      	b.n	800c4ec <create_name+0xf8>
		w = lfn[di - 1];
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	005b      	lsls	r3, r3, #1
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c4da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4dc:	2b20      	cmp	r3, #32
 800c4de:	d002      	beq.n	800c4e6 <create_name+0xf2>
 800c4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e4:	d106      	bne.n	800c4f4 <create_name+0x100>
		di--;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1ea      	bne.n	800c4c8 <create_name+0xd4>
 800c4f2:	e000      	b.n	800c4f6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c4f4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	2200      	movs	r2, #0
 800c500:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <create_name+0x118>
 800c508:	2306      	movs	r3, #6
 800c50a:	e127      	b.n	800c75c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3324      	adds	r3, #36	; 0x24
 800c510:	220b      	movs	r2, #11
 800c512:	2120      	movs	r1, #32
 800c514:	4618      	mov	r0, r3
 800c516:	f7fe fc58 	bl	800adca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c51a:	2300      	movs	r3, #0
 800c51c:	61bb      	str	r3, [r7, #24]
 800c51e:	e002      	b.n	800c526 <create_name+0x132>
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	3301      	adds	r3, #1
 800c524:	61bb      	str	r3, [r7, #24]
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	4413      	add	r3, r2
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	2b20      	cmp	r3, #32
 800c532:	d0f5      	beq.n	800c520 <create_name+0x12c>
 800c534:	69bb      	ldr	r3, [r7, #24]
 800c536:	005b      	lsls	r3, r3, #1
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	4413      	add	r3, r2
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	2b2e      	cmp	r3, #46	; 0x2e
 800c540:	d0ee      	beq.n	800c520 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d009      	beq.n	800c55c <create_name+0x168>
 800c548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54c:	f043 0303 	orr.w	r3, r3, #3
 800c550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c554:	e002      	b.n	800c55c <create_name+0x168>
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	3b01      	subs	r3, #1
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d009      	beq.n	800c576 <create_name+0x182>
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c568:	3b01      	subs	r3, #1
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4413      	add	r3, r2
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	2b2e      	cmp	r3, #46	; 0x2e
 800c574:	d1ef      	bne.n	800c556 <create_name+0x162>

	i = b = 0; ni = 8;
 800c576:	2300      	movs	r3, #0
 800c578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c57c:	2300      	movs	r3, #0
 800c57e:	623b      	str	r3, [r7, #32]
 800c580:	2308      	movs	r3, #8
 800c582:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	61ba      	str	r2, [r7, #24]
 800c58a:	005b      	lsls	r3, r3, #1
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4413      	add	r3, r2
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c596:	2b00      	cmp	r3, #0
 800c598:	f000 8090 	beq.w	800c6bc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c59e:	2b20      	cmp	r3, #32
 800c5a0:	d006      	beq.n	800c5b0 <create_name+0x1bc>
 800c5a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a6:	d10a      	bne.n	800c5be <create_name+0x1ca>
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d006      	beq.n	800c5be <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c5b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b4:	f043 0303 	orr.w	r3, r3, #3
 800c5b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5bc:	e07d      	b.n	800c6ba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c5be:	6a3a      	ldr	r2, [r7, #32]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d203      	bcs.n	800c5ce <create_name+0x1da>
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d123      	bne.n	800c616 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	2b0b      	cmp	r3, #11
 800c5d2:	d106      	bne.n	800c5e2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d8:	f043 0303 	orr.w	r3, r3, #3
 800c5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5e0:	e075      	b.n	800c6ce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d005      	beq.n	800c5f6 <create_name+0x202>
 800c5ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ee:	f043 0303 	orr.w	r3, r3, #3
 800c5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d866      	bhi.n	800c6cc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	61bb      	str	r3, [r7, #24]
 800c602:	2308      	movs	r3, #8
 800c604:	623b      	str	r3, [r7, #32]
 800c606:	230b      	movs	r3, #11
 800c608:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c60a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c614:	e051      	b.n	800c6ba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c618:	2b7f      	cmp	r3, #127	; 0x7f
 800c61a:	d914      	bls.n	800c646 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c61c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c61e:	2100      	movs	r1, #0
 800c620:	4618      	mov	r0, r3
 800c622:	f001 f9b1 	bl	800d988 <ff_convert>
 800c626:	4603      	mov	r3, r0
 800c628:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c62a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d004      	beq.n	800c63a <create_name+0x246>
 800c630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c632:	3b80      	subs	r3, #128	; 0x80
 800c634:	4a23      	ldr	r2, [pc, #140]	; (800c6c4 <create_name+0x2d0>)
 800c636:	5cd3      	ldrb	r3, [r2, r3]
 800c638:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c63a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c63e:	f043 0302 	orr.w	r3, r3, #2
 800c642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d007      	beq.n	800c65c <create_name+0x268>
 800c64c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c64e:	4619      	mov	r1, r3
 800c650:	481d      	ldr	r0, [pc, #116]	; (800c6c8 <create_name+0x2d4>)
 800c652:	f7fe fbfc 	bl	800ae4e <chk_chr>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d008      	beq.n	800c66e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c65c:	235f      	movs	r3, #95	; 0x5f
 800c65e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c664:	f043 0303 	orr.w	r3, r3, #3
 800c668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c66c:	e01b      	b.n	800c6a6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c66e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c670:	2b40      	cmp	r3, #64	; 0x40
 800c672:	d909      	bls.n	800c688 <create_name+0x294>
 800c674:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c676:	2b5a      	cmp	r3, #90	; 0x5a
 800c678:	d806      	bhi.n	800c688 <create_name+0x294>
					b |= 2;
 800c67a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c67e:	f043 0302 	orr.w	r3, r3, #2
 800c682:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c686:	e00e      	b.n	800c6a6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c68a:	2b60      	cmp	r3, #96	; 0x60
 800c68c:	d90b      	bls.n	800c6a6 <create_name+0x2b2>
 800c68e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c690:	2b7a      	cmp	r3, #122	; 0x7a
 800c692:	d808      	bhi.n	800c6a6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c698:	f043 0301 	orr.w	r3, r3, #1
 800c69c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c6a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6a2:	3b20      	subs	r3, #32
 800c6a4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	1c5a      	adds	r2, r3, #1
 800c6aa:	623a      	str	r2, [r7, #32]
 800c6ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c6ae:	b2d1      	uxtb	r1, r2
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	460a      	mov	r2, r1
 800c6b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c6ba:	e763      	b.n	800c584 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c6bc:	bf00      	nop
 800c6be:	e006      	b.n	800c6ce <create_name+0x2da>
 800c6c0:	08010134 	.word	0x08010134
 800c6c4:	08010900 	.word	0x08010900
 800c6c8:	08010140 	.word	0x08010140
			if (si > di) break;			/* No extension */
 800c6cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6d4:	2be5      	cmp	r3, #229	; 0xe5
 800c6d6:	d103      	bne.n	800c6e0 <create_name+0x2ec>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2205      	movs	r2, #5
 800c6dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2b08      	cmp	r3, #8
 800c6e4:	d104      	bne.n	800c6f0 <create_name+0x2fc>
 800c6e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6f4:	f003 030c 	and.w	r3, r3, #12
 800c6f8:	2b0c      	cmp	r3, #12
 800c6fa:	d005      	beq.n	800c708 <create_name+0x314>
 800c6fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	2b03      	cmp	r3, #3
 800c706:	d105      	bne.n	800c714 <create_name+0x320>
 800c708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c70c:	f043 0302 	orr.w	r3, r3, #2
 800c710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c718:	f003 0302 	and.w	r3, r3, #2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d117      	bne.n	800c750 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c724:	f003 0303 	and.w	r3, r3, #3
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d105      	bne.n	800c738 <create_name+0x344>
 800c72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c730:	f043 0310 	orr.w	r3, r3, #16
 800c734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c73c:	f003 030c 	and.w	r3, r3, #12
 800c740:	2b04      	cmp	r3, #4
 800c742:	d105      	bne.n	800c750 <create_name+0x35c>
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c748:	f043 0308 	orr.w	r3, r3, #8
 800c74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c756:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800c75a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3728      	adds	r7, #40	; 0x28
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b086      	sub	sp, #24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c778:	e002      	b.n	800c780 <follow_path+0x1c>
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	3301      	adds	r3, #1
 800c77e:	603b      	str	r3, [r7, #0]
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b2f      	cmp	r3, #47	; 0x2f
 800c786:	d0f8      	beq.n	800c77a <follow_path+0x16>
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b5c      	cmp	r3, #92	; 0x5c
 800c78e:	d0f4      	beq.n	800c77a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2200      	movs	r2, #0
 800c794:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b1f      	cmp	r3, #31
 800c79c:	d80a      	bhi.n	800c7b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2280      	movs	r2, #128	; 0x80
 800c7a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff f8fd 	bl	800b9a8 <dir_sdi>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	75fb      	strb	r3, [r7, #23]
 800c7b2:	e048      	b.n	800c846 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7b4:	463b      	mov	r3, r7
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff fe1b 	bl	800c3f4 <create_name>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d139      	bne.n	800c83c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff fc5a 	bl	800c082 <dir_find>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00a      	beq.n	800c7f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7e0:	7dfb      	ldrb	r3, [r7, #23]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	d12c      	bne.n	800c840 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7e6:	7afb      	ldrb	r3, [r7, #11]
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d127      	bne.n	800c840 <follow_path+0xdc>
 800c7f0:	2305      	movs	r3, #5
 800c7f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7f4:	e024      	b.n	800c840 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7f6:	7afb      	ldrb	r3, [r7, #11]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d121      	bne.n	800c844 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	799b      	ldrb	r3, [r3, #6]
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c80c:	2305      	movs	r3, #5
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	e019      	b.n	800c846 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	695b      	ldr	r3, [r3, #20]
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	8992      	ldrh	r2, [r2, #12]
 800c820:	fbb3 f0f2 	udiv	r0, r3, r2
 800c824:	fb00 f202 	mul.w	r2, r0, r2
 800c828:	1a9b      	subs	r3, r3, r2
 800c82a:	440b      	add	r3, r1
 800c82c:	4619      	mov	r1, r3
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	f7ff fa60 	bl	800bcf4 <ld_clust>
 800c834:	4602      	mov	r2, r0
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c83a:	e7bb      	b.n	800c7b4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c83c:	bf00      	nop
 800c83e:	e002      	b.n	800c846 <follow_path+0xe2>
				break;
 800c840:	bf00      	nop
 800c842:	e000      	b.n	800c846 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c844:	bf00      	nop
			}
		}
	}

	return res;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c850:	b480      	push	{r7}
 800c852:	b087      	sub	sp, #28
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c858:	f04f 33ff 	mov.w	r3, #4294967295
 800c85c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d031      	beq.n	800c8ca <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	617b      	str	r3, [r7, #20]
 800c86c:	e002      	b.n	800c874 <get_ldnumber+0x24>
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	3301      	adds	r3, #1
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	2b1f      	cmp	r3, #31
 800c87a:	d903      	bls.n	800c884 <get_ldnumber+0x34>
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	2b3a      	cmp	r3, #58	; 0x3a
 800c882:	d1f4      	bne.n	800c86e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b3a      	cmp	r3, #58	; 0x3a
 800c88a:	d11c      	bne.n	800c8c6 <get_ldnumber+0x76>
			tp = *path;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	1c5a      	adds	r2, r3, #1
 800c896:	60fa      	str	r2, [r7, #12]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	3b30      	subs	r3, #48	; 0x30
 800c89c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2b09      	cmp	r3, #9
 800c8a2:	d80e      	bhi.n	800c8c2 <get_ldnumber+0x72>
 800c8a4:	68fa      	ldr	r2, [r7, #12]
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d10a      	bne.n	800c8c2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d107      	bne.n	800c8c2 <get_ldnumber+0x72>
					vol = (int)i;
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	617b      	str	r3, [r7, #20]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	697a      	ldr	r2, [r7, #20]
 800c8c0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	e002      	b.n	800c8cc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c8ca:	693b      	ldr	r3, [r7, #16]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	371c      	adds	r7, #28
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	70da      	strb	r2, [r3, #3]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ee:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8f0:	6839      	ldr	r1, [r7, #0]
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7fe fc76 	bl	800b1e4 <move_window>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <check_fs+0x2a>
 800c8fe:	2304      	movs	r3, #4
 800c900:	e038      	b.n	800c974 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	3338      	adds	r3, #56	; 0x38
 800c906:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe f9ba 	bl	800ac84 <ld_word>
 800c910:	4603      	mov	r3, r0
 800c912:	461a      	mov	r2, r3
 800c914:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c918:	429a      	cmp	r2, r3
 800c91a:	d001      	beq.n	800c920 <check_fs+0x48>
 800c91c:	2303      	movs	r3, #3
 800c91e:	e029      	b.n	800c974 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c926:	2be9      	cmp	r3, #233	; 0xe9
 800c928:	d009      	beq.n	800c93e <check_fs+0x66>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c930:	2beb      	cmp	r3, #235	; 0xeb
 800c932:	d11e      	bne.n	800c972 <check_fs+0x9a>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c93a:	2b90      	cmp	r3, #144	; 0x90
 800c93c:	d119      	bne.n	800c972 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	3338      	adds	r3, #56	; 0x38
 800c942:	3336      	adds	r3, #54	; 0x36
 800c944:	4618      	mov	r0, r3
 800c946:	f7fe f9b5 	bl	800acb4 <ld_dword>
 800c94a:	4603      	mov	r3, r0
 800c94c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c950:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <check_fs+0xa4>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d101      	bne.n	800c95a <check_fs+0x82>
 800c956:	2300      	movs	r3, #0
 800c958:	e00c      	b.n	800c974 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	3338      	adds	r3, #56	; 0x38
 800c95e:	3352      	adds	r3, #82	; 0x52
 800c960:	4618      	mov	r0, r3
 800c962:	f7fe f9a7 	bl	800acb4 <ld_dword>
 800c966:	4603      	mov	r3, r0
 800c968:	4a05      	ldr	r2, [pc, #20]	; (800c980 <check_fs+0xa8>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d101      	bne.n	800c972 <check_fs+0x9a>
 800c96e:	2300      	movs	r3, #0
 800c970:	e000      	b.n	800c974 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c972:	2302      	movs	r3, #2
}
 800c974:	4618      	mov	r0, r3
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	00544146 	.word	0x00544146
 800c980:	33544146 	.word	0x33544146

0800c984 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b096      	sub	sp, #88	; 0x58
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	4613      	mov	r3, r2
 800c990:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2200      	movs	r2, #0
 800c996:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff ff59 	bl	800c850 <get_ldnumber>
 800c99e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	da01      	bge.n	800c9aa <find_volume+0x26>
 800c9a6:	230b      	movs	r3, #11
 800c9a8:	e265      	b.n	800ce76 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c9aa:	4a9f      	ldr	r2, [pc, #636]	; (800cc28 <find_volume+0x2a4>)
 800c9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d101      	bne.n	800c9be <find_volume+0x3a>
 800c9ba:	230c      	movs	r3, #12
 800c9bc:	e25b      	b.n	800ce76 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	f023 0301 	bic.w	r3, r3, #1
 800c9ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d01a      	beq.n	800ca0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d6:	785b      	ldrb	r3, [r3, #1]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe f8b5 	bl	800ab48 <disk_status>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10c      	bne.n	800ca0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9f0:	79fb      	ldrb	r3, [r7, #7]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d007      	beq.n	800ca06 <find_volume+0x82>
 800c9f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9fa:	f003 0304 	and.w	r3, r3, #4
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ca02:	230a      	movs	r3, #10
 800ca04:	e237      	b.n	800ce76 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800ca06:	2300      	movs	r3, #0
 800ca08:	e235      	b.n	800ce76 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ca10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ca18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1a:	785b      	ldrb	r3, [r3, #1]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7fe f8ad 	bl	800ab7c <disk_initialize>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ca28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca2c:	f003 0301 	and.w	r3, r3, #1
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d001      	beq.n	800ca38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ca34:	2303      	movs	r3, #3
 800ca36:	e21e      	b.n	800ce76 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d007      	beq.n	800ca4e <find_volume+0xca>
 800ca3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca42:	f003 0304 	and.w	r3, r3, #4
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca4a:	230a      	movs	r3, #10
 800ca4c:	e213      	b.n	800ce76 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	7858      	ldrb	r0, [r3, #1]
 800ca52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca54:	330c      	adds	r3, #12
 800ca56:	461a      	mov	r2, r3
 800ca58:	2102      	movs	r1, #2
 800ca5a:	f7fe f8f5 	bl	800ac48 <disk_ioctl>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <find_volume+0xe4>
 800ca64:	2301      	movs	r3, #1
 800ca66:	e206      	b.n	800ce76 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	899b      	ldrh	r3, [r3, #12]
 800ca6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca70:	d80d      	bhi.n	800ca8e <find_volume+0x10a>
 800ca72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca74:	899b      	ldrh	r3, [r3, #12]
 800ca76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca7a:	d308      	bcc.n	800ca8e <find_volume+0x10a>
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	899b      	ldrh	r3, [r3, #12]
 800ca80:	461a      	mov	r2, r3
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	899b      	ldrh	r3, [r3, #12]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	4013      	ands	r3, r2
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <find_volume+0x10e>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e1f1      	b.n	800ce76 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca9a:	f7ff ff1d 	bl	800c8d8 <check_fs>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800caa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800caa8:	2b02      	cmp	r3, #2
 800caaa:	d149      	bne.n	800cb40 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800caac:	2300      	movs	r3, #0
 800caae:	643b      	str	r3, [r7, #64]	; 0x40
 800cab0:	e01e      	b.n	800caf0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caba:	011b      	lsls	r3, r3, #4
 800cabc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cac0:	4413      	add	r3, r2
 800cac2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac6:	3304      	adds	r3, #4
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d006      	beq.n	800cadc <find_volume+0x158>
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	3308      	adds	r3, #8
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fe f8ee 	bl	800acb4 <ld_dword>
 800cad8:	4602      	mov	r2, r0
 800cada:	e000      	b.n	800cade <find_volume+0x15a>
 800cadc:	2200      	movs	r2, #0
 800cade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	3358      	adds	r3, #88	; 0x58
 800cae4:	443b      	add	r3, r7
 800cae6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800caea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caec:	3301      	adds	r3, #1
 800caee:	643b      	str	r3, [r7, #64]	; 0x40
 800caf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf2:	2b03      	cmp	r3, #3
 800caf4:	d9dd      	bls.n	800cab2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800caf6:	2300      	movs	r3, #0
 800caf8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <find_volume+0x182>
 800cb00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb02:	3b01      	subs	r3, #1
 800cb04:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	3358      	adds	r3, #88	; 0x58
 800cb0c:	443b      	add	r3, r7
 800cb0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d005      	beq.n	800cb26 <find_volume+0x1a2>
 800cb1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cb1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb1e:	f7ff fedb 	bl	800c8d8 <check_fs>
 800cb22:	4603      	mov	r3, r0
 800cb24:	e000      	b.n	800cb28 <find_volume+0x1a4>
 800cb26:	2303      	movs	r3, #3
 800cb28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d905      	bls.n	800cb40 <find_volume+0x1bc>
 800cb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb36:	3301      	adds	r3, #1
 800cb38:	643b      	str	r3, [r7, #64]	; 0x40
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb3c:	2b03      	cmp	r3, #3
 800cb3e:	d9e2      	bls.n	800cb06 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb44:	2b04      	cmp	r3, #4
 800cb46:	d101      	bne.n	800cb4c <find_volume+0x1c8>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e194      	b.n	800ce76 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cb4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d901      	bls.n	800cb58 <find_volume+0x1d4>
 800cb54:	230d      	movs	r3, #13
 800cb56:	e18e      	b.n	800ce76 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	3338      	adds	r3, #56	; 0x38
 800cb5c:	330b      	adds	r3, #11
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe f890 	bl	800ac84 <ld_word>
 800cb64:	4603      	mov	r3, r0
 800cb66:	461a      	mov	r2, r3
 800cb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6a:	899b      	ldrh	r3, [r3, #12]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d001      	beq.n	800cb74 <find_volume+0x1f0>
 800cb70:	230d      	movs	r3, #13
 800cb72:	e180      	b.n	800ce76 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	3338      	adds	r3, #56	; 0x38
 800cb78:	3316      	adds	r3, #22
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe f882 	bl	800ac84 <ld_word>
 800cb80:	4603      	mov	r3, r0
 800cb82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d106      	bne.n	800cb98 <find_volume+0x214>
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	3338      	adds	r3, #56	; 0x38
 800cb8e:	3324      	adds	r3, #36	; 0x24
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe f88f 	bl	800acb4 <ld_dword>
 800cb96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb9c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	789b      	ldrb	r3, [r3, #2]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d005      	beq.n	800cbbc <find_volume+0x238>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	789b      	ldrb	r3, [r3, #2]
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d001      	beq.n	800cbbc <find_volume+0x238>
 800cbb8:	230d      	movs	r3, #13
 800cbba:	e15c      	b.n	800ce76 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbe:	789b      	ldrb	r3, [r3, #2]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc4:	fb02 f303 	mul.w	r3, r2, r3
 800cbc8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd8:	895b      	ldrh	r3, [r3, #10]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d008      	beq.n	800cbf0 <find_volume+0x26c>
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	895b      	ldrh	r3, [r3, #10]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe6:	895b      	ldrh	r3, [r3, #10]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	4013      	ands	r3, r2
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d001      	beq.n	800cbf4 <find_volume+0x270>
 800cbf0:	230d      	movs	r3, #13
 800cbf2:	e140      	b.n	800ce76 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	3338      	adds	r3, #56	; 0x38
 800cbf8:	3311      	adds	r3, #17
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe f842 	bl	800ac84 <ld_word>
 800cc00:	4603      	mov	r3, r0
 800cc02:	461a      	mov	r2, r3
 800cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	891b      	ldrh	r3, [r3, #8]
 800cc0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc0e:	8992      	ldrh	r2, [r2, #12]
 800cc10:	0952      	lsrs	r2, r2, #5
 800cc12:	b292      	uxth	r2, r2
 800cc14:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc18:	fb01 f202 	mul.w	r2, r1, r2
 800cc1c:	1a9b      	subs	r3, r3, r2
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <find_volume+0x2a8>
 800cc24:	230d      	movs	r3, #13
 800cc26:	e126      	b.n	800ce76 <find_volume+0x4f2>
 800cc28:	20002720 	.word	0x20002720

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	3338      	adds	r3, #56	; 0x38
 800cc30:	3313      	adds	r3, #19
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe f826 	bl	800ac84 <ld_word>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <find_volume+0x2cc>
 800cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc44:	3338      	adds	r3, #56	; 0x38
 800cc46:	3320      	adds	r3, #32
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7fe f833 	bl	800acb4 <ld_dword>
 800cc4e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	3338      	adds	r3, #56	; 0x38
 800cc54:	330e      	adds	r3, #14
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe f814 	bl	800ac84 <ld_word>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cc60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <find_volume+0x2e6>
 800cc66:	230d      	movs	r3, #13
 800cc68:	e105      	b.n	800ce76 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cc6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc6e:	4413      	add	r3, r2
 800cc70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc72:	8911      	ldrh	r1, [r2, #8]
 800cc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc76:	8992      	ldrh	r2, [r2, #12]
 800cc78:	0952      	lsrs	r2, r2, #5
 800cc7a:	b292      	uxth	r2, r2
 800cc7c:	fbb1 f2f2 	udiv	r2, r1, r2
 800cc80:	b292      	uxth	r2, r2
 800cc82:	4413      	add	r3, r2
 800cc84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cc86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d201      	bcs.n	800cc92 <find_volume+0x30e>
 800cc8e:	230d      	movs	r3, #13
 800cc90:	e0f1      	b.n	800ce76 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cc92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc9a:	8952      	ldrh	r2, [r2, #10]
 800cc9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <find_volume+0x328>
 800cca8:	230d      	movs	r3, #13
 800ccaa:	e0e4      	b.n	800ce76 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ccac:	2303      	movs	r3, #3
 800ccae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d802      	bhi.n	800ccc2 <find_volume+0x33e>
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d802      	bhi.n	800ccd2 <find_volume+0x34e>
 800cccc:	2301      	movs	r3, #1
 800ccce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ccd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd4:	1c9a      	adds	r2, r3, #2
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccde:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cce0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce4:	441a      	add	r2, r3
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ccea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	441a      	add	r2, r3
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ccf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d11e      	bne.n	800cd3a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	3338      	adds	r3, #56	; 0x38
 800cd00:	332a      	adds	r3, #42	; 0x2a
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fd ffbe 	bl	800ac84 <ld_word>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <find_volume+0x38e>
 800cd0e:	230d      	movs	r3, #13
 800cd10:	e0b1      	b.n	800ce76 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd14:	891b      	ldrh	r3, [r3, #8]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <find_volume+0x39a>
 800cd1a:	230d      	movs	r3, #13
 800cd1c:	e0ab      	b.n	800ce76 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd20:	3338      	adds	r3, #56	; 0x38
 800cd22:	332c      	adds	r3, #44	; 0x2c
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fd ffc5 	bl	800acb4 <ld_dword>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	69db      	ldr	r3, [r3, #28]
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	647b      	str	r3, [r7, #68]	; 0x44
 800cd38:	e01f      	b.n	800cd7a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	891b      	ldrh	r3, [r3, #8]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <find_volume+0x3c2>
 800cd42:	230d      	movs	r3, #13
 800cd44:	e097      	b.n	800ce76 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd4c:	441a      	add	r2, r3
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d103      	bne.n	800cd62 <find_volume+0x3de>
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	69db      	ldr	r3, [r3, #28]
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	e00a      	b.n	800cd78 <find_volume+0x3f4>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	69da      	ldr	r2, [r3, #28]
 800cd66:	4613      	mov	r3, r2
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	4413      	add	r3, r2
 800cd6c:	085a      	lsrs	r2, r3, #1
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cd78:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	6a1a      	ldr	r2, [r3, #32]
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd80:	899b      	ldrh	r3, [r3, #12]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd86:	440b      	add	r3, r1
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd8c:	8989      	ldrh	r1, [r1, #12]
 800cd8e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d201      	bcs.n	800cd9a <find_volume+0x416>
 800cd96:	230d      	movs	r3, #13
 800cd98:	e06d      	b.n	800ce76 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cda0:	619a      	str	r2, [r3, #24]
 800cda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda4:	699a      	ldr	r2, [r3, #24]
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	2280      	movs	r2, #128	; 0x80
 800cdae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cdb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cdb4:	2b03      	cmp	r3, #3
 800cdb6:	d149      	bne.n	800ce4c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdba:	3338      	adds	r3, #56	; 0x38
 800cdbc:	3330      	adds	r3, #48	; 0x30
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fd ff60 	bl	800ac84 <ld_word>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d140      	bne.n	800ce4c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cdca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdcc:	3301      	adds	r3, #1
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdd2:	f7fe fa07 	bl	800b1e4 <move_window>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d137      	bne.n	800ce4c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	2200      	movs	r2, #0
 800cde0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	3338      	adds	r3, #56	; 0x38
 800cde6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fd ff4a 	bl	800ac84 <ld_word>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d127      	bne.n	800ce4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	3338      	adds	r3, #56	; 0x38
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fd ff57 	bl	800acb4 <ld_dword>
 800ce06:	4603      	mov	r3, r0
 800ce08:	4a1d      	ldr	r2, [pc, #116]	; (800ce80 <find_volume+0x4fc>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d11e      	bne.n	800ce4c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce10:	3338      	adds	r3, #56	; 0x38
 800ce12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fd ff4c 	bl	800acb4 <ld_dword>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	4a19      	ldr	r2, [pc, #100]	; (800ce84 <find_volume+0x500>)
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d113      	bne.n	800ce4c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	3338      	adds	r3, #56	; 0x38
 800ce28:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fd ff41 	bl	800acb4 <ld_dword>
 800ce32:	4602      	mov	r2, r0
 800ce34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce36:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3a:	3338      	adds	r3, #56	; 0x38
 800ce3c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fd ff37 	bl	800acb4 <ld_dword>
 800ce46:	4602      	mov	r2, r0
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ce52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce54:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <find_volume+0x504>)
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	4b0a      	ldr	r3, [pc, #40]	; (800ce88 <find_volume+0x504>)
 800ce5e:	801a      	strh	r2, [r3, #0]
 800ce60:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <find_volume+0x504>)
 800ce62:	881a      	ldrh	r2, [r3, #0]
 800ce64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce66:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ce68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6a:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <find_volume+0x508>)
 800ce6c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce70:	f7fe f950 	bl	800b114 <clear_lock>
#endif
	return FR_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3758      	adds	r7, #88	; 0x58
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	41615252 	.word	0x41615252
 800ce84:	61417272 	.word	0x61417272
 800ce88:	20002724 	.word	0x20002724
 800ce8c:	20002748 	.word	0x20002748

0800ce90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ce9a:	2309      	movs	r3, #9
 800ce9c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d01c      	beq.n	800cede <validate+0x4e>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d018      	beq.n	800cede <validate+0x4e>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d013      	beq.n	800cede <validate+0x4e>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	889a      	ldrh	r2, [r3, #4]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	88db      	ldrh	r3, [r3, #6]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d10c      	bne.n	800cede <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	785b      	ldrb	r3, [r3, #1]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fd fe3c 	bl	800ab48 <disk_status>
 800ced0:	4603      	mov	r3, r0
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d101      	bne.n	800cede <validate+0x4e>
			res = FR_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cede:	7bfb      	ldrb	r3, [r7, #15]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d102      	bne.n	800ceea <validate+0x5a>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	e000      	b.n	800ceec <validate+0x5c>
 800ceea:	2300      	movs	r3, #0
 800ceec:	683a      	ldr	r2, [r7, #0]
 800ceee:	6013      	str	r3, [r2, #0]
	return res;
 800cef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	4613      	mov	r3, r2
 800cf08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf0e:	f107 0310 	add.w	r3, r7, #16
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fc9c 	bl	800c850 <get_ldnumber>
 800cf18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da01      	bge.n	800cf24 <f_mount+0x28>
 800cf20:	230b      	movs	r3, #11
 800cf22:	e02b      	b.n	800cf7c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf24:	4a17      	ldr	r2, [pc, #92]	; (800cf84 <f_mount+0x88>)
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d005      	beq.n	800cf40 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf34:	69b8      	ldr	r0, [r7, #24]
 800cf36:	f7fe f8ed 	bl	800b114 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	490d      	ldr	r1, [pc, #52]	; (800cf84 <f_mount+0x88>)
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <f_mount+0x66>
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d001      	beq.n	800cf66 <f_mount+0x6a>
 800cf62:	2300      	movs	r3, #0
 800cf64:	e00a      	b.n	800cf7c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf66:	f107 010c 	add.w	r1, r7, #12
 800cf6a:	f107 0308 	add.w	r3, r7, #8
 800cf6e:	2200      	movs	r2, #0
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff fd07 	bl	800c984 <find_volume>
 800cf76:	4603      	mov	r3, r0
 800cf78:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3720      	adds	r7, #32
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	20002720 	.word	0x20002720

0800cf88 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b09a      	sub	sp, #104	; 0x68
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	4613      	mov	r3, r2
 800cf94:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <f_open+0x18>
 800cf9c:	2309      	movs	r3, #9
 800cf9e:	e1bb      	b.n	800d318 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cfa0:	79fb      	ldrb	r3, [r7, #7]
 800cfa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfa6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cfa8:	79fa      	ldrb	r2, [r7, #7]
 800cfaa:	f107 0114 	add.w	r1, r7, #20
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7ff fce6 	bl	800c984 <find_volume>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800cfbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f040 819f 	bne.w	800d306 <f_open+0x37e>
		dj.obj.fs = fs;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	f107 0318 	add.w	r3, r7, #24
 800cfd2:	4611      	mov	r1, r2
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7ff fbc5 	bl	800c764 <follow_path>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cfe0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d11a      	bne.n	800d01e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cfe8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cfec:	b25b      	sxtb	r3, r3
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	da03      	bge.n	800cffa <f_open+0x72>
				res = FR_INVALID_NAME;
 800cff2:	2306      	movs	r3, #6
 800cff4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800cff8:	e011      	b.n	800d01e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cffa:	79fb      	ldrb	r3, [r7, #7]
 800cffc:	f023 0301 	bic.w	r3, r3, #1
 800d000:	2b00      	cmp	r3, #0
 800d002:	bf14      	ite	ne
 800d004:	2301      	movne	r3, #1
 800d006:	2300      	moveq	r3, #0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	461a      	mov	r2, r3
 800d00c:	f107 0318 	add.w	r3, r7, #24
 800d010:	4611      	mov	r1, r2
 800d012:	4618      	mov	r0, r3
 800d014:	f7fd ff36 	bl	800ae84 <chk_lock>
 800d018:	4603      	mov	r3, r0
 800d01a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	f003 031c 	and.w	r3, r3, #28
 800d024:	2b00      	cmp	r3, #0
 800d026:	d07f      	beq.n	800d128 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d017      	beq.n	800d060 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d030:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d034:	2b04      	cmp	r3, #4
 800d036:	d10e      	bne.n	800d056 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d038:	f7fd ff80 	bl	800af3c <enq_lock>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d006      	beq.n	800d050 <f_open+0xc8>
 800d042:	f107 0318 	add.w	r3, r7, #24
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff f8dc 	bl	800c204 <dir_register>
 800d04c:	4603      	mov	r3, r0
 800d04e:	e000      	b.n	800d052 <f_open+0xca>
 800d050:	2312      	movs	r3, #18
 800d052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	f043 0308 	orr.w	r3, r3, #8
 800d05c:	71fb      	strb	r3, [r7, #7]
 800d05e:	e010      	b.n	800d082 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d060:	7fbb      	ldrb	r3, [r7, #30]
 800d062:	f003 0311 	and.w	r3, r3, #17
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <f_open+0xea>
					res = FR_DENIED;
 800d06a:	2307      	movs	r3, #7
 800d06c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d070:	e007      	b.n	800d082 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	f003 0304 	and.w	r3, r3, #4
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <f_open+0xfa>
 800d07c:	2308      	movs	r3, #8
 800d07e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d082:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d086:	2b00      	cmp	r3, #0
 800d088:	d168      	bne.n	800d15c <f_open+0x1d4>
 800d08a:	79fb      	ldrb	r3, [r7, #7]
 800d08c:	f003 0308 	and.w	r3, r3, #8
 800d090:	2b00      	cmp	r3, #0
 800d092:	d063      	beq.n	800d15c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d094:	f7fd fcf6 	bl	800aa84 <get_fattime>
 800d098:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	330e      	adds	r3, #14
 800d09e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fd fe45 	bl	800ad30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a8:	3316      	adds	r3, #22
 800d0aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fd fe3f 	bl	800ad30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b4:	330b      	adds	r3, #11
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0be:	4611      	mov	r1, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fe fe17 	bl	800bcf4 <ld_clust>
 800d0c6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fe fe2f 	bl	800bd32 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	331c      	adds	r3, #28
 800d0d8:	2100      	movs	r1, #0
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fd fe28 	bl	800ad30 <st_dword>
					fs->wflag = 1;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d0e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d037      	beq.n	800d15c <f_open+0x1d4>
						dw = fs->winsect;
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800d0f2:	f107 0318 	add.w	r3, r7, #24
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fb1f 	bl	800b73e <remove_chain>
 800d100:	4603      	mov	r3, r0
 800d102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d106:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d126      	bne.n	800d15c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe f866 	bl	800b1e4 <move_window>
 800d118:	4603      	mov	r3, r0
 800d11a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d122:	3a01      	subs	r2, #1
 800d124:	615a      	str	r2, [r3, #20]
 800d126:	e019      	b.n	800d15c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d115      	bne.n	800d15c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d130:	7fbb      	ldrb	r3, [r7, #30]
 800d132:	f003 0310 	and.w	r3, r3, #16
 800d136:	2b00      	cmp	r3, #0
 800d138:	d003      	beq.n	800d142 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d13a:	2304      	movs	r3, #4
 800d13c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d140:	e00c      	b.n	800d15c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d142:	79fb      	ldrb	r3, [r7, #7]
 800d144:	f003 0302 	and.w	r3, r3, #2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d007      	beq.n	800d15c <f_open+0x1d4>
 800d14c:	7fbb      	ldrb	r3, [r7, #30]
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	2b00      	cmp	r3, #0
 800d154:	d002      	beq.n	800d15c <f_open+0x1d4>
						res = FR_DENIED;
 800d156:	2307      	movs	r3, #7
 800d158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d15c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d160:	2b00      	cmp	r3, #0
 800d162:	d128      	bne.n	800d1b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	f003 0308 	and.w	r3, r3, #8
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d174:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d17e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	f023 0301 	bic.w	r3, r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	bf14      	ite	ne
 800d18e:	2301      	movne	r3, #1
 800d190:	2300      	moveq	r3, #0
 800d192:	b2db      	uxtb	r3, r3
 800d194:	461a      	mov	r2, r3
 800d196:	f107 0318 	add.w	r3, r7, #24
 800d19a:	4611      	mov	r1, r2
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fd feef 	bl	800af80 <inc_lock>
 800d1a2:	4602      	mov	r2, r0
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <f_open+0x22e>
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d1b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f040 80a3 	bne.w	800d306 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe fd94 	bl	800bcf4 <ld_clust>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d4:	331c      	adds	r3, #28
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fd fd6c 	bl	800acb4 <ld_dword>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	88da      	ldrh	r2, [r3, #6]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	79fa      	ldrb	r2, [r7, #7]
 800d1fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3330      	adds	r3, #48	; 0x30
 800d212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d216:	2100      	movs	r1, #0
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fd fdd6 	bl	800adca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	f003 0320 	and.w	r3, r3, #32
 800d224:	2b00      	cmp	r3, #0
 800d226:	d06e      	beq.n	800d306 <f_open+0x37e>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d06a      	beq.n	800d306 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	68da      	ldr	r2, [r3, #12]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	895b      	ldrh	r3, [r3, #10]
 800d23c:	461a      	mov	r2, r3
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	899b      	ldrh	r3, [r3, #12]
 800d242:	fb02 f303 	mul.w	r3, r2, r3
 800d246:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d254:	e016      	b.n	800d284 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe f87f 	bl	800b35e <get_fat>
 800d260:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d264:	2b01      	cmp	r3, #1
 800d266:	d802      	bhi.n	800d26e <f_open+0x2e6>
 800d268:	2302      	movs	r3, #2
 800d26a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d26e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d274:	d102      	bne.n	800d27c <f_open+0x2f4>
 800d276:	2301      	movs	r3, #1
 800d278:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d27c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d27e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d280:	1ad3      	subs	r3, r2, r3
 800d282:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d284:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d103      	bne.n	800d294 <f_open+0x30c>
 800d28c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d290:	429a      	cmp	r2, r3
 800d292:	d8e0      	bhi.n	800d256 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d298:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d29a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d131      	bne.n	800d306 <f_open+0x37e>
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	899b      	ldrh	r3, [r3, #12]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800d2ae:	fb01 f202 	mul.w	r2, r1, r2
 800d2b2:	1a9b      	subs	r3, r3, r2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d026      	beq.n	800d306 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fe f82f 	bl	800b320 <clust2sect>
 800d2c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800d2c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d103      	bne.n	800d2d2 <f_open+0x34a>
						res = FR_INT_ERR;
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d2d0:	e019      	b.n	800d306 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	899b      	ldrh	r3, [r3, #12]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2da:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	7858      	ldrb	r0, [r3, #1]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6a1a      	ldr	r2, [r3, #32]
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f7fd fc67 	bl	800abc8 <disk_read>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d002      	beq.n	800d306 <f_open+0x37e>
 800d300:	2301      	movs	r3, #1
 800d302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d306:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d002      	beq.n	800d314 <f_open+0x38c>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d314:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3768      	adds	r7, #104	; 0x68
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08c      	sub	sp, #48	; 0x30
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2200      	movs	r2, #0
 800d336:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f107 0210 	add.w	r2, r7, #16
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff fda5 	bl	800ce90 <validate>
 800d346:	4603      	mov	r3, r0
 800d348:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d34c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d350:	2b00      	cmp	r3, #0
 800d352:	d107      	bne.n	800d364 <f_write+0x44>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	7d5b      	ldrb	r3, [r3, #21]
 800d358:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d35c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d360:	2b00      	cmp	r3, #0
 800d362:	d002      	beq.n	800d36a <f_write+0x4a>
 800d364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d368:	e16a      	b.n	800d640 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	7d1b      	ldrb	r3, [r3, #20]
 800d36e:	f003 0302 	and.w	r3, r3, #2
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <f_write+0x5a>
 800d376:	2307      	movs	r3, #7
 800d378:	e162      	b.n	800d640 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	699a      	ldr	r2, [r3, #24]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	441a      	add	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	429a      	cmp	r2, r3
 800d388:	f080 814c 	bcs.w	800d624 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	699b      	ldr	r3, [r3, #24]
 800d390:	43db      	mvns	r3, r3
 800d392:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d394:	e146      	b.n	800d624 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	699b      	ldr	r3, [r3, #24]
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	8992      	ldrh	r2, [r2, #12]
 800d39e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3a2:	fb01 f202 	mul.w	r2, r1, r2
 800d3a6:	1a9b      	subs	r3, r3, r2
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f040 80f1 	bne.w	800d590 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	8992      	ldrh	r2, [r2, #12]
 800d3b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	8952      	ldrh	r2, [r2, #10]
 800d3be:	3a01      	subs	r2, #1
 800d3c0:	4013      	ands	r3, r2
 800d3c2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d143      	bne.n	800d452 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	699b      	ldr	r3, [r3, #24]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10c      	bne.n	800d3ec <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d11a      	bne.n	800d414 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7fe fa10 	bl	800b808 <create_chain>
 800d3e8:	62b8      	str	r0, [r7, #40]	; 0x28
 800d3ea:	e013      	b.n	800d414 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d007      	beq.n	800d404 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	699b      	ldr	r3, [r3, #24]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7fe fa9c 	bl	800b938 <clmt_clust>
 800d400:	62b8      	str	r0, [r7, #40]	; 0x28
 800d402:	e007      	b.n	800d414 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fe f9fb 	bl	800b808 <create_chain>
 800d412:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 8109 	beq.w	800d62e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d104      	bne.n	800d42c <f_write+0x10c>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2202      	movs	r2, #2
 800d426:	755a      	strb	r2, [r3, #21]
 800d428:	2302      	movs	r3, #2
 800d42a:	e109      	b.n	800d640 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d432:	d104      	bne.n	800d43e <f_write+0x11e>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2201      	movs	r2, #1
 800d438:	755a      	strb	r2, [r3, #21]
 800d43a:	2301      	movs	r3, #1
 800d43c:	e100      	b.n	800d640 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d442:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d102      	bne.n	800d452 <f_write+0x132>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d450:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	7d1b      	ldrb	r3, [r3, #20]
 800d456:	b25b      	sxtb	r3, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	da18      	bge.n	800d48e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	7858      	ldrb	r0, [r3, #1]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6a1a      	ldr	r2, [r3, #32]
 800d46a:	2301      	movs	r3, #1
 800d46c:	f7fd fbcc 	bl	800ac08 <disk_write>
 800d470:	4603      	mov	r3, r0
 800d472:	2b00      	cmp	r3, #0
 800d474:	d004      	beq.n	800d480 <f_write+0x160>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2201      	movs	r2, #1
 800d47a:	755a      	strb	r2, [r3, #21]
 800d47c:	2301      	movs	r3, #1
 800d47e:	e0df      	b.n	800d640 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	7d1b      	ldrb	r3, [r3, #20]
 800d484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d488:	b2da      	uxtb	r2, r3
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	4619      	mov	r1, r3
 800d496:	4610      	mov	r0, r2
 800d498:	f7fd ff42 	bl	800b320 <clust2sect>
 800d49c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d104      	bne.n	800d4ae <f_write+0x18e>
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	755a      	strb	r2, [r3, #21]
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	e0c8      	b.n	800d640 <f_write+0x320>
			sect += csect;
 800d4ae:	697a      	ldr	r2, [r7, #20]
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	899b      	ldrh	r3, [r3, #12]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4c2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d043      	beq.n	800d552 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d4ca:	69ba      	ldr	r2, [r7, #24]
 800d4cc:	6a3b      	ldr	r3, [r7, #32]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	693a      	ldr	r2, [r7, #16]
 800d4d2:	8952      	ldrh	r2, [r2, #10]
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d905      	bls.n	800d4e4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	895b      	ldrh	r3, [r3, #10]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	1ad3      	subs	r3, r2, r3
 800d4e2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	7858      	ldrb	r0, [r3, #1]
 800d4e8:	6a3b      	ldr	r3, [r7, #32]
 800d4ea:	697a      	ldr	r2, [r7, #20]
 800d4ec:	69f9      	ldr	r1, [r7, #28]
 800d4ee:	f7fd fb8b 	bl	800ac08 <disk_write>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <f_write+0x1e2>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	755a      	strb	r2, [r3, #21]
 800d4fe:	2301      	movs	r3, #1
 800d500:	e09e      	b.n	800d640 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	6a1a      	ldr	r2, [r3, #32]
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	6a3a      	ldr	r2, [r7, #32]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d918      	bls.n	800d542 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6a1a      	ldr	r2, [r3, #32]
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	693a      	ldr	r2, [r7, #16]
 800d520:	8992      	ldrh	r2, [r2, #12]
 800d522:	fb02 f303 	mul.w	r3, r2, r3
 800d526:	69fa      	ldr	r2, [r7, #28]
 800d528:	18d1      	adds	r1, r2, r3
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	899b      	ldrh	r3, [r3, #12]
 800d52e:	461a      	mov	r2, r3
 800d530:	f7fd fc2a 	bl	800ad88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	7d1b      	ldrb	r3, [r3, #20]
 800d538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	899b      	ldrh	r3, [r3, #12]
 800d546:	461a      	mov	r2, r3
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	fb02 f303 	mul.w	r3, r2, r3
 800d54e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d550:	e04b      	b.n	800d5ea <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6a1b      	ldr	r3, [r3, #32]
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d016      	beq.n	800d58a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	699a      	ldr	r2, [r3, #24]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d564:	429a      	cmp	r2, r3
 800d566:	d210      	bcs.n	800d58a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	7858      	ldrb	r0, [r3, #1]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d572:	2301      	movs	r3, #1
 800d574:	697a      	ldr	r2, [r7, #20]
 800d576:	f7fd fb27 	bl	800abc8 <disk_read>
 800d57a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d004      	beq.n	800d58a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2201      	movs	r2, #1
 800d584:	755a      	strb	r2, [r3, #21]
 800d586:	2301      	movs	r3, #1
 800d588:	e05a      	b.n	800d640 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	697a      	ldr	r2, [r7, #20]
 800d58e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	899b      	ldrh	r3, [r3, #12]
 800d594:	4618      	mov	r0, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	699b      	ldr	r3, [r3, #24]
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	8992      	ldrh	r2, [r2, #12]
 800d59e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5a2:	fb01 f202 	mul.w	r2, r1, r2
 800d5a6:	1a9b      	subs	r3, r3, r2
 800d5a8:	1ac3      	subs	r3, r0, r3
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d5ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d901      	bls.n	800d5b8 <f_write+0x298>
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	699b      	ldr	r3, [r3, #24]
 800d5c2:	693a      	ldr	r2, [r7, #16]
 800d5c4:	8992      	ldrh	r2, [r2, #12]
 800d5c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d5ca:	fb00 f202 	mul.w	r2, r0, r2
 800d5ce:	1a9b      	subs	r3, r3, r2
 800d5d0:	440b      	add	r3, r1
 800d5d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5d4:	69f9      	ldr	r1, [r7, #28]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fd fbd6 	bl	800ad88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	7d1b      	ldrb	r3, [r3, #20]
 800d5e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ee:	4413      	add	r3, r2
 800d5f0:	61fb      	str	r3, [r7, #28]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	699a      	ldr	r2, [r3, #24]
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f8:	441a      	add	r2, r3
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	619a      	str	r2, [r3, #24]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	68da      	ldr	r2, [r3, #12]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	699b      	ldr	r3, [r3, #24]
 800d606:	429a      	cmp	r2, r3
 800d608:	bf38      	it	cc
 800d60a:	461a      	movcc	r2, r3
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	60da      	str	r2, [r3, #12]
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d616:	441a      	add	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	601a      	str	r2, [r3, #0]
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f47f aeb5 	bne.w	800d396 <f_write+0x76>
 800d62c:	e000      	b.n	800d630 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d62e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	7d1b      	ldrb	r3, [r3, #20]
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3730      	adds	r7, #48	; 0x30
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f107 0208 	add.w	r2, r7, #8
 800d656:	4611      	mov	r1, r2
 800d658:	4618      	mov	r0, r3
 800d65a:	f7ff fc19 	bl	800ce90 <validate>
 800d65e:	4603      	mov	r3, r0
 800d660:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d168      	bne.n	800d73a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7d1b      	ldrb	r3, [r3, #20]
 800d66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d670:	2b00      	cmp	r3, #0
 800d672:	d062      	beq.n	800d73a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	7d1b      	ldrb	r3, [r3, #20]
 800d678:	b25b      	sxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	da15      	bge.n	800d6aa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	7858      	ldrb	r0, [r3, #1]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1a      	ldr	r2, [r3, #32]
 800d68c:	2301      	movs	r3, #1
 800d68e:	f7fd fabb 	bl	800ac08 <disk_write>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <f_sync+0x54>
 800d698:	2301      	movs	r3, #1
 800d69a:	e04f      	b.n	800d73c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	7d1b      	ldrb	r3, [r3, #20]
 800d6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d6aa:	f7fd f9eb 	bl	800aa84 <get_fattime>
 800d6ae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d6b0:	68ba      	ldr	r2, [r7, #8]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7fd fd93 	bl	800b1e4 <move_window>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d6c2:	7dfb      	ldrb	r3, [r7, #23]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d138      	bne.n	800d73a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6cc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	330b      	adds	r3, #11
 800d6d2:	781a      	ldrb	r2, [r3, #0]
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	330b      	adds	r3, #11
 800d6d8:	f042 0220 	orr.w	r2, r2, #32
 800d6dc:	b2d2      	uxtb	r2, r2
 800d6de:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	68f9      	ldr	r1, [r7, #12]
 800d6ec:	f7fe fb21 	bl	800bd32 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f103 021c 	add.w	r2, r3, #28
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	4610      	mov	r0, r2
 800d6fe:	f7fd fb17 	bl	800ad30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	3316      	adds	r3, #22
 800d706:	6939      	ldr	r1, [r7, #16]
 800d708:	4618      	mov	r0, r3
 800d70a:	f7fd fb11 	bl	800ad30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	3312      	adds	r3, #18
 800d712:	2100      	movs	r1, #0
 800d714:	4618      	mov	r0, r3
 800d716:	f7fd faf0 	bl	800acfa <st_word>
					fs->wflag = 1;
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	2201      	movs	r2, #1
 800d71e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	4618      	mov	r0, r3
 800d724:	f7fd fd8c 	bl	800b240 <sync_fs>
 800d728:	4603      	mov	r3, r0
 800d72a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	7d1b      	ldrb	r3, [r3, #20]
 800d730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d734:	b2da      	uxtb	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7ff ff7b 	bl	800d648 <f_sync>
 800d752:	4603      	mov	r3, r0
 800d754:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d756:	7bfb      	ldrb	r3, [r7, #15]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d118      	bne.n	800d78e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f107 0208 	add.w	r2, r7, #8
 800d762:	4611      	mov	r1, r2
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fb93 	bl	800ce90 <validate>
 800d76a:	4603      	mov	r3, r0
 800d76c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10c      	bne.n	800d78e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fd fc8f 	bl	800b09c <dec_lock>
 800d77e:	4603      	mov	r3, r0
 800d780:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d782:	7bfb      	ldrb	r3, [r7, #15]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d7a4:	78fb      	ldrb	r3, [r7, #3]
 800d7a6:	2b0a      	cmp	r3, #10
 800d7a8:	d103      	bne.n	800d7b2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d7aa:	210d      	movs	r1, #13
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff fff3 	bl	800d798 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	db25      	blt.n	800d80a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	1c5a      	adds	r2, r3, #1
 800d7c2:	60fa      	str	r2, [r7, #12]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	78fa      	ldrb	r2, [r7, #3]
 800d7ca:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b3c      	cmp	r3, #60	; 0x3c
 800d7d0:	dd12      	ble.n	800d7f8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f103 010c 	add.w	r1, r3, #12
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	f107 0308 	add.w	r3, r7, #8
 800d7e2:	f7ff fd9d 	bl	800d320 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d7e6:	68ba      	ldr	r2, [r7, #8]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d101      	bne.n	800d7f2 <putc_bfd+0x5a>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e001      	b.n	800d7f6 <putc_bfd+0x5e>
 800d7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68fa      	ldr	r2, [r7, #12]
 800d7fc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	609a      	str	r2, [r3, #8]
 800d808:	e000      	b.n	800d80c <putc_bfd+0x74>
	if (i < 0) return;
 800d80a:	bf00      	nop
}
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}

0800d812 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d812:	b580      	push	{r7, lr}
 800d814:	b084      	sub	sp, #16
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	db16      	blt.n	800d850 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f103 010c 	add.w	r1, r3, #12
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	461a      	mov	r2, r3
 800d832:	f107 030c 	add.w	r3, r7, #12
 800d836:	f7ff fd73 	bl	800d320 <f_write>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d107      	bne.n	800d850 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	4293      	cmp	r3, r2
 800d848:	d102      	bne.n	800d850 <putc_flush+0x3e>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	689b      	ldr	r3, [r3, #8]
 800d84e:	e001      	b.n	800d854 <putc_flush+0x42>
	return EOF;
 800d850:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d854:	4618      	mov	r0, r3
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	683a      	ldr	r2, [r7, #0]
 800d86a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2200      	movs	r2, #0
 800d870:	605a      	str	r2, [r3, #4]
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	609a      	str	r2, [r3, #8]
}
 800d87a:	bf00      	nop
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b096      	sub	sp, #88	; 0x58
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff ffe0 	bl	800d85c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d89c:	e009      	b.n	800d8b2 <f_puts+0x2c>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	1c5a      	adds	r2, r3, #1
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	781a      	ldrb	r2, [r3, #0]
 800d8a6:	f107 030c 	add.w	r3, r7, #12
 800d8aa:	4611      	mov	r1, r2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff ff73 	bl	800d798 <putc_bfd>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1f1      	bne.n	800d89e <f_puts+0x18>
	return putc_flush(&pb);
 800d8ba:	f107 030c 	add.w	r3, r7, #12
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff ffa7 	bl	800d812 <putc_flush>
 800d8c4:	4603      	mov	r3, r0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3758      	adds	r7, #88	; 0x58
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	4613      	mov	r3, r2
 800d8dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d8e6:	4b1f      	ldr	r3, [pc, #124]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d8e8:	7a5b      	ldrb	r3, [r3, #9]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d131      	bne.n	800d954 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8f0:	4b1c      	ldr	r3, [pc, #112]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d8f2:	7a5b      	ldrb	r3, [r3, #9]
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	4b1a      	ldr	r3, [pc, #104]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d8fe:	4b19      	ldr	r3, [pc, #100]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d900:	7a5b      	ldrb	r3, [r3, #9]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	4a17      	ldr	r2, [pc, #92]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	4413      	add	r3, r2
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d90e:	4b15      	ldr	r3, [pc, #84]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d910:	7a5b      	ldrb	r3, [r3, #9]
 800d912:	b2db      	uxtb	r3, r3
 800d914:	461a      	mov	r2, r3
 800d916:	4b13      	ldr	r3, [pc, #76]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d918:	4413      	add	r3, r2
 800d91a:	79fa      	ldrb	r2, [r7, #7]
 800d91c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d91e:	4b11      	ldr	r3, [pc, #68]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d920:	7a5b      	ldrb	r3, [r3, #9]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	b2d1      	uxtb	r1, r2
 800d928:	4a0e      	ldr	r2, [pc, #56]	; (800d964 <FATFS_LinkDriverEx+0x94>)
 800d92a:	7251      	strb	r1, [r2, #9]
 800d92c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d92e:	7dbb      	ldrb	r3, [r7, #22]
 800d930:	3330      	adds	r3, #48	; 0x30
 800d932:	b2da      	uxtb	r2, r3
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	3301      	adds	r3, #1
 800d93c:	223a      	movs	r2, #58	; 0x3a
 800d93e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	3302      	adds	r3, #2
 800d944:	222f      	movs	r2, #47	; 0x2f
 800d946:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	3303      	adds	r3, #3
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d954:	7dfb      	ldrb	r3, [r7, #23]
}
 800d956:	4618      	mov	r0, r3
 800d958:	371c      	adds	r7, #28
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	20002948 	.word	0x20002948

0800d968 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d972:	2200      	movs	r2, #0
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f7ff ffaa 	bl	800d8d0 <FATFS_LinkDriverEx>
 800d97c:	4603      	mov	r3, r0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
	...

0800d988 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	4603      	mov	r3, r0
 800d990:	6039      	str	r1, [r7, #0]
 800d992:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d994:	88fb      	ldrh	r3, [r7, #6]
 800d996:	2b7f      	cmp	r3, #127	; 0x7f
 800d998:	d802      	bhi.n	800d9a0 <ff_convert+0x18>
		c = chr;
 800d99a:	88fb      	ldrh	r3, [r7, #6]
 800d99c:	81fb      	strh	r3, [r7, #14]
 800d99e:	e025      	b.n	800d9ec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00b      	beq.n	800d9be <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d9a6:	88fb      	ldrh	r3, [r7, #6]
 800d9a8:	2bff      	cmp	r3, #255	; 0xff
 800d9aa:	d805      	bhi.n	800d9b8 <ff_convert+0x30>
 800d9ac:	88fb      	ldrh	r3, [r7, #6]
 800d9ae:	3b80      	subs	r3, #128	; 0x80
 800d9b0:	4a12      	ldr	r2, [pc, #72]	; (800d9fc <ff_convert+0x74>)
 800d9b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9b6:	e000      	b.n	800d9ba <ff_convert+0x32>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	81fb      	strh	r3, [r7, #14]
 800d9bc:	e016      	b.n	800d9ec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d9be:	2300      	movs	r3, #0
 800d9c0:	81fb      	strh	r3, [r7, #14]
 800d9c2:	e009      	b.n	800d9d8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d9c4:	89fb      	ldrh	r3, [r7, #14]
 800d9c6:	4a0d      	ldr	r2, [pc, #52]	; (800d9fc <ff_convert+0x74>)
 800d9c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9cc:	88fa      	ldrh	r2, [r7, #6]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d006      	beq.n	800d9e0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d9d2:	89fb      	ldrh	r3, [r7, #14]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	81fb      	strh	r3, [r7, #14]
 800d9d8:	89fb      	ldrh	r3, [r7, #14]
 800d9da:	2b7f      	cmp	r3, #127	; 0x7f
 800d9dc:	d9f2      	bls.n	800d9c4 <ff_convert+0x3c>
 800d9de:	e000      	b.n	800d9e2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d9e0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d9e2:	89fb      	ldrh	r3, [r7, #14]
 800d9e4:	3380      	adds	r3, #128	; 0x80
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d9ec:	89fb      	ldrh	r3, [r7, #14]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3714      	adds	r7, #20
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	08010990 	.word	0x08010990

0800da00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	4603      	mov	r3, r0
 800da08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800da0a:	88fb      	ldrh	r3, [r7, #6]
 800da0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da10:	d201      	bcs.n	800da16 <ff_wtoupper+0x16>
 800da12:	4b3e      	ldr	r3, [pc, #248]	; (800db0c <ff_wtoupper+0x10c>)
 800da14:	e000      	b.n	800da18 <ff_wtoupper+0x18>
 800da16:	4b3e      	ldr	r3, [pc, #248]	; (800db10 <ff_wtoupper+0x110>)
 800da18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	1c9a      	adds	r2, r3, #2
 800da1e:	617a      	str	r2, [r7, #20]
 800da20:	881b      	ldrh	r3, [r3, #0]
 800da22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da24:	8a7b      	ldrh	r3, [r7, #18]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d068      	beq.n	800dafc <ff_wtoupper+0xfc>
 800da2a:	88fa      	ldrh	r2, [r7, #6]
 800da2c:	8a7b      	ldrh	r3, [r7, #18]
 800da2e:	429a      	cmp	r2, r3
 800da30:	d364      	bcc.n	800dafc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	1c9a      	adds	r2, r3, #2
 800da36:	617a      	str	r2, [r7, #20]
 800da38:	881b      	ldrh	r3, [r3, #0]
 800da3a:	823b      	strh	r3, [r7, #16]
 800da3c:	8a3b      	ldrh	r3, [r7, #16]
 800da3e:	0a1b      	lsrs	r3, r3, #8
 800da40:	81fb      	strh	r3, [r7, #14]
 800da42:	8a3b      	ldrh	r3, [r7, #16]
 800da44:	b2db      	uxtb	r3, r3
 800da46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800da48:	88fa      	ldrh	r2, [r7, #6]
 800da4a:	8a79      	ldrh	r1, [r7, #18]
 800da4c:	8a3b      	ldrh	r3, [r7, #16]
 800da4e:	440b      	add	r3, r1
 800da50:	429a      	cmp	r2, r3
 800da52:	da49      	bge.n	800dae8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800da54:	89fb      	ldrh	r3, [r7, #14]
 800da56:	2b08      	cmp	r3, #8
 800da58:	d84f      	bhi.n	800dafa <ff_wtoupper+0xfa>
 800da5a:	a201      	add	r2, pc, #4	; (adr r2, 800da60 <ff_wtoupper+0x60>)
 800da5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da60:	0800da85 	.word	0x0800da85
 800da64:	0800da97 	.word	0x0800da97
 800da68:	0800daad 	.word	0x0800daad
 800da6c:	0800dab5 	.word	0x0800dab5
 800da70:	0800dabd 	.word	0x0800dabd
 800da74:	0800dac5 	.word	0x0800dac5
 800da78:	0800dacd 	.word	0x0800dacd
 800da7c:	0800dad5 	.word	0x0800dad5
 800da80:	0800dadd 	.word	0x0800dadd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800da84:	88fa      	ldrh	r2, [r7, #6]
 800da86:	8a7b      	ldrh	r3, [r7, #18]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	697a      	ldr	r2, [r7, #20]
 800da8e:	4413      	add	r3, r2
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	80fb      	strh	r3, [r7, #6]
 800da94:	e027      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800da96:	88fa      	ldrh	r2, [r7, #6]
 800da98:	8a7b      	ldrh	r3, [r7, #18]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	88fa      	ldrh	r2, [r7, #6]
 800daa6:	1ad3      	subs	r3, r2, r3
 800daa8:	80fb      	strh	r3, [r7, #6]
 800daaa:	e01c      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800daac:	88fb      	ldrh	r3, [r7, #6]
 800daae:	3b10      	subs	r3, #16
 800dab0:	80fb      	strh	r3, [r7, #6]
 800dab2:	e018      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dab4:	88fb      	ldrh	r3, [r7, #6]
 800dab6:	3b20      	subs	r3, #32
 800dab8:	80fb      	strh	r3, [r7, #6]
 800daba:	e014      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dabc:	88fb      	ldrh	r3, [r7, #6]
 800dabe:	3b30      	subs	r3, #48	; 0x30
 800dac0:	80fb      	strh	r3, [r7, #6]
 800dac2:	e010      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dac4:	88fb      	ldrh	r3, [r7, #6]
 800dac6:	3b1a      	subs	r3, #26
 800dac8:	80fb      	strh	r3, [r7, #6]
 800daca:	e00c      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dacc:	88fb      	ldrh	r3, [r7, #6]
 800dace:	3308      	adds	r3, #8
 800dad0:	80fb      	strh	r3, [r7, #6]
 800dad2:	e008      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dad4:	88fb      	ldrh	r3, [r7, #6]
 800dad6:	3b50      	subs	r3, #80	; 0x50
 800dad8:	80fb      	strh	r3, [r7, #6]
 800dada:	e004      	b.n	800dae6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dadc:	88fb      	ldrh	r3, [r7, #6]
 800dade:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dae2:	80fb      	strh	r3, [r7, #6]
 800dae4:	bf00      	nop
			}
			break;
 800dae6:	e008      	b.n	800dafa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dae8:	89fb      	ldrh	r3, [r7, #14]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d195      	bne.n	800da1a <ff_wtoupper+0x1a>
 800daee:	8a3b      	ldrh	r3, [r7, #16]
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	4413      	add	r3, r2
 800daf6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800daf8:	e78f      	b.n	800da1a <ff_wtoupper+0x1a>
			break;
 800dafa:	bf00      	nop
	}

	return chr;
 800dafc:	88fb      	ldrh	r3, [r7, #6]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	08010a90 	.word	0x08010a90
 800db10:	08010c84 	.word	0x08010c84

0800db14 <trunc>:
 800db14:	ec51 0b10 	vmov	r0, r1, d0
 800db18:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db1c:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800db20:	2b13      	cmp	r3, #19
 800db22:	b5d0      	push	{r4, r6, r7, lr}
 800db24:	460c      	mov	r4, r1
 800db26:	dc10      	bgt.n	800db4a <trunc+0x36>
 800db28:	2b00      	cmp	r3, #0
 800db2a:	bfa5      	ittet	ge
 800db2c:	4a11      	ldrge	r2, [pc, #68]	; (800db74 <trunc+0x60>)
 800db2e:	fa42 f303 	asrge.w	r3, r2, r3
 800db32:	2100      	movlt	r1, #0
 800db34:	2100      	movge	r1, #0
 800db36:	bfb9      	ittee	lt
 800db38:	2000      	movlt	r0, #0
 800db3a:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800db3e:	2000      	movge	r0, #0
 800db40:	ea24 0103 	bicge.w	r1, r4, r3
 800db44:	ec41 0b10 	vmov	d0, r0, r1
 800db48:	bdd0      	pop	{r4, r6, r7, pc}
 800db4a:	2b33      	cmp	r3, #51	; 0x33
 800db4c:	dd08      	ble.n	800db60 <trunc+0x4c>
 800db4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db52:	d1f7      	bne.n	800db44 <trunc+0x30>
 800db54:	ee10 2a10 	vmov	r2, s0
 800db58:	460b      	mov	r3, r1
 800db5a:	f7f2 fbaf 	bl	80002bc <__adddf3>
 800db5e:	e7f1      	b.n	800db44 <trunc+0x30>
 800db60:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800db64:	f04f 33ff 	mov.w	r3, #4294967295
 800db68:	fa23 f202 	lsr.w	r2, r3, r2
 800db6c:	ea20 0602 	bic.w	r6, r0, r2
 800db70:	4630      	mov	r0, r6
 800db72:	e7e7      	b.n	800db44 <trunc+0x30>
 800db74:	000fffff 	.word	0x000fffff

0800db78 <pow>:
 800db78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db7a:	ed2d 8b02 	vpush	{d8}
 800db7e:	eeb0 8a40 	vmov.f32	s16, s0
 800db82:	eef0 8a60 	vmov.f32	s17, s1
 800db86:	ec55 4b11 	vmov	r4, r5, d1
 800db8a:	f000 f8b1 	bl	800dcf0 <__ieee754_pow>
 800db8e:	4622      	mov	r2, r4
 800db90:	462b      	mov	r3, r5
 800db92:	4620      	mov	r0, r4
 800db94:	4629      	mov	r1, r5
 800db96:	ec57 6b10 	vmov	r6, r7, d0
 800db9a:	f7f2 ffdf 	bl	8000b5c <__aeabi_dcmpun>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d13b      	bne.n	800dc1a <pow+0xa2>
 800dba2:	ec51 0b18 	vmov	r0, r1, d8
 800dba6:	2200      	movs	r2, #0
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f7f2 ffa5 	bl	8000af8 <__aeabi_dcmpeq>
 800dbae:	b1b8      	cbz	r0, 800dbe0 <pow+0x68>
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	4629      	mov	r1, r5
 800dbb8:	f7f2 ff9e 	bl	8000af8 <__aeabi_dcmpeq>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d146      	bne.n	800dc4e <pow+0xd6>
 800dbc0:	ec45 4b10 	vmov	d0, r4, r5
 800dbc4:	f001 f836 	bl	800ec34 <finite>
 800dbc8:	b338      	cbz	r0, 800dc1a <pow+0xa2>
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2300      	movs	r3, #0
 800dbce:	4620      	mov	r0, r4
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f2 ff9b 	bl	8000b0c <__aeabi_dcmplt>
 800dbd6:	b300      	cbz	r0, 800dc1a <pow+0xa2>
 800dbd8:	f001 f9a2 	bl	800ef20 <__errno>
 800dbdc:	2322      	movs	r3, #34	; 0x22
 800dbde:	e01b      	b.n	800dc18 <pow+0xa0>
 800dbe0:	ec47 6b10 	vmov	d0, r6, r7
 800dbe4:	f001 f826 	bl	800ec34 <finite>
 800dbe8:	b9e0      	cbnz	r0, 800dc24 <pow+0xac>
 800dbea:	eeb0 0a48 	vmov.f32	s0, s16
 800dbee:	eef0 0a68 	vmov.f32	s1, s17
 800dbf2:	f001 f81f 	bl	800ec34 <finite>
 800dbf6:	b1a8      	cbz	r0, 800dc24 <pow+0xac>
 800dbf8:	ec45 4b10 	vmov	d0, r4, r5
 800dbfc:	f001 f81a 	bl	800ec34 <finite>
 800dc00:	b180      	cbz	r0, 800dc24 <pow+0xac>
 800dc02:	4632      	mov	r2, r6
 800dc04:	463b      	mov	r3, r7
 800dc06:	4630      	mov	r0, r6
 800dc08:	4639      	mov	r1, r7
 800dc0a:	f7f2 ffa7 	bl	8000b5c <__aeabi_dcmpun>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d0e2      	beq.n	800dbd8 <pow+0x60>
 800dc12:	f001 f985 	bl	800ef20 <__errno>
 800dc16:	2321      	movs	r3, #33	; 0x21
 800dc18:	6003      	str	r3, [r0, #0]
 800dc1a:	ecbd 8b02 	vpop	{d8}
 800dc1e:	ec47 6b10 	vmov	d0, r6, r7
 800dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 ff64 	bl	8000af8 <__aeabi_dcmpeq>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d0f2      	beq.n	800dc1a <pow+0xa2>
 800dc34:	eeb0 0a48 	vmov.f32	s0, s16
 800dc38:	eef0 0a68 	vmov.f32	s1, s17
 800dc3c:	f000 fffa 	bl	800ec34 <finite>
 800dc40:	2800      	cmp	r0, #0
 800dc42:	d0ea      	beq.n	800dc1a <pow+0xa2>
 800dc44:	ec45 4b10 	vmov	d0, r4, r5
 800dc48:	f000 fff4 	bl	800ec34 <finite>
 800dc4c:	e7c3      	b.n	800dbd6 <pow+0x5e>
 800dc4e:	4f01      	ldr	r7, [pc, #4]	; (800dc54 <pow+0xdc>)
 800dc50:	2600      	movs	r6, #0
 800dc52:	e7e2      	b.n	800dc1a <pow+0xa2>
 800dc54:	3ff00000 	.word	0x3ff00000

0800dc58 <asinf>:
 800dc58:	b508      	push	{r3, lr}
 800dc5a:	ed2d 8b02 	vpush	{d8}
 800dc5e:	eeb0 8a40 	vmov.f32	s16, s0
 800dc62:	f000 fe25 	bl	800e8b0 <__ieee754_asinf>
 800dc66:	eeb4 8a48 	vcmp.f32	s16, s16
 800dc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6e:	eef0 8a40 	vmov.f32	s17, s0
 800dc72:	d615      	bvs.n	800dca0 <asinf+0x48>
 800dc74:	eeb0 0a48 	vmov.f32	s0, s16
 800dc78:	f001 f944 	bl	800ef04 <fabsf>
 800dc7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dc80:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc88:	dd0a      	ble.n	800dca0 <asinf+0x48>
 800dc8a:	f001 f949 	bl	800ef20 <__errno>
 800dc8e:	ecbd 8b02 	vpop	{d8}
 800dc92:	2321      	movs	r3, #33	; 0x21
 800dc94:	6003      	str	r3, [r0, #0]
 800dc96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dc9a:	4804      	ldr	r0, [pc, #16]	; (800dcac <asinf+0x54>)
 800dc9c:	f001 b93a 	b.w	800ef14 <nanf>
 800dca0:	eeb0 0a68 	vmov.f32	s0, s17
 800dca4:	ecbd 8b02 	vpop	{d8}
 800dca8:	bd08      	pop	{r3, pc}
 800dcaa:	bf00      	nop
 800dcac:	08010e11 	.word	0x08010e11

0800dcb0 <atan2f>:
 800dcb0:	f000 bee4 	b.w	800ea7c <__ieee754_atan2f>

0800dcb4 <sqrtf>:
 800dcb4:	b508      	push	{r3, lr}
 800dcb6:	ed2d 8b02 	vpush	{d8}
 800dcba:	eeb0 8a40 	vmov.f32	s16, s0
 800dcbe:	f000 ff7d 	bl	800ebbc <__ieee754_sqrtf>
 800dcc2:	eeb4 8a48 	vcmp.f32	s16, s16
 800dcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcca:	d60c      	bvs.n	800dce6 <sqrtf+0x32>
 800dccc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800dcec <sqrtf+0x38>
 800dcd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd8:	d505      	bpl.n	800dce6 <sqrtf+0x32>
 800dcda:	f001 f921 	bl	800ef20 <__errno>
 800dcde:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800dce2:	2321      	movs	r3, #33	; 0x21
 800dce4:	6003      	str	r3, [r0, #0]
 800dce6:	ecbd 8b02 	vpop	{d8}
 800dcea:	bd08      	pop	{r3, pc}
 800dcec:	00000000 	.word	0x00000000

0800dcf0 <__ieee754_pow>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	ed2d 8b06 	vpush	{d8-d10}
 800dcf8:	b089      	sub	sp, #36	; 0x24
 800dcfa:	ed8d 1b00 	vstr	d1, [sp]
 800dcfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800dd02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800dd06:	ea58 0102 	orrs.w	r1, r8, r2
 800dd0a:	ec57 6b10 	vmov	r6, r7, d0
 800dd0e:	d115      	bne.n	800dd3c <__ieee754_pow+0x4c>
 800dd10:	19b3      	adds	r3, r6, r6
 800dd12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800dd16:	4152      	adcs	r2, r2
 800dd18:	4299      	cmp	r1, r3
 800dd1a:	4b89      	ldr	r3, [pc, #548]	; (800df40 <__ieee754_pow+0x250>)
 800dd1c:	4193      	sbcs	r3, r2
 800dd1e:	f080 84d2 	bcs.w	800e6c6 <__ieee754_pow+0x9d6>
 800dd22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd26:	4630      	mov	r0, r6
 800dd28:	4639      	mov	r1, r7
 800dd2a:	f7f2 fac7 	bl	80002bc <__adddf3>
 800dd2e:	ec41 0b10 	vmov	d0, r0, r1
 800dd32:	b009      	add	sp, #36	; 0x24
 800dd34:	ecbd 8b06 	vpop	{d8-d10}
 800dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3c:	4b81      	ldr	r3, [pc, #516]	; (800df44 <__ieee754_pow+0x254>)
 800dd3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800dd42:	429c      	cmp	r4, r3
 800dd44:	ee10 aa10 	vmov	sl, s0
 800dd48:	463d      	mov	r5, r7
 800dd4a:	dc06      	bgt.n	800dd5a <__ieee754_pow+0x6a>
 800dd4c:	d101      	bne.n	800dd52 <__ieee754_pow+0x62>
 800dd4e:	2e00      	cmp	r6, #0
 800dd50:	d1e7      	bne.n	800dd22 <__ieee754_pow+0x32>
 800dd52:	4598      	cmp	r8, r3
 800dd54:	dc01      	bgt.n	800dd5a <__ieee754_pow+0x6a>
 800dd56:	d10f      	bne.n	800dd78 <__ieee754_pow+0x88>
 800dd58:	b172      	cbz	r2, 800dd78 <__ieee754_pow+0x88>
 800dd5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800dd5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800dd62:	ea55 050a 	orrs.w	r5, r5, sl
 800dd66:	d1dc      	bne.n	800dd22 <__ieee754_pow+0x32>
 800dd68:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd6c:	18db      	adds	r3, r3, r3
 800dd6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800dd72:	4152      	adcs	r2, r2
 800dd74:	429d      	cmp	r5, r3
 800dd76:	e7d0      	b.n	800dd1a <__ieee754_pow+0x2a>
 800dd78:	2d00      	cmp	r5, #0
 800dd7a:	da3b      	bge.n	800ddf4 <__ieee754_pow+0x104>
 800dd7c:	4b72      	ldr	r3, [pc, #456]	; (800df48 <__ieee754_pow+0x258>)
 800dd7e:	4598      	cmp	r8, r3
 800dd80:	dc51      	bgt.n	800de26 <__ieee754_pow+0x136>
 800dd82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dd86:	4598      	cmp	r8, r3
 800dd88:	f340 84ac 	ble.w	800e6e4 <__ieee754_pow+0x9f4>
 800dd8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dd90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dd94:	2b14      	cmp	r3, #20
 800dd96:	dd0f      	ble.n	800ddb8 <__ieee754_pow+0xc8>
 800dd98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dd9c:	fa22 f103 	lsr.w	r1, r2, r3
 800dda0:	fa01 f303 	lsl.w	r3, r1, r3
 800dda4:	4293      	cmp	r3, r2
 800dda6:	f040 849d 	bne.w	800e6e4 <__ieee754_pow+0x9f4>
 800ddaa:	f001 0101 	and.w	r1, r1, #1
 800ddae:	f1c1 0302 	rsb	r3, r1, #2
 800ddb2:	9304      	str	r3, [sp, #16]
 800ddb4:	b182      	cbz	r2, 800ddd8 <__ieee754_pow+0xe8>
 800ddb6:	e05f      	b.n	800de78 <__ieee754_pow+0x188>
 800ddb8:	2a00      	cmp	r2, #0
 800ddba:	d15b      	bne.n	800de74 <__ieee754_pow+0x184>
 800ddbc:	f1c3 0314 	rsb	r3, r3, #20
 800ddc0:	fa48 f103 	asr.w	r1, r8, r3
 800ddc4:	fa01 f303 	lsl.w	r3, r1, r3
 800ddc8:	4543      	cmp	r3, r8
 800ddca:	f040 8488 	bne.w	800e6de <__ieee754_pow+0x9ee>
 800ddce:	f001 0101 	and.w	r1, r1, #1
 800ddd2:	f1c1 0302 	rsb	r3, r1, #2
 800ddd6:	9304      	str	r3, [sp, #16]
 800ddd8:	4b5c      	ldr	r3, [pc, #368]	; (800df4c <__ieee754_pow+0x25c>)
 800ddda:	4598      	cmp	r8, r3
 800dddc:	d132      	bne.n	800de44 <__ieee754_pow+0x154>
 800ddde:	f1b9 0f00 	cmp.w	r9, #0
 800dde2:	f280 8478 	bge.w	800e6d6 <__ieee754_pow+0x9e6>
 800dde6:	4959      	ldr	r1, [pc, #356]	; (800df4c <__ieee754_pow+0x25c>)
 800dde8:	4632      	mov	r2, r6
 800ddea:	463b      	mov	r3, r7
 800ddec:	2000      	movs	r0, #0
 800ddee:	f7f2 fd45 	bl	800087c <__aeabi_ddiv>
 800ddf2:	e79c      	b.n	800dd2e <__ieee754_pow+0x3e>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	9304      	str	r3, [sp, #16]
 800ddf8:	2a00      	cmp	r2, #0
 800ddfa:	d13d      	bne.n	800de78 <__ieee754_pow+0x188>
 800ddfc:	4b51      	ldr	r3, [pc, #324]	; (800df44 <__ieee754_pow+0x254>)
 800ddfe:	4598      	cmp	r8, r3
 800de00:	d1ea      	bne.n	800ddd8 <__ieee754_pow+0xe8>
 800de02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800de06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800de0a:	ea53 030a 	orrs.w	r3, r3, sl
 800de0e:	f000 845a 	beq.w	800e6c6 <__ieee754_pow+0x9d6>
 800de12:	4b4f      	ldr	r3, [pc, #316]	; (800df50 <__ieee754_pow+0x260>)
 800de14:	429c      	cmp	r4, r3
 800de16:	dd08      	ble.n	800de2a <__ieee754_pow+0x13a>
 800de18:	f1b9 0f00 	cmp.w	r9, #0
 800de1c:	f2c0 8457 	blt.w	800e6ce <__ieee754_pow+0x9de>
 800de20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de24:	e783      	b.n	800dd2e <__ieee754_pow+0x3e>
 800de26:	2302      	movs	r3, #2
 800de28:	e7e5      	b.n	800ddf6 <__ieee754_pow+0x106>
 800de2a:	f1b9 0f00 	cmp.w	r9, #0
 800de2e:	f04f 0000 	mov.w	r0, #0
 800de32:	f04f 0100 	mov.w	r1, #0
 800de36:	f6bf af7a 	bge.w	800dd2e <__ieee754_pow+0x3e>
 800de3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800de3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de42:	e774      	b.n	800dd2e <__ieee754_pow+0x3e>
 800de44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800de48:	d106      	bne.n	800de58 <__ieee754_pow+0x168>
 800de4a:	4632      	mov	r2, r6
 800de4c:	463b      	mov	r3, r7
 800de4e:	4630      	mov	r0, r6
 800de50:	4639      	mov	r1, r7
 800de52:	f7f2 fbe9 	bl	8000628 <__aeabi_dmul>
 800de56:	e76a      	b.n	800dd2e <__ieee754_pow+0x3e>
 800de58:	4b3e      	ldr	r3, [pc, #248]	; (800df54 <__ieee754_pow+0x264>)
 800de5a:	4599      	cmp	r9, r3
 800de5c:	d10c      	bne.n	800de78 <__ieee754_pow+0x188>
 800de5e:	2d00      	cmp	r5, #0
 800de60:	db0a      	blt.n	800de78 <__ieee754_pow+0x188>
 800de62:	ec47 6b10 	vmov	d0, r6, r7
 800de66:	b009      	add	sp, #36	; 0x24
 800de68:	ecbd 8b06 	vpop	{d8-d10}
 800de6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de70:	f000 bc6c 	b.w	800e74c <__ieee754_sqrt>
 800de74:	2300      	movs	r3, #0
 800de76:	9304      	str	r3, [sp, #16]
 800de78:	ec47 6b10 	vmov	d0, r6, r7
 800de7c:	f000 fed1 	bl	800ec22 <fabs>
 800de80:	ec51 0b10 	vmov	r0, r1, d0
 800de84:	f1ba 0f00 	cmp.w	sl, #0
 800de88:	d129      	bne.n	800dede <__ieee754_pow+0x1ee>
 800de8a:	b124      	cbz	r4, 800de96 <__ieee754_pow+0x1a6>
 800de8c:	4b2f      	ldr	r3, [pc, #188]	; (800df4c <__ieee754_pow+0x25c>)
 800de8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800de92:	429a      	cmp	r2, r3
 800de94:	d123      	bne.n	800dede <__ieee754_pow+0x1ee>
 800de96:	f1b9 0f00 	cmp.w	r9, #0
 800de9a:	da05      	bge.n	800dea8 <__ieee754_pow+0x1b8>
 800de9c:	4602      	mov	r2, r0
 800de9e:	460b      	mov	r3, r1
 800dea0:	2000      	movs	r0, #0
 800dea2:	492a      	ldr	r1, [pc, #168]	; (800df4c <__ieee754_pow+0x25c>)
 800dea4:	f7f2 fcea 	bl	800087c <__aeabi_ddiv>
 800dea8:	2d00      	cmp	r5, #0
 800deaa:	f6bf af40 	bge.w	800dd2e <__ieee754_pow+0x3e>
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800deb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800deb8:	4323      	orrs	r3, r4
 800deba:	d108      	bne.n	800dece <__ieee754_pow+0x1de>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	4610      	mov	r0, r2
 800dec2:	4619      	mov	r1, r3
 800dec4:	f7f2 f9f8 	bl	80002b8 <__aeabi_dsub>
 800dec8:	4602      	mov	r2, r0
 800deca:	460b      	mov	r3, r1
 800decc:	e78f      	b.n	800ddee <__ieee754_pow+0xfe>
 800dece:	9b04      	ldr	r3, [sp, #16]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	f47f af2c 	bne.w	800dd2e <__ieee754_pow+0x3e>
 800ded6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deda:	4619      	mov	r1, r3
 800dedc:	e727      	b.n	800dd2e <__ieee754_pow+0x3e>
 800dede:	0feb      	lsrs	r3, r5, #31
 800dee0:	3b01      	subs	r3, #1
 800dee2:	9306      	str	r3, [sp, #24]
 800dee4:	9a06      	ldr	r2, [sp, #24]
 800dee6:	9b04      	ldr	r3, [sp, #16]
 800dee8:	4313      	orrs	r3, r2
 800deea:	d102      	bne.n	800def2 <__ieee754_pow+0x202>
 800deec:	4632      	mov	r2, r6
 800deee:	463b      	mov	r3, r7
 800def0:	e7e6      	b.n	800dec0 <__ieee754_pow+0x1d0>
 800def2:	4b19      	ldr	r3, [pc, #100]	; (800df58 <__ieee754_pow+0x268>)
 800def4:	4598      	cmp	r8, r3
 800def6:	f340 80fb 	ble.w	800e0f0 <__ieee754_pow+0x400>
 800defa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800defe:	4598      	cmp	r8, r3
 800df00:	4b13      	ldr	r3, [pc, #76]	; (800df50 <__ieee754_pow+0x260>)
 800df02:	dd0c      	ble.n	800df1e <__ieee754_pow+0x22e>
 800df04:	429c      	cmp	r4, r3
 800df06:	dc0f      	bgt.n	800df28 <__ieee754_pow+0x238>
 800df08:	f1b9 0f00 	cmp.w	r9, #0
 800df0c:	da0f      	bge.n	800df2e <__ieee754_pow+0x23e>
 800df0e:	2000      	movs	r0, #0
 800df10:	b009      	add	sp, #36	; 0x24
 800df12:	ecbd 8b06 	vpop	{d8-d10}
 800df16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1a:	f000 be79 	b.w	800ec10 <__math_oflow>
 800df1e:	429c      	cmp	r4, r3
 800df20:	dbf2      	blt.n	800df08 <__ieee754_pow+0x218>
 800df22:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <__ieee754_pow+0x25c>)
 800df24:	429c      	cmp	r4, r3
 800df26:	dd19      	ble.n	800df5c <__ieee754_pow+0x26c>
 800df28:	f1b9 0f00 	cmp.w	r9, #0
 800df2c:	dcef      	bgt.n	800df0e <__ieee754_pow+0x21e>
 800df2e:	2000      	movs	r0, #0
 800df30:	b009      	add	sp, #36	; 0x24
 800df32:	ecbd 8b06 	vpop	{d8-d10}
 800df36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3a:	f000 be60 	b.w	800ebfe <__math_uflow>
 800df3e:	bf00      	nop
 800df40:	fff00000 	.word	0xfff00000
 800df44:	7ff00000 	.word	0x7ff00000
 800df48:	433fffff 	.word	0x433fffff
 800df4c:	3ff00000 	.word	0x3ff00000
 800df50:	3fefffff 	.word	0x3fefffff
 800df54:	3fe00000 	.word	0x3fe00000
 800df58:	41e00000 	.word	0x41e00000
 800df5c:	4b60      	ldr	r3, [pc, #384]	; (800e0e0 <__ieee754_pow+0x3f0>)
 800df5e:	2200      	movs	r2, #0
 800df60:	f7f2 f9aa 	bl	80002b8 <__aeabi_dsub>
 800df64:	a354      	add	r3, pc, #336	; (adr r3, 800e0b8 <__ieee754_pow+0x3c8>)
 800df66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df6a:	4604      	mov	r4, r0
 800df6c:	460d      	mov	r5, r1
 800df6e:	f7f2 fb5b 	bl	8000628 <__aeabi_dmul>
 800df72:	a353      	add	r3, pc, #332	; (adr r3, 800e0c0 <__ieee754_pow+0x3d0>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	4606      	mov	r6, r0
 800df7a:	460f      	mov	r7, r1
 800df7c:	4620      	mov	r0, r4
 800df7e:	4629      	mov	r1, r5
 800df80:	f7f2 fb52 	bl	8000628 <__aeabi_dmul>
 800df84:	4b57      	ldr	r3, [pc, #348]	; (800e0e4 <__ieee754_pow+0x3f4>)
 800df86:	4682      	mov	sl, r0
 800df88:	468b      	mov	fp, r1
 800df8a:	2200      	movs	r2, #0
 800df8c:	4620      	mov	r0, r4
 800df8e:	4629      	mov	r1, r5
 800df90:	f7f2 fb4a 	bl	8000628 <__aeabi_dmul>
 800df94:	4602      	mov	r2, r0
 800df96:	460b      	mov	r3, r1
 800df98:	a14b      	add	r1, pc, #300	; (adr r1, 800e0c8 <__ieee754_pow+0x3d8>)
 800df9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df9e:	f7f2 f98b 	bl	80002b8 <__aeabi_dsub>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	f7f2 fb3f 	bl	8000628 <__aeabi_dmul>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	2000      	movs	r0, #0
 800dfb0:	494d      	ldr	r1, [pc, #308]	; (800e0e8 <__ieee754_pow+0x3f8>)
 800dfb2:	f7f2 f981 	bl	80002b8 <__aeabi_dsub>
 800dfb6:	4622      	mov	r2, r4
 800dfb8:	4680      	mov	r8, r0
 800dfba:	4689      	mov	r9, r1
 800dfbc:	462b      	mov	r3, r5
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f7f2 fb31 	bl	8000628 <__aeabi_dmul>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	4640      	mov	r0, r8
 800dfcc:	4649      	mov	r1, r9
 800dfce:	f7f2 fb2b 	bl	8000628 <__aeabi_dmul>
 800dfd2:	a33f      	add	r3, pc, #252	; (adr r3, 800e0d0 <__ieee754_pow+0x3e0>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 fb26 	bl	8000628 <__aeabi_dmul>
 800dfdc:	4602      	mov	r2, r0
 800dfde:	460b      	mov	r3, r1
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	4659      	mov	r1, fp
 800dfe4:	f7f2 f968 	bl	80002b8 <__aeabi_dsub>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4680      	mov	r8, r0
 800dfee:	4689      	mov	r9, r1
 800dff0:	4630      	mov	r0, r6
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 f962 	bl	80002bc <__adddf3>
 800dff8:	2000      	movs	r0, #0
 800dffa:	4632      	mov	r2, r6
 800dffc:	463b      	mov	r3, r7
 800dffe:	4604      	mov	r4, r0
 800e000:	460d      	mov	r5, r1
 800e002:	f7f2 f959 	bl	80002b8 <__aeabi_dsub>
 800e006:	4602      	mov	r2, r0
 800e008:	460b      	mov	r3, r1
 800e00a:	4640      	mov	r0, r8
 800e00c:	4649      	mov	r1, r9
 800e00e:	f7f2 f953 	bl	80002b8 <__aeabi_dsub>
 800e012:	9b04      	ldr	r3, [sp, #16]
 800e014:	9a06      	ldr	r2, [sp, #24]
 800e016:	3b01      	subs	r3, #1
 800e018:	4313      	orrs	r3, r2
 800e01a:	4682      	mov	sl, r0
 800e01c:	468b      	mov	fp, r1
 800e01e:	f040 81e7 	bne.w	800e3f0 <__ieee754_pow+0x700>
 800e022:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e0d8 <__ieee754_pow+0x3e8>
 800e026:	eeb0 8a47 	vmov.f32	s16, s14
 800e02a:	eef0 8a67 	vmov.f32	s17, s15
 800e02e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e032:	2600      	movs	r6, #0
 800e034:	4632      	mov	r2, r6
 800e036:	463b      	mov	r3, r7
 800e038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e03c:	f7f2 f93c 	bl	80002b8 <__aeabi_dsub>
 800e040:	4622      	mov	r2, r4
 800e042:	462b      	mov	r3, r5
 800e044:	f7f2 faf0 	bl	8000628 <__aeabi_dmul>
 800e048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e04c:	4680      	mov	r8, r0
 800e04e:	4689      	mov	r9, r1
 800e050:	4650      	mov	r0, sl
 800e052:	4659      	mov	r1, fp
 800e054:	f7f2 fae8 	bl	8000628 <__aeabi_dmul>
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	4640      	mov	r0, r8
 800e05e:	4649      	mov	r1, r9
 800e060:	f7f2 f92c 	bl	80002bc <__adddf3>
 800e064:	4632      	mov	r2, r6
 800e066:	463b      	mov	r3, r7
 800e068:	4680      	mov	r8, r0
 800e06a:	4689      	mov	r9, r1
 800e06c:	4620      	mov	r0, r4
 800e06e:	4629      	mov	r1, r5
 800e070:	f7f2 fada 	bl	8000628 <__aeabi_dmul>
 800e074:	460b      	mov	r3, r1
 800e076:	4604      	mov	r4, r0
 800e078:	460d      	mov	r5, r1
 800e07a:	4602      	mov	r2, r0
 800e07c:	4649      	mov	r1, r9
 800e07e:	4640      	mov	r0, r8
 800e080:	f7f2 f91c 	bl	80002bc <__adddf3>
 800e084:	4b19      	ldr	r3, [pc, #100]	; (800e0ec <__ieee754_pow+0x3fc>)
 800e086:	4299      	cmp	r1, r3
 800e088:	ec45 4b19 	vmov	d9, r4, r5
 800e08c:	4606      	mov	r6, r0
 800e08e:	460f      	mov	r7, r1
 800e090:	468b      	mov	fp, r1
 800e092:	f340 82f1 	ble.w	800e678 <__ieee754_pow+0x988>
 800e096:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e09a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e09e:	4303      	orrs	r3, r0
 800e0a0:	f000 81e4 	beq.w	800e46c <__ieee754_pow+0x77c>
 800e0a4:	ec51 0b18 	vmov	r0, r1, d8
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	f7f2 fd2e 	bl	8000b0c <__aeabi_dcmplt>
 800e0b0:	3800      	subs	r0, #0
 800e0b2:	bf18      	it	ne
 800e0b4:	2001      	movne	r0, #1
 800e0b6:	e72b      	b.n	800df10 <__ieee754_pow+0x220>
 800e0b8:	60000000 	.word	0x60000000
 800e0bc:	3ff71547 	.word	0x3ff71547
 800e0c0:	f85ddf44 	.word	0xf85ddf44
 800e0c4:	3e54ae0b 	.word	0x3e54ae0b
 800e0c8:	55555555 	.word	0x55555555
 800e0cc:	3fd55555 	.word	0x3fd55555
 800e0d0:	652b82fe 	.word	0x652b82fe
 800e0d4:	3ff71547 	.word	0x3ff71547
 800e0d8:	00000000 	.word	0x00000000
 800e0dc:	bff00000 	.word	0xbff00000
 800e0e0:	3ff00000 	.word	0x3ff00000
 800e0e4:	3fd00000 	.word	0x3fd00000
 800e0e8:	3fe00000 	.word	0x3fe00000
 800e0ec:	408fffff 	.word	0x408fffff
 800e0f0:	4bd5      	ldr	r3, [pc, #852]	; (800e448 <__ieee754_pow+0x758>)
 800e0f2:	402b      	ands	r3, r5
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	b92b      	cbnz	r3, 800e104 <__ieee754_pow+0x414>
 800e0f8:	4bd4      	ldr	r3, [pc, #848]	; (800e44c <__ieee754_pow+0x75c>)
 800e0fa:	f7f2 fa95 	bl	8000628 <__aeabi_dmul>
 800e0fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e102:	460c      	mov	r4, r1
 800e104:	1523      	asrs	r3, r4, #20
 800e106:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e10a:	4413      	add	r3, r2
 800e10c:	9305      	str	r3, [sp, #20]
 800e10e:	4bd0      	ldr	r3, [pc, #832]	; (800e450 <__ieee754_pow+0x760>)
 800e110:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e114:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e118:	429c      	cmp	r4, r3
 800e11a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e11e:	dd08      	ble.n	800e132 <__ieee754_pow+0x442>
 800e120:	4bcc      	ldr	r3, [pc, #816]	; (800e454 <__ieee754_pow+0x764>)
 800e122:	429c      	cmp	r4, r3
 800e124:	f340 8162 	ble.w	800e3ec <__ieee754_pow+0x6fc>
 800e128:	9b05      	ldr	r3, [sp, #20]
 800e12a:	3301      	adds	r3, #1
 800e12c:	9305      	str	r3, [sp, #20]
 800e12e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e132:	2400      	movs	r4, #0
 800e134:	00e3      	lsls	r3, r4, #3
 800e136:	9307      	str	r3, [sp, #28]
 800e138:	4bc7      	ldr	r3, [pc, #796]	; (800e458 <__ieee754_pow+0x768>)
 800e13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e13e:	ed93 7b00 	vldr	d7, [r3]
 800e142:	4629      	mov	r1, r5
 800e144:	ec53 2b17 	vmov	r2, r3, d7
 800e148:	eeb0 9a47 	vmov.f32	s18, s14
 800e14c:	eef0 9a67 	vmov.f32	s19, s15
 800e150:	4682      	mov	sl, r0
 800e152:	f7f2 f8b1 	bl	80002b8 <__aeabi_dsub>
 800e156:	4652      	mov	r2, sl
 800e158:	4606      	mov	r6, r0
 800e15a:	460f      	mov	r7, r1
 800e15c:	462b      	mov	r3, r5
 800e15e:	ec51 0b19 	vmov	r0, r1, d9
 800e162:	f7f2 f8ab 	bl	80002bc <__adddf3>
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	2000      	movs	r0, #0
 800e16c:	49bb      	ldr	r1, [pc, #748]	; (800e45c <__ieee754_pow+0x76c>)
 800e16e:	f7f2 fb85 	bl	800087c <__aeabi_ddiv>
 800e172:	ec41 0b1a 	vmov	d10, r0, r1
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4630      	mov	r0, r6
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 fa53 	bl	8000628 <__aeabi_dmul>
 800e182:	2300      	movs	r3, #0
 800e184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e188:	9302      	str	r3, [sp, #8]
 800e18a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e18e:	46ab      	mov	fp, r5
 800e190:	106d      	asrs	r5, r5, #1
 800e192:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e196:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e19a:	ec41 0b18 	vmov	d8, r0, r1
 800e19e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	4640      	mov	r0, r8
 800e1a6:	4649      	mov	r1, r9
 800e1a8:	4614      	mov	r4, r2
 800e1aa:	461d      	mov	r5, r3
 800e1ac:	f7f2 fa3c 	bl	8000628 <__aeabi_dmul>
 800e1b0:	4602      	mov	r2, r0
 800e1b2:	460b      	mov	r3, r1
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	f7f2 f87e 	bl	80002b8 <__aeabi_dsub>
 800e1bc:	ec53 2b19 	vmov	r2, r3, d9
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	460f      	mov	r7, r1
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f7f2 f876 	bl	80002b8 <__aeabi_dsub>
 800e1cc:	4602      	mov	r2, r0
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4650      	mov	r0, sl
 800e1d2:	4659      	mov	r1, fp
 800e1d4:	f7f2 f870 	bl	80002b8 <__aeabi_dsub>
 800e1d8:	4642      	mov	r2, r8
 800e1da:	464b      	mov	r3, r9
 800e1dc:	f7f2 fa24 	bl	8000628 <__aeabi_dmul>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	f7f2 f866 	bl	80002b8 <__aeabi_dsub>
 800e1ec:	ec53 2b1a 	vmov	r2, r3, d10
 800e1f0:	f7f2 fa1a 	bl	8000628 <__aeabi_dmul>
 800e1f4:	ec53 2b18 	vmov	r2, r3, d8
 800e1f8:	ec41 0b19 	vmov	d9, r0, r1
 800e1fc:	ec51 0b18 	vmov	r0, r1, d8
 800e200:	f7f2 fa12 	bl	8000628 <__aeabi_dmul>
 800e204:	a37c      	add	r3, pc, #496	; (adr r3, 800e3f8 <__ieee754_pow+0x708>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	4604      	mov	r4, r0
 800e20c:	460d      	mov	r5, r1
 800e20e:	f7f2 fa0b 	bl	8000628 <__aeabi_dmul>
 800e212:	a37b      	add	r3, pc, #492	; (adr r3, 800e400 <__ieee754_pow+0x710>)
 800e214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e218:	f7f2 f850 	bl	80002bc <__adddf3>
 800e21c:	4622      	mov	r2, r4
 800e21e:	462b      	mov	r3, r5
 800e220:	f7f2 fa02 	bl	8000628 <__aeabi_dmul>
 800e224:	a378      	add	r3, pc, #480	; (adr r3, 800e408 <__ieee754_pow+0x718>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	f7f2 f847 	bl	80002bc <__adddf3>
 800e22e:	4622      	mov	r2, r4
 800e230:	462b      	mov	r3, r5
 800e232:	f7f2 f9f9 	bl	8000628 <__aeabi_dmul>
 800e236:	a376      	add	r3, pc, #472	; (adr r3, 800e410 <__ieee754_pow+0x720>)
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	f7f2 f83e 	bl	80002bc <__adddf3>
 800e240:	4622      	mov	r2, r4
 800e242:	462b      	mov	r3, r5
 800e244:	f7f2 f9f0 	bl	8000628 <__aeabi_dmul>
 800e248:	a373      	add	r3, pc, #460	; (adr r3, 800e418 <__ieee754_pow+0x728>)
 800e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24e:	f7f2 f835 	bl	80002bc <__adddf3>
 800e252:	4622      	mov	r2, r4
 800e254:	462b      	mov	r3, r5
 800e256:	f7f2 f9e7 	bl	8000628 <__aeabi_dmul>
 800e25a:	a371      	add	r3, pc, #452	; (adr r3, 800e420 <__ieee754_pow+0x730>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f2 f82c 	bl	80002bc <__adddf3>
 800e264:	4622      	mov	r2, r4
 800e266:	4606      	mov	r6, r0
 800e268:	460f      	mov	r7, r1
 800e26a:	462b      	mov	r3, r5
 800e26c:	4620      	mov	r0, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	f7f2 f9da 	bl	8000628 <__aeabi_dmul>
 800e274:	4602      	mov	r2, r0
 800e276:	460b      	mov	r3, r1
 800e278:	4630      	mov	r0, r6
 800e27a:	4639      	mov	r1, r7
 800e27c:	f7f2 f9d4 	bl	8000628 <__aeabi_dmul>
 800e280:	4642      	mov	r2, r8
 800e282:	4604      	mov	r4, r0
 800e284:	460d      	mov	r5, r1
 800e286:	464b      	mov	r3, r9
 800e288:	ec51 0b18 	vmov	r0, r1, d8
 800e28c:	f7f2 f816 	bl	80002bc <__adddf3>
 800e290:	ec53 2b19 	vmov	r2, r3, d9
 800e294:	f7f2 f9c8 	bl	8000628 <__aeabi_dmul>
 800e298:	4622      	mov	r2, r4
 800e29a:	462b      	mov	r3, r5
 800e29c:	f7f2 f80e 	bl	80002bc <__adddf3>
 800e2a0:	4642      	mov	r2, r8
 800e2a2:	4682      	mov	sl, r0
 800e2a4:	468b      	mov	fp, r1
 800e2a6:	464b      	mov	r3, r9
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	f7f2 f9bc 	bl	8000628 <__aeabi_dmul>
 800e2b0:	4b6b      	ldr	r3, [pc, #428]	; (800e460 <__ieee754_pow+0x770>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	4606      	mov	r6, r0
 800e2b6:	460f      	mov	r7, r1
 800e2b8:	f7f2 f800 	bl	80002bc <__adddf3>
 800e2bc:	4652      	mov	r2, sl
 800e2be:	465b      	mov	r3, fp
 800e2c0:	f7f1 fffc 	bl	80002bc <__adddf3>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	f7f2 f9a9 	bl	8000628 <__aeabi_dmul>
 800e2d6:	4b62      	ldr	r3, [pc, #392]	; (800e460 <__ieee754_pow+0x770>)
 800e2d8:	4680      	mov	r8, r0
 800e2da:	4689      	mov	r9, r1
 800e2dc:	2200      	movs	r2, #0
 800e2de:	4620      	mov	r0, r4
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	f7f1 ffe9 	bl	80002b8 <__aeabi_dsub>
 800e2e6:	4632      	mov	r2, r6
 800e2e8:	463b      	mov	r3, r7
 800e2ea:	f7f1 ffe5 	bl	80002b8 <__aeabi_dsub>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	460b      	mov	r3, r1
 800e2f2:	4650      	mov	r0, sl
 800e2f4:	4659      	mov	r1, fp
 800e2f6:	f7f1 ffdf 	bl	80002b8 <__aeabi_dsub>
 800e2fa:	ec53 2b18 	vmov	r2, r3, d8
 800e2fe:	f7f2 f993 	bl	8000628 <__aeabi_dmul>
 800e302:	4622      	mov	r2, r4
 800e304:	4606      	mov	r6, r0
 800e306:	460f      	mov	r7, r1
 800e308:	462b      	mov	r3, r5
 800e30a:	ec51 0b19 	vmov	r0, r1, d9
 800e30e:	f7f2 f98b 	bl	8000628 <__aeabi_dmul>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4630      	mov	r0, r6
 800e318:	4639      	mov	r1, r7
 800e31a:	f7f1 ffcf 	bl	80002bc <__adddf3>
 800e31e:	4606      	mov	r6, r0
 800e320:	460f      	mov	r7, r1
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	4640      	mov	r0, r8
 800e328:	4649      	mov	r1, r9
 800e32a:	f7f1 ffc7 	bl	80002bc <__adddf3>
 800e32e:	a33e      	add	r3, pc, #248	; (adr r3, 800e428 <__ieee754_pow+0x738>)
 800e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e334:	2000      	movs	r0, #0
 800e336:	4604      	mov	r4, r0
 800e338:	460d      	mov	r5, r1
 800e33a:	f7f2 f975 	bl	8000628 <__aeabi_dmul>
 800e33e:	4642      	mov	r2, r8
 800e340:	ec41 0b18 	vmov	d8, r0, r1
 800e344:	464b      	mov	r3, r9
 800e346:	4620      	mov	r0, r4
 800e348:	4629      	mov	r1, r5
 800e34a:	f7f1 ffb5 	bl	80002b8 <__aeabi_dsub>
 800e34e:	4602      	mov	r2, r0
 800e350:	460b      	mov	r3, r1
 800e352:	4630      	mov	r0, r6
 800e354:	4639      	mov	r1, r7
 800e356:	f7f1 ffaf 	bl	80002b8 <__aeabi_dsub>
 800e35a:	a335      	add	r3, pc, #212	; (adr r3, 800e430 <__ieee754_pow+0x740>)
 800e35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e360:	f7f2 f962 	bl	8000628 <__aeabi_dmul>
 800e364:	a334      	add	r3, pc, #208	; (adr r3, 800e438 <__ieee754_pow+0x748>)
 800e366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36a:	4606      	mov	r6, r0
 800e36c:	460f      	mov	r7, r1
 800e36e:	4620      	mov	r0, r4
 800e370:	4629      	mov	r1, r5
 800e372:	f7f2 f959 	bl	8000628 <__aeabi_dmul>
 800e376:	4602      	mov	r2, r0
 800e378:	460b      	mov	r3, r1
 800e37a:	4630      	mov	r0, r6
 800e37c:	4639      	mov	r1, r7
 800e37e:	f7f1 ff9d 	bl	80002bc <__adddf3>
 800e382:	9a07      	ldr	r2, [sp, #28]
 800e384:	4b37      	ldr	r3, [pc, #220]	; (800e464 <__ieee754_pow+0x774>)
 800e386:	4413      	add	r3, r2
 800e388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38c:	f7f1 ff96 	bl	80002bc <__adddf3>
 800e390:	4682      	mov	sl, r0
 800e392:	9805      	ldr	r0, [sp, #20]
 800e394:	468b      	mov	fp, r1
 800e396:	f7f2 f8dd 	bl	8000554 <__aeabi_i2d>
 800e39a:	9a07      	ldr	r2, [sp, #28]
 800e39c:	4b32      	ldr	r3, [pc, #200]	; (800e468 <__ieee754_pow+0x778>)
 800e39e:	4413      	add	r3, r2
 800e3a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3a4:	4606      	mov	r6, r0
 800e3a6:	460f      	mov	r7, r1
 800e3a8:	4652      	mov	r2, sl
 800e3aa:	465b      	mov	r3, fp
 800e3ac:	ec51 0b18 	vmov	r0, r1, d8
 800e3b0:	f7f1 ff84 	bl	80002bc <__adddf3>
 800e3b4:	4642      	mov	r2, r8
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	f7f1 ff80 	bl	80002bc <__adddf3>
 800e3bc:	4632      	mov	r2, r6
 800e3be:	463b      	mov	r3, r7
 800e3c0:	f7f1 ff7c 	bl	80002bc <__adddf3>
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	4632      	mov	r2, r6
 800e3c8:	463b      	mov	r3, r7
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	460d      	mov	r5, r1
 800e3ce:	f7f1 ff73 	bl	80002b8 <__aeabi_dsub>
 800e3d2:	4642      	mov	r2, r8
 800e3d4:	464b      	mov	r3, r9
 800e3d6:	f7f1 ff6f 	bl	80002b8 <__aeabi_dsub>
 800e3da:	ec53 2b18 	vmov	r2, r3, d8
 800e3de:	f7f1 ff6b 	bl	80002b8 <__aeabi_dsub>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	4650      	mov	r0, sl
 800e3e8:	4659      	mov	r1, fp
 800e3ea:	e610      	b.n	800e00e <__ieee754_pow+0x31e>
 800e3ec:	2401      	movs	r4, #1
 800e3ee:	e6a1      	b.n	800e134 <__ieee754_pow+0x444>
 800e3f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800e440 <__ieee754_pow+0x750>
 800e3f4:	e617      	b.n	800e026 <__ieee754_pow+0x336>
 800e3f6:	bf00      	nop
 800e3f8:	4a454eef 	.word	0x4a454eef
 800e3fc:	3fca7e28 	.word	0x3fca7e28
 800e400:	93c9db65 	.word	0x93c9db65
 800e404:	3fcd864a 	.word	0x3fcd864a
 800e408:	a91d4101 	.word	0xa91d4101
 800e40c:	3fd17460 	.word	0x3fd17460
 800e410:	518f264d 	.word	0x518f264d
 800e414:	3fd55555 	.word	0x3fd55555
 800e418:	db6fabff 	.word	0xdb6fabff
 800e41c:	3fdb6db6 	.word	0x3fdb6db6
 800e420:	33333303 	.word	0x33333303
 800e424:	3fe33333 	.word	0x3fe33333
 800e428:	e0000000 	.word	0xe0000000
 800e42c:	3feec709 	.word	0x3feec709
 800e430:	dc3a03fd 	.word	0xdc3a03fd
 800e434:	3feec709 	.word	0x3feec709
 800e438:	145b01f5 	.word	0x145b01f5
 800e43c:	be3e2fe0 	.word	0xbe3e2fe0
 800e440:	00000000 	.word	0x00000000
 800e444:	3ff00000 	.word	0x3ff00000
 800e448:	7ff00000 	.word	0x7ff00000
 800e44c:	43400000 	.word	0x43400000
 800e450:	0003988e 	.word	0x0003988e
 800e454:	000bb679 	.word	0x000bb679
 800e458:	08010d40 	.word	0x08010d40
 800e45c:	3ff00000 	.word	0x3ff00000
 800e460:	40080000 	.word	0x40080000
 800e464:	08010d60 	.word	0x08010d60
 800e468:	08010d50 	.word	0x08010d50
 800e46c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e744 <__ieee754_pow+0xa54>)
 800e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e472:	4640      	mov	r0, r8
 800e474:	4649      	mov	r1, r9
 800e476:	f7f1 ff21 	bl	80002bc <__adddf3>
 800e47a:	4622      	mov	r2, r4
 800e47c:	ec41 0b1a 	vmov	d10, r0, r1
 800e480:	462b      	mov	r3, r5
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f1 ff17 	bl	80002b8 <__aeabi_dsub>
 800e48a:	4602      	mov	r2, r0
 800e48c:	460b      	mov	r3, r1
 800e48e:	ec51 0b1a 	vmov	r0, r1, d10
 800e492:	f7f2 fb59 	bl	8000b48 <__aeabi_dcmpgt>
 800e496:	2800      	cmp	r0, #0
 800e498:	f47f ae04 	bne.w	800e0a4 <__ieee754_pow+0x3b4>
 800e49c:	4aa4      	ldr	r2, [pc, #656]	; (800e730 <__ieee754_pow+0xa40>)
 800e49e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	f340 8108 	ble.w	800e6b8 <__ieee754_pow+0x9c8>
 800e4a8:	151b      	asrs	r3, r3, #20
 800e4aa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e4ae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e4b2:	fa4a f303 	asr.w	r3, sl, r3
 800e4b6:	445b      	add	r3, fp
 800e4b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e4bc:	4e9d      	ldr	r6, [pc, #628]	; (800e734 <__ieee754_pow+0xa44>)
 800e4be:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e4c2:	4116      	asrs	r6, r2
 800e4c4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	ea23 0106 	bic.w	r1, r3, r6
 800e4ce:	f1c2 0214 	rsb	r2, r2, #20
 800e4d2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e4d6:	fa4a fa02 	asr.w	sl, sl, r2
 800e4da:	f1bb 0f00 	cmp.w	fp, #0
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	bfb8      	it	lt
 800e4e8:	f1ca 0a00 	rsblt	sl, sl, #0
 800e4ec:	f7f1 fee4 	bl	80002b8 <__aeabi_dsub>
 800e4f0:	ec41 0b19 	vmov	d9, r0, r1
 800e4f4:	4642      	mov	r2, r8
 800e4f6:	464b      	mov	r3, r9
 800e4f8:	ec51 0b19 	vmov	r0, r1, d9
 800e4fc:	f7f1 fede 	bl	80002bc <__adddf3>
 800e500:	a37b      	add	r3, pc, #492	; (adr r3, 800e6f0 <__ieee754_pow+0xa00>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	2000      	movs	r0, #0
 800e508:	4604      	mov	r4, r0
 800e50a:	460d      	mov	r5, r1
 800e50c:	f7f2 f88c 	bl	8000628 <__aeabi_dmul>
 800e510:	ec53 2b19 	vmov	r2, r3, d9
 800e514:	4606      	mov	r6, r0
 800e516:	460f      	mov	r7, r1
 800e518:	4620      	mov	r0, r4
 800e51a:	4629      	mov	r1, r5
 800e51c:	f7f1 fecc 	bl	80002b8 <__aeabi_dsub>
 800e520:	4602      	mov	r2, r0
 800e522:	460b      	mov	r3, r1
 800e524:	4640      	mov	r0, r8
 800e526:	4649      	mov	r1, r9
 800e528:	f7f1 fec6 	bl	80002b8 <__aeabi_dsub>
 800e52c:	a372      	add	r3, pc, #456	; (adr r3, 800e6f8 <__ieee754_pow+0xa08>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	f7f2 f879 	bl	8000628 <__aeabi_dmul>
 800e536:	a372      	add	r3, pc, #456	; (adr r3, 800e700 <__ieee754_pow+0xa10>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	4680      	mov	r8, r0
 800e53e:	4689      	mov	r9, r1
 800e540:	4620      	mov	r0, r4
 800e542:	4629      	mov	r1, r5
 800e544:	f7f2 f870 	bl	8000628 <__aeabi_dmul>
 800e548:	4602      	mov	r2, r0
 800e54a:	460b      	mov	r3, r1
 800e54c:	4640      	mov	r0, r8
 800e54e:	4649      	mov	r1, r9
 800e550:	f7f1 feb4 	bl	80002bc <__adddf3>
 800e554:	4604      	mov	r4, r0
 800e556:	460d      	mov	r5, r1
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4630      	mov	r0, r6
 800e55e:	4639      	mov	r1, r7
 800e560:	f7f1 feac 	bl	80002bc <__adddf3>
 800e564:	4632      	mov	r2, r6
 800e566:	463b      	mov	r3, r7
 800e568:	4680      	mov	r8, r0
 800e56a:	4689      	mov	r9, r1
 800e56c:	f7f1 fea4 	bl	80002b8 <__aeabi_dsub>
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4620      	mov	r0, r4
 800e576:	4629      	mov	r1, r5
 800e578:	f7f1 fe9e 	bl	80002b8 <__aeabi_dsub>
 800e57c:	4642      	mov	r2, r8
 800e57e:	4606      	mov	r6, r0
 800e580:	460f      	mov	r7, r1
 800e582:	464b      	mov	r3, r9
 800e584:	4640      	mov	r0, r8
 800e586:	4649      	mov	r1, r9
 800e588:	f7f2 f84e 	bl	8000628 <__aeabi_dmul>
 800e58c:	a35e      	add	r3, pc, #376	; (adr r3, 800e708 <__ieee754_pow+0xa18>)
 800e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e592:	4604      	mov	r4, r0
 800e594:	460d      	mov	r5, r1
 800e596:	f7f2 f847 	bl	8000628 <__aeabi_dmul>
 800e59a:	a35d      	add	r3, pc, #372	; (adr r3, 800e710 <__ieee754_pow+0xa20>)
 800e59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a0:	f7f1 fe8a 	bl	80002b8 <__aeabi_dsub>
 800e5a4:	4622      	mov	r2, r4
 800e5a6:	462b      	mov	r3, r5
 800e5a8:	f7f2 f83e 	bl	8000628 <__aeabi_dmul>
 800e5ac:	a35a      	add	r3, pc, #360	; (adr r3, 800e718 <__ieee754_pow+0xa28>)
 800e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b2:	f7f1 fe83 	bl	80002bc <__adddf3>
 800e5b6:	4622      	mov	r2, r4
 800e5b8:	462b      	mov	r3, r5
 800e5ba:	f7f2 f835 	bl	8000628 <__aeabi_dmul>
 800e5be:	a358      	add	r3, pc, #352	; (adr r3, 800e720 <__ieee754_pow+0xa30>)
 800e5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c4:	f7f1 fe78 	bl	80002b8 <__aeabi_dsub>
 800e5c8:	4622      	mov	r2, r4
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	f7f2 f82c 	bl	8000628 <__aeabi_dmul>
 800e5d0:	a355      	add	r3, pc, #340	; (adr r3, 800e728 <__ieee754_pow+0xa38>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f1 fe71 	bl	80002bc <__adddf3>
 800e5da:	4622      	mov	r2, r4
 800e5dc:	462b      	mov	r3, r5
 800e5de:	f7f2 f823 	bl	8000628 <__aeabi_dmul>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	4640      	mov	r0, r8
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	f7f1 fe65 	bl	80002b8 <__aeabi_dsub>
 800e5ee:	4604      	mov	r4, r0
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f2 f815 	bl	8000628 <__aeabi_dmul>
 800e5fe:	2200      	movs	r2, #0
 800e600:	ec41 0b19 	vmov	d9, r0, r1
 800e604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e608:	4620      	mov	r0, r4
 800e60a:	4629      	mov	r1, r5
 800e60c:	f7f1 fe54 	bl	80002b8 <__aeabi_dsub>
 800e610:	4602      	mov	r2, r0
 800e612:	460b      	mov	r3, r1
 800e614:	ec51 0b19 	vmov	r0, r1, d9
 800e618:	f7f2 f930 	bl	800087c <__aeabi_ddiv>
 800e61c:	4632      	mov	r2, r6
 800e61e:	4604      	mov	r4, r0
 800e620:	460d      	mov	r5, r1
 800e622:	463b      	mov	r3, r7
 800e624:	4640      	mov	r0, r8
 800e626:	4649      	mov	r1, r9
 800e628:	f7f1 fffe 	bl	8000628 <__aeabi_dmul>
 800e62c:	4632      	mov	r2, r6
 800e62e:	463b      	mov	r3, r7
 800e630:	f7f1 fe44 	bl	80002bc <__adddf3>
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	4620      	mov	r0, r4
 800e63a:	4629      	mov	r1, r5
 800e63c:	f7f1 fe3c 	bl	80002b8 <__aeabi_dsub>
 800e640:	4642      	mov	r2, r8
 800e642:	464b      	mov	r3, r9
 800e644:	f7f1 fe38 	bl	80002b8 <__aeabi_dsub>
 800e648:	460b      	mov	r3, r1
 800e64a:	4602      	mov	r2, r0
 800e64c:	493a      	ldr	r1, [pc, #232]	; (800e738 <__ieee754_pow+0xa48>)
 800e64e:	2000      	movs	r0, #0
 800e650:	f7f1 fe32 	bl	80002b8 <__aeabi_dsub>
 800e654:	ec41 0b10 	vmov	d0, r0, r1
 800e658:	ee10 3a90 	vmov	r3, s1
 800e65c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e664:	da2b      	bge.n	800e6be <__ieee754_pow+0x9ce>
 800e666:	4650      	mov	r0, sl
 800e668:	f000 faf2 	bl	800ec50 <scalbn>
 800e66c:	ec51 0b10 	vmov	r0, r1, d0
 800e670:	ec53 2b18 	vmov	r2, r3, d8
 800e674:	f7ff bbed 	b.w	800de52 <__ieee754_pow+0x162>
 800e678:	4b30      	ldr	r3, [pc, #192]	; (800e73c <__ieee754_pow+0xa4c>)
 800e67a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e67e:	429e      	cmp	r6, r3
 800e680:	f77f af0c 	ble.w	800e49c <__ieee754_pow+0x7ac>
 800e684:	4b2e      	ldr	r3, [pc, #184]	; (800e740 <__ieee754_pow+0xa50>)
 800e686:	440b      	add	r3, r1
 800e688:	4303      	orrs	r3, r0
 800e68a:	d009      	beq.n	800e6a0 <__ieee754_pow+0x9b0>
 800e68c:	ec51 0b18 	vmov	r0, r1, d8
 800e690:	2200      	movs	r2, #0
 800e692:	2300      	movs	r3, #0
 800e694:	f7f2 fa3a 	bl	8000b0c <__aeabi_dcmplt>
 800e698:	3800      	subs	r0, #0
 800e69a:	bf18      	it	ne
 800e69c:	2001      	movne	r0, #1
 800e69e:	e447      	b.n	800df30 <__ieee754_pow+0x240>
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	462b      	mov	r3, r5
 800e6a4:	f7f1 fe08 	bl	80002b8 <__aeabi_dsub>
 800e6a8:	4642      	mov	r2, r8
 800e6aa:	464b      	mov	r3, r9
 800e6ac:	f7f2 fa42 	bl	8000b34 <__aeabi_dcmpge>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	f43f aef3 	beq.w	800e49c <__ieee754_pow+0x7ac>
 800e6b6:	e7e9      	b.n	800e68c <__ieee754_pow+0x99c>
 800e6b8:	f04f 0a00 	mov.w	sl, #0
 800e6bc:	e71a      	b.n	800e4f4 <__ieee754_pow+0x804>
 800e6be:	ec51 0b10 	vmov	r0, r1, d0
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	e7d4      	b.n	800e670 <__ieee754_pow+0x980>
 800e6c6:	491c      	ldr	r1, [pc, #112]	; (800e738 <__ieee754_pow+0xa48>)
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	f7ff bb30 	b.w	800dd2e <__ieee754_pow+0x3e>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	f7ff bb2c 	b.w	800dd2e <__ieee754_pow+0x3e>
 800e6d6:	4630      	mov	r0, r6
 800e6d8:	4639      	mov	r1, r7
 800e6da:	f7ff bb28 	b.w	800dd2e <__ieee754_pow+0x3e>
 800e6de:	9204      	str	r2, [sp, #16]
 800e6e0:	f7ff bb7a 	b.w	800ddd8 <__ieee754_pow+0xe8>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f7ff bb64 	b.w	800ddb2 <__ieee754_pow+0xc2>
 800e6ea:	bf00      	nop
 800e6ec:	f3af 8000 	nop.w
 800e6f0:	00000000 	.word	0x00000000
 800e6f4:	3fe62e43 	.word	0x3fe62e43
 800e6f8:	fefa39ef 	.word	0xfefa39ef
 800e6fc:	3fe62e42 	.word	0x3fe62e42
 800e700:	0ca86c39 	.word	0x0ca86c39
 800e704:	be205c61 	.word	0xbe205c61
 800e708:	72bea4d0 	.word	0x72bea4d0
 800e70c:	3e663769 	.word	0x3e663769
 800e710:	c5d26bf1 	.word	0xc5d26bf1
 800e714:	3ebbbd41 	.word	0x3ebbbd41
 800e718:	af25de2c 	.word	0xaf25de2c
 800e71c:	3f11566a 	.word	0x3f11566a
 800e720:	16bebd93 	.word	0x16bebd93
 800e724:	3f66c16c 	.word	0x3f66c16c
 800e728:	5555553e 	.word	0x5555553e
 800e72c:	3fc55555 	.word	0x3fc55555
 800e730:	3fe00000 	.word	0x3fe00000
 800e734:	000fffff 	.word	0x000fffff
 800e738:	3ff00000 	.word	0x3ff00000
 800e73c:	4090cbff 	.word	0x4090cbff
 800e740:	3f6f3400 	.word	0x3f6f3400
 800e744:	652b82fe 	.word	0x652b82fe
 800e748:	3c971547 	.word	0x3c971547

0800e74c <__ieee754_sqrt>:
 800e74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e750:	ec55 4b10 	vmov	r4, r5, d0
 800e754:	4e55      	ldr	r6, [pc, #340]	; (800e8ac <__ieee754_sqrt+0x160>)
 800e756:	43ae      	bics	r6, r5
 800e758:	ee10 0a10 	vmov	r0, s0
 800e75c:	ee10 3a10 	vmov	r3, s0
 800e760:	462a      	mov	r2, r5
 800e762:	4629      	mov	r1, r5
 800e764:	d110      	bne.n	800e788 <__ieee754_sqrt+0x3c>
 800e766:	ee10 2a10 	vmov	r2, s0
 800e76a:	462b      	mov	r3, r5
 800e76c:	f7f1 ff5c 	bl	8000628 <__aeabi_dmul>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	4620      	mov	r0, r4
 800e776:	4629      	mov	r1, r5
 800e778:	f7f1 fda0 	bl	80002bc <__adddf3>
 800e77c:	4604      	mov	r4, r0
 800e77e:	460d      	mov	r5, r1
 800e780:	ec45 4b10 	vmov	d0, r4, r5
 800e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e788:	2d00      	cmp	r5, #0
 800e78a:	dc10      	bgt.n	800e7ae <__ieee754_sqrt+0x62>
 800e78c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e790:	4330      	orrs	r0, r6
 800e792:	d0f5      	beq.n	800e780 <__ieee754_sqrt+0x34>
 800e794:	b15d      	cbz	r5, 800e7ae <__ieee754_sqrt+0x62>
 800e796:	ee10 2a10 	vmov	r2, s0
 800e79a:	462b      	mov	r3, r5
 800e79c:	ee10 0a10 	vmov	r0, s0
 800e7a0:	f7f1 fd8a 	bl	80002b8 <__aeabi_dsub>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	460b      	mov	r3, r1
 800e7a8:	f7f2 f868 	bl	800087c <__aeabi_ddiv>
 800e7ac:	e7e6      	b.n	800e77c <__ieee754_sqrt+0x30>
 800e7ae:	1512      	asrs	r2, r2, #20
 800e7b0:	d074      	beq.n	800e89c <__ieee754_sqrt+0x150>
 800e7b2:	07d4      	lsls	r4, r2, #31
 800e7b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e7b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e7bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e7c0:	bf5e      	ittt	pl
 800e7c2:	0fda      	lsrpl	r2, r3, #31
 800e7c4:	005b      	lslpl	r3, r3, #1
 800e7c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e7ca:	2400      	movs	r4, #0
 800e7cc:	0fda      	lsrs	r2, r3, #31
 800e7ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e7d2:	107f      	asrs	r7, r7, #1
 800e7d4:	005b      	lsls	r3, r3, #1
 800e7d6:	2516      	movs	r5, #22
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e7de:	1886      	adds	r6, r0, r2
 800e7e0:	428e      	cmp	r6, r1
 800e7e2:	bfde      	ittt	le
 800e7e4:	1b89      	suble	r1, r1, r6
 800e7e6:	18b0      	addle	r0, r6, r2
 800e7e8:	18a4      	addle	r4, r4, r2
 800e7ea:	0049      	lsls	r1, r1, #1
 800e7ec:	3d01      	subs	r5, #1
 800e7ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e7f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e7f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e7fa:	d1f0      	bne.n	800e7de <__ieee754_sqrt+0x92>
 800e7fc:	462a      	mov	r2, r5
 800e7fe:	f04f 0e20 	mov.w	lr, #32
 800e802:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e806:	4281      	cmp	r1, r0
 800e808:	eb06 0c05 	add.w	ip, r6, r5
 800e80c:	dc02      	bgt.n	800e814 <__ieee754_sqrt+0xc8>
 800e80e:	d113      	bne.n	800e838 <__ieee754_sqrt+0xec>
 800e810:	459c      	cmp	ip, r3
 800e812:	d811      	bhi.n	800e838 <__ieee754_sqrt+0xec>
 800e814:	f1bc 0f00 	cmp.w	ip, #0
 800e818:	eb0c 0506 	add.w	r5, ip, r6
 800e81c:	da43      	bge.n	800e8a6 <__ieee754_sqrt+0x15a>
 800e81e:	2d00      	cmp	r5, #0
 800e820:	db41      	blt.n	800e8a6 <__ieee754_sqrt+0x15a>
 800e822:	f100 0801 	add.w	r8, r0, #1
 800e826:	1a09      	subs	r1, r1, r0
 800e828:	459c      	cmp	ip, r3
 800e82a:	bf88      	it	hi
 800e82c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e830:	eba3 030c 	sub.w	r3, r3, ip
 800e834:	4432      	add	r2, r6
 800e836:	4640      	mov	r0, r8
 800e838:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e83c:	f1be 0e01 	subs.w	lr, lr, #1
 800e840:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e844:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e848:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e84c:	d1db      	bne.n	800e806 <__ieee754_sqrt+0xba>
 800e84e:	430b      	orrs	r3, r1
 800e850:	d006      	beq.n	800e860 <__ieee754_sqrt+0x114>
 800e852:	1c50      	adds	r0, r2, #1
 800e854:	bf13      	iteet	ne
 800e856:	3201      	addne	r2, #1
 800e858:	3401      	addeq	r4, #1
 800e85a:	4672      	moveq	r2, lr
 800e85c:	f022 0201 	bicne.w	r2, r2, #1
 800e860:	1063      	asrs	r3, r4, #1
 800e862:	0852      	lsrs	r2, r2, #1
 800e864:	07e1      	lsls	r1, r4, #31
 800e866:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e86a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e86e:	bf48      	it	mi
 800e870:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e874:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e878:	4614      	mov	r4, r2
 800e87a:	e781      	b.n	800e780 <__ieee754_sqrt+0x34>
 800e87c:	0ad9      	lsrs	r1, r3, #11
 800e87e:	3815      	subs	r0, #21
 800e880:	055b      	lsls	r3, r3, #21
 800e882:	2900      	cmp	r1, #0
 800e884:	d0fa      	beq.n	800e87c <__ieee754_sqrt+0x130>
 800e886:	02cd      	lsls	r5, r1, #11
 800e888:	d50a      	bpl.n	800e8a0 <__ieee754_sqrt+0x154>
 800e88a:	f1c2 0420 	rsb	r4, r2, #32
 800e88e:	fa23 f404 	lsr.w	r4, r3, r4
 800e892:	1e55      	subs	r5, r2, #1
 800e894:	4093      	lsls	r3, r2
 800e896:	4321      	orrs	r1, r4
 800e898:	1b42      	subs	r2, r0, r5
 800e89a:	e78a      	b.n	800e7b2 <__ieee754_sqrt+0x66>
 800e89c:	4610      	mov	r0, r2
 800e89e:	e7f0      	b.n	800e882 <__ieee754_sqrt+0x136>
 800e8a0:	0049      	lsls	r1, r1, #1
 800e8a2:	3201      	adds	r2, #1
 800e8a4:	e7ef      	b.n	800e886 <__ieee754_sqrt+0x13a>
 800e8a6:	4680      	mov	r8, r0
 800e8a8:	e7bd      	b.n	800e826 <__ieee754_sqrt+0xda>
 800e8aa:	bf00      	nop
 800e8ac:	7ff00000 	.word	0x7ff00000

0800e8b0 <__ieee754_asinf>:
 800e8b0:	b538      	push	{r3, r4, r5, lr}
 800e8b2:	ee10 5a10 	vmov	r5, s0
 800e8b6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e8ba:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e8be:	ed2d 8b04 	vpush	{d8-d9}
 800e8c2:	d10c      	bne.n	800e8de <__ieee754_asinf+0x2e>
 800e8c4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800ea3c <__ieee754_asinf+0x18c>
 800e8c8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800ea40 <__ieee754_asinf+0x190>
 800e8cc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e8d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e8d4:	eeb0 0a67 	vmov.f32	s0, s15
 800e8d8:	ecbd 8b04 	vpop	{d8-d9}
 800e8dc:	bd38      	pop	{r3, r4, r5, pc}
 800e8de:	dd04      	ble.n	800e8ea <__ieee754_asinf+0x3a>
 800e8e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e8e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e8e8:	e7f6      	b.n	800e8d8 <__ieee754_asinf+0x28>
 800e8ea:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800e8ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e8f2:	da0b      	bge.n	800e90c <__ieee754_asinf+0x5c>
 800e8f4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e8f8:	da52      	bge.n	800e9a0 <__ieee754_asinf+0xf0>
 800e8fa:	eddf 7a52 	vldr	s15, [pc, #328]	; 800ea44 <__ieee754_asinf+0x194>
 800e8fe:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e902:	eef4 7ae8 	vcmpe.f32	s15, s17
 800e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90a:	dce5      	bgt.n	800e8d8 <__ieee754_asinf+0x28>
 800e90c:	f000 fafa 	bl	800ef04 <fabsf>
 800e910:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800e914:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800e918:	ee20 8a08 	vmul.f32	s16, s0, s16
 800e91c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800ea48 <__ieee754_asinf+0x198>
 800e920:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800ea4c <__ieee754_asinf+0x19c>
 800e924:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800ea50 <__ieee754_asinf+0x1a0>
 800e928:	eea8 7a27 	vfma.f32	s14, s16, s15
 800e92c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800ea54 <__ieee754_asinf+0x1a4>
 800e930:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e934:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ea58 <__ieee754_asinf+0x1a8>
 800e938:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e93c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ea5c <__ieee754_asinf+0x1ac>
 800e940:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e944:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ea60 <__ieee754_asinf+0x1b0>
 800e948:	eea7 9a88 	vfma.f32	s18, s15, s16
 800e94c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800ea64 <__ieee754_asinf+0x1b4>
 800e950:	eee8 7a07 	vfma.f32	s15, s16, s14
 800e954:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800ea68 <__ieee754_asinf+0x1b8>
 800e958:	eea7 7a88 	vfma.f32	s14, s15, s16
 800e95c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ea6c <__ieee754_asinf+0x1bc>
 800e960:	eee7 7a08 	vfma.f32	s15, s14, s16
 800e964:	eeb0 0a48 	vmov.f32	s0, s16
 800e968:	eee7 8a88 	vfma.f32	s17, s15, s16
 800e96c:	f000 f926 	bl	800ebbc <__ieee754_sqrtf>
 800e970:	4b3f      	ldr	r3, [pc, #252]	; (800ea70 <__ieee754_asinf+0x1c0>)
 800e972:	ee29 9a08 	vmul.f32	s18, s18, s16
 800e976:	429c      	cmp	r4, r3
 800e978:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800e97c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e980:	dd3d      	ble.n	800e9fe <__ieee754_asinf+0x14e>
 800e982:	eea0 0a06 	vfma.f32	s0, s0, s12
 800e986:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800ea74 <__ieee754_asinf+0x1c4>
 800e98a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800e98e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ea40 <__ieee754_asinf+0x190>
 800e992:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e996:	2d00      	cmp	r5, #0
 800e998:	bfd8      	it	le
 800e99a:	eeb1 0a40 	vnegle.f32	s0, s0
 800e99e:	e79b      	b.n	800e8d8 <__ieee754_asinf+0x28>
 800e9a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800e9a4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800ea48 <__ieee754_asinf+0x198>
 800e9a8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800ea4c <__ieee754_asinf+0x19c>
 800e9ac:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800ea60 <__ieee754_asinf+0x1b0>
 800e9b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e9b4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800ea54 <__ieee754_asinf+0x1a4>
 800e9b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e9bc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800ea58 <__ieee754_asinf+0x1a8>
 800e9c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800ea5c <__ieee754_asinf+0x1ac>
 800e9c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e9cc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800ea50 <__ieee754_asinf+0x1a0>
 800e9d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9d4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800ea64 <__ieee754_asinf+0x1b4>
 800e9d8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800e9dc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800ea68 <__ieee754_asinf+0x1b8>
 800e9e0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800e9e4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800ea6c <__ieee754_asinf+0x1bc>
 800e9e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e9ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e9f0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800e9f4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800e9f8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800e9fc:	e76c      	b.n	800e8d8 <__ieee754_asinf+0x28>
 800e9fe:	ee10 3a10 	vmov	r3, s0
 800ea02:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ea06:	f023 030f 	bic.w	r3, r3, #15
 800ea0a:	ee07 3a10 	vmov	s14, r3
 800ea0e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800ea12:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ea16:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ea1a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800ea1e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ea3c <__ieee754_asinf+0x18c>
 800ea22:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800ea26:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800ea2a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ea78 <__ieee754_asinf+0x1c8>
 800ea2e:	eeb0 6a40 	vmov.f32	s12, s0
 800ea32:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ea36:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ea3a:	e7aa      	b.n	800e992 <__ieee754_asinf+0xe2>
 800ea3c:	b33bbd2e 	.word	0xb33bbd2e
 800ea40:	3fc90fdb 	.word	0x3fc90fdb
 800ea44:	7149f2ca 	.word	0x7149f2ca
 800ea48:	3811ef08 	.word	0x3811ef08
 800ea4c:	3a4f7f04 	.word	0x3a4f7f04
 800ea50:	3e2aaaab 	.word	0x3e2aaaab
 800ea54:	bd241146 	.word	0xbd241146
 800ea58:	3e4e0aa8 	.word	0x3e4e0aa8
 800ea5c:	bea6b090 	.word	0xbea6b090
 800ea60:	3d9dc62e 	.word	0x3d9dc62e
 800ea64:	bf303361 	.word	0xbf303361
 800ea68:	4001572d 	.word	0x4001572d
 800ea6c:	c019d139 	.word	0xc019d139
 800ea70:	3f799999 	.word	0x3f799999
 800ea74:	333bbd2e 	.word	0x333bbd2e
 800ea78:	3f490fdb 	.word	0x3f490fdb

0800ea7c <__ieee754_atan2f>:
 800ea7c:	ee10 2a90 	vmov	r2, s1
 800ea80:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ea84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ea88:	b510      	push	{r4, lr}
 800ea8a:	eef0 7a40 	vmov.f32	s15, s0
 800ea8e:	dc06      	bgt.n	800ea9e <__ieee754_atan2f+0x22>
 800ea90:	ee10 0a10 	vmov	r0, s0
 800ea94:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ea98:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ea9c:	dd04      	ble.n	800eaa8 <__ieee754_atan2f+0x2c>
 800ea9e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800eaa2:	eeb0 0a67 	vmov.f32	s0, s15
 800eaa6:	bd10      	pop	{r4, pc}
 800eaa8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800eaac:	d103      	bne.n	800eab6 <__ieee754_atan2f+0x3a>
 800eaae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eab2:	f000 b953 	b.w	800ed5c <atanf>
 800eab6:	1794      	asrs	r4, r2, #30
 800eab8:	f004 0402 	and.w	r4, r4, #2
 800eabc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800eac0:	b943      	cbnz	r3, 800ead4 <__ieee754_atan2f+0x58>
 800eac2:	2c02      	cmp	r4, #2
 800eac4:	d05e      	beq.n	800eb84 <__ieee754_atan2f+0x108>
 800eac6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800eb98 <__ieee754_atan2f+0x11c>
 800eaca:	2c03      	cmp	r4, #3
 800eacc:	bf08      	it	eq
 800eace:	eef0 7a47 	vmoveq.f32	s15, s14
 800ead2:	e7e6      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800ead4:	b941      	cbnz	r1, 800eae8 <__ieee754_atan2f+0x6c>
 800ead6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800eb9c <__ieee754_atan2f+0x120>
 800eada:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800eba0 <__ieee754_atan2f+0x124>
 800eade:	2800      	cmp	r0, #0
 800eae0:	bfb8      	it	lt
 800eae2:	eef0 7a40 	vmovlt.f32	s15, s0
 800eae6:	e7dc      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eae8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800eaec:	d110      	bne.n	800eb10 <__ieee754_atan2f+0x94>
 800eaee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eaf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800eaf6:	d107      	bne.n	800eb08 <__ieee754_atan2f+0x8c>
 800eaf8:	2c02      	cmp	r4, #2
 800eafa:	d846      	bhi.n	800eb8a <__ieee754_atan2f+0x10e>
 800eafc:	4b29      	ldr	r3, [pc, #164]	; (800eba4 <__ieee754_atan2f+0x128>)
 800eafe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb02:	edd4 7a00 	vldr	s15, [r4]
 800eb06:	e7cc      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb08:	2c02      	cmp	r4, #2
 800eb0a:	d841      	bhi.n	800eb90 <__ieee754_atan2f+0x114>
 800eb0c:	4b26      	ldr	r3, [pc, #152]	; (800eba8 <__ieee754_atan2f+0x12c>)
 800eb0e:	e7f6      	b.n	800eafe <__ieee754_atan2f+0x82>
 800eb10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800eb14:	d0df      	beq.n	800ead6 <__ieee754_atan2f+0x5a>
 800eb16:	1a5b      	subs	r3, r3, r1
 800eb18:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800eb1c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800eb20:	da1a      	bge.n	800eb58 <__ieee754_atan2f+0xdc>
 800eb22:	2a00      	cmp	r2, #0
 800eb24:	da01      	bge.n	800eb2a <__ieee754_atan2f+0xae>
 800eb26:	313c      	adds	r1, #60	; 0x3c
 800eb28:	db19      	blt.n	800eb5e <__ieee754_atan2f+0xe2>
 800eb2a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800eb2e:	f000 f9e9 	bl	800ef04 <fabsf>
 800eb32:	f000 f913 	bl	800ed5c <atanf>
 800eb36:	eef0 7a40 	vmov.f32	s15, s0
 800eb3a:	2c01      	cmp	r4, #1
 800eb3c:	d012      	beq.n	800eb64 <__ieee754_atan2f+0xe8>
 800eb3e:	2c02      	cmp	r4, #2
 800eb40:	d017      	beq.n	800eb72 <__ieee754_atan2f+0xf6>
 800eb42:	2c00      	cmp	r4, #0
 800eb44:	d0ad      	beq.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb46:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ebac <__ieee754_atan2f+0x130>
 800eb4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800eb4e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800ebb0 <__ieee754_atan2f+0x134>
 800eb52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800eb56:	e7a4      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb58:	eddf 7a10 	vldr	s15, [pc, #64]	; 800eb9c <__ieee754_atan2f+0x120>
 800eb5c:	e7ed      	b.n	800eb3a <__ieee754_atan2f+0xbe>
 800eb5e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ebb4 <__ieee754_atan2f+0x138>
 800eb62:	e7ea      	b.n	800eb3a <__ieee754_atan2f+0xbe>
 800eb64:	ee17 3a90 	vmov	r3, s15
 800eb68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800eb6c:	ee07 3a90 	vmov	s15, r3
 800eb70:	e797      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb72:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800ebac <__ieee754_atan2f+0x130>
 800eb76:	ee77 7a80 	vadd.f32	s15, s15, s0
 800eb7a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ebb0 <__ieee754_atan2f+0x134>
 800eb7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800eb82:	e78e      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb84:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ebb0 <__ieee754_atan2f+0x134>
 800eb88:	e78b      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb8a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800ebb8 <__ieee754_atan2f+0x13c>
 800eb8e:	e788      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb90:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ebb4 <__ieee754_atan2f+0x138>
 800eb94:	e785      	b.n	800eaa2 <__ieee754_atan2f+0x26>
 800eb96:	bf00      	nop
 800eb98:	c0490fdb 	.word	0xc0490fdb
 800eb9c:	3fc90fdb 	.word	0x3fc90fdb
 800eba0:	bfc90fdb 	.word	0xbfc90fdb
 800eba4:	08010d70 	.word	0x08010d70
 800eba8:	08010d7c 	.word	0x08010d7c
 800ebac:	33bbbd2e 	.word	0x33bbbd2e
 800ebb0:	40490fdb 	.word	0x40490fdb
 800ebb4:	00000000 	.word	0x00000000
 800ebb8:	3f490fdb 	.word	0x3f490fdb

0800ebbc <__ieee754_sqrtf>:
 800ebbc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ebc0:	4770      	bx	lr

0800ebc2 <with_errno>:
 800ebc2:	b570      	push	{r4, r5, r6, lr}
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	460d      	mov	r5, r1
 800ebc8:	4616      	mov	r6, r2
 800ebca:	f000 f9a9 	bl	800ef20 <__errno>
 800ebce:	4629      	mov	r1, r5
 800ebd0:	6006      	str	r6, [r0, #0]
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	bd70      	pop	{r4, r5, r6, pc}

0800ebd6 <xflow>:
 800ebd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebd8:	4614      	mov	r4, r2
 800ebda:	461d      	mov	r5, r3
 800ebdc:	b108      	cbz	r0, 800ebe2 <xflow+0xc>
 800ebde:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebe2:	e9cd 2300 	strd	r2, r3, [sp]
 800ebe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebea:	4620      	mov	r0, r4
 800ebec:	4629      	mov	r1, r5
 800ebee:	f7f1 fd1b 	bl	8000628 <__aeabi_dmul>
 800ebf2:	2222      	movs	r2, #34	; 0x22
 800ebf4:	b003      	add	sp, #12
 800ebf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebfa:	f7ff bfe2 	b.w	800ebc2 <with_errno>

0800ebfe <__math_uflow>:
 800ebfe:	b508      	push	{r3, lr}
 800ec00:	2200      	movs	r2, #0
 800ec02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ec06:	f7ff ffe6 	bl	800ebd6 <xflow>
 800ec0a:	ec41 0b10 	vmov	d0, r0, r1
 800ec0e:	bd08      	pop	{r3, pc}

0800ec10 <__math_oflow>:
 800ec10:	b508      	push	{r3, lr}
 800ec12:	2200      	movs	r2, #0
 800ec14:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ec18:	f7ff ffdd 	bl	800ebd6 <xflow>
 800ec1c:	ec41 0b10 	vmov	d0, r0, r1
 800ec20:	bd08      	pop	{r3, pc}

0800ec22 <fabs>:
 800ec22:	ec51 0b10 	vmov	r0, r1, d0
 800ec26:	ee10 2a10 	vmov	r2, s0
 800ec2a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec2e:	ec43 2b10 	vmov	d0, r2, r3
 800ec32:	4770      	bx	lr

0800ec34 <finite>:
 800ec34:	b082      	sub	sp, #8
 800ec36:	ed8d 0b00 	vstr	d0, [sp]
 800ec3a:	9801      	ldr	r0, [sp, #4]
 800ec3c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ec40:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ec44:	0fc0      	lsrs	r0, r0, #31
 800ec46:	b002      	add	sp, #8
 800ec48:	4770      	bx	lr
 800ec4a:	0000      	movs	r0, r0
 800ec4c:	0000      	movs	r0, r0
	...

0800ec50 <scalbn>:
 800ec50:	b570      	push	{r4, r5, r6, lr}
 800ec52:	ec55 4b10 	vmov	r4, r5, d0
 800ec56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	462b      	mov	r3, r5
 800ec5e:	b99a      	cbnz	r2, 800ec88 <scalbn+0x38>
 800ec60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec64:	4323      	orrs	r3, r4
 800ec66:	d036      	beq.n	800ecd6 <scalbn+0x86>
 800ec68:	4b39      	ldr	r3, [pc, #228]	; (800ed50 <scalbn+0x100>)
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	ee10 0a10 	vmov	r0, s0
 800ec70:	2200      	movs	r2, #0
 800ec72:	f7f1 fcd9 	bl	8000628 <__aeabi_dmul>
 800ec76:	4b37      	ldr	r3, [pc, #220]	; (800ed54 <scalbn+0x104>)
 800ec78:	429e      	cmp	r6, r3
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	460d      	mov	r5, r1
 800ec7e:	da10      	bge.n	800eca2 <scalbn+0x52>
 800ec80:	a32b      	add	r3, pc, #172	; (adr r3, 800ed30 <scalbn+0xe0>)
 800ec82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec86:	e03a      	b.n	800ecfe <scalbn+0xae>
 800ec88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ec8c:	428a      	cmp	r2, r1
 800ec8e:	d10c      	bne.n	800ecaa <scalbn+0x5a>
 800ec90:	ee10 2a10 	vmov	r2, s0
 800ec94:	4620      	mov	r0, r4
 800ec96:	4629      	mov	r1, r5
 800ec98:	f7f1 fb10 	bl	80002bc <__adddf3>
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	460d      	mov	r5, r1
 800eca0:	e019      	b.n	800ecd6 <scalbn+0x86>
 800eca2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eca6:	460b      	mov	r3, r1
 800eca8:	3a36      	subs	r2, #54	; 0x36
 800ecaa:	4432      	add	r2, r6
 800ecac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ecb0:	428a      	cmp	r2, r1
 800ecb2:	dd08      	ble.n	800ecc6 <scalbn+0x76>
 800ecb4:	2d00      	cmp	r5, #0
 800ecb6:	a120      	add	r1, pc, #128	; (adr r1, 800ed38 <scalbn+0xe8>)
 800ecb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecbc:	da1c      	bge.n	800ecf8 <scalbn+0xa8>
 800ecbe:	a120      	add	r1, pc, #128	; (adr r1, 800ed40 <scalbn+0xf0>)
 800ecc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecc4:	e018      	b.n	800ecf8 <scalbn+0xa8>
 800ecc6:	2a00      	cmp	r2, #0
 800ecc8:	dd08      	ble.n	800ecdc <scalbn+0x8c>
 800ecca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ecce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ecd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ecd6:	ec45 4b10 	vmov	d0, r4, r5
 800ecda:	bd70      	pop	{r4, r5, r6, pc}
 800ecdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ece0:	da19      	bge.n	800ed16 <scalbn+0xc6>
 800ece2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ece6:	429e      	cmp	r6, r3
 800ece8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ecec:	dd0a      	ble.n	800ed04 <scalbn+0xb4>
 800ecee:	a112      	add	r1, pc, #72	; (adr r1, 800ed38 <scalbn+0xe8>)
 800ecf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d1e2      	bne.n	800ecbe <scalbn+0x6e>
 800ecf8:	a30f      	add	r3, pc, #60	; (adr r3, 800ed38 <scalbn+0xe8>)
 800ecfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfe:	f7f1 fc93 	bl	8000628 <__aeabi_dmul>
 800ed02:	e7cb      	b.n	800ec9c <scalbn+0x4c>
 800ed04:	a10a      	add	r1, pc, #40	; (adr r1, 800ed30 <scalbn+0xe0>)
 800ed06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d0b8      	beq.n	800ec80 <scalbn+0x30>
 800ed0e:	a10e      	add	r1, pc, #56	; (adr r1, 800ed48 <scalbn+0xf8>)
 800ed10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed14:	e7b4      	b.n	800ec80 <scalbn+0x30>
 800ed16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed1a:	3236      	adds	r2, #54	; 0x36
 800ed1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ed24:	4620      	mov	r0, r4
 800ed26:	4b0c      	ldr	r3, [pc, #48]	; (800ed58 <scalbn+0x108>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	e7e8      	b.n	800ecfe <scalbn+0xae>
 800ed2c:	f3af 8000 	nop.w
 800ed30:	c2f8f359 	.word	0xc2f8f359
 800ed34:	01a56e1f 	.word	0x01a56e1f
 800ed38:	8800759c 	.word	0x8800759c
 800ed3c:	7e37e43c 	.word	0x7e37e43c
 800ed40:	8800759c 	.word	0x8800759c
 800ed44:	fe37e43c 	.word	0xfe37e43c
 800ed48:	c2f8f359 	.word	0xc2f8f359
 800ed4c:	81a56e1f 	.word	0x81a56e1f
 800ed50:	43500000 	.word	0x43500000
 800ed54:	ffff3cb0 	.word	0xffff3cb0
 800ed58:	3c900000 	.word	0x3c900000

0800ed5c <atanf>:
 800ed5c:	b538      	push	{r3, r4, r5, lr}
 800ed5e:	ee10 5a10 	vmov	r5, s0
 800ed62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ed66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ed6a:	eef0 7a40 	vmov.f32	s15, s0
 800ed6e:	db10      	blt.n	800ed92 <atanf+0x36>
 800ed70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ed74:	dd04      	ble.n	800ed80 <atanf+0x24>
 800ed76:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ed7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ed7e:	bd38      	pop	{r3, r4, r5, pc}
 800ed80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800eeb8 <atanf+0x15c>
 800ed84:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800eebc <atanf+0x160>
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	bfd8      	it	le
 800ed8c:	eef0 7a40 	vmovle.f32	s15, s0
 800ed90:	e7f3      	b.n	800ed7a <atanf+0x1e>
 800ed92:	4b4b      	ldr	r3, [pc, #300]	; (800eec0 <atanf+0x164>)
 800ed94:	429c      	cmp	r4, r3
 800ed96:	dc10      	bgt.n	800edba <atanf+0x5e>
 800ed98:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ed9c:	da0a      	bge.n	800edb4 <atanf+0x58>
 800ed9e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800eec4 <atanf+0x168>
 800eda2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800eda6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800edaa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800edae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb2:	dce2      	bgt.n	800ed7a <atanf+0x1e>
 800edb4:	f04f 33ff 	mov.w	r3, #4294967295
 800edb8:	e013      	b.n	800ede2 <atanf+0x86>
 800edba:	f000 f8a3 	bl	800ef04 <fabsf>
 800edbe:	4b42      	ldr	r3, [pc, #264]	; (800eec8 <atanf+0x16c>)
 800edc0:	429c      	cmp	r4, r3
 800edc2:	dc4f      	bgt.n	800ee64 <atanf+0x108>
 800edc4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800edc8:	429c      	cmp	r4, r3
 800edca:	dc41      	bgt.n	800ee50 <atanf+0xf4>
 800edcc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800edd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800edd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800edd8:	2300      	movs	r3, #0
 800edda:	ee30 0a27 	vadd.f32	s0, s0, s15
 800edde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ede2:	1c5a      	adds	r2, r3, #1
 800ede4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ede8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800eecc <atanf+0x170>
 800edec:	eddf 5a38 	vldr	s11, [pc, #224]	; 800eed0 <atanf+0x174>
 800edf0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800eed4 <atanf+0x178>
 800edf4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800edf8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800edfc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800eed8 <atanf+0x17c>
 800ee00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ee04:	eddf 5a35 	vldr	s11, [pc, #212]	; 800eedc <atanf+0x180>
 800ee08:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ee0c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800eee0 <atanf+0x184>
 800ee10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ee14:	eddf 5a33 	vldr	s11, [pc, #204]	; 800eee4 <atanf+0x188>
 800ee18:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ee1c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800eee8 <atanf+0x18c>
 800ee20:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ee24:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800eeec <atanf+0x190>
 800ee28:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ee2c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800eef0 <atanf+0x194>
 800ee30:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ee34:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800eef4 <atanf+0x198>
 800ee38:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ee3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ee40:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ee44:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ee48:	d121      	bne.n	800ee8e <atanf+0x132>
 800ee4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ee4e:	e794      	b.n	800ed7a <atanf+0x1e>
 800ee50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ee54:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ee58:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ee62:	e7be      	b.n	800ede2 <atanf+0x86>
 800ee64:	4b24      	ldr	r3, [pc, #144]	; (800eef8 <atanf+0x19c>)
 800ee66:	429c      	cmp	r4, r3
 800ee68:	dc0b      	bgt.n	800ee82 <atanf+0x126>
 800ee6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ee6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ee72:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ee76:	2302      	movs	r3, #2
 800ee78:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ee7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee80:	e7af      	b.n	800ede2 <atanf+0x86>
 800ee82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ee86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ee8a:	2303      	movs	r3, #3
 800ee8c:	e7a9      	b.n	800ede2 <atanf+0x86>
 800ee8e:	4a1b      	ldr	r2, [pc, #108]	; (800eefc <atanf+0x1a0>)
 800ee90:	491b      	ldr	r1, [pc, #108]	; (800ef00 <atanf+0x1a4>)
 800ee92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ee96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ee9a:	ed93 0a00 	vldr	s0, [r3]
 800ee9e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800eea2:	ed92 0a00 	vldr	s0, [r2]
 800eea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeaa:	2d00      	cmp	r5, #0
 800eeac:	ee70 7a67 	vsub.f32	s15, s0, s15
 800eeb0:	bfb8      	it	lt
 800eeb2:	eef1 7a67 	vneglt.f32	s15, s15
 800eeb6:	e760      	b.n	800ed7a <atanf+0x1e>
 800eeb8:	3fc90fdb 	.word	0x3fc90fdb
 800eebc:	bfc90fdb 	.word	0xbfc90fdb
 800eec0:	3edfffff 	.word	0x3edfffff
 800eec4:	7149f2ca 	.word	0x7149f2ca
 800eec8:	3f97ffff 	.word	0x3f97ffff
 800eecc:	3c8569d7 	.word	0x3c8569d7
 800eed0:	3d4bda59 	.word	0x3d4bda59
 800eed4:	bd6ef16b 	.word	0xbd6ef16b
 800eed8:	3d886b35 	.word	0x3d886b35
 800eedc:	3dba2e6e 	.word	0x3dba2e6e
 800eee0:	3e124925 	.word	0x3e124925
 800eee4:	3eaaaaab 	.word	0x3eaaaaab
 800eee8:	bd15a221 	.word	0xbd15a221
 800eeec:	bd9d8795 	.word	0xbd9d8795
 800eef0:	bde38e38 	.word	0xbde38e38
 800eef4:	be4ccccd 	.word	0xbe4ccccd
 800eef8:	401bffff 	.word	0x401bffff
 800eefc:	08010d88 	.word	0x08010d88
 800ef00:	08010d98 	.word	0x08010d98

0800ef04 <fabsf>:
 800ef04:	ee10 3a10 	vmov	r3, s0
 800ef08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef0c:	ee00 3a10 	vmov	s0, r3
 800ef10:	4770      	bx	lr
	...

0800ef14 <nanf>:
 800ef14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef1c <nanf+0x8>
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	7fc00000 	.word	0x7fc00000

0800ef20 <__errno>:
 800ef20:	4b01      	ldr	r3, [pc, #4]	; (800ef28 <__errno+0x8>)
 800ef22:	6818      	ldr	r0, [r3, #0]
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	2000004c 	.word	0x2000004c

0800ef2c <__libc_init_array>:
 800ef2c:	b570      	push	{r4, r5, r6, lr}
 800ef2e:	4d0d      	ldr	r5, [pc, #52]	; (800ef64 <__libc_init_array+0x38>)
 800ef30:	4c0d      	ldr	r4, [pc, #52]	; (800ef68 <__libc_init_array+0x3c>)
 800ef32:	1b64      	subs	r4, r4, r5
 800ef34:	10a4      	asrs	r4, r4, #2
 800ef36:	2600      	movs	r6, #0
 800ef38:	42a6      	cmp	r6, r4
 800ef3a:	d109      	bne.n	800ef50 <__libc_init_array+0x24>
 800ef3c:	4d0b      	ldr	r5, [pc, #44]	; (800ef6c <__libc_init_array+0x40>)
 800ef3e:	4c0c      	ldr	r4, [pc, #48]	; (800ef70 <__libc_init_array+0x44>)
 800ef40:	f001 f88e 	bl	8010060 <_init>
 800ef44:	1b64      	subs	r4, r4, r5
 800ef46:	10a4      	asrs	r4, r4, #2
 800ef48:	2600      	movs	r6, #0
 800ef4a:	42a6      	cmp	r6, r4
 800ef4c:	d105      	bne.n	800ef5a <__libc_init_array+0x2e>
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef54:	4798      	blx	r3
 800ef56:	3601      	adds	r6, #1
 800ef58:	e7ee      	b.n	800ef38 <__libc_init_array+0xc>
 800ef5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef5e:	4798      	blx	r3
 800ef60:	3601      	adds	r6, #1
 800ef62:	e7f2      	b.n	800ef4a <__libc_init_array+0x1e>
 800ef64:	08010e48 	.word	0x08010e48
 800ef68:	08010e48 	.word	0x08010e48
 800ef6c:	08010e48 	.word	0x08010e48
 800ef70:	08010e4c 	.word	0x08010e4c

0800ef74 <memcpy>:
 800ef74:	440a      	add	r2, r1
 800ef76:	4291      	cmp	r1, r2
 800ef78:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef7c:	d100      	bne.n	800ef80 <memcpy+0xc>
 800ef7e:	4770      	bx	lr
 800ef80:	b510      	push	{r4, lr}
 800ef82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef8a:	4291      	cmp	r1, r2
 800ef8c:	d1f9      	bne.n	800ef82 <memcpy+0xe>
 800ef8e:	bd10      	pop	{r4, pc}

0800ef90 <memmove>:
 800ef90:	4288      	cmp	r0, r1
 800ef92:	b510      	push	{r4, lr}
 800ef94:	eb01 0402 	add.w	r4, r1, r2
 800ef98:	d902      	bls.n	800efa0 <memmove+0x10>
 800ef9a:	4284      	cmp	r4, r0
 800ef9c:	4623      	mov	r3, r4
 800ef9e:	d807      	bhi.n	800efb0 <memmove+0x20>
 800efa0:	1e43      	subs	r3, r0, #1
 800efa2:	42a1      	cmp	r1, r4
 800efa4:	d008      	beq.n	800efb8 <memmove+0x28>
 800efa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efae:	e7f8      	b.n	800efa2 <memmove+0x12>
 800efb0:	4402      	add	r2, r0
 800efb2:	4601      	mov	r1, r0
 800efb4:	428a      	cmp	r2, r1
 800efb6:	d100      	bne.n	800efba <memmove+0x2a>
 800efb8:	bd10      	pop	{r4, pc}
 800efba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efc2:	e7f7      	b.n	800efb4 <memmove+0x24>

0800efc4 <memset>:
 800efc4:	4402      	add	r2, r0
 800efc6:	4603      	mov	r3, r0
 800efc8:	4293      	cmp	r3, r2
 800efca:	d100      	bne.n	800efce <memset+0xa>
 800efcc:	4770      	bx	lr
 800efce:	f803 1b01 	strb.w	r1, [r3], #1
 800efd2:	e7f9      	b.n	800efc8 <memset+0x4>

0800efd4 <_free_r>:
 800efd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efd6:	2900      	cmp	r1, #0
 800efd8:	d044      	beq.n	800f064 <_free_r+0x90>
 800efda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efde:	9001      	str	r0, [sp, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	f1a1 0404 	sub.w	r4, r1, #4
 800efe6:	bfb8      	it	lt
 800efe8:	18e4      	addlt	r4, r4, r3
 800efea:	f000 fc59 	bl	800f8a0 <__malloc_lock>
 800efee:	4a1e      	ldr	r2, [pc, #120]	; (800f068 <_free_r+0x94>)
 800eff0:	9801      	ldr	r0, [sp, #4]
 800eff2:	6813      	ldr	r3, [r2, #0]
 800eff4:	b933      	cbnz	r3, 800f004 <_free_r+0x30>
 800eff6:	6063      	str	r3, [r4, #4]
 800eff8:	6014      	str	r4, [r2, #0]
 800effa:	b003      	add	sp, #12
 800effc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f000:	f000 bc54 	b.w	800f8ac <__malloc_unlock>
 800f004:	42a3      	cmp	r3, r4
 800f006:	d908      	bls.n	800f01a <_free_r+0x46>
 800f008:	6825      	ldr	r5, [r4, #0]
 800f00a:	1961      	adds	r1, r4, r5
 800f00c:	428b      	cmp	r3, r1
 800f00e:	bf01      	itttt	eq
 800f010:	6819      	ldreq	r1, [r3, #0]
 800f012:	685b      	ldreq	r3, [r3, #4]
 800f014:	1949      	addeq	r1, r1, r5
 800f016:	6021      	streq	r1, [r4, #0]
 800f018:	e7ed      	b.n	800eff6 <_free_r+0x22>
 800f01a:	461a      	mov	r2, r3
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	b10b      	cbz	r3, 800f024 <_free_r+0x50>
 800f020:	42a3      	cmp	r3, r4
 800f022:	d9fa      	bls.n	800f01a <_free_r+0x46>
 800f024:	6811      	ldr	r1, [r2, #0]
 800f026:	1855      	adds	r5, r2, r1
 800f028:	42a5      	cmp	r5, r4
 800f02a:	d10b      	bne.n	800f044 <_free_r+0x70>
 800f02c:	6824      	ldr	r4, [r4, #0]
 800f02e:	4421      	add	r1, r4
 800f030:	1854      	adds	r4, r2, r1
 800f032:	42a3      	cmp	r3, r4
 800f034:	6011      	str	r1, [r2, #0]
 800f036:	d1e0      	bne.n	800effa <_free_r+0x26>
 800f038:	681c      	ldr	r4, [r3, #0]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	6053      	str	r3, [r2, #4]
 800f03e:	4421      	add	r1, r4
 800f040:	6011      	str	r1, [r2, #0]
 800f042:	e7da      	b.n	800effa <_free_r+0x26>
 800f044:	d902      	bls.n	800f04c <_free_r+0x78>
 800f046:	230c      	movs	r3, #12
 800f048:	6003      	str	r3, [r0, #0]
 800f04a:	e7d6      	b.n	800effa <_free_r+0x26>
 800f04c:	6825      	ldr	r5, [r4, #0]
 800f04e:	1961      	adds	r1, r4, r5
 800f050:	428b      	cmp	r3, r1
 800f052:	bf04      	itt	eq
 800f054:	6819      	ldreq	r1, [r3, #0]
 800f056:	685b      	ldreq	r3, [r3, #4]
 800f058:	6063      	str	r3, [r4, #4]
 800f05a:	bf04      	itt	eq
 800f05c:	1949      	addeq	r1, r1, r5
 800f05e:	6021      	streq	r1, [r4, #0]
 800f060:	6054      	str	r4, [r2, #4]
 800f062:	e7ca      	b.n	800effa <_free_r+0x26>
 800f064:	b003      	add	sp, #12
 800f066:	bd30      	pop	{r4, r5, pc}
 800f068:	20002954 	.word	0x20002954

0800f06c <sbrk_aligned>:
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	4e0e      	ldr	r6, [pc, #56]	; (800f0a8 <sbrk_aligned+0x3c>)
 800f070:	460c      	mov	r4, r1
 800f072:	6831      	ldr	r1, [r6, #0]
 800f074:	4605      	mov	r5, r0
 800f076:	b911      	cbnz	r1, 800f07e <sbrk_aligned+0x12>
 800f078:	f000 f902 	bl	800f280 <_sbrk_r>
 800f07c:	6030      	str	r0, [r6, #0]
 800f07e:	4621      	mov	r1, r4
 800f080:	4628      	mov	r0, r5
 800f082:	f000 f8fd 	bl	800f280 <_sbrk_r>
 800f086:	1c43      	adds	r3, r0, #1
 800f088:	d00a      	beq.n	800f0a0 <sbrk_aligned+0x34>
 800f08a:	1cc4      	adds	r4, r0, #3
 800f08c:	f024 0403 	bic.w	r4, r4, #3
 800f090:	42a0      	cmp	r0, r4
 800f092:	d007      	beq.n	800f0a4 <sbrk_aligned+0x38>
 800f094:	1a21      	subs	r1, r4, r0
 800f096:	4628      	mov	r0, r5
 800f098:	f000 f8f2 	bl	800f280 <_sbrk_r>
 800f09c:	3001      	adds	r0, #1
 800f09e:	d101      	bne.n	800f0a4 <sbrk_aligned+0x38>
 800f0a0:	f04f 34ff 	mov.w	r4, #4294967295
 800f0a4:	4620      	mov	r0, r4
 800f0a6:	bd70      	pop	{r4, r5, r6, pc}
 800f0a8:	20002958 	.word	0x20002958

0800f0ac <_malloc_r>:
 800f0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0b0:	1ccd      	adds	r5, r1, #3
 800f0b2:	f025 0503 	bic.w	r5, r5, #3
 800f0b6:	3508      	adds	r5, #8
 800f0b8:	2d0c      	cmp	r5, #12
 800f0ba:	bf38      	it	cc
 800f0bc:	250c      	movcc	r5, #12
 800f0be:	2d00      	cmp	r5, #0
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	db01      	blt.n	800f0c8 <_malloc_r+0x1c>
 800f0c4:	42a9      	cmp	r1, r5
 800f0c6:	d905      	bls.n	800f0d4 <_malloc_r+0x28>
 800f0c8:	230c      	movs	r3, #12
 800f0ca:	603b      	str	r3, [r7, #0]
 800f0cc:	2600      	movs	r6, #0
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d4:	4e2e      	ldr	r6, [pc, #184]	; (800f190 <_malloc_r+0xe4>)
 800f0d6:	f000 fbe3 	bl	800f8a0 <__malloc_lock>
 800f0da:	6833      	ldr	r3, [r6, #0]
 800f0dc:	461c      	mov	r4, r3
 800f0de:	bb34      	cbnz	r4, 800f12e <_malloc_r+0x82>
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	4638      	mov	r0, r7
 800f0e4:	f7ff ffc2 	bl	800f06c <sbrk_aligned>
 800f0e8:	1c43      	adds	r3, r0, #1
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	d14d      	bne.n	800f18a <_malloc_r+0xde>
 800f0ee:	6834      	ldr	r4, [r6, #0]
 800f0f0:	4626      	mov	r6, r4
 800f0f2:	2e00      	cmp	r6, #0
 800f0f4:	d140      	bne.n	800f178 <_malloc_r+0xcc>
 800f0f6:	6823      	ldr	r3, [r4, #0]
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4638      	mov	r0, r7
 800f0fc:	eb04 0803 	add.w	r8, r4, r3
 800f100:	f000 f8be 	bl	800f280 <_sbrk_r>
 800f104:	4580      	cmp	r8, r0
 800f106:	d13a      	bne.n	800f17e <_malloc_r+0xd2>
 800f108:	6821      	ldr	r1, [r4, #0]
 800f10a:	3503      	adds	r5, #3
 800f10c:	1a6d      	subs	r5, r5, r1
 800f10e:	f025 0503 	bic.w	r5, r5, #3
 800f112:	3508      	adds	r5, #8
 800f114:	2d0c      	cmp	r5, #12
 800f116:	bf38      	it	cc
 800f118:	250c      	movcc	r5, #12
 800f11a:	4629      	mov	r1, r5
 800f11c:	4638      	mov	r0, r7
 800f11e:	f7ff ffa5 	bl	800f06c <sbrk_aligned>
 800f122:	3001      	adds	r0, #1
 800f124:	d02b      	beq.n	800f17e <_malloc_r+0xd2>
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	442b      	add	r3, r5
 800f12a:	6023      	str	r3, [r4, #0]
 800f12c:	e00e      	b.n	800f14c <_malloc_r+0xa0>
 800f12e:	6822      	ldr	r2, [r4, #0]
 800f130:	1b52      	subs	r2, r2, r5
 800f132:	d41e      	bmi.n	800f172 <_malloc_r+0xc6>
 800f134:	2a0b      	cmp	r2, #11
 800f136:	d916      	bls.n	800f166 <_malloc_r+0xba>
 800f138:	1961      	adds	r1, r4, r5
 800f13a:	42a3      	cmp	r3, r4
 800f13c:	6025      	str	r5, [r4, #0]
 800f13e:	bf18      	it	ne
 800f140:	6059      	strne	r1, [r3, #4]
 800f142:	6863      	ldr	r3, [r4, #4]
 800f144:	bf08      	it	eq
 800f146:	6031      	streq	r1, [r6, #0]
 800f148:	5162      	str	r2, [r4, r5]
 800f14a:	604b      	str	r3, [r1, #4]
 800f14c:	4638      	mov	r0, r7
 800f14e:	f104 060b 	add.w	r6, r4, #11
 800f152:	f000 fbab 	bl	800f8ac <__malloc_unlock>
 800f156:	f026 0607 	bic.w	r6, r6, #7
 800f15a:	1d23      	adds	r3, r4, #4
 800f15c:	1af2      	subs	r2, r6, r3
 800f15e:	d0b6      	beq.n	800f0ce <_malloc_r+0x22>
 800f160:	1b9b      	subs	r3, r3, r6
 800f162:	50a3      	str	r3, [r4, r2]
 800f164:	e7b3      	b.n	800f0ce <_malloc_r+0x22>
 800f166:	6862      	ldr	r2, [r4, #4]
 800f168:	42a3      	cmp	r3, r4
 800f16a:	bf0c      	ite	eq
 800f16c:	6032      	streq	r2, [r6, #0]
 800f16e:	605a      	strne	r2, [r3, #4]
 800f170:	e7ec      	b.n	800f14c <_malloc_r+0xa0>
 800f172:	4623      	mov	r3, r4
 800f174:	6864      	ldr	r4, [r4, #4]
 800f176:	e7b2      	b.n	800f0de <_malloc_r+0x32>
 800f178:	4634      	mov	r4, r6
 800f17a:	6876      	ldr	r6, [r6, #4]
 800f17c:	e7b9      	b.n	800f0f2 <_malloc_r+0x46>
 800f17e:	230c      	movs	r3, #12
 800f180:	603b      	str	r3, [r7, #0]
 800f182:	4638      	mov	r0, r7
 800f184:	f000 fb92 	bl	800f8ac <__malloc_unlock>
 800f188:	e7a1      	b.n	800f0ce <_malloc_r+0x22>
 800f18a:	6025      	str	r5, [r4, #0]
 800f18c:	e7de      	b.n	800f14c <_malloc_r+0xa0>
 800f18e:	bf00      	nop
 800f190:	20002954 	.word	0x20002954

0800f194 <_puts_r>:
 800f194:	b570      	push	{r4, r5, r6, lr}
 800f196:	460e      	mov	r6, r1
 800f198:	4605      	mov	r5, r0
 800f19a:	b118      	cbz	r0, 800f1a4 <_puts_r+0x10>
 800f19c:	6983      	ldr	r3, [r0, #24]
 800f19e:	b90b      	cbnz	r3, 800f1a4 <_puts_r+0x10>
 800f1a0:	f000 fa78 	bl	800f694 <__sinit>
 800f1a4:	69ab      	ldr	r3, [r5, #24]
 800f1a6:	68ac      	ldr	r4, [r5, #8]
 800f1a8:	b913      	cbnz	r3, 800f1b0 <_puts_r+0x1c>
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f000 fa72 	bl	800f694 <__sinit>
 800f1b0:	4b2c      	ldr	r3, [pc, #176]	; (800f264 <_puts_r+0xd0>)
 800f1b2:	429c      	cmp	r4, r3
 800f1b4:	d120      	bne.n	800f1f8 <_puts_r+0x64>
 800f1b6:	686c      	ldr	r4, [r5, #4]
 800f1b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1ba:	07db      	lsls	r3, r3, #31
 800f1bc:	d405      	bmi.n	800f1ca <_puts_r+0x36>
 800f1be:	89a3      	ldrh	r3, [r4, #12]
 800f1c0:	0598      	lsls	r0, r3, #22
 800f1c2:	d402      	bmi.n	800f1ca <_puts_r+0x36>
 800f1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1c6:	f000 fb03 	bl	800f7d0 <__retarget_lock_acquire_recursive>
 800f1ca:	89a3      	ldrh	r3, [r4, #12]
 800f1cc:	0719      	lsls	r1, r3, #28
 800f1ce:	d51d      	bpl.n	800f20c <_puts_r+0x78>
 800f1d0:	6923      	ldr	r3, [r4, #16]
 800f1d2:	b1db      	cbz	r3, 800f20c <_puts_r+0x78>
 800f1d4:	3e01      	subs	r6, #1
 800f1d6:	68a3      	ldr	r3, [r4, #8]
 800f1d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	60a3      	str	r3, [r4, #8]
 800f1e0:	bb39      	cbnz	r1, 800f232 <_puts_r+0x9e>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	da38      	bge.n	800f258 <_puts_r+0xc4>
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	210a      	movs	r1, #10
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f000 f878 	bl	800f2e0 <__swbuf_r>
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	d011      	beq.n	800f218 <_puts_r+0x84>
 800f1f4:	250a      	movs	r5, #10
 800f1f6:	e011      	b.n	800f21c <_puts_r+0x88>
 800f1f8:	4b1b      	ldr	r3, [pc, #108]	; (800f268 <_puts_r+0xd4>)
 800f1fa:	429c      	cmp	r4, r3
 800f1fc:	d101      	bne.n	800f202 <_puts_r+0x6e>
 800f1fe:	68ac      	ldr	r4, [r5, #8]
 800f200:	e7da      	b.n	800f1b8 <_puts_r+0x24>
 800f202:	4b1a      	ldr	r3, [pc, #104]	; (800f26c <_puts_r+0xd8>)
 800f204:	429c      	cmp	r4, r3
 800f206:	bf08      	it	eq
 800f208:	68ec      	ldreq	r4, [r5, #12]
 800f20a:	e7d5      	b.n	800f1b8 <_puts_r+0x24>
 800f20c:	4621      	mov	r1, r4
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f8b8 	bl	800f384 <__swsetup_r>
 800f214:	2800      	cmp	r0, #0
 800f216:	d0dd      	beq.n	800f1d4 <_puts_r+0x40>
 800f218:	f04f 35ff 	mov.w	r5, #4294967295
 800f21c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f21e:	07da      	lsls	r2, r3, #31
 800f220:	d405      	bmi.n	800f22e <_puts_r+0x9a>
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	059b      	lsls	r3, r3, #22
 800f226:	d402      	bmi.n	800f22e <_puts_r+0x9a>
 800f228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f22a:	f000 fad2 	bl	800f7d2 <__retarget_lock_release_recursive>
 800f22e:	4628      	mov	r0, r5
 800f230:	bd70      	pop	{r4, r5, r6, pc}
 800f232:	2b00      	cmp	r3, #0
 800f234:	da04      	bge.n	800f240 <_puts_r+0xac>
 800f236:	69a2      	ldr	r2, [r4, #24]
 800f238:	429a      	cmp	r2, r3
 800f23a:	dc06      	bgt.n	800f24a <_puts_r+0xb6>
 800f23c:	290a      	cmp	r1, #10
 800f23e:	d004      	beq.n	800f24a <_puts_r+0xb6>
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	1c5a      	adds	r2, r3, #1
 800f244:	6022      	str	r2, [r4, #0]
 800f246:	7019      	strb	r1, [r3, #0]
 800f248:	e7c5      	b.n	800f1d6 <_puts_r+0x42>
 800f24a:	4622      	mov	r2, r4
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 f847 	bl	800f2e0 <__swbuf_r>
 800f252:	3001      	adds	r0, #1
 800f254:	d1bf      	bne.n	800f1d6 <_puts_r+0x42>
 800f256:	e7df      	b.n	800f218 <_puts_r+0x84>
 800f258:	6823      	ldr	r3, [r4, #0]
 800f25a:	250a      	movs	r5, #10
 800f25c:	1c5a      	adds	r2, r3, #1
 800f25e:	6022      	str	r2, [r4, #0]
 800f260:	701d      	strb	r5, [r3, #0]
 800f262:	e7db      	b.n	800f21c <_puts_r+0x88>
 800f264:	08010dcc 	.word	0x08010dcc
 800f268:	08010dec 	.word	0x08010dec
 800f26c:	08010dac 	.word	0x08010dac

0800f270 <puts>:
 800f270:	4b02      	ldr	r3, [pc, #8]	; (800f27c <puts+0xc>)
 800f272:	4601      	mov	r1, r0
 800f274:	6818      	ldr	r0, [r3, #0]
 800f276:	f7ff bf8d 	b.w	800f194 <_puts_r>
 800f27a:	bf00      	nop
 800f27c:	2000004c 	.word	0x2000004c

0800f280 <_sbrk_r>:
 800f280:	b538      	push	{r3, r4, r5, lr}
 800f282:	4d06      	ldr	r5, [pc, #24]	; (800f29c <_sbrk_r+0x1c>)
 800f284:	2300      	movs	r3, #0
 800f286:	4604      	mov	r4, r0
 800f288:	4608      	mov	r0, r1
 800f28a:	602b      	str	r3, [r5, #0]
 800f28c:	f7f7 fca8 	bl	8006be0 <_sbrk>
 800f290:	1c43      	adds	r3, r0, #1
 800f292:	d102      	bne.n	800f29a <_sbrk_r+0x1a>
 800f294:	682b      	ldr	r3, [r5, #0]
 800f296:	b103      	cbz	r3, 800f29a <_sbrk_r+0x1a>
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	20002960 	.word	0x20002960

0800f2a0 <siprintf>:
 800f2a0:	b40e      	push	{r1, r2, r3}
 800f2a2:	b500      	push	{lr}
 800f2a4:	b09c      	sub	sp, #112	; 0x70
 800f2a6:	ab1d      	add	r3, sp, #116	; 0x74
 800f2a8:	9002      	str	r0, [sp, #8]
 800f2aa:	9006      	str	r0, [sp, #24]
 800f2ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2b0:	4809      	ldr	r0, [pc, #36]	; (800f2d8 <siprintf+0x38>)
 800f2b2:	9107      	str	r1, [sp, #28]
 800f2b4:	9104      	str	r1, [sp, #16]
 800f2b6:	4909      	ldr	r1, [pc, #36]	; (800f2dc <siprintf+0x3c>)
 800f2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2bc:	9105      	str	r1, [sp, #20]
 800f2be:	6800      	ldr	r0, [r0, #0]
 800f2c0:	9301      	str	r3, [sp, #4]
 800f2c2:	a902      	add	r1, sp, #8
 800f2c4:	f000 fb54 	bl	800f970 <_svfiprintf_r>
 800f2c8:	9b02      	ldr	r3, [sp, #8]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	701a      	strb	r2, [r3, #0]
 800f2ce:	b01c      	add	sp, #112	; 0x70
 800f2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d4:	b003      	add	sp, #12
 800f2d6:	4770      	bx	lr
 800f2d8:	2000004c 	.word	0x2000004c
 800f2dc:	ffff0208 	.word	0xffff0208

0800f2e0 <__swbuf_r>:
 800f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e2:	460e      	mov	r6, r1
 800f2e4:	4614      	mov	r4, r2
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	b118      	cbz	r0, 800f2f2 <__swbuf_r+0x12>
 800f2ea:	6983      	ldr	r3, [r0, #24]
 800f2ec:	b90b      	cbnz	r3, 800f2f2 <__swbuf_r+0x12>
 800f2ee:	f000 f9d1 	bl	800f694 <__sinit>
 800f2f2:	4b21      	ldr	r3, [pc, #132]	; (800f378 <__swbuf_r+0x98>)
 800f2f4:	429c      	cmp	r4, r3
 800f2f6:	d12b      	bne.n	800f350 <__swbuf_r+0x70>
 800f2f8:	686c      	ldr	r4, [r5, #4]
 800f2fa:	69a3      	ldr	r3, [r4, #24]
 800f2fc:	60a3      	str	r3, [r4, #8]
 800f2fe:	89a3      	ldrh	r3, [r4, #12]
 800f300:	071a      	lsls	r2, r3, #28
 800f302:	d52f      	bpl.n	800f364 <__swbuf_r+0x84>
 800f304:	6923      	ldr	r3, [r4, #16]
 800f306:	b36b      	cbz	r3, 800f364 <__swbuf_r+0x84>
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	6820      	ldr	r0, [r4, #0]
 800f30c:	1ac0      	subs	r0, r0, r3
 800f30e:	6963      	ldr	r3, [r4, #20]
 800f310:	b2f6      	uxtb	r6, r6
 800f312:	4283      	cmp	r3, r0
 800f314:	4637      	mov	r7, r6
 800f316:	dc04      	bgt.n	800f322 <__swbuf_r+0x42>
 800f318:	4621      	mov	r1, r4
 800f31a:	4628      	mov	r0, r5
 800f31c:	f000 f926 	bl	800f56c <_fflush_r>
 800f320:	bb30      	cbnz	r0, 800f370 <__swbuf_r+0x90>
 800f322:	68a3      	ldr	r3, [r4, #8]
 800f324:	3b01      	subs	r3, #1
 800f326:	60a3      	str	r3, [r4, #8]
 800f328:	6823      	ldr	r3, [r4, #0]
 800f32a:	1c5a      	adds	r2, r3, #1
 800f32c:	6022      	str	r2, [r4, #0]
 800f32e:	701e      	strb	r6, [r3, #0]
 800f330:	6963      	ldr	r3, [r4, #20]
 800f332:	3001      	adds	r0, #1
 800f334:	4283      	cmp	r3, r0
 800f336:	d004      	beq.n	800f342 <__swbuf_r+0x62>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	07db      	lsls	r3, r3, #31
 800f33c:	d506      	bpl.n	800f34c <__swbuf_r+0x6c>
 800f33e:	2e0a      	cmp	r6, #10
 800f340:	d104      	bne.n	800f34c <__swbuf_r+0x6c>
 800f342:	4621      	mov	r1, r4
 800f344:	4628      	mov	r0, r5
 800f346:	f000 f911 	bl	800f56c <_fflush_r>
 800f34a:	b988      	cbnz	r0, 800f370 <__swbuf_r+0x90>
 800f34c:	4638      	mov	r0, r7
 800f34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f350:	4b0a      	ldr	r3, [pc, #40]	; (800f37c <__swbuf_r+0x9c>)
 800f352:	429c      	cmp	r4, r3
 800f354:	d101      	bne.n	800f35a <__swbuf_r+0x7a>
 800f356:	68ac      	ldr	r4, [r5, #8]
 800f358:	e7cf      	b.n	800f2fa <__swbuf_r+0x1a>
 800f35a:	4b09      	ldr	r3, [pc, #36]	; (800f380 <__swbuf_r+0xa0>)
 800f35c:	429c      	cmp	r4, r3
 800f35e:	bf08      	it	eq
 800f360:	68ec      	ldreq	r4, [r5, #12]
 800f362:	e7ca      	b.n	800f2fa <__swbuf_r+0x1a>
 800f364:	4621      	mov	r1, r4
 800f366:	4628      	mov	r0, r5
 800f368:	f000 f80c 	bl	800f384 <__swsetup_r>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d0cb      	beq.n	800f308 <__swbuf_r+0x28>
 800f370:	f04f 37ff 	mov.w	r7, #4294967295
 800f374:	e7ea      	b.n	800f34c <__swbuf_r+0x6c>
 800f376:	bf00      	nop
 800f378:	08010dcc 	.word	0x08010dcc
 800f37c:	08010dec 	.word	0x08010dec
 800f380:	08010dac 	.word	0x08010dac

0800f384 <__swsetup_r>:
 800f384:	4b32      	ldr	r3, [pc, #200]	; (800f450 <__swsetup_r+0xcc>)
 800f386:	b570      	push	{r4, r5, r6, lr}
 800f388:	681d      	ldr	r5, [r3, #0]
 800f38a:	4606      	mov	r6, r0
 800f38c:	460c      	mov	r4, r1
 800f38e:	b125      	cbz	r5, 800f39a <__swsetup_r+0x16>
 800f390:	69ab      	ldr	r3, [r5, #24]
 800f392:	b913      	cbnz	r3, 800f39a <__swsetup_r+0x16>
 800f394:	4628      	mov	r0, r5
 800f396:	f000 f97d 	bl	800f694 <__sinit>
 800f39a:	4b2e      	ldr	r3, [pc, #184]	; (800f454 <__swsetup_r+0xd0>)
 800f39c:	429c      	cmp	r4, r3
 800f39e:	d10f      	bne.n	800f3c0 <__swsetup_r+0x3c>
 800f3a0:	686c      	ldr	r4, [r5, #4]
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3a8:	0719      	lsls	r1, r3, #28
 800f3aa:	d42c      	bmi.n	800f406 <__swsetup_r+0x82>
 800f3ac:	06dd      	lsls	r5, r3, #27
 800f3ae:	d411      	bmi.n	800f3d4 <__swsetup_r+0x50>
 800f3b0:	2309      	movs	r3, #9
 800f3b2:	6033      	str	r3, [r6, #0]
 800f3b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f3be:	e03e      	b.n	800f43e <__swsetup_r+0xba>
 800f3c0:	4b25      	ldr	r3, [pc, #148]	; (800f458 <__swsetup_r+0xd4>)
 800f3c2:	429c      	cmp	r4, r3
 800f3c4:	d101      	bne.n	800f3ca <__swsetup_r+0x46>
 800f3c6:	68ac      	ldr	r4, [r5, #8]
 800f3c8:	e7eb      	b.n	800f3a2 <__swsetup_r+0x1e>
 800f3ca:	4b24      	ldr	r3, [pc, #144]	; (800f45c <__swsetup_r+0xd8>)
 800f3cc:	429c      	cmp	r4, r3
 800f3ce:	bf08      	it	eq
 800f3d0:	68ec      	ldreq	r4, [r5, #12]
 800f3d2:	e7e6      	b.n	800f3a2 <__swsetup_r+0x1e>
 800f3d4:	0758      	lsls	r0, r3, #29
 800f3d6:	d512      	bpl.n	800f3fe <__swsetup_r+0x7a>
 800f3d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3da:	b141      	cbz	r1, 800f3ee <__swsetup_r+0x6a>
 800f3dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3e0:	4299      	cmp	r1, r3
 800f3e2:	d002      	beq.n	800f3ea <__swsetup_r+0x66>
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f7ff fdf5 	bl	800efd4 <_free_r>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	6363      	str	r3, [r4, #52]	; 0x34
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3f4:	81a3      	strh	r3, [r4, #12]
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	6063      	str	r3, [r4, #4]
 800f3fa:	6923      	ldr	r3, [r4, #16]
 800f3fc:	6023      	str	r3, [r4, #0]
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	f043 0308 	orr.w	r3, r3, #8
 800f404:	81a3      	strh	r3, [r4, #12]
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	b94b      	cbnz	r3, 800f41e <__swsetup_r+0x9a>
 800f40a:	89a3      	ldrh	r3, [r4, #12]
 800f40c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f414:	d003      	beq.n	800f41e <__swsetup_r+0x9a>
 800f416:	4621      	mov	r1, r4
 800f418:	4630      	mov	r0, r6
 800f41a:	f000 fa01 	bl	800f820 <__smakebuf_r>
 800f41e:	89a0      	ldrh	r0, [r4, #12]
 800f420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f424:	f010 0301 	ands.w	r3, r0, #1
 800f428:	d00a      	beq.n	800f440 <__swsetup_r+0xbc>
 800f42a:	2300      	movs	r3, #0
 800f42c:	60a3      	str	r3, [r4, #8]
 800f42e:	6963      	ldr	r3, [r4, #20]
 800f430:	425b      	negs	r3, r3
 800f432:	61a3      	str	r3, [r4, #24]
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	b943      	cbnz	r3, 800f44a <__swsetup_r+0xc6>
 800f438:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f43c:	d1ba      	bne.n	800f3b4 <__swsetup_r+0x30>
 800f43e:	bd70      	pop	{r4, r5, r6, pc}
 800f440:	0781      	lsls	r1, r0, #30
 800f442:	bf58      	it	pl
 800f444:	6963      	ldrpl	r3, [r4, #20]
 800f446:	60a3      	str	r3, [r4, #8]
 800f448:	e7f4      	b.n	800f434 <__swsetup_r+0xb0>
 800f44a:	2000      	movs	r0, #0
 800f44c:	e7f7      	b.n	800f43e <__swsetup_r+0xba>
 800f44e:	bf00      	nop
 800f450:	2000004c 	.word	0x2000004c
 800f454:	08010dcc 	.word	0x08010dcc
 800f458:	08010dec 	.word	0x08010dec
 800f45c:	08010dac 	.word	0x08010dac

0800f460 <__sflush_r>:
 800f460:	898a      	ldrh	r2, [r1, #12]
 800f462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	4605      	mov	r5, r0
 800f468:	0710      	lsls	r0, r2, #28
 800f46a:	460c      	mov	r4, r1
 800f46c:	d458      	bmi.n	800f520 <__sflush_r+0xc0>
 800f46e:	684b      	ldr	r3, [r1, #4]
 800f470:	2b00      	cmp	r3, #0
 800f472:	dc05      	bgt.n	800f480 <__sflush_r+0x20>
 800f474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f476:	2b00      	cmp	r3, #0
 800f478:	dc02      	bgt.n	800f480 <__sflush_r+0x20>
 800f47a:	2000      	movs	r0, #0
 800f47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f482:	2e00      	cmp	r6, #0
 800f484:	d0f9      	beq.n	800f47a <__sflush_r+0x1a>
 800f486:	2300      	movs	r3, #0
 800f488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f48c:	682f      	ldr	r7, [r5, #0]
 800f48e:	602b      	str	r3, [r5, #0]
 800f490:	d032      	beq.n	800f4f8 <__sflush_r+0x98>
 800f492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f494:	89a3      	ldrh	r3, [r4, #12]
 800f496:	075a      	lsls	r2, r3, #29
 800f498:	d505      	bpl.n	800f4a6 <__sflush_r+0x46>
 800f49a:	6863      	ldr	r3, [r4, #4]
 800f49c:	1ac0      	subs	r0, r0, r3
 800f49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f4a0:	b10b      	cbz	r3, 800f4a6 <__sflush_r+0x46>
 800f4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4a4:	1ac0      	subs	r0, r0, r3
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4ac:	6a21      	ldr	r1, [r4, #32]
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b0      	blx	r6
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	d106      	bne.n	800f4c6 <__sflush_r+0x66>
 800f4b8:	6829      	ldr	r1, [r5, #0]
 800f4ba:	291d      	cmp	r1, #29
 800f4bc:	d82c      	bhi.n	800f518 <__sflush_r+0xb8>
 800f4be:	4a2a      	ldr	r2, [pc, #168]	; (800f568 <__sflush_r+0x108>)
 800f4c0:	40ca      	lsrs	r2, r1
 800f4c2:	07d6      	lsls	r6, r2, #31
 800f4c4:	d528      	bpl.n	800f518 <__sflush_r+0xb8>
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	6062      	str	r2, [r4, #4]
 800f4ca:	04d9      	lsls	r1, r3, #19
 800f4cc:	6922      	ldr	r2, [r4, #16]
 800f4ce:	6022      	str	r2, [r4, #0]
 800f4d0:	d504      	bpl.n	800f4dc <__sflush_r+0x7c>
 800f4d2:	1c42      	adds	r2, r0, #1
 800f4d4:	d101      	bne.n	800f4da <__sflush_r+0x7a>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	b903      	cbnz	r3, 800f4dc <__sflush_r+0x7c>
 800f4da:	6560      	str	r0, [r4, #84]	; 0x54
 800f4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4de:	602f      	str	r7, [r5, #0]
 800f4e0:	2900      	cmp	r1, #0
 800f4e2:	d0ca      	beq.n	800f47a <__sflush_r+0x1a>
 800f4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4e8:	4299      	cmp	r1, r3
 800f4ea:	d002      	beq.n	800f4f2 <__sflush_r+0x92>
 800f4ec:	4628      	mov	r0, r5
 800f4ee:	f7ff fd71 	bl	800efd4 <_free_r>
 800f4f2:	2000      	movs	r0, #0
 800f4f4:	6360      	str	r0, [r4, #52]	; 0x34
 800f4f6:	e7c1      	b.n	800f47c <__sflush_r+0x1c>
 800f4f8:	6a21      	ldr	r1, [r4, #32]
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b0      	blx	r6
 800f500:	1c41      	adds	r1, r0, #1
 800f502:	d1c7      	bne.n	800f494 <__sflush_r+0x34>
 800f504:	682b      	ldr	r3, [r5, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d0c4      	beq.n	800f494 <__sflush_r+0x34>
 800f50a:	2b1d      	cmp	r3, #29
 800f50c:	d001      	beq.n	800f512 <__sflush_r+0xb2>
 800f50e:	2b16      	cmp	r3, #22
 800f510:	d101      	bne.n	800f516 <__sflush_r+0xb6>
 800f512:	602f      	str	r7, [r5, #0]
 800f514:	e7b1      	b.n	800f47a <__sflush_r+0x1a>
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f51c:	81a3      	strh	r3, [r4, #12]
 800f51e:	e7ad      	b.n	800f47c <__sflush_r+0x1c>
 800f520:	690f      	ldr	r7, [r1, #16]
 800f522:	2f00      	cmp	r7, #0
 800f524:	d0a9      	beq.n	800f47a <__sflush_r+0x1a>
 800f526:	0793      	lsls	r3, r2, #30
 800f528:	680e      	ldr	r6, [r1, #0]
 800f52a:	bf08      	it	eq
 800f52c:	694b      	ldreq	r3, [r1, #20]
 800f52e:	600f      	str	r7, [r1, #0]
 800f530:	bf18      	it	ne
 800f532:	2300      	movne	r3, #0
 800f534:	eba6 0807 	sub.w	r8, r6, r7
 800f538:	608b      	str	r3, [r1, #8]
 800f53a:	f1b8 0f00 	cmp.w	r8, #0
 800f53e:	dd9c      	ble.n	800f47a <__sflush_r+0x1a>
 800f540:	6a21      	ldr	r1, [r4, #32]
 800f542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f544:	4643      	mov	r3, r8
 800f546:	463a      	mov	r2, r7
 800f548:	4628      	mov	r0, r5
 800f54a:	47b0      	blx	r6
 800f54c:	2800      	cmp	r0, #0
 800f54e:	dc06      	bgt.n	800f55e <__sflush_r+0xfe>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f556:	81a3      	strh	r3, [r4, #12]
 800f558:	f04f 30ff 	mov.w	r0, #4294967295
 800f55c:	e78e      	b.n	800f47c <__sflush_r+0x1c>
 800f55e:	4407      	add	r7, r0
 800f560:	eba8 0800 	sub.w	r8, r8, r0
 800f564:	e7e9      	b.n	800f53a <__sflush_r+0xda>
 800f566:	bf00      	nop
 800f568:	20400001 	.word	0x20400001

0800f56c <_fflush_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	690b      	ldr	r3, [r1, #16]
 800f570:	4605      	mov	r5, r0
 800f572:	460c      	mov	r4, r1
 800f574:	b913      	cbnz	r3, 800f57c <_fflush_r+0x10>
 800f576:	2500      	movs	r5, #0
 800f578:	4628      	mov	r0, r5
 800f57a:	bd38      	pop	{r3, r4, r5, pc}
 800f57c:	b118      	cbz	r0, 800f586 <_fflush_r+0x1a>
 800f57e:	6983      	ldr	r3, [r0, #24]
 800f580:	b90b      	cbnz	r3, 800f586 <_fflush_r+0x1a>
 800f582:	f000 f887 	bl	800f694 <__sinit>
 800f586:	4b14      	ldr	r3, [pc, #80]	; (800f5d8 <_fflush_r+0x6c>)
 800f588:	429c      	cmp	r4, r3
 800f58a:	d11b      	bne.n	800f5c4 <_fflush_r+0x58>
 800f58c:	686c      	ldr	r4, [r5, #4]
 800f58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0ef      	beq.n	800f576 <_fflush_r+0xa>
 800f596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f598:	07d0      	lsls	r0, r2, #31
 800f59a:	d404      	bmi.n	800f5a6 <_fflush_r+0x3a>
 800f59c:	0599      	lsls	r1, r3, #22
 800f59e:	d402      	bmi.n	800f5a6 <_fflush_r+0x3a>
 800f5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5a2:	f000 f915 	bl	800f7d0 <__retarget_lock_acquire_recursive>
 800f5a6:	4628      	mov	r0, r5
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	f7ff ff59 	bl	800f460 <__sflush_r>
 800f5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5b0:	07da      	lsls	r2, r3, #31
 800f5b2:	4605      	mov	r5, r0
 800f5b4:	d4e0      	bmi.n	800f578 <_fflush_r+0xc>
 800f5b6:	89a3      	ldrh	r3, [r4, #12]
 800f5b8:	059b      	lsls	r3, r3, #22
 800f5ba:	d4dd      	bmi.n	800f578 <_fflush_r+0xc>
 800f5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5be:	f000 f908 	bl	800f7d2 <__retarget_lock_release_recursive>
 800f5c2:	e7d9      	b.n	800f578 <_fflush_r+0xc>
 800f5c4:	4b05      	ldr	r3, [pc, #20]	; (800f5dc <_fflush_r+0x70>)
 800f5c6:	429c      	cmp	r4, r3
 800f5c8:	d101      	bne.n	800f5ce <_fflush_r+0x62>
 800f5ca:	68ac      	ldr	r4, [r5, #8]
 800f5cc:	e7df      	b.n	800f58e <_fflush_r+0x22>
 800f5ce:	4b04      	ldr	r3, [pc, #16]	; (800f5e0 <_fflush_r+0x74>)
 800f5d0:	429c      	cmp	r4, r3
 800f5d2:	bf08      	it	eq
 800f5d4:	68ec      	ldreq	r4, [r5, #12]
 800f5d6:	e7da      	b.n	800f58e <_fflush_r+0x22>
 800f5d8:	08010dcc 	.word	0x08010dcc
 800f5dc:	08010dec 	.word	0x08010dec
 800f5e0:	08010dac 	.word	0x08010dac

0800f5e4 <std>:
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	b510      	push	{r4, lr}
 800f5e8:	4604      	mov	r4, r0
 800f5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800f5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5f2:	6083      	str	r3, [r0, #8]
 800f5f4:	8181      	strh	r1, [r0, #12]
 800f5f6:	6643      	str	r3, [r0, #100]	; 0x64
 800f5f8:	81c2      	strh	r2, [r0, #14]
 800f5fa:	6183      	str	r3, [r0, #24]
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	2208      	movs	r2, #8
 800f600:	305c      	adds	r0, #92	; 0x5c
 800f602:	f7ff fcdf 	bl	800efc4 <memset>
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <std+0x38>)
 800f608:	6263      	str	r3, [r4, #36]	; 0x24
 800f60a:	4b05      	ldr	r3, [pc, #20]	; (800f620 <std+0x3c>)
 800f60c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f60e:	4b05      	ldr	r3, [pc, #20]	; (800f624 <std+0x40>)
 800f610:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f612:	4b05      	ldr	r3, [pc, #20]	; (800f628 <std+0x44>)
 800f614:	6224      	str	r4, [r4, #32]
 800f616:	6323      	str	r3, [r4, #48]	; 0x30
 800f618:	bd10      	pop	{r4, pc}
 800f61a:	bf00      	nop
 800f61c:	0800fe99 	.word	0x0800fe99
 800f620:	0800febb 	.word	0x0800febb
 800f624:	0800fef3 	.word	0x0800fef3
 800f628:	0800ff17 	.word	0x0800ff17

0800f62c <_cleanup_r>:
 800f62c:	4901      	ldr	r1, [pc, #4]	; (800f634 <_cleanup_r+0x8>)
 800f62e:	f000 b8af 	b.w	800f790 <_fwalk_reent>
 800f632:	bf00      	nop
 800f634:	0800f56d 	.word	0x0800f56d

0800f638 <__sfmoreglue>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	2268      	movs	r2, #104	; 0x68
 800f63c:	1e4d      	subs	r5, r1, #1
 800f63e:	4355      	muls	r5, r2
 800f640:	460e      	mov	r6, r1
 800f642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f646:	f7ff fd31 	bl	800f0ac <_malloc_r>
 800f64a:	4604      	mov	r4, r0
 800f64c:	b140      	cbz	r0, 800f660 <__sfmoreglue+0x28>
 800f64e:	2100      	movs	r1, #0
 800f650:	e9c0 1600 	strd	r1, r6, [r0]
 800f654:	300c      	adds	r0, #12
 800f656:	60a0      	str	r0, [r4, #8]
 800f658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f65c:	f7ff fcb2 	bl	800efc4 <memset>
 800f660:	4620      	mov	r0, r4
 800f662:	bd70      	pop	{r4, r5, r6, pc}

0800f664 <__sfp_lock_acquire>:
 800f664:	4801      	ldr	r0, [pc, #4]	; (800f66c <__sfp_lock_acquire+0x8>)
 800f666:	f000 b8b3 	b.w	800f7d0 <__retarget_lock_acquire_recursive>
 800f66a:	bf00      	nop
 800f66c:	2000295d 	.word	0x2000295d

0800f670 <__sfp_lock_release>:
 800f670:	4801      	ldr	r0, [pc, #4]	; (800f678 <__sfp_lock_release+0x8>)
 800f672:	f000 b8ae 	b.w	800f7d2 <__retarget_lock_release_recursive>
 800f676:	bf00      	nop
 800f678:	2000295d 	.word	0x2000295d

0800f67c <__sinit_lock_acquire>:
 800f67c:	4801      	ldr	r0, [pc, #4]	; (800f684 <__sinit_lock_acquire+0x8>)
 800f67e:	f000 b8a7 	b.w	800f7d0 <__retarget_lock_acquire_recursive>
 800f682:	bf00      	nop
 800f684:	2000295e 	.word	0x2000295e

0800f688 <__sinit_lock_release>:
 800f688:	4801      	ldr	r0, [pc, #4]	; (800f690 <__sinit_lock_release+0x8>)
 800f68a:	f000 b8a2 	b.w	800f7d2 <__retarget_lock_release_recursive>
 800f68e:	bf00      	nop
 800f690:	2000295e 	.word	0x2000295e

0800f694 <__sinit>:
 800f694:	b510      	push	{r4, lr}
 800f696:	4604      	mov	r4, r0
 800f698:	f7ff fff0 	bl	800f67c <__sinit_lock_acquire>
 800f69c:	69a3      	ldr	r3, [r4, #24]
 800f69e:	b11b      	cbz	r3, 800f6a8 <__sinit+0x14>
 800f6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6a4:	f7ff bff0 	b.w	800f688 <__sinit_lock_release>
 800f6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f6ac:	6523      	str	r3, [r4, #80]	; 0x50
 800f6ae:	4b13      	ldr	r3, [pc, #76]	; (800f6fc <__sinit+0x68>)
 800f6b0:	4a13      	ldr	r2, [pc, #76]	; (800f700 <__sinit+0x6c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800f6b6:	42a3      	cmp	r3, r4
 800f6b8:	bf04      	itt	eq
 800f6ba:	2301      	moveq	r3, #1
 800f6bc:	61a3      	streq	r3, [r4, #24]
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 f820 	bl	800f704 <__sfp>
 800f6c4:	6060      	str	r0, [r4, #4]
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 f81c 	bl	800f704 <__sfp>
 800f6cc:	60a0      	str	r0, [r4, #8]
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f000 f818 	bl	800f704 <__sfp>
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	60e0      	str	r0, [r4, #12]
 800f6d8:	2104      	movs	r1, #4
 800f6da:	6860      	ldr	r0, [r4, #4]
 800f6dc:	f7ff ff82 	bl	800f5e4 <std>
 800f6e0:	68a0      	ldr	r0, [r4, #8]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	2109      	movs	r1, #9
 800f6e6:	f7ff ff7d 	bl	800f5e4 <std>
 800f6ea:	68e0      	ldr	r0, [r4, #12]
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	2112      	movs	r1, #18
 800f6f0:	f7ff ff78 	bl	800f5e4 <std>
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	61a3      	str	r3, [r4, #24]
 800f6f8:	e7d2      	b.n	800f6a0 <__sinit+0xc>
 800f6fa:	bf00      	nop
 800f6fc:	08010da8 	.word	0x08010da8
 800f700:	0800f62d 	.word	0x0800f62d

0800f704 <__sfp>:
 800f704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f706:	4607      	mov	r7, r0
 800f708:	f7ff ffac 	bl	800f664 <__sfp_lock_acquire>
 800f70c:	4b1e      	ldr	r3, [pc, #120]	; (800f788 <__sfp+0x84>)
 800f70e:	681e      	ldr	r6, [r3, #0]
 800f710:	69b3      	ldr	r3, [r6, #24]
 800f712:	b913      	cbnz	r3, 800f71a <__sfp+0x16>
 800f714:	4630      	mov	r0, r6
 800f716:	f7ff ffbd 	bl	800f694 <__sinit>
 800f71a:	3648      	adds	r6, #72	; 0x48
 800f71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f720:	3b01      	subs	r3, #1
 800f722:	d503      	bpl.n	800f72c <__sfp+0x28>
 800f724:	6833      	ldr	r3, [r6, #0]
 800f726:	b30b      	cbz	r3, 800f76c <__sfp+0x68>
 800f728:	6836      	ldr	r6, [r6, #0]
 800f72a:	e7f7      	b.n	800f71c <__sfp+0x18>
 800f72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f730:	b9d5      	cbnz	r5, 800f768 <__sfp+0x64>
 800f732:	4b16      	ldr	r3, [pc, #88]	; (800f78c <__sfp+0x88>)
 800f734:	60e3      	str	r3, [r4, #12]
 800f736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f73a:	6665      	str	r5, [r4, #100]	; 0x64
 800f73c:	f000 f847 	bl	800f7ce <__retarget_lock_init_recursive>
 800f740:	f7ff ff96 	bl	800f670 <__sfp_lock_release>
 800f744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f74c:	6025      	str	r5, [r4, #0]
 800f74e:	61a5      	str	r5, [r4, #24]
 800f750:	2208      	movs	r2, #8
 800f752:	4629      	mov	r1, r5
 800f754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f758:	f7ff fc34 	bl	800efc4 <memset>
 800f75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f764:	4620      	mov	r0, r4
 800f766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f768:	3468      	adds	r4, #104	; 0x68
 800f76a:	e7d9      	b.n	800f720 <__sfp+0x1c>
 800f76c:	2104      	movs	r1, #4
 800f76e:	4638      	mov	r0, r7
 800f770:	f7ff ff62 	bl	800f638 <__sfmoreglue>
 800f774:	4604      	mov	r4, r0
 800f776:	6030      	str	r0, [r6, #0]
 800f778:	2800      	cmp	r0, #0
 800f77a:	d1d5      	bne.n	800f728 <__sfp+0x24>
 800f77c:	f7ff ff78 	bl	800f670 <__sfp_lock_release>
 800f780:	230c      	movs	r3, #12
 800f782:	603b      	str	r3, [r7, #0]
 800f784:	e7ee      	b.n	800f764 <__sfp+0x60>
 800f786:	bf00      	nop
 800f788:	08010da8 	.word	0x08010da8
 800f78c:	ffff0001 	.word	0xffff0001

0800f790 <_fwalk_reent>:
 800f790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f794:	4606      	mov	r6, r0
 800f796:	4688      	mov	r8, r1
 800f798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f79c:	2700      	movs	r7, #0
 800f79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7a2:	f1b9 0901 	subs.w	r9, r9, #1
 800f7a6:	d505      	bpl.n	800f7b4 <_fwalk_reent+0x24>
 800f7a8:	6824      	ldr	r4, [r4, #0]
 800f7aa:	2c00      	cmp	r4, #0
 800f7ac:	d1f7      	bne.n	800f79e <_fwalk_reent+0xe>
 800f7ae:	4638      	mov	r0, r7
 800f7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7b4:	89ab      	ldrh	r3, [r5, #12]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d907      	bls.n	800f7ca <_fwalk_reent+0x3a>
 800f7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	d003      	beq.n	800f7ca <_fwalk_reent+0x3a>
 800f7c2:	4629      	mov	r1, r5
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	47c0      	blx	r8
 800f7c8:	4307      	orrs	r7, r0
 800f7ca:	3568      	adds	r5, #104	; 0x68
 800f7cc:	e7e9      	b.n	800f7a2 <_fwalk_reent+0x12>

0800f7ce <__retarget_lock_init_recursive>:
 800f7ce:	4770      	bx	lr

0800f7d0 <__retarget_lock_acquire_recursive>:
 800f7d0:	4770      	bx	lr

0800f7d2 <__retarget_lock_release_recursive>:
 800f7d2:	4770      	bx	lr

0800f7d4 <__swhatbuf_r>:
 800f7d4:	b570      	push	{r4, r5, r6, lr}
 800f7d6:	460e      	mov	r6, r1
 800f7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7dc:	2900      	cmp	r1, #0
 800f7de:	b096      	sub	sp, #88	; 0x58
 800f7e0:	4614      	mov	r4, r2
 800f7e2:	461d      	mov	r5, r3
 800f7e4:	da08      	bge.n	800f7f8 <__swhatbuf_r+0x24>
 800f7e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	602a      	str	r2, [r5, #0]
 800f7ee:	061a      	lsls	r2, r3, #24
 800f7f0:	d410      	bmi.n	800f814 <__swhatbuf_r+0x40>
 800f7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f6:	e00e      	b.n	800f816 <__swhatbuf_r+0x42>
 800f7f8:	466a      	mov	r2, sp
 800f7fa:	f000 fbb3 	bl	800ff64 <_fstat_r>
 800f7fe:	2800      	cmp	r0, #0
 800f800:	dbf1      	blt.n	800f7e6 <__swhatbuf_r+0x12>
 800f802:	9a01      	ldr	r2, [sp, #4]
 800f804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f80c:	425a      	negs	r2, r3
 800f80e:	415a      	adcs	r2, r3
 800f810:	602a      	str	r2, [r5, #0]
 800f812:	e7ee      	b.n	800f7f2 <__swhatbuf_r+0x1e>
 800f814:	2340      	movs	r3, #64	; 0x40
 800f816:	2000      	movs	r0, #0
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	b016      	add	sp, #88	; 0x58
 800f81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f820 <__smakebuf_r>:
 800f820:	898b      	ldrh	r3, [r1, #12]
 800f822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f824:	079d      	lsls	r5, r3, #30
 800f826:	4606      	mov	r6, r0
 800f828:	460c      	mov	r4, r1
 800f82a:	d507      	bpl.n	800f83c <__smakebuf_r+0x1c>
 800f82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f830:	6023      	str	r3, [r4, #0]
 800f832:	6123      	str	r3, [r4, #16]
 800f834:	2301      	movs	r3, #1
 800f836:	6163      	str	r3, [r4, #20]
 800f838:	b002      	add	sp, #8
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	ab01      	add	r3, sp, #4
 800f83e:	466a      	mov	r2, sp
 800f840:	f7ff ffc8 	bl	800f7d4 <__swhatbuf_r>
 800f844:	9900      	ldr	r1, [sp, #0]
 800f846:	4605      	mov	r5, r0
 800f848:	4630      	mov	r0, r6
 800f84a:	f7ff fc2f 	bl	800f0ac <_malloc_r>
 800f84e:	b948      	cbnz	r0, 800f864 <__smakebuf_r+0x44>
 800f850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f854:	059a      	lsls	r2, r3, #22
 800f856:	d4ef      	bmi.n	800f838 <__smakebuf_r+0x18>
 800f858:	f023 0303 	bic.w	r3, r3, #3
 800f85c:	f043 0302 	orr.w	r3, r3, #2
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	e7e3      	b.n	800f82c <__smakebuf_r+0xc>
 800f864:	4b0d      	ldr	r3, [pc, #52]	; (800f89c <__smakebuf_r+0x7c>)
 800f866:	62b3      	str	r3, [r6, #40]	; 0x28
 800f868:	89a3      	ldrh	r3, [r4, #12]
 800f86a:	6020      	str	r0, [r4, #0]
 800f86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f870:	81a3      	strh	r3, [r4, #12]
 800f872:	9b00      	ldr	r3, [sp, #0]
 800f874:	6163      	str	r3, [r4, #20]
 800f876:	9b01      	ldr	r3, [sp, #4]
 800f878:	6120      	str	r0, [r4, #16]
 800f87a:	b15b      	cbz	r3, 800f894 <__smakebuf_r+0x74>
 800f87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f880:	4630      	mov	r0, r6
 800f882:	f000 fb81 	bl	800ff88 <_isatty_r>
 800f886:	b128      	cbz	r0, 800f894 <__smakebuf_r+0x74>
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	f023 0303 	bic.w	r3, r3, #3
 800f88e:	f043 0301 	orr.w	r3, r3, #1
 800f892:	81a3      	strh	r3, [r4, #12]
 800f894:	89a0      	ldrh	r0, [r4, #12]
 800f896:	4305      	orrs	r5, r0
 800f898:	81a5      	strh	r5, [r4, #12]
 800f89a:	e7cd      	b.n	800f838 <__smakebuf_r+0x18>
 800f89c:	0800f62d 	.word	0x0800f62d

0800f8a0 <__malloc_lock>:
 800f8a0:	4801      	ldr	r0, [pc, #4]	; (800f8a8 <__malloc_lock+0x8>)
 800f8a2:	f7ff bf95 	b.w	800f7d0 <__retarget_lock_acquire_recursive>
 800f8a6:	bf00      	nop
 800f8a8:	2000295c 	.word	0x2000295c

0800f8ac <__malloc_unlock>:
 800f8ac:	4801      	ldr	r0, [pc, #4]	; (800f8b4 <__malloc_unlock+0x8>)
 800f8ae:	f7ff bf90 	b.w	800f7d2 <__retarget_lock_release_recursive>
 800f8b2:	bf00      	nop
 800f8b4:	2000295c 	.word	0x2000295c

0800f8b8 <__ssputs_r>:
 800f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8bc:	688e      	ldr	r6, [r1, #8]
 800f8be:	429e      	cmp	r6, r3
 800f8c0:	4682      	mov	sl, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	4690      	mov	r8, r2
 800f8c6:	461f      	mov	r7, r3
 800f8c8:	d838      	bhi.n	800f93c <__ssputs_r+0x84>
 800f8ca:	898a      	ldrh	r2, [r1, #12]
 800f8cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8d0:	d032      	beq.n	800f938 <__ssputs_r+0x80>
 800f8d2:	6825      	ldr	r5, [r4, #0]
 800f8d4:	6909      	ldr	r1, [r1, #16]
 800f8d6:	eba5 0901 	sub.w	r9, r5, r1
 800f8da:	6965      	ldr	r5, [r4, #20]
 800f8dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	444b      	add	r3, r9
 800f8e8:	106d      	asrs	r5, r5, #1
 800f8ea:	429d      	cmp	r5, r3
 800f8ec:	bf38      	it	cc
 800f8ee:	461d      	movcc	r5, r3
 800f8f0:	0553      	lsls	r3, r2, #21
 800f8f2:	d531      	bpl.n	800f958 <__ssputs_r+0xa0>
 800f8f4:	4629      	mov	r1, r5
 800f8f6:	f7ff fbd9 	bl	800f0ac <_malloc_r>
 800f8fa:	4606      	mov	r6, r0
 800f8fc:	b950      	cbnz	r0, 800f914 <__ssputs_r+0x5c>
 800f8fe:	230c      	movs	r3, #12
 800f900:	f8ca 3000 	str.w	r3, [sl]
 800f904:	89a3      	ldrh	r3, [r4, #12]
 800f906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f90a:	81a3      	strh	r3, [r4, #12]
 800f90c:	f04f 30ff 	mov.w	r0, #4294967295
 800f910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f914:	6921      	ldr	r1, [r4, #16]
 800f916:	464a      	mov	r2, r9
 800f918:	f7ff fb2c 	bl	800ef74 <memcpy>
 800f91c:	89a3      	ldrh	r3, [r4, #12]
 800f91e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f926:	81a3      	strh	r3, [r4, #12]
 800f928:	6126      	str	r6, [r4, #16]
 800f92a:	6165      	str	r5, [r4, #20]
 800f92c:	444e      	add	r6, r9
 800f92e:	eba5 0509 	sub.w	r5, r5, r9
 800f932:	6026      	str	r6, [r4, #0]
 800f934:	60a5      	str	r5, [r4, #8]
 800f936:	463e      	mov	r6, r7
 800f938:	42be      	cmp	r6, r7
 800f93a:	d900      	bls.n	800f93e <__ssputs_r+0x86>
 800f93c:	463e      	mov	r6, r7
 800f93e:	6820      	ldr	r0, [r4, #0]
 800f940:	4632      	mov	r2, r6
 800f942:	4641      	mov	r1, r8
 800f944:	f7ff fb24 	bl	800ef90 <memmove>
 800f948:	68a3      	ldr	r3, [r4, #8]
 800f94a:	1b9b      	subs	r3, r3, r6
 800f94c:	60a3      	str	r3, [r4, #8]
 800f94e:	6823      	ldr	r3, [r4, #0]
 800f950:	4433      	add	r3, r6
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	2000      	movs	r0, #0
 800f956:	e7db      	b.n	800f910 <__ssputs_r+0x58>
 800f958:	462a      	mov	r2, r5
 800f95a:	f000 fb37 	bl	800ffcc <_realloc_r>
 800f95e:	4606      	mov	r6, r0
 800f960:	2800      	cmp	r0, #0
 800f962:	d1e1      	bne.n	800f928 <__ssputs_r+0x70>
 800f964:	6921      	ldr	r1, [r4, #16]
 800f966:	4650      	mov	r0, sl
 800f968:	f7ff fb34 	bl	800efd4 <_free_r>
 800f96c:	e7c7      	b.n	800f8fe <__ssputs_r+0x46>
	...

0800f970 <_svfiprintf_r>:
 800f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	4698      	mov	r8, r3
 800f976:	898b      	ldrh	r3, [r1, #12]
 800f978:	061b      	lsls	r3, r3, #24
 800f97a:	b09d      	sub	sp, #116	; 0x74
 800f97c:	4607      	mov	r7, r0
 800f97e:	460d      	mov	r5, r1
 800f980:	4614      	mov	r4, r2
 800f982:	d50e      	bpl.n	800f9a2 <_svfiprintf_r+0x32>
 800f984:	690b      	ldr	r3, [r1, #16]
 800f986:	b963      	cbnz	r3, 800f9a2 <_svfiprintf_r+0x32>
 800f988:	2140      	movs	r1, #64	; 0x40
 800f98a:	f7ff fb8f 	bl	800f0ac <_malloc_r>
 800f98e:	6028      	str	r0, [r5, #0]
 800f990:	6128      	str	r0, [r5, #16]
 800f992:	b920      	cbnz	r0, 800f99e <_svfiprintf_r+0x2e>
 800f994:	230c      	movs	r3, #12
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	f04f 30ff 	mov.w	r0, #4294967295
 800f99c:	e0d1      	b.n	800fb42 <_svfiprintf_r+0x1d2>
 800f99e:	2340      	movs	r3, #64	; 0x40
 800f9a0:	616b      	str	r3, [r5, #20]
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a6:	2320      	movs	r3, #32
 800f9a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b0:	2330      	movs	r3, #48	; 0x30
 800f9b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb5c <_svfiprintf_r+0x1ec>
 800f9b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9ba:	f04f 0901 	mov.w	r9, #1
 800f9be:	4623      	mov	r3, r4
 800f9c0:	469a      	mov	sl, r3
 800f9c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9c6:	b10a      	cbz	r2, 800f9cc <_svfiprintf_r+0x5c>
 800f9c8:	2a25      	cmp	r2, #37	; 0x25
 800f9ca:	d1f9      	bne.n	800f9c0 <_svfiprintf_r+0x50>
 800f9cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d0:	d00b      	beq.n	800f9ea <_svfiprintf_r+0x7a>
 800f9d2:	465b      	mov	r3, fp
 800f9d4:	4622      	mov	r2, r4
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4638      	mov	r0, r7
 800f9da:	f7ff ff6d 	bl	800f8b8 <__ssputs_r>
 800f9de:	3001      	adds	r0, #1
 800f9e0:	f000 80aa 	beq.w	800fb38 <_svfiprintf_r+0x1c8>
 800f9e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9e6:	445a      	add	r2, fp
 800f9e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	f000 80a2 	beq.w	800fb38 <_svfiprintf_r+0x1c8>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f9fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9fe:	f10a 0a01 	add.w	sl, sl, #1
 800fa02:	9304      	str	r3, [sp, #16]
 800fa04:	9307      	str	r3, [sp, #28]
 800fa06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa0a:	931a      	str	r3, [sp, #104]	; 0x68
 800fa0c:	4654      	mov	r4, sl
 800fa0e:	2205      	movs	r2, #5
 800fa10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa14:	4851      	ldr	r0, [pc, #324]	; (800fb5c <_svfiprintf_r+0x1ec>)
 800fa16:	f7f0 fbfb 	bl	8000210 <memchr>
 800fa1a:	9a04      	ldr	r2, [sp, #16]
 800fa1c:	b9d8      	cbnz	r0, 800fa56 <_svfiprintf_r+0xe6>
 800fa1e:	06d0      	lsls	r0, r2, #27
 800fa20:	bf44      	itt	mi
 800fa22:	2320      	movmi	r3, #32
 800fa24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa28:	0711      	lsls	r1, r2, #28
 800fa2a:	bf44      	itt	mi
 800fa2c:	232b      	movmi	r3, #43	; 0x2b
 800fa2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa32:	f89a 3000 	ldrb.w	r3, [sl]
 800fa36:	2b2a      	cmp	r3, #42	; 0x2a
 800fa38:	d015      	beq.n	800fa66 <_svfiprintf_r+0xf6>
 800fa3a:	9a07      	ldr	r2, [sp, #28]
 800fa3c:	4654      	mov	r4, sl
 800fa3e:	2000      	movs	r0, #0
 800fa40:	f04f 0c0a 	mov.w	ip, #10
 800fa44:	4621      	mov	r1, r4
 800fa46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa4a:	3b30      	subs	r3, #48	; 0x30
 800fa4c:	2b09      	cmp	r3, #9
 800fa4e:	d94e      	bls.n	800faee <_svfiprintf_r+0x17e>
 800fa50:	b1b0      	cbz	r0, 800fa80 <_svfiprintf_r+0x110>
 800fa52:	9207      	str	r2, [sp, #28]
 800fa54:	e014      	b.n	800fa80 <_svfiprintf_r+0x110>
 800fa56:	eba0 0308 	sub.w	r3, r0, r8
 800fa5a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa5e:	4313      	orrs	r3, r2
 800fa60:	9304      	str	r3, [sp, #16]
 800fa62:	46a2      	mov	sl, r4
 800fa64:	e7d2      	b.n	800fa0c <_svfiprintf_r+0x9c>
 800fa66:	9b03      	ldr	r3, [sp, #12]
 800fa68:	1d19      	adds	r1, r3, #4
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	9103      	str	r1, [sp, #12]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bfbb      	ittet	lt
 800fa72:	425b      	neglt	r3, r3
 800fa74:	f042 0202 	orrlt.w	r2, r2, #2
 800fa78:	9307      	strge	r3, [sp, #28]
 800fa7a:	9307      	strlt	r3, [sp, #28]
 800fa7c:	bfb8      	it	lt
 800fa7e:	9204      	strlt	r2, [sp, #16]
 800fa80:	7823      	ldrb	r3, [r4, #0]
 800fa82:	2b2e      	cmp	r3, #46	; 0x2e
 800fa84:	d10c      	bne.n	800faa0 <_svfiprintf_r+0x130>
 800fa86:	7863      	ldrb	r3, [r4, #1]
 800fa88:	2b2a      	cmp	r3, #42	; 0x2a
 800fa8a:	d135      	bne.n	800faf8 <_svfiprintf_r+0x188>
 800fa8c:	9b03      	ldr	r3, [sp, #12]
 800fa8e:	1d1a      	adds	r2, r3, #4
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	9203      	str	r2, [sp, #12]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	bfb8      	it	lt
 800fa98:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa9c:	3402      	adds	r4, #2
 800fa9e:	9305      	str	r3, [sp, #20]
 800faa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb6c <_svfiprintf_r+0x1fc>
 800faa4:	7821      	ldrb	r1, [r4, #0]
 800faa6:	2203      	movs	r2, #3
 800faa8:	4650      	mov	r0, sl
 800faaa:	f7f0 fbb1 	bl	8000210 <memchr>
 800faae:	b140      	cbz	r0, 800fac2 <_svfiprintf_r+0x152>
 800fab0:	2340      	movs	r3, #64	; 0x40
 800fab2:	eba0 000a 	sub.w	r0, r0, sl
 800fab6:	fa03 f000 	lsl.w	r0, r3, r0
 800faba:	9b04      	ldr	r3, [sp, #16]
 800fabc:	4303      	orrs	r3, r0
 800fabe:	3401      	adds	r4, #1
 800fac0:	9304      	str	r3, [sp, #16]
 800fac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac6:	4826      	ldr	r0, [pc, #152]	; (800fb60 <_svfiprintf_r+0x1f0>)
 800fac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800facc:	2206      	movs	r2, #6
 800face:	f7f0 fb9f 	bl	8000210 <memchr>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d038      	beq.n	800fb48 <_svfiprintf_r+0x1d8>
 800fad6:	4b23      	ldr	r3, [pc, #140]	; (800fb64 <_svfiprintf_r+0x1f4>)
 800fad8:	bb1b      	cbnz	r3, 800fb22 <_svfiprintf_r+0x1b2>
 800fada:	9b03      	ldr	r3, [sp, #12]
 800fadc:	3307      	adds	r3, #7
 800fade:	f023 0307 	bic.w	r3, r3, #7
 800fae2:	3308      	adds	r3, #8
 800fae4:	9303      	str	r3, [sp, #12]
 800fae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fae8:	4433      	add	r3, r6
 800faea:	9309      	str	r3, [sp, #36]	; 0x24
 800faec:	e767      	b.n	800f9be <_svfiprintf_r+0x4e>
 800faee:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf2:	460c      	mov	r4, r1
 800faf4:	2001      	movs	r0, #1
 800faf6:	e7a5      	b.n	800fa44 <_svfiprintf_r+0xd4>
 800faf8:	2300      	movs	r3, #0
 800fafa:	3401      	adds	r4, #1
 800fafc:	9305      	str	r3, [sp, #20]
 800fafe:	4619      	mov	r1, r3
 800fb00:	f04f 0c0a 	mov.w	ip, #10
 800fb04:	4620      	mov	r0, r4
 800fb06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb0a:	3a30      	subs	r2, #48	; 0x30
 800fb0c:	2a09      	cmp	r2, #9
 800fb0e:	d903      	bls.n	800fb18 <_svfiprintf_r+0x1a8>
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d0c5      	beq.n	800faa0 <_svfiprintf_r+0x130>
 800fb14:	9105      	str	r1, [sp, #20]
 800fb16:	e7c3      	b.n	800faa0 <_svfiprintf_r+0x130>
 800fb18:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	2301      	movs	r3, #1
 800fb20:	e7f0      	b.n	800fb04 <_svfiprintf_r+0x194>
 800fb22:	ab03      	add	r3, sp, #12
 800fb24:	9300      	str	r3, [sp, #0]
 800fb26:	462a      	mov	r2, r5
 800fb28:	4b0f      	ldr	r3, [pc, #60]	; (800fb68 <_svfiprintf_r+0x1f8>)
 800fb2a:	a904      	add	r1, sp, #16
 800fb2c:	4638      	mov	r0, r7
 800fb2e:	f3af 8000 	nop.w
 800fb32:	1c42      	adds	r2, r0, #1
 800fb34:	4606      	mov	r6, r0
 800fb36:	d1d6      	bne.n	800fae6 <_svfiprintf_r+0x176>
 800fb38:	89ab      	ldrh	r3, [r5, #12]
 800fb3a:	065b      	lsls	r3, r3, #25
 800fb3c:	f53f af2c 	bmi.w	800f998 <_svfiprintf_r+0x28>
 800fb40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb42:	b01d      	add	sp, #116	; 0x74
 800fb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb48:	ab03      	add	r3, sp, #12
 800fb4a:	9300      	str	r3, [sp, #0]
 800fb4c:	462a      	mov	r2, r5
 800fb4e:	4b06      	ldr	r3, [pc, #24]	; (800fb68 <_svfiprintf_r+0x1f8>)
 800fb50:	a904      	add	r1, sp, #16
 800fb52:	4638      	mov	r0, r7
 800fb54:	f000 f87a 	bl	800fc4c <_printf_i>
 800fb58:	e7eb      	b.n	800fb32 <_svfiprintf_r+0x1c2>
 800fb5a:	bf00      	nop
 800fb5c:	08010e0c 	.word	0x08010e0c
 800fb60:	08010e16 	.word	0x08010e16
 800fb64:	00000000 	.word	0x00000000
 800fb68:	0800f8b9 	.word	0x0800f8b9
 800fb6c:	08010e12 	.word	0x08010e12

0800fb70 <_printf_common>:
 800fb70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb74:	4616      	mov	r6, r2
 800fb76:	4699      	mov	r9, r3
 800fb78:	688a      	ldr	r2, [r1, #8]
 800fb7a:	690b      	ldr	r3, [r1, #16]
 800fb7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb80:	4293      	cmp	r3, r2
 800fb82:	bfb8      	it	lt
 800fb84:	4613      	movlt	r3, r2
 800fb86:	6033      	str	r3, [r6, #0]
 800fb88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb8c:	4607      	mov	r7, r0
 800fb8e:	460c      	mov	r4, r1
 800fb90:	b10a      	cbz	r2, 800fb96 <_printf_common+0x26>
 800fb92:	3301      	adds	r3, #1
 800fb94:	6033      	str	r3, [r6, #0]
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	0699      	lsls	r1, r3, #26
 800fb9a:	bf42      	ittt	mi
 800fb9c:	6833      	ldrmi	r3, [r6, #0]
 800fb9e:	3302      	addmi	r3, #2
 800fba0:	6033      	strmi	r3, [r6, #0]
 800fba2:	6825      	ldr	r5, [r4, #0]
 800fba4:	f015 0506 	ands.w	r5, r5, #6
 800fba8:	d106      	bne.n	800fbb8 <_printf_common+0x48>
 800fbaa:	f104 0a19 	add.w	sl, r4, #25
 800fbae:	68e3      	ldr	r3, [r4, #12]
 800fbb0:	6832      	ldr	r2, [r6, #0]
 800fbb2:	1a9b      	subs	r3, r3, r2
 800fbb4:	42ab      	cmp	r3, r5
 800fbb6:	dc26      	bgt.n	800fc06 <_printf_common+0x96>
 800fbb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbbc:	1e13      	subs	r3, r2, #0
 800fbbe:	6822      	ldr	r2, [r4, #0]
 800fbc0:	bf18      	it	ne
 800fbc2:	2301      	movne	r3, #1
 800fbc4:	0692      	lsls	r2, r2, #26
 800fbc6:	d42b      	bmi.n	800fc20 <_printf_common+0xb0>
 800fbc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbcc:	4649      	mov	r1, r9
 800fbce:	4638      	mov	r0, r7
 800fbd0:	47c0      	blx	r8
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	d01e      	beq.n	800fc14 <_printf_common+0xa4>
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	68e5      	ldr	r5, [r4, #12]
 800fbda:	6832      	ldr	r2, [r6, #0]
 800fbdc:	f003 0306 	and.w	r3, r3, #6
 800fbe0:	2b04      	cmp	r3, #4
 800fbe2:	bf08      	it	eq
 800fbe4:	1aad      	subeq	r5, r5, r2
 800fbe6:	68a3      	ldr	r3, [r4, #8]
 800fbe8:	6922      	ldr	r2, [r4, #16]
 800fbea:	bf0c      	ite	eq
 800fbec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbf0:	2500      	movne	r5, #0
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	bfc4      	itt	gt
 800fbf6:	1a9b      	subgt	r3, r3, r2
 800fbf8:	18ed      	addgt	r5, r5, r3
 800fbfa:	2600      	movs	r6, #0
 800fbfc:	341a      	adds	r4, #26
 800fbfe:	42b5      	cmp	r5, r6
 800fc00:	d11a      	bne.n	800fc38 <_printf_common+0xc8>
 800fc02:	2000      	movs	r0, #0
 800fc04:	e008      	b.n	800fc18 <_printf_common+0xa8>
 800fc06:	2301      	movs	r3, #1
 800fc08:	4652      	mov	r2, sl
 800fc0a:	4649      	mov	r1, r9
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	47c0      	blx	r8
 800fc10:	3001      	adds	r0, #1
 800fc12:	d103      	bne.n	800fc1c <_printf_common+0xac>
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
 800fc18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc1c:	3501      	adds	r5, #1
 800fc1e:	e7c6      	b.n	800fbae <_printf_common+0x3e>
 800fc20:	18e1      	adds	r1, r4, r3
 800fc22:	1c5a      	adds	r2, r3, #1
 800fc24:	2030      	movs	r0, #48	; 0x30
 800fc26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc2a:	4422      	add	r2, r4
 800fc2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc34:	3302      	adds	r3, #2
 800fc36:	e7c7      	b.n	800fbc8 <_printf_common+0x58>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4622      	mov	r2, r4
 800fc3c:	4649      	mov	r1, r9
 800fc3e:	4638      	mov	r0, r7
 800fc40:	47c0      	blx	r8
 800fc42:	3001      	adds	r0, #1
 800fc44:	d0e6      	beq.n	800fc14 <_printf_common+0xa4>
 800fc46:	3601      	adds	r6, #1
 800fc48:	e7d9      	b.n	800fbfe <_printf_common+0x8e>
	...

0800fc4c <_printf_i>:
 800fc4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc50:	7e0f      	ldrb	r7, [r1, #24]
 800fc52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc54:	2f78      	cmp	r7, #120	; 0x78
 800fc56:	4691      	mov	r9, r2
 800fc58:	4680      	mov	r8, r0
 800fc5a:	460c      	mov	r4, r1
 800fc5c:	469a      	mov	sl, r3
 800fc5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc62:	d807      	bhi.n	800fc74 <_printf_i+0x28>
 800fc64:	2f62      	cmp	r7, #98	; 0x62
 800fc66:	d80a      	bhi.n	800fc7e <_printf_i+0x32>
 800fc68:	2f00      	cmp	r7, #0
 800fc6a:	f000 80d8 	beq.w	800fe1e <_printf_i+0x1d2>
 800fc6e:	2f58      	cmp	r7, #88	; 0x58
 800fc70:	f000 80a3 	beq.w	800fdba <_printf_i+0x16e>
 800fc74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc7c:	e03a      	b.n	800fcf4 <_printf_i+0xa8>
 800fc7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc82:	2b15      	cmp	r3, #21
 800fc84:	d8f6      	bhi.n	800fc74 <_printf_i+0x28>
 800fc86:	a101      	add	r1, pc, #4	; (adr r1, 800fc8c <_printf_i+0x40>)
 800fc88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc8c:	0800fce5 	.word	0x0800fce5
 800fc90:	0800fcf9 	.word	0x0800fcf9
 800fc94:	0800fc75 	.word	0x0800fc75
 800fc98:	0800fc75 	.word	0x0800fc75
 800fc9c:	0800fc75 	.word	0x0800fc75
 800fca0:	0800fc75 	.word	0x0800fc75
 800fca4:	0800fcf9 	.word	0x0800fcf9
 800fca8:	0800fc75 	.word	0x0800fc75
 800fcac:	0800fc75 	.word	0x0800fc75
 800fcb0:	0800fc75 	.word	0x0800fc75
 800fcb4:	0800fc75 	.word	0x0800fc75
 800fcb8:	0800fe05 	.word	0x0800fe05
 800fcbc:	0800fd29 	.word	0x0800fd29
 800fcc0:	0800fde7 	.word	0x0800fde7
 800fcc4:	0800fc75 	.word	0x0800fc75
 800fcc8:	0800fc75 	.word	0x0800fc75
 800fccc:	0800fe27 	.word	0x0800fe27
 800fcd0:	0800fc75 	.word	0x0800fc75
 800fcd4:	0800fd29 	.word	0x0800fd29
 800fcd8:	0800fc75 	.word	0x0800fc75
 800fcdc:	0800fc75 	.word	0x0800fc75
 800fce0:	0800fdef 	.word	0x0800fdef
 800fce4:	682b      	ldr	r3, [r5, #0]
 800fce6:	1d1a      	adds	r2, r3, #4
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	602a      	str	r2, [r5, #0]
 800fcec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e0a3      	b.n	800fe40 <_printf_i+0x1f4>
 800fcf8:	6820      	ldr	r0, [r4, #0]
 800fcfa:	6829      	ldr	r1, [r5, #0]
 800fcfc:	0606      	lsls	r6, r0, #24
 800fcfe:	f101 0304 	add.w	r3, r1, #4
 800fd02:	d50a      	bpl.n	800fd1a <_printf_i+0xce>
 800fd04:	680e      	ldr	r6, [r1, #0]
 800fd06:	602b      	str	r3, [r5, #0]
 800fd08:	2e00      	cmp	r6, #0
 800fd0a:	da03      	bge.n	800fd14 <_printf_i+0xc8>
 800fd0c:	232d      	movs	r3, #45	; 0x2d
 800fd0e:	4276      	negs	r6, r6
 800fd10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd14:	485e      	ldr	r0, [pc, #376]	; (800fe90 <_printf_i+0x244>)
 800fd16:	230a      	movs	r3, #10
 800fd18:	e019      	b.n	800fd4e <_printf_i+0x102>
 800fd1a:	680e      	ldr	r6, [r1, #0]
 800fd1c:	602b      	str	r3, [r5, #0]
 800fd1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fd22:	bf18      	it	ne
 800fd24:	b236      	sxthne	r6, r6
 800fd26:	e7ef      	b.n	800fd08 <_printf_i+0xbc>
 800fd28:	682b      	ldr	r3, [r5, #0]
 800fd2a:	6820      	ldr	r0, [r4, #0]
 800fd2c:	1d19      	adds	r1, r3, #4
 800fd2e:	6029      	str	r1, [r5, #0]
 800fd30:	0601      	lsls	r1, r0, #24
 800fd32:	d501      	bpl.n	800fd38 <_printf_i+0xec>
 800fd34:	681e      	ldr	r6, [r3, #0]
 800fd36:	e002      	b.n	800fd3e <_printf_i+0xf2>
 800fd38:	0646      	lsls	r6, r0, #25
 800fd3a:	d5fb      	bpl.n	800fd34 <_printf_i+0xe8>
 800fd3c:	881e      	ldrh	r6, [r3, #0]
 800fd3e:	4854      	ldr	r0, [pc, #336]	; (800fe90 <_printf_i+0x244>)
 800fd40:	2f6f      	cmp	r7, #111	; 0x6f
 800fd42:	bf0c      	ite	eq
 800fd44:	2308      	moveq	r3, #8
 800fd46:	230a      	movne	r3, #10
 800fd48:	2100      	movs	r1, #0
 800fd4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd4e:	6865      	ldr	r5, [r4, #4]
 800fd50:	60a5      	str	r5, [r4, #8]
 800fd52:	2d00      	cmp	r5, #0
 800fd54:	bfa2      	ittt	ge
 800fd56:	6821      	ldrge	r1, [r4, #0]
 800fd58:	f021 0104 	bicge.w	r1, r1, #4
 800fd5c:	6021      	strge	r1, [r4, #0]
 800fd5e:	b90e      	cbnz	r6, 800fd64 <_printf_i+0x118>
 800fd60:	2d00      	cmp	r5, #0
 800fd62:	d04d      	beq.n	800fe00 <_printf_i+0x1b4>
 800fd64:	4615      	mov	r5, r2
 800fd66:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd6a:	fb03 6711 	mls	r7, r3, r1, r6
 800fd6e:	5dc7      	ldrb	r7, [r0, r7]
 800fd70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd74:	4637      	mov	r7, r6
 800fd76:	42bb      	cmp	r3, r7
 800fd78:	460e      	mov	r6, r1
 800fd7a:	d9f4      	bls.n	800fd66 <_printf_i+0x11a>
 800fd7c:	2b08      	cmp	r3, #8
 800fd7e:	d10b      	bne.n	800fd98 <_printf_i+0x14c>
 800fd80:	6823      	ldr	r3, [r4, #0]
 800fd82:	07de      	lsls	r6, r3, #31
 800fd84:	d508      	bpl.n	800fd98 <_printf_i+0x14c>
 800fd86:	6923      	ldr	r3, [r4, #16]
 800fd88:	6861      	ldr	r1, [r4, #4]
 800fd8a:	4299      	cmp	r1, r3
 800fd8c:	bfde      	ittt	le
 800fd8e:	2330      	movle	r3, #48	; 0x30
 800fd90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd98:	1b52      	subs	r2, r2, r5
 800fd9a:	6122      	str	r2, [r4, #16]
 800fd9c:	f8cd a000 	str.w	sl, [sp]
 800fda0:	464b      	mov	r3, r9
 800fda2:	aa03      	add	r2, sp, #12
 800fda4:	4621      	mov	r1, r4
 800fda6:	4640      	mov	r0, r8
 800fda8:	f7ff fee2 	bl	800fb70 <_printf_common>
 800fdac:	3001      	adds	r0, #1
 800fdae:	d14c      	bne.n	800fe4a <_printf_i+0x1fe>
 800fdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb4:	b004      	add	sp, #16
 800fdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdba:	4835      	ldr	r0, [pc, #212]	; (800fe90 <_printf_i+0x244>)
 800fdbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fdc0:	6829      	ldr	r1, [r5, #0]
 800fdc2:	6823      	ldr	r3, [r4, #0]
 800fdc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdc8:	6029      	str	r1, [r5, #0]
 800fdca:	061d      	lsls	r5, r3, #24
 800fdcc:	d514      	bpl.n	800fdf8 <_printf_i+0x1ac>
 800fdce:	07df      	lsls	r7, r3, #31
 800fdd0:	bf44      	itt	mi
 800fdd2:	f043 0320 	orrmi.w	r3, r3, #32
 800fdd6:	6023      	strmi	r3, [r4, #0]
 800fdd8:	b91e      	cbnz	r6, 800fde2 <_printf_i+0x196>
 800fdda:	6823      	ldr	r3, [r4, #0]
 800fddc:	f023 0320 	bic.w	r3, r3, #32
 800fde0:	6023      	str	r3, [r4, #0]
 800fde2:	2310      	movs	r3, #16
 800fde4:	e7b0      	b.n	800fd48 <_printf_i+0xfc>
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	f043 0320 	orr.w	r3, r3, #32
 800fdec:	6023      	str	r3, [r4, #0]
 800fdee:	2378      	movs	r3, #120	; 0x78
 800fdf0:	4828      	ldr	r0, [pc, #160]	; (800fe94 <_printf_i+0x248>)
 800fdf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fdf6:	e7e3      	b.n	800fdc0 <_printf_i+0x174>
 800fdf8:	0659      	lsls	r1, r3, #25
 800fdfa:	bf48      	it	mi
 800fdfc:	b2b6      	uxthmi	r6, r6
 800fdfe:	e7e6      	b.n	800fdce <_printf_i+0x182>
 800fe00:	4615      	mov	r5, r2
 800fe02:	e7bb      	b.n	800fd7c <_printf_i+0x130>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	6826      	ldr	r6, [r4, #0]
 800fe08:	6961      	ldr	r1, [r4, #20]
 800fe0a:	1d18      	adds	r0, r3, #4
 800fe0c:	6028      	str	r0, [r5, #0]
 800fe0e:	0635      	lsls	r5, r6, #24
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	d501      	bpl.n	800fe18 <_printf_i+0x1cc>
 800fe14:	6019      	str	r1, [r3, #0]
 800fe16:	e002      	b.n	800fe1e <_printf_i+0x1d2>
 800fe18:	0670      	lsls	r0, r6, #25
 800fe1a:	d5fb      	bpl.n	800fe14 <_printf_i+0x1c8>
 800fe1c:	8019      	strh	r1, [r3, #0]
 800fe1e:	2300      	movs	r3, #0
 800fe20:	6123      	str	r3, [r4, #16]
 800fe22:	4615      	mov	r5, r2
 800fe24:	e7ba      	b.n	800fd9c <_printf_i+0x150>
 800fe26:	682b      	ldr	r3, [r5, #0]
 800fe28:	1d1a      	adds	r2, r3, #4
 800fe2a:	602a      	str	r2, [r5, #0]
 800fe2c:	681d      	ldr	r5, [r3, #0]
 800fe2e:	6862      	ldr	r2, [r4, #4]
 800fe30:	2100      	movs	r1, #0
 800fe32:	4628      	mov	r0, r5
 800fe34:	f7f0 f9ec 	bl	8000210 <memchr>
 800fe38:	b108      	cbz	r0, 800fe3e <_printf_i+0x1f2>
 800fe3a:	1b40      	subs	r0, r0, r5
 800fe3c:	6060      	str	r0, [r4, #4]
 800fe3e:	6863      	ldr	r3, [r4, #4]
 800fe40:	6123      	str	r3, [r4, #16]
 800fe42:	2300      	movs	r3, #0
 800fe44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe48:	e7a8      	b.n	800fd9c <_printf_i+0x150>
 800fe4a:	6923      	ldr	r3, [r4, #16]
 800fe4c:	462a      	mov	r2, r5
 800fe4e:	4649      	mov	r1, r9
 800fe50:	4640      	mov	r0, r8
 800fe52:	47d0      	blx	sl
 800fe54:	3001      	adds	r0, #1
 800fe56:	d0ab      	beq.n	800fdb0 <_printf_i+0x164>
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	079b      	lsls	r3, r3, #30
 800fe5c:	d413      	bmi.n	800fe86 <_printf_i+0x23a>
 800fe5e:	68e0      	ldr	r0, [r4, #12]
 800fe60:	9b03      	ldr	r3, [sp, #12]
 800fe62:	4298      	cmp	r0, r3
 800fe64:	bfb8      	it	lt
 800fe66:	4618      	movlt	r0, r3
 800fe68:	e7a4      	b.n	800fdb4 <_printf_i+0x168>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	4632      	mov	r2, r6
 800fe6e:	4649      	mov	r1, r9
 800fe70:	4640      	mov	r0, r8
 800fe72:	47d0      	blx	sl
 800fe74:	3001      	adds	r0, #1
 800fe76:	d09b      	beq.n	800fdb0 <_printf_i+0x164>
 800fe78:	3501      	adds	r5, #1
 800fe7a:	68e3      	ldr	r3, [r4, #12]
 800fe7c:	9903      	ldr	r1, [sp, #12]
 800fe7e:	1a5b      	subs	r3, r3, r1
 800fe80:	42ab      	cmp	r3, r5
 800fe82:	dcf2      	bgt.n	800fe6a <_printf_i+0x21e>
 800fe84:	e7eb      	b.n	800fe5e <_printf_i+0x212>
 800fe86:	2500      	movs	r5, #0
 800fe88:	f104 0619 	add.w	r6, r4, #25
 800fe8c:	e7f5      	b.n	800fe7a <_printf_i+0x22e>
 800fe8e:	bf00      	nop
 800fe90:	08010e1d 	.word	0x08010e1d
 800fe94:	08010e2e 	.word	0x08010e2e

0800fe98 <__sread>:
 800fe98:	b510      	push	{r4, lr}
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fea0:	f000 f8c4 	bl	801002c <_read_r>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	bfab      	itete	ge
 800fea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800feaa:	89a3      	ldrhlt	r3, [r4, #12]
 800feac:	181b      	addge	r3, r3, r0
 800feae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800feb2:	bfac      	ite	ge
 800feb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800feb6:	81a3      	strhlt	r3, [r4, #12]
 800feb8:	bd10      	pop	{r4, pc}

0800feba <__swrite>:
 800feba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febe:	461f      	mov	r7, r3
 800fec0:	898b      	ldrh	r3, [r1, #12]
 800fec2:	05db      	lsls	r3, r3, #23
 800fec4:	4605      	mov	r5, r0
 800fec6:	460c      	mov	r4, r1
 800fec8:	4616      	mov	r6, r2
 800feca:	d505      	bpl.n	800fed8 <__swrite+0x1e>
 800fecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed0:	2302      	movs	r3, #2
 800fed2:	2200      	movs	r2, #0
 800fed4:	f000 f868 	bl	800ffa8 <_lseek_r>
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fee2:	81a3      	strh	r3, [r4, #12]
 800fee4:	4632      	mov	r2, r6
 800fee6:	463b      	mov	r3, r7
 800fee8:	4628      	mov	r0, r5
 800feea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feee:	f000 b817 	b.w	800ff20 <_write_r>

0800fef2 <__sseek>:
 800fef2:	b510      	push	{r4, lr}
 800fef4:	460c      	mov	r4, r1
 800fef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fefa:	f000 f855 	bl	800ffa8 <_lseek_r>
 800fefe:	1c43      	adds	r3, r0, #1
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	bf15      	itete	ne
 800ff04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff0e:	81a3      	strheq	r3, [r4, #12]
 800ff10:	bf18      	it	ne
 800ff12:	81a3      	strhne	r3, [r4, #12]
 800ff14:	bd10      	pop	{r4, pc}

0800ff16 <__sclose>:
 800ff16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff1a:	f000 b813 	b.w	800ff44 <_close_r>
	...

0800ff20 <_write_r>:
 800ff20:	b538      	push	{r3, r4, r5, lr}
 800ff22:	4d07      	ldr	r5, [pc, #28]	; (800ff40 <_write_r+0x20>)
 800ff24:	4604      	mov	r4, r0
 800ff26:	4608      	mov	r0, r1
 800ff28:	4611      	mov	r1, r2
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	602a      	str	r2, [r5, #0]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	f7f6 fe05 	bl	8006b3e <_write>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	d102      	bne.n	800ff3e <_write_r+0x1e>
 800ff38:	682b      	ldr	r3, [r5, #0]
 800ff3a:	b103      	cbz	r3, 800ff3e <_write_r+0x1e>
 800ff3c:	6023      	str	r3, [r4, #0]
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}
 800ff40:	20002960 	.word	0x20002960

0800ff44 <_close_r>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	4d06      	ldr	r5, [pc, #24]	; (800ff60 <_close_r+0x1c>)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	602b      	str	r3, [r5, #0]
 800ff50:	f7f6 fe11 	bl	8006b76 <_close>
 800ff54:	1c43      	adds	r3, r0, #1
 800ff56:	d102      	bne.n	800ff5e <_close_r+0x1a>
 800ff58:	682b      	ldr	r3, [r5, #0]
 800ff5a:	b103      	cbz	r3, 800ff5e <_close_r+0x1a>
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	bd38      	pop	{r3, r4, r5, pc}
 800ff60:	20002960 	.word	0x20002960

0800ff64 <_fstat_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	4d07      	ldr	r5, [pc, #28]	; (800ff84 <_fstat_r+0x20>)
 800ff68:	2300      	movs	r3, #0
 800ff6a:	4604      	mov	r4, r0
 800ff6c:	4608      	mov	r0, r1
 800ff6e:	4611      	mov	r1, r2
 800ff70:	602b      	str	r3, [r5, #0]
 800ff72:	f7f6 fe0c 	bl	8006b8e <_fstat>
 800ff76:	1c43      	adds	r3, r0, #1
 800ff78:	d102      	bne.n	800ff80 <_fstat_r+0x1c>
 800ff7a:	682b      	ldr	r3, [r5, #0]
 800ff7c:	b103      	cbz	r3, 800ff80 <_fstat_r+0x1c>
 800ff7e:	6023      	str	r3, [r4, #0]
 800ff80:	bd38      	pop	{r3, r4, r5, pc}
 800ff82:	bf00      	nop
 800ff84:	20002960 	.word	0x20002960

0800ff88 <_isatty_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	4d06      	ldr	r5, [pc, #24]	; (800ffa4 <_isatty_r+0x1c>)
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4604      	mov	r4, r0
 800ff90:	4608      	mov	r0, r1
 800ff92:	602b      	str	r3, [r5, #0]
 800ff94:	f7f6 fe0b 	bl	8006bae <_isatty>
 800ff98:	1c43      	adds	r3, r0, #1
 800ff9a:	d102      	bne.n	800ffa2 <_isatty_r+0x1a>
 800ff9c:	682b      	ldr	r3, [r5, #0]
 800ff9e:	b103      	cbz	r3, 800ffa2 <_isatty_r+0x1a>
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}
 800ffa4:	20002960 	.word	0x20002960

0800ffa8 <_lseek_r>:
 800ffa8:	b538      	push	{r3, r4, r5, lr}
 800ffaa:	4d07      	ldr	r5, [pc, #28]	; (800ffc8 <_lseek_r+0x20>)
 800ffac:	4604      	mov	r4, r0
 800ffae:	4608      	mov	r0, r1
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	602a      	str	r2, [r5, #0]
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f7f6 fe04 	bl	8006bc4 <_lseek>
 800ffbc:	1c43      	adds	r3, r0, #1
 800ffbe:	d102      	bne.n	800ffc6 <_lseek_r+0x1e>
 800ffc0:	682b      	ldr	r3, [r5, #0]
 800ffc2:	b103      	cbz	r3, 800ffc6 <_lseek_r+0x1e>
 800ffc4:	6023      	str	r3, [r4, #0]
 800ffc6:	bd38      	pop	{r3, r4, r5, pc}
 800ffc8:	20002960 	.word	0x20002960

0800ffcc <_realloc_r>:
 800ffcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd0:	4680      	mov	r8, r0
 800ffd2:	4614      	mov	r4, r2
 800ffd4:	460e      	mov	r6, r1
 800ffd6:	b921      	cbnz	r1, 800ffe2 <_realloc_r+0x16>
 800ffd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	4611      	mov	r1, r2
 800ffde:	f7ff b865 	b.w	800f0ac <_malloc_r>
 800ffe2:	b92a      	cbnz	r2, 800fff0 <_realloc_r+0x24>
 800ffe4:	f7fe fff6 	bl	800efd4 <_free_r>
 800ffe8:	4625      	mov	r5, r4
 800ffea:	4628      	mov	r0, r5
 800ffec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff0:	f000 f82e 	bl	8010050 <_malloc_usable_size_r>
 800fff4:	4284      	cmp	r4, r0
 800fff6:	4607      	mov	r7, r0
 800fff8:	d802      	bhi.n	8010000 <_realloc_r+0x34>
 800fffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fffe:	d812      	bhi.n	8010026 <_realloc_r+0x5a>
 8010000:	4621      	mov	r1, r4
 8010002:	4640      	mov	r0, r8
 8010004:	f7ff f852 	bl	800f0ac <_malloc_r>
 8010008:	4605      	mov	r5, r0
 801000a:	2800      	cmp	r0, #0
 801000c:	d0ed      	beq.n	800ffea <_realloc_r+0x1e>
 801000e:	42bc      	cmp	r4, r7
 8010010:	4622      	mov	r2, r4
 8010012:	4631      	mov	r1, r6
 8010014:	bf28      	it	cs
 8010016:	463a      	movcs	r2, r7
 8010018:	f7fe ffac 	bl	800ef74 <memcpy>
 801001c:	4631      	mov	r1, r6
 801001e:	4640      	mov	r0, r8
 8010020:	f7fe ffd8 	bl	800efd4 <_free_r>
 8010024:	e7e1      	b.n	800ffea <_realloc_r+0x1e>
 8010026:	4635      	mov	r5, r6
 8010028:	e7df      	b.n	800ffea <_realloc_r+0x1e>
	...

0801002c <_read_r>:
 801002c:	b538      	push	{r3, r4, r5, lr}
 801002e:	4d07      	ldr	r5, [pc, #28]	; (801004c <_read_r+0x20>)
 8010030:	4604      	mov	r4, r0
 8010032:	4608      	mov	r0, r1
 8010034:	4611      	mov	r1, r2
 8010036:	2200      	movs	r2, #0
 8010038:	602a      	str	r2, [r5, #0]
 801003a:	461a      	mov	r2, r3
 801003c:	f7f6 fd62 	bl	8006b04 <_read>
 8010040:	1c43      	adds	r3, r0, #1
 8010042:	d102      	bne.n	801004a <_read_r+0x1e>
 8010044:	682b      	ldr	r3, [r5, #0]
 8010046:	b103      	cbz	r3, 801004a <_read_r+0x1e>
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	20002960 	.word	0x20002960

08010050 <_malloc_usable_size_r>:
 8010050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010054:	1f18      	subs	r0, r3, #4
 8010056:	2b00      	cmp	r3, #0
 8010058:	bfbc      	itt	lt
 801005a:	580b      	ldrlt	r3, [r1, r0]
 801005c:	18c0      	addlt	r0, r0, r3
 801005e:	4770      	bx	lr

08010060 <_init>:
 8010060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010062:	bf00      	nop
 8010064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010066:	bc08      	pop	{r3}
 8010068:	469e      	mov	lr, r3
 801006a:	4770      	bx	lr

0801006c <_fini>:
 801006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006e:	bf00      	nop
 8010070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010072:	bc08      	pop	{r3}
 8010074:	469e      	mov	lr, r3
 8010076:	4770      	bx	lr
